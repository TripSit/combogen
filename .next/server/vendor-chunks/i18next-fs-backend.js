"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/i18next-fs-backend";
exports.ids = ["vendor-chunks/i18next-fs-backend"];
exports.modules = {

/***/ "(rsc)/./node_modules/i18next-fs-backend/esm/fs.cjs":
/*!****************************************************!*\
  !*** ./node_modules/i18next-fs-backend/esm/fs.cjs ***!
  \****************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\nif (true) {\n    var f = __webpack_require__(/*! fs */ \"fs\");\n    if (f.default) f = f.default;\n    exports[\"default\"] = f;\n    module.exports = exports.default;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaTE4bmV4dC1mcy1iYWNrZW5kL2VzbS9mcy5janMiLCJtYXBwaW5ncyI6IjtBQUFBLElBQUksSUFBbUIsRUFBYTtJQUNsQyxJQUFJQyxJQUFJRCxtQkFBT0EsQ0FBQztJQUNoQixJQUFJQyxFQUFFQyxPQUFPLEVBQUVELElBQUlBLEVBQUVDLE9BQU87SUFDNUJDLGtCQUFlLEdBQUdGO0lBQ2xCRyxPQUFPRCxPQUFPLEdBQUdBLFFBQVFELE9BQU87QUFDbEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGFydC1nZW5lcmF0b3IvLi9ub2RlX21vZHVsZXMvaTE4bmV4dC1mcy1iYWNrZW5kL2VzbS9mcy5janM/MTk2NyJdLCJzb3VyY2VzQ29udGVudCI6WyJpZiAodHlwZW9mIHJlcXVpcmUgIT09ICd1bmRlZmluZWQnKSB7XG4gIHZhciBmID0gcmVxdWlyZSgnZnMnKVxuICBpZiAoZi5kZWZhdWx0KSBmID0gZi5kZWZhdWx0XG4gIGV4cG9ydHMuZGVmYXVsdCA9IGZcbiAgbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHRcbn1cbiJdLCJuYW1lcyI6WyJyZXF1aXJlIiwiZiIsImRlZmF1bHQiLCJleHBvcnRzIiwibW9kdWxlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/i18next-fs-backend/esm/fs.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/i18next-fs-backend/esm/path.cjs":
/*!******************************************************!*\
  !*** ./node_modules/i18next-fs-backend/esm/path.cjs ***!
  \******************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\nif (true) {\n    var path = __webpack_require__(/*! path */ \"path\");\n    if (path.default) path = path.default;\n    exports[\"default\"] = path;\n    module.exports = exports.default;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaTE4bmV4dC1mcy1iYWNrZW5kL2VzbS9wYXRoLmNqcyIsIm1hcHBpbmdzIjoiO0FBQUEsSUFBSSxJQUFtQixFQUFhO0lBQ2xDLElBQUlDLE9BQU9ELG1CQUFPQSxDQUFDO0lBQ25CLElBQUlDLEtBQUtDLE9BQU8sRUFBRUQsT0FBT0EsS0FBS0MsT0FBTztJQUNyQ0Msa0JBQWUsR0FBR0Y7SUFDbEJHLE9BQU9ELE9BQU8sR0FBR0EsUUFBUUQsT0FBTztBQUNsQyIsInNvdXJjZXMiOlsid2VicGFjazovL2NoYXJ0LWdlbmVyYXRvci8uL25vZGVfbW9kdWxlcy9pMThuZXh0LWZzLWJhY2tlbmQvZXNtL3BhdGguY2pzPzIzZjAiXSwic291cmNlc0NvbnRlbnQiOlsiaWYgKHR5cGVvZiByZXF1aXJlICE9PSAndW5kZWZpbmVkJykge1xuICB2YXIgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKVxuICBpZiAocGF0aC5kZWZhdWx0KSBwYXRoID0gcGF0aC5kZWZhdWx0XG4gIGV4cG9ydHMuZGVmYXVsdCA9IHBhdGhcbiAgbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHRcbn1cbiJdLCJuYW1lcyI6WyJyZXF1aXJlIiwicGF0aCIsImRlZmF1bHQiLCJleHBvcnRzIiwibW9kdWxlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/i18next-fs-backend/esm/path.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/i18next-fs-backend/esm/extname.js":
/*!********************************************************!*\
  !*** ./node_modules/i18next-fs-backend/esm/extname.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(filename) {\n    if (filename.indexOf(\".\") < 0) return undefined;\n    return \".\".concat(filename.split(\".\").pop());\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaTE4bmV4dC1mcy1iYWNrZW5kL2VzbS9leHRuYW1lLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSw2QkFBZ0Isb0NBQVVBLFFBQVE7SUFDaEMsSUFBSUEsU0FBU0MsT0FBTyxDQUFDLE9BQU8sR0FBRyxPQUFPQztJQUN0QyxPQUFPLElBQUlDLE1BQU0sQ0FBQ0gsU0FBU0ksS0FBSyxDQUFDLEtBQUtDLEdBQUc7QUFDM0MsRUFBRyIsInNvdXJjZXMiOlsid2VicGFjazovL2NoYXJ0LWdlbmVyYXRvci8uL25vZGVfbW9kdWxlcy9pMThuZXh0LWZzLWJhY2tlbmQvZXNtL2V4dG5hbWUuanM/NDFmZiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCAoZnVuY3Rpb24gKGZpbGVuYW1lKSB7XG4gIGlmIChmaWxlbmFtZS5pbmRleE9mKCcuJykgPCAwKSByZXR1cm4gdW5kZWZpbmVkO1xuICByZXR1cm4gXCIuXCIuY29uY2F0KGZpbGVuYW1lLnNwbGl0KCcuJykucG9wKCkpO1xufSk7Il0sIm5hbWVzIjpbImZpbGVuYW1lIiwiaW5kZXhPZiIsInVuZGVmaW5lZCIsImNvbmNhdCIsInNwbGl0IiwicG9wIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/i18next-fs-backend/esm/extname.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/i18next-fs-backend/esm/formats/json5.js":
/*!**************************************************************!*\
  !*** ./node_modules/i18next-fs-backend/esm/formats/json5.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n    var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n    if (!it) {\n        if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n            if (it) o = it;\n            var i = 0;\n            var F = function F() {};\n            return {\n                s: F,\n                n: function n() {\n                    if (i >= o.length) return {\n                        done: true\n                    };\n                    return {\n                        done: false,\n                        value: o[i++]\n                    };\n                },\n                e: function e(_e) {\n                    throw _e;\n                },\n                f: F\n            };\n        }\n        throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n    }\n    var normalCompletion = true, didErr = false, err;\n    return {\n        s: function s() {\n            it = it.call(o);\n        },\n        n: function n() {\n            var step = it.next();\n            normalCompletion = step.done;\n            return step;\n        },\n        e: function e(_e2) {\n            didErr = true;\n            err = _e2;\n        },\n        f: function f() {\n            try {\n                if (!normalCompletion && it.return != null) it.return();\n            } finally{\n                if (didErr) throw err;\n            }\n        }\n    };\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _typeof(o) {\n    \"@babel/helpers - typeof\";\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(o) {\n        return typeof o;\n    } : function(o) {\n        return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n    }, _typeof(o);\n}\nvar Space_Separator = /[\\u1680\\u2000-\\u200A\\u202F\\u205F\\u3000]/;\nvar ID_Start = /[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086A\\u08A0-\\u08B4\\u08B6-\\u08BD\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u09FC\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60\\u0C61\\u0C80\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D54-\\u0D56\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u1884\\u1887-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1C80-\\u1C88\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312E\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FEA\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AE\\uA7B0-\\uA7B7\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDF00-\\uDF1F\\uDF2D-\\uDF4A\\uDF50-\\uDF75\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCB0-\\uDCD3\\uDCD8-\\uDCFB\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2]|\\uD804[\\uDC03-\\uDC37\\uDC83-\\uDCAF\\uDCD0-\\uDCE8\\uDD03-\\uDD26\\uDD50-\\uDD72\\uDD76\\uDD83-\\uDDB2\\uDDC1-\\uDDC4\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE2B\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEDE\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D\\uDF50\\uDF5D-\\uDF61]|\\uD805[\\uDC00-\\uDC34\\uDC47-\\uDC4A\\uDC80-\\uDCAF\\uDCC4\\uDCC5\\uDCC7\\uDD80-\\uDDAE\\uDDD8-\\uDDDB\\uDE00-\\uDE2F\\uDE44\\uDE80-\\uDEAA\\uDF00-\\uDF19]|\\uD806[\\uDCA0-\\uDCDF\\uDCFF\\uDE00\\uDE0B-\\uDE32\\uDE3A\\uDE50\\uDE5C-\\uDE83\\uDE86-\\uDE89\\uDEC0-\\uDEF8]|\\uD807[\\uDC00-\\uDC08\\uDC0A-\\uDC2E\\uDC40\\uDC72-\\uDC8F\\uDD00-\\uDD06\\uDD08\\uDD09\\uDD0B-\\uDD30\\uDD46]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD81C-\\uD820\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872\\uD874-\\uD879][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDED0-\\uDEED\\uDF00-\\uDF2F\\uDF40-\\uDF43\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50\\uDF93-\\uDF9F\\uDFE0\\uDFE1]|\\uD821[\\uDC00-\\uDFEC]|\\uD822[\\uDC00-\\uDEF2]|\\uD82C[\\uDC00-\\uDD1E\\uDD70-\\uDEFB]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB]|\\uD83A[\\uDC00-\\uDCC4\\uDD00-\\uDD43]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1\\uDEB0-\\uDFFF]|\\uD87A[\\uDC00-\\uDFE0]|\\uD87E[\\uDC00-\\uDE1D]/;\nvar ID_Continue = /[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u0483-\\u0487\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0610-\\u061A\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DC\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u0710-\\u074A\\u074D-\\u07B1\\u07C0-\\u07F5\\u07FA\\u0800-\\u082D\\u0840-\\u085B\\u0860-\\u086A\\u08A0-\\u08B4\\u08B6-\\u08BD\\u08D4-\\u08E1\\u08E3-\\u0963\\u0966-\\u096F\\u0971-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09F1\\u09FC\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AEF\\u0AF9-\\u0AFF\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B6F\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58-\\u0C5A\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C80-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D00-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D54-\\u0D57\\u0D5F-\\u0D63\\u0D66-\\u0D6F\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F84\\u0F86-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u1000-\\u1049\\u1050-\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u135F\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17D3\\u17D7\\u17DC\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19D9\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1AB0-\\u1ABD\\u1B00-\\u1B4B\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BF3\\u1C00-\\u1C37\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1C80-\\u1C88\\u1CD0-\\u1CD2\\u1CD4-\\u1CF9\\u1D00-\\u1DF9\\u1DFB-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u203F\\u2040\\u2054\\u2071\\u207F\\u2090-\\u209C\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D7F-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u2E2F\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u3099\\u309A\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312E\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FEA\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66F\\uA674-\\uA67D\\uA67F-\\uA6F1\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AE\\uA7B0-\\uA7B7\\uA7F7-\\uA827\\uA840-\\uA873\\uA880-\\uA8C5\\uA8D0-\\uA8D9\\uA8E0-\\uA8F7\\uA8FB\\uA8FD\\uA900-\\uA92D\\uA930-\\uA953\\uA960-\\uA97C\\uA980-\\uA9C0\\uA9CF-\\uA9D9\\uA9E0-\\uA9FE\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A-\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF6\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE00-\\uFE0F\\uFE20-\\uFE2F\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF3F\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDDFD\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDEE0\\uDF00-\\uDF1F\\uDF2D-\\uDF4A\\uDF50-\\uDF7A\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCA0-\\uDCA9\\uDCB0-\\uDCD3\\uDCD8-\\uDCFB\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE38-\\uDE3A\\uDE3F\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE6\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2]|\\uD804[\\uDC00-\\uDC46\\uDC66-\\uDC6F\\uDC7F-\\uDCBA\\uDCD0-\\uDCE8\\uDCF0-\\uDCF9\\uDD00-\\uDD34\\uDD36-\\uDD3F\\uDD50-\\uDD73\\uDD76\\uDD80-\\uDDC4\\uDDCA-\\uDDCC\\uDDD0-\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE37\\uDE3E\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEEA\\uDEF0-\\uDEF9\\uDF00-\\uDF03\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3C-\\uDF44\\uDF47\\uDF48\\uDF4B-\\uDF4D\\uDF50\\uDF57\\uDF5D-\\uDF63\\uDF66-\\uDF6C\\uDF70-\\uDF74]|\\uD805[\\uDC00-\\uDC4A\\uDC50-\\uDC59\\uDC80-\\uDCC5\\uDCC7\\uDCD0-\\uDCD9\\uDD80-\\uDDB5\\uDDB8-\\uDDC0\\uDDD8-\\uDDDD\\uDE00-\\uDE40\\uDE44\\uDE50-\\uDE59\\uDE80-\\uDEB7\\uDEC0-\\uDEC9\\uDF00-\\uDF19\\uDF1D-\\uDF2B\\uDF30-\\uDF39]|\\uD806[\\uDCA0-\\uDCE9\\uDCFF\\uDE00-\\uDE3E\\uDE47\\uDE50-\\uDE83\\uDE86-\\uDE99\\uDEC0-\\uDEF8]|\\uD807[\\uDC00-\\uDC08\\uDC0A-\\uDC36\\uDC38-\\uDC40\\uDC50-\\uDC59\\uDC72-\\uDC8F\\uDC92-\\uDCA7\\uDCA9-\\uDCB6\\uDD00-\\uDD06\\uDD08\\uDD09\\uDD0B-\\uDD36\\uDD3A\\uDD3C\\uDD3D\\uDD3F-\\uDD47\\uDD50-\\uDD59]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD81C-\\uD820\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872\\uD874-\\uD879][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDE60-\\uDE69\\uDED0-\\uDEED\\uDEF0-\\uDEF4\\uDF00-\\uDF36\\uDF40-\\uDF43\\uDF50-\\uDF59\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50-\\uDF7E\\uDF8F-\\uDF9F\\uDFE0\\uDFE1]|\\uD821[\\uDC00-\\uDFEC]|\\uD822[\\uDC00-\\uDEF2]|\\uD82C[\\uDC00-\\uDD1E\\uDD70-\\uDEFB]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99\\uDC9D\\uDC9E]|\\uD834[\\uDD65-\\uDD69\\uDD6D-\\uDD72\\uDD7B-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD\\uDE42-\\uDE44]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB\\uDFCE-\\uDFFF]|\\uD836[\\uDE00-\\uDE36\\uDE3B-\\uDE6C\\uDE75\\uDE84\\uDE9B-\\uDE9F\\uDEA1-\\uDEAF]|\\uD838[\\uDC00-\\uDC06\\uDC08-\\uDC18\\uDC1B-\\uDC21\\uDC23\\uDC24\\uDC26-\\uDC2A]|\\uD83A[\\uDC00-\\uDCC4\\uDCD0-\\uDCD6\\uDD00-\\uDD4A\\uDD50-\\uDD59]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1\\uDEB0-\\uDFFF]|\\uD87A[\\uDC00-\\uDFE0]|\\uD87E[\\uDC00-\\uDE1D]|\\uDB40[\\uDD00-\\uDDEF]/;\nvar unicode = {\n    Space_Separator: Space_Separator,\n    ID_Start: ID_Start,\n    ID_Continue: ID_Continue\n};\nvar util = {\n    isSpaceSeparator: function isSpaceSeparator(c) {\n        return typeof c === \"string\" && unicode.Space_Separator.test(c);\n    },\n    isIdStartChar: function isIdStartChar(c) {\n        return typeof c === \"string\" && (c >= \"a\" && c <= \"z\" || c >= \"A\" && c <= \"Z\" || c === \"$\" || c === \"_\" || unicode.ID_Start.test(c));\n    },\n    isIdContinueChar: function isIdContinueChar(c) {\n        return typeof c === \"string\" && (c >= \"a\" && c <= \"z\" || c >= \"A\" && c <= \"Z\" || c >= \"0\" && c <= \"9\" || c === \"$\" || c === \"_\" || c === \"‌\" || c === \"‍\" || unicode.ID_Continue.test(c));\n    },\n    isDigit: function isDigit(c) {\n        return typeof c === \"string\" && /[0-9]/.test(c);\n    },\n    isHexDigit: function isHexDigit(c) {\n        return typeof c === \"string\" && /[0-9A-Fa-f]/.test(c);\n    }\n};\nvar source;\nvar parseState;\nvar stack;\nvar pos;\nvar line;\nvar column;\nvar token;\nvar key;\nvar root;\nvar parse = function parse(text, reviver) {\n    source = String(text);\n    parseState = \"start\";\n    stack = [];\n    pos = 0;\n    line = 1;\n    column = 0;\n    token = undefined;\n    key = undefined;\n    root = undefined;\n    do {\n        token = lex();\n        parseStates[parseState]();\n    }while (token.type !== \"eof\");\n    if (typeof reviver === \"function\") {\n        return internalize({\n            \"\": root\n        }, \"\", reviver);\n    }\n    return root;\n};\nfunction internalize(holder, name, reviver) {\n    var value = holder[name];\n    if (value != null && _typeof(value) === \"object\") {\n        if (Array.isArray(value)) {\n            for(var i = 0; i < value.length; i++){\n                var _key = String(i);\n                var replacement = internalize(value, _key, reviver);\n                if (replacement === undefined) {\n                    delete value[_key];\n                } else {\n                    Object.defineProperty(value, _key, {\n                        value: replacement,\n                        writable: true,\n                        enumerable: true,\n                        configurable: true\n                    });\n                }\n            }\n        } else {\n            for(var _key2 in value){\n                var _replacement = internalize(value, _key2, reviver);\n                if (_replacement === undefined) {\n                    delete value[_key2];\n                } else {\n                    Object.defineProperty(value, _key2, {\n                        value: _replacement,\n                        writable: true,\n                        enumerable: true,\n                        configurable: true\n                    });\n                }\n            }\n        }\n    }\n    return reviver.call(holder, name, value);\n}\nvar lexState;\nvar buffer;\nvar doubleQuote;\nvar _sign;\nvar c;\nfunction lex() {\n    lexState = \"default\";\n    buffer = \"\";\n    doubleQuote = false;\n    _sign = 1;\n    for(;;){\n        c = peek();\n        var _token = lexStates[lexState]();\n        if (_token) {\n            return _token;\n        }\n    }\n}\nfunction peek() {\n    if (source[pos]) {\n        return String.fromCodePoint(source.codePointAt(pos));\n    }\n}\nfunction read() {\n    var c = peek();\n    if (c === \"\\n\") {\n        line++;\n        column = 0;\n    } else if (c) {\n        column += c.length;\n    } else {\n        column++;\n    }\n    if (c) {\n        pos += c.length;\n    }\n    return c;\n}\nvar lexStates = {\n    default: function _default() {\n        switch(c){\n            case \"\t\":\n            case \"\\v\":\n            case \"\\f\":\n            case \" \":\n            case \"\\xa0\":\n            case \"\\uFEFF\":\n            case \"\\n\":\n            case \"\\r\":\n            case \"\\u2028\":\n            case \"\\u2029\":\n                read();\n                return;\n            case \"/\":\n                read();\n                lexState = \"comment\";\n                return;\n            case undefined:\n                read();\n                return newToken(\"eof\");\n        }\n        if (util.isSpaceSeparator(c)) {\n            read();\n            return;\n        }\n        return lexStates[parseState]();\n    },\n    comment: function comment() {\n        switch(c){\n            case \"*\":\n                read();\n                lexState = \"multiLineComment\";\n                return;\n            case \"/\":\n                read();\n                lexState = \"singleLineComment\";\n                return;\n        }\n        throw invalidChar(read());\n    },\n    multiLineComment: function multiLineComment() {\n        switch(c){\n            case \"*\":\n                read();\n                lexState = \"multiLineCommentAsterisk\";\n                return;\n            case undefined:\n                throw invalidChar(read());\n        }\n        read();\n    },\n    multiLineCommentAsterisk: function multiLineCommentAsterisk() {\n        switch(c){\n            case \"*\":\n                read();\n                return;\n            case \"/\":\n                read();\n                lexState = \"default\";\n                return;\n            case undefined:\n                throw invalidChar(read());\n        }\n        read();\n        lexState = \"multiLineComment\";\n    },\n    singleLineComment: function singleLineComment() {\n        switch(c){\n            case \"\\n\":\n            case \"\\r\":\n            case \"\\u2028\":\n            case \"\\u2029\":\n                read();\n                lexState = \"default\";\n                return;\n            case undefined:\n                read();\n                return newToken(\"eof\");\n        }\n        read();\n    },\n    value: function value() {\n        switch(c){\n            case \"{\":\n            case \"[\":\n                return newToken(\"punctuator\", read());\n            case \"n\":\n                read();\n                literal(\"ull\");\n                return newToken(\"null\", null);\n            case \"t\":\n                read();\n                literal(\"rue\");\n                return newToken(\"boolean\", true);\n            case \"f\":\n                read();\n                literal(\"alse\");\n                return newToken(\"boolean\", false);\n            case \"-\":\n            case \"+\":\n                if (read() === \"-\") {\n                    _sign = -1;\n                }\n                lexState = \"sign\";\n                return;\n            case \".\":\n                buffer = read();\n                lexState = \"decimalPointLeading\";\n                return;\n            case \"0\":\n                buffer = read();\n                lexState = \"zero\";\n                return;\n            case \"1\":\n            case \"2\":\n            case \"3\":\n            case \"4\":\n            case \"5\":\n            case \"6\":\n            case \"7\":\n            case \"8\":\n            case \"9\":\n                buffer = read();\n                lexState = \"decimalInteger\";\n                return;\n            case \"I\":\n                read();\n                literal(\"nfinity\");\n                return newToken(\"numeric\", Infinity);\n            case \"N\":\n                read();\n                literal(\"aN\");\n                return newToken(\"numeric\", NaN);\n            case '\"':\n            case \"'\":\n                doubleQuote = read() === '\"';\n                buffer = \"\";\n                lexState = \"string\";\n                return;\n        }\n        throw invalidChar(read());\n    },\n    identifierNameStartEscape: function identifierNameStartEscape() {\n        if (c !== \"u\") {\n            throw invalidChar(read());\n        }\n        read();\n        var u = unicodeEscape();\n        switch(u){\n            case \"$\":\n            case \"_\":\n                break;\n            default:\n                if (!util.isIdStartChar(u)) {\n                    throw invalidIdentifier();\n                }\n                break;\n        }\n        buffer += u;\n        lexState = \"identifierName\";\n    },\n    identifierName: function identifierName() {\n        switch(c){\n            case \"$\":\n            case \"_\":\n            case \"‌\":\n            case \"‍\":\n                buffer += read();\n                return;\n            case \"\\\\\":\n                read();\n                lexState = \"identifierNameEscape\";\n                return;\n        }\n        if (util.isIdContinueChar(c)) {\n            buffer += read();\n            return;\n        }\n        return newToken(\"identifier\", buffer);\n    },\n    identifierNameEscape: function identifierNameEscape() {\n        if (c !== \"u\") {\n            throw invalidChar(read());\n        }\n        read();\n        var u = unicodeEscape();\n        switch(u){\n            case \"$\":\n            case \"_\":\n            case \"‌\":\n            case \"‍\":\n                break;\n            default:\n                if (!util.isIdContinueChar(u)) {\n                    throw invalidIdentifier();\n                }\n                break;\n        }\n        buffer += u;\n        lexState = \"identifierName\";\n    },\n    sign: function sign() {\n        switch(c){\n            case \".\":\n                buffer = read();\n                lexState = \"decimalPointLeading\";\n                return;\n            case \"0\":\n                buffer = read();\n                lexState = \"zero\";\n                return;\n            case \"1\":\n            case \"2\":\n            case \"3\":\n            case \"4\":\n            case \"5\":\n            case \"6\":\n            case \"7\":\n            case \"8\":\n            case \"9\":\n                buffer = read();\n                lexState = \"decimalInteger\";\n                return;\n            case \"I\":\n                read();\n                literal(\"nfinity\");\n                return newToken(\"numeric\", _sign * Infinity);\n            case \"N\":\n                read();\n                literal(\"aN\");\n                return newToken(\"numeric\", NaN);\n        }\n        throw invalidChar(read());\n    },\n    zero: function zero() {\n        switch(c){\n            case \".\":\n                buffer += read();\n                lexState = \"decimalPoint\";\n                return;\n            case \"e\":\n            case \"E\":\n                buffer += read();\n                lexState = \"decimalExponent\";\n                return;\n            case \"x\":\n            case \"X\":\n                buffer += read();\n                lexState = \"hexadecimal\";\n                return;\n        }\n        return newToken(\"numeric\", _sign * 0);\n    },\n    decimalInteger: function decimalInteger() {\n        switch(c){\n            case \".\":\n                buffer += read();\n                lexState = \"decimalPoint\";\n                return;\n            case \"e\":\n            case \"E\":\n                buffer += read();\n                lexState = \"decimalExponent\";\n                return;\n        }\n        if (util.isDigit(c)) {\n            buffer += read();\n            return;\n        }\n        return newToken(\"numeric\", _sign * Number(buffer));\n    },\n    decimalPointLeading: function decimalPointLeading() {\n        if (util.isDigit(c)) {\n            buffer += read();\n            lexState = \"decimalFraction\";\n            return;\n        }\n        throw invalidChar(read());\n    },\n    decimalPoint: function decimalPoint() {\n        switch(c){\n            case \"e\":\n            case \"E\":\n                buffer += read();\n                lexState = \"decimalExponent\";\n                return;\n        }\n        if (util.isDigit(c)) {\n            buffer += read();\n            lexState = \"decimalFraction\";\n            return;\n        }\n        return newToken(\"numeric\", _sign * Number(buffer));\n    },\n    decimalFraction: function decimalFraction() {\n        switch(c){\n            case \"e\":\n            case \"E\":\n                buffer += read();\n                lexState = \"decimalExponent\";\n                return;\n        }\n        if (util.isDigit(c)) {\n            buffer += read();\n            return;\n        }\n        return newToken(\"numeric\", _sign * Number(buffer));\n    },\n    decimalExponent: function decimalExponent() {\n        switch(c){\n            case \"+\":\n            case \"-\":\n                buffer += read();\n                lexState = \"decimalExponentSign\";\n                return;\n        }\n        if (util.isDigit(c)) {\n            buffer += read();\n            lexState = \"decimalExponentInteger\";\n            return;\n        }\n        throw invalidChar(read());\n    },\n    decimalExponentSign: function decimalExponentSign() {\n        if (util.isDigit(c)) {\n            buffer += read();\n            lexState = \"decimalExponentInteger\";\n            return;\n        }\n        throw invalidChar(read());\n    },\n    decimalExponentInteger: function decimalExponentInteger() {\n        if (util.isDigit(c)) {\n            buffer += read();\n            return;\n        }\n        return newToken(\"numeric\", _sign * Number(buffer));\n    },\n    hexadecimal: function hexadecimal() {\n        if (util.isHexDigit(c)) {\n            buffer += read();\n            lexState = \"hexadecimalInteger\";\n            return;\n        }\n        throw invalidChar(read());\n    },\n    hexadecimalInteger: function hexadecimalInteger() {\n        if (util.isHexDigit(c)) {\n            buffer += read();\n            return;\n        }\n        return newToken(\"numeric\", _sign * Number(buffer));\n    },\n    string: function string() {\n        switch(c){\n            case \"\\\\\":\n                read();\n                buffer += escape();\n                return;\n            case '\"':\n                if (doubleQuote) {\n                    read();\n                    return newToken(\"string\", buffer);\n                }\n                buffer += read();\n                return;\n            case \"'\":\n                if (!doubleQuote) {\n                    read();\n                    return newToken(\"string\", buffer);\n                }\n                buffer += read();\n                return;\n            case \"\\n\":\n            case \"\\r\":\n                throw invalidChar(read());\n            case \"\\u2028\":\n            case \"\\u2029\":\n                separatorChar(c);\n                break;\n            case undefined:\n                throw invalidChar(read());\n        }\n        buffer += read();\n    },\n    start: function start() {\n        switch(c){\n            case \"{\":\n            case \"[\":\n                return newToken(\"punctuator\", read());\n        }\n        lexState = \"value\";\n    },\n    beforePropertyName: function beforePropertyName() {\n        switch(c){\n            case \"$\":\n            case \"_\":\n                buffer = read();\n                lexState = \"identifierName\";\n                return;\n            case \"\\\\\":\n                read();\n                lexState = \"identifierNameStartEscape\";\n                return;\n            case \"}\":\n                return newToken(\"punctuator\", read());\n            case '\"':\n            case \"'\":\n                doubleQuote = read() === '\"';\n                lexState = \"string\";\n                return;\n        }\n        if (util.isIdStartChar(c)) {\n            buffer += read();\n            lexState = \"identifierName\";\n            return;\n        }\n        throw invalidChar(read());\n    },\n    afterPropertyName: function afterPropertyName() {\n        if (c === \":\") {\n            return newToken(\"punctuator\", read());\n        }\n        throw invalidChar(read());\n    },\n    beforePropertyValue: function beforePropertyValue() {\n        lexState = \"value\";\n    },\n    afterPropertyValue: function afterPropertyValue() {\n        switch(c){\n            case \",\":\n            case \"}\":\n                return newToken(\"punctuator\", read());\n        }\n        throw invalidChar(read());\n    },\n    beforeArrayValue: function beforeArrayValue() {\n        if (c === \"]\") {\n            return newToken(\"punctuator\", read());\n        }\n        lexState = \"value\";\n    },\n    afterArrayValue: function afterArrayValue() {\n        switch(c){\n            case \",\":\n            case \"]\":\n                return newToken(\"punctuator\", read());\n        }\n        throw invalidChar(read());\n    },\n    end: function end() {\n        throw invalidChar(read());\n    }\n};\nfunction newToken(type, value) {\n    return {\n        type: type,\n        value: value,\n        line: line,\n        column: column\n    };\n}\nfunction literal(s) {\n    var _iterator = _createForOfIteratorHelper(s), _step;\n    try {\n        for(_iterator.s(); !(_step = _iterator.n()).done;){\n            var _c = _step.value;\n            var p = peek();\n            if (p !== _c) {\n                throw invalidChar(read());\n            }\n            read();\n        }\n    } catch (err) {\n        _iterator.e(err);\n    } finally{\n        _iterator.f();\n    }\n}\nfunction escape() {\n    var c = peek();\n    switch(c){\n        case \"b\":\n            read();\n            return \"\\b\";\n        case \"f\":\n            read();\n            return \"\\f\";\n        case \"n\":\n            read();\n            return \"\\n\";\n        case \"r\":\n            read();\n            return \"\\r\";\n        case \"t\":\n            read();\n            return \"\t\";\n        case \"v\":\n            read();\n            return \"\\v\";\n        case \"0\":\n            read();\n            if (util.isDigit(peek())) {\n                throw invalidChar(read());\n            }\n            return \"\\x00\";\n        case \"x\":\n            read();\n            return hexEscape();\n        case \"u\":\n            read();\n            return unicodeEscape();\n        case \"\\n\":\n        case \"\\u2028\":\n        case \"\\u2029\":\n            read();\n            return \"\";\n        case \"\\r\":\n            read();\n            if (peek() === \"\\n\") {\n                read();\n            }\n            return \"\";\n        case \"1\":\n        case \"2\":\n        case \"3\":\n        case \"4\":\n        case \"5\":\n        case \"6\":\n        case \"7\":\n        case \"8\":\n        case \"9\":\n            throw invalidChar(read());\n        case undefined:\n            throw invalidChar(read());\n    }\n    return read();\n}\nfunction hexEscape() {\n    var buffer = \"\";\n    var c = peek();\n    if (!util.isHexDigit(c)) {\n        throw invalidChar(read());\n    }\n    buffer += read();\n    c = peek();\n    if (!util.isHexDigit(c)) {\n        throw invalidChar(read());\n    }\n    buffer += read();\n    return String.fromCodePoint(parseInt(buffer, 16));\n}\nfunction unicodeEscape() {\n    var buffer = \"\";\n    var count = 4;\n    while(count-- > 0){\n        var _c2 = peek();\n        if (!util.isHexDigit(_c2)) {\n            throw invalidChar(read());\n        }\n        buffer += read();\n    }\n    return String.fromCodePoint(parseInt(buffer, 16));\n}\nvar parseStates = {\n    start: function start() {\n        if (token.type === \"eof\") {\n            throw invalidEOF();\n        }\n        push();\n    },\n    beforePropertyName: function beforePropertyName() {\n        switch(token.type){\n            case \"identifier\":\n            case \"string\":\n                key = token.value;\n                parseState = \"afterPropertyName\";\n                return;\n            case \"punctuator\":\n                pop();\n                return;\n            case \"eof\":\n                throw invalidEOF();\n        }\n    },\n    afterPropertyName: function afterPropertyName() {\n        if (token.type === \"eof\") {\n            throw invalidEOF();\n        }\n        parseState = \"beforePropertyValue\";\n    },\n    beforePropertyValue: function beforePropertyValue() {\n        if (token.type === \"eof\") {\n            throw invalidEOF();\n        }\n        push();\n    },\n    beforeArrayValue: function beforeArrayValue() {\n        if (token.type === \"eof\") {\n            throw invalidEOF();\n        }\n        if (token.type === \"punctuator\" && token.value === \"]\") {\n            pop();\n            return;\n        }\n        push();\n    },\n    afterPropertyValue: function afterPropertyValue() {\n        if (token.type === \"eof\") {\n            throw invalidEOF();\n        }\n        switch(token.value){\n            case \",\":\n                parseState = \"beforePropertyName\";\n                return;\n            case \"}\":\n                pop();\n        }\n    },\n    afterArrayValue: function afterArrayValue() {\n        if (token.type === \"eof\") {\n            throw invalidEOF();\n        }\n        switch(token.value){\n            case \",\":\n                parseState = \"beforeArrayValue\";\n                return;\n            case \"]\":\n                pop();\n        }\n    },\n    end: function end() {}\n};\nfunction push() {\n    var value;\n    switch(token.type){\n        case \"punctuator\":\n            switch(token.value){\n                case \"{\":\n                    value = {};\n                    break;\n                case \"[\":\n                    value = [];\n                    break;\n            }\n            break;\n        case \"null\":\n        case \"boolean\":\n        case \"numeric\":\n        case \"string\":\n            value = token.value;\n            break;\n    }\n    if (root === undefined) {\n        root = value;\n    } else {\n        var parent = stack[stack.length - 1];\n        if (Array.isArray(parent)) {\n            parent.push(value);\n        } else {\n            Object.defineProperty(parent, key, {\n                value: value,\n                writable: true,\n                enumerable: true,\n                configurable: true\n            });\n        }\n    }\n    if (value !== null && _typeof(value) === \"object\") {\n        stack.push(value);\n        if (Array.isArray(value)) {\n            parseState = \"beforeArrayValue\";\n        } else {\n            parseState = \"beforePropertyName\";\n        }\n    } else {\n        var current = stack[stack.length - 1];\n        if (current == null) {\n            parseState = \"end\";\n        } else if (Array.isArray(current)) {\n            parseState = \"afterArrayValue\";\n        } else {\n            parseState = \"afterPropertyValue\";\n        }\n    }\n}\nfunction pop() {\n    stack.pop();\n    var current = stack[stack.length - 1];\n    if (current == null) {\n        parseState = \"end\";\n    } else if (Array.isArray(current)) {\n        parseState = \"afterArrayValue\";\n    } else {\n        parseState = \"afterPropertyValue\";\n    }\n}\nfunction invalidChar(c) {\n    if (c === undefined) {\n        return syntaxError(\"JSON5: invalid end of input at \".concat(line, \":\").concat(column));\n    }\n    return syntaxError(\"JSON5: invalid character '\".concat(formatChar(c), \"' at \").concat(line, \":\").concat(column));\n}\nfunction invalidEOF() {\n    return syntaxError(\"JSON5: invalid end of input at \".concat(line, \":\").concat(column));\n}\nfunction invalidIdentifier() {\n    column -= 5;\n    return syntaxError(\"JSON5: invalid identifier character at \".concat(line, \":\").concat(column));\n}\nfunction separatorChar(c) {\n    console.warn(\"JSON5: '\".concat(formatChar(c), \"' in strings is not valid ECMAScript; consider escaping\"));\n}\nfunction formatChar(c) {\n    var replacements = {\n        \"'\": \"\\\\'\",\n        '\"': '\\\\\"',\n        \"\\\\\": \"\\\\\\\\\",\n        \"\\b\": \"\\\\b\",\n        \"\\f\": \"\\\\f\",\n        \"\\n\": \"\\\\n\",\n        \"\\r\": \"\\\\r\",\n        \"\t\": \"\\\\t\",\n        \"\\v\": \"\\\\v\",\n        \"\\x00\": \"\\\\0\",\n        \"\\u2028\": \"\\\\u2028\",\n        \"\\u2029\": \"\\\\u2029\"\n    };\n    if (replacements[c]) {\n        return replacements[c];\n    }\n    if (c < \" \") {\n        var hexString = c.charCodeAt(0).toString(16);\n        return \"\\\\x\" + (\"00\" + hexString).substring(hexString.length);\n    }\n    return c;\n}\nfunction syntaxError(message) {\n    var err = new SyntaxError(message);\n    err.lineNumber = line;\n    err.columnNumber = column;\n    return err;\n}\nvar stringify = function stringify(value, replacer, space) {\n    var stack = [];\n    var indent = \"\";\n    var propertyList;\n    var replacerFunc;\n    var gap = \"\";\n    var quote;\n    if (replacer != null && _typeof(replacer) === \"object\" && !Array.isArray(replacer)) {\n        space = replacer.space;\n        quote = replacer.quote;\n        replacer = replacer.replacer;\n    }\n    if (typeof replacer === \"function\") {\n        replacerFunc = replacer;\n    } else if (Array.isArray(replacer)) {\n        propertyList = [];\n        var _iterator2 = _createForOfIteratorHelper(replacer), _step2;\n        try {\n            for(_iterator2.s(); !(_step2 = _iterator2.n()).done;){\n                var v = _step2.value;\n                var item = void 0;\n                if (typeof v === \"string\") {\n                    item = v;\n                } else if (typeof v === \"number\" || v instanceof String || v instanceof Number) {\n                    item = String(v);\n                }\n                if (item !== undefined && propertyList.indexOf(item) < 0) {\n                    propertyList.push(item);\n                }\n            }\n        } catch (err) {\n            _iterator2.e(err);\n        } finally{\n            _iterator2.f();\n        }\n    }\n    if (space instanceof Number) {\n        space = Number(space);\n    } else if (space instanceof String) {\n        space = String(space);\n    }\n    if (typeof space === \"number\") {\n        if (space > 0) {\n            space = Math.min(10, Math.floor(space));\n            gap = \"          \".substr(0, space);\n        }\n    } else if (typeof space === \"string\") {\n        gap = space.substr(0, 10);\n    }\n    return serializeProperty(\"\", {\n        \"\": value\n    });\n    function serializeProperty(key, holder) {\n        var value = holder[key];\n        if (value != null) {\n            if (typeof value.toJSON5 === \"function\") {\n                value = value.toJSON5(key);\n            } else if (typeof value.toJSON === \"function\") {\n                value = value.toJSON(key);\n            }\n        }\n        if (replacerFunc) {\n            value = replacerFunc.call(holder, key, value);\n        }\n        if (value instanceof Number) {\n            value = Number(value);\n        } else if (value instanceof String) {\n            value = String(value);\n        } else if (value instanceof Boolean) {\n            value = value.valueOf();\n        }\n        switch(value){\n            case null:\n                return \"null\";\n            case true:\n                return \"true\";\n            case false:\n                return \"false\";\n        }\n        if (typeof value === \"string\") {\n            return quoteString(value, false);\n        }\n        if (typeof value === \"number\") {\n            return String(value);\n        }\n        if (_typeof(value) === \"object\") {\n            return Array.isArray(value) ? serializeArray(value) : serializeObject(value);\n        }\n        return undefined;\n    }\n    function quoteString(value) {\n        var quotes = {\n            \"'\": 0.1,\n            '\"': 0.2\n        };\n        var replacements = {\n            \"'\": \"\\\\'\",\n            '\"': '\\\\\"',\n            \"\\\\\": \"\\\\\\\\\",\n            \"\\b\": \"\\\\b\",\n            \"\\f\": \"\\\\f\",\n            \"\\n\": \"\\\\n\",\n            \"\\r\": \"\\\\r\",\n            \"\t\": \"\\\\t\",\n            \"\\v\": \"\\\\v\",\n            \"\\x00\": \"\\\\0\",\n            \"\\u2028\": \"\\\\u2028\",\n            \"\\u2029\": \"\\\\u2029\"\n        };\n        var product = \"\";\n        for(var i = 0; i < value.length; i++){\n            var _c3 = value[i];\n            switch(_c3){\n                case \"'\":\n                case '\"':\n                    quotes[_c3]++;\n                    product += _c3;\n                    continue;\n                case \"\\x00\":\n                    if (util.isDigit(value[i + 1])) {\n                        product += \"\\\\x00\";\n                        continue;\n                    }\n            }\n            if (replacements[_c3]) {\n                product += replacements[_c3];\n                continue;\n            }\n            if (_c3 < \" \") {\n                var hexString = _c3.charCodeAt(0).toString(16);\n                product += \"\\\\x\" + (\"00\" + hexString).substring(hexString.length);\n                continue;\n            }\n            product += _c3;\n        }\n        var quoteChar = quote || Object.keys(quotes).reduce(function(a, b) {\n            return quotes[a] < quotes[b] ? a : b;\n        });\n        product = product.replace(new RegExp(quoteChar, \"g\"), replacements[quoteChar]);\n        return quoteChar + product + quoteChar;\n    }\n    function serializeObject(value) {\n        if (stack.indexOf(value) >= 0) {\n            throw TypeError(\"Converting circular structure to JSON5\");\n        }\n        stack.push(value);\n        var stepback = indent;\n        indent = indent + gap;\n        var keys = propertyList || Object.keys(value);\n        var partial = [];\n        var _iterator3 = _createForOfIteratorHelper(keys), _step3;\n        try {\n            for(_iterator3.s(); !(_step3 = _iterator3.n()).done;){\n                var _key3 = _step3.value;\n                var propertyString = serializeProperty(_key3, value);\n                if (propertyString !== undefined) {\n                    var member = serializeKey(_key3) + \":\";\n                    if (gap !== \"\") {\n                        member += \" \";\n                    }\n                    member += propertyString;\n                    partial.push(member);\n                }\n            }\n        } catch (err) {\n            _iterator3.e(err);\n        } finally{\n            _iterator3.f();\n        }\n        var final;\n        if (partial.length === 0) {\n            final = \"{}\";\n        } else {\n            var properties;\n            if (gap === \"\") {\n                properties = partial.join(\",\");\n                final = \"{\" + properties + \"}\";\n            } else {\n                var separator = \",\\n\" + indent;\n                properties = partial.join(separator);\n                final = \"{\\n\" + indent + properties + \",\\n\" + stepback + \"}\";\n            }\n        }\n        stack.pop();\n        indent = stepback;\n        return final;\n    }\n    function serializeKey(key) {\n        if (key.length === 0) {\n            return quoteString(key, true);\n        }\n        var firstChar = String.fromCodePoint(key.codePointAt(0));\n        if (!util.isIdStartChar(firstChar)) {\n            return quoteString(key, true);\n        }\n        for(var i = firstChar.length; i < key.length; i++){\n            if (!util.isIdContinueChar(String.fromCodePoint(key.codePointAt(i)))) {\n                return quoteString(key, true);\n            }\n        }\n        return key;\n    }\n    function serializeArray(value) {\n        if (stack.indexOf(value) >= 0) {\n            throw TypeError(\"Converting circular structure to JSON5\");\n        }\n        stack.push(value);\n        var stepback = indent;\n        indent = indent + gap;\n        var partial = [];\n        for(var i = 0; i < value.length; i++){\n            var propertyString = serializeProperty(String(i), value);\n            partial.push(propertyString !== undefined ? propertyString : \"null\");\n        }\n        var final;\n        if (partial.length === 0) {\n            final = \"[]\";\n        } else {\n            if (gap === \"\") {\n                var properties = partial.join(\",\");\n                final = \"[\" + properties + \"]\";\n            } else {\n                var separator = \",\\n\" + indent;\n                var _properties = partial.join(separator);\n                final = \"[\\n\" + indent + _properties + \",\\n\" + stepback + \"]\";\n            }\n        }\n        stack.pop();\n        indent = stepback;\n        return final;\n    }\n};\nvar JSON5 = {\n    parse: parse,\n    stringify: stringify\n};\nvar lib = JSON5;\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (lib);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/i18next-fs-backend/esm/formats/json5.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/i18next-fs-backend/esm/formats/yaml.js":
/*!*************************************************************!*\
  !*** ./node_modules/i18next-fs-backend/esm/formats/yaml.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CORE_SCHEMA: () => (/* binding */ CORE_SCHEMA),\n/* harmony export */   DEFAULT_SCHEMA: () => (/* binding */ DEFAULT_SCHEMA),\n/* harmony export */   FAILSAFE_SCHEMA: () => (/* binding */ FAILSAFE_SCHEMA),\n/* harmony export */   JSON_SCHEMA: () => (/* binding */ JSON_SCHEMA),\n/* harmony export */   Schema: () => (/* binding */ Schema),\n/* harmony export */   Type: () => (/* binding */ Type),\n/* harmony export */   YAMLException: () => (/* binding */ YAMLException),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   dump: () => (/* binding */ dump),\n/* harmony export */   load: () => (/* binding */ load),\n/* harmony export */   loadAll: () => (/* binding */ loadAll),\n/* harmony export */   safeDump: () => (/* binding */ safeDump),\n/* harmony export */   safeLoad: () => (/* binding */ safeLoad),\n/* harmony export */   safeLoadAll: () => (/* binding */ safeLoadAll),\n/* harmony export */   types: () => (/* binding */ types)\n/* harmony export */ });\nfunction _typeof(o) {\n    \"@babel/helpers - typeof\";\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(o) {\n        return typeof o;\n    } : function(o) {\n        return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n    }, _typeof(o);\n}\n/*! js-yaml 4.1.0 https://github.com/nodeca/js-yaml @license MIT */ function isNothing(subject) {\n    return typeof subject === \"undefined\" || subject === null;\n}\nfunction isObject(subject) {\n    return _typeof(subject) === \"object\" && subject !== null;\n}\nfunction toArray(sequence) {\n    if (Array.isArray(sequence)) return sequence;\n    else if (isNothing(sequence)) return [];\n    return [\n        sequence\n    ];\n}\nfunction extend(target, source) {\n    var index, length, key, sourceKeys;\n    if (source) {\n        sourceKeys = Object.keys(source);\n        for(index = 0, length = sourceKeys.length; index < length; index += 1){\n            key = sourceKeys[index];\n            target[key] = source[key];\n        }\n    }\n    return target;\n}\nfunction repeat(string, count) {\n    var result = \"\", cycle;\n    for(cycle = 0; cycle < count; cycle += 1){\n        result += string;\n    }\n    return result;\n}\nfunction isNegativeZero(number) {\n    return number === 0 && Number.NEGATIVE_INFINITY === 1 / number;\n}\nvar isNothing_1 = isNothing;\nvar isObject_1 = isObject;\nvar toArray_1 = toArray;\nvar repeat_1 = repeat;\nvar isNegativeZero_1 = isNegativeZero;\nvar extend_1 = extend;\nvar common = {\n    isNothing: isNothing_1,\n    isObject: isObject_1,\n    toArray: toArray_1,\n    repeat: repeat_1,\n    isNegativeZero: isNegativeZero_1,\n    extend: extend_1\n};\nfunction formatError(exception, compact) {\n    var where = \"\", message = exception.reason || \"(unknown reason)\";\n    if (!exception.mark) return message;\n    if (exception.mark.name) {\n        where += 'in \"' + exception.mark.name + '\" ';\n    }\n    where += \"(\" + (exception.mark.line + 1) + \":\" + (exception.mark.column + 1) + \")\";\n    if (!compact && exception.mark.snippet) {\n        where += \"\\n\\n\" + exception.mark.snippet;\n    }\n    return message + \" \" + where;\n}\nfunction YAMLException$1(reason, mark) {\n    Error.call(this);\n    this.name = \"YAMLException\";\n    this.reason = reason;\n    this.mark = mark;\n    this.message = formatError(this, false);\n    if (Error.captureStackTrace) {\n        Error.captureStackTrace(this, this.constructor);\n    } else {\n        this.stack = new Error().stack || \"\";\n    }\n}\nYAMLException$1.prototype = Object.create(Error.prototype);\nYAMLException$1.prototype.constructor = YAMLException$1;\nYAMLException$1.prototype.toString = function toString(compact) {\n    return this.name + \": \" + formatError(this, compact);\n};\nvar exception = YAMLException$1;\nfunction getLine(buffer, lineStart, lineEnd, position, maxLineLength) {\n    var head = \"\";\n    var tail = \"\";\n    var maxHalfLength = Math.floor(maxLineLength / 2) - 1;\n    if (position - lineStart > maxHalfLength) {\n        head = \" ... \";\n        lineStart = position - maxHalfLength + head.length;\n    }\n    if (lineEnd - position > maxHalfLength) {\n        tail = \" ...\";\n        lineEnd = position + maxHalfLength - tail.length;\n    }\n    return {\n        str: head + buffer.slice(lineStart, lineEnd).replace(/\\t/g, \"→\") + tail,\n        pos: position - lineStart + head.length\n    };\n}\nfunction padStart(string, max) {\n    return common.repeat(\" \", max - string.length) + string;\n}\nfunction makeSnippet(mark, options) {\n    options = Object.create(options || null);\n    if (!mark.buffer) return null;\n    if (!options.maxLength) options.maxLength = 79;\n    if (typeof options.indent !== \"number\") options.indent = 1;\n    if (typeof options.linesBefore !== \"number\") options.linesBefore = 3;\n    if (typeof options.linesAfter !== \"number\") options.linesAfter = 2;\n    var re = /\\r?\\n|\\r|\\0/g;\n    var lineStarts = [\n        0\n    ];\n    var lineEnds = [];\n    var match;\n    var foundLineNo = -1;\n    while(match = re.exec(mark.buffer)){\n        lineEnds.push(match.index);\n        lineStarts.push(match.index + match[0].length);\n        if (mark.position <= match.index && foundLineNo < 0) {\n            foundLineNo = lineStarts.length - 2;\n        }\n    }\n    if (foundLineNo < 0) foundLineNo = lineStarts.length - 1;\n    var result = \"\", i, line;\n    var lineNoLength = Math.min(mark.line + options.linesAfter, lineEnds.length).toString().length;\n    var maxLineLength = options.maxLength - (options.indent + lineNoLength + 3);\n    for(i = 1; i <= options.linesBefore; i++){\n        if (foundLineNo - i < 0) break;\n        line = getLine(mark.buffer, lineStarts[foundLineNo - i], lineEnds[foundLineNo - i], mark.position - (lineStarts[foundLineNo] - lineStarts[foundLineNo - i]), maxLineLength);\n        result = common.repeat(\" \", options.indent) + padStart((mark.line - i + 1).toString(), lineNoLength) + \" | \" + line.str + \"\\n\" + result;\n    }\n    line = getLine(mark.buffer, lineStarts[foundLineNo], lineEnds[foundLineNo], mark.position, maxLineLength);\n    result += common.repeat(\" \", options.indent) + padStart((mark.line + 1).toString(), lineNoLength) + \" | \" + line.str + \"\\n\";\n    result += common.repeat(\"-\", options.indent + lineNoLength + 3 + line.pos) + \"^\" + \"\\n\";\n    for(i = 1; i <= options.linesAfter; i++){\n        if (foundLineNo + i >= lineEnds.length) break;\n        line = getLine(mark.buffer, lineStarts[foundLineNo + i], lineEnds[foundLineNo + i], mark.position - (lineStarts[foundLineNo] - lineStarts[foundLineNo + i]), maxLineLength);\n        result += common.repeat(\" \", options.indent) + padStart((mark.line + i + 1).toString(), lineNoLength) + \" | \" + line.str + \"\\n\";\n    }\n    return result.replace(/\\n$/, \"\");\n}\nvar snippet = makeSnippet;\nvar TYPE_CONSTRUCTOR_OPTIONS = [\n    \"kind\",\n    \"multi\",\n    \"resolve\",\n    \"construct\",\n    \"instanceOf\",\n    \"predicate\",\n    \"represent\",\n    \"representName\",\n    \"defaultStyle\",\n    \"styleAliases\"\n];\nvar YAML_NODE_KINDS = [\n    \"scalar\",\n    \"sequence\",\n    \"mapping\"\n];\nfunction compileStyleAliases(map) {\n    var result = {};\n    if (map !== null) {\n        Object.keys(map).forEach(function(style) {\n            map[style].forEach(function(alias) {\n                result[String(alias)] = style;\n            });\n        });\n    }\n    return result;\n}\nfunction Type$1(tag, options) {\n    options = options || {};\n    Object.keys(options).forEach(function(name) {\n        if (TYPE_CONSTRUCTOR_OPTIONS.indexOf(name) === -1) {\n            throw new exception('Unknown option \"' + name + '\" is met in definition of \"' + tag + '\" YAML type.');\n        }\n    });\n    this.options = options;\n    this.tag = tag;\n    this.kind = options[\"kind\"] || null;\n    this.resolve = options[\"resolve\"] || function() {\n        return true;\n    };\n    this.construct = options[\"construct\"] || function(data) {\n        return data;\n    };\n    this.instanceOf = options[\"instanceOf\"] || null;\n    this.predicate = options[\"predicate\"] || null;\n    this.represent = options[\"represent\"] || null;\n    this.representName = options[\"representName\"] || null;\n    this.defaultStyle = options[\"defaultStyle\"] || null;\n    this.multi = options[\"multi\"] || false;\n    this.styleAliases = compileStyleAliases(options[\"styleAliases\"] || null);\n    if (YAML_NODE_KINDS.indexOf(this.kind) === -1) {\n        throw new exception('Unknown kind \"' + this.kind + '\" is specified for \"' + tag + '\" YAML type.');\n    }\n}\nvar type = Type$1;\nfunction compileList(schema, name) {\n    var result = [];\n    schema[name].forEach(function(currentType) {\n        var newIndex = result.length;\n        result.forEach(function(previousType, previousIndex) {\n            if (previousType.tag === currentType.tag && previousType.kind === currentType.kind && previousType.multi === currentType.multi) {\n                newIndex = previousIndex;\n            }\n        });\n        result[newIndex] = currentType;\n    });\n    return result;\n}\nfunction compileMap() {\n    var result = {\n        scalar: {},\n        sequence: {},\n        mapping: {},\n        fallback: {},\n        multi: {\n            scalar: [],\n            sequence: [],\n            mapping: [],\n            fallback: []\n        }\n    }, index, length;\n    function collectType(type) {\n        if (type.multi) {\n            result.multi[type.kind].push(type);\n            result.multi[\"fallback\"].push(type);\n        } else {\n            result[type.kind][type.tag] = result[\"fallback\"][type.tag] = type;\n        }\n    }\n    for(index = 0, length = arguments.length; index < length; index += 1){\n        arguments[index].forEach(collectType);\n    }\n    return result;\n}\nfunction Schema$1(definition) {\n    return this.extend(definition);\n}\nSchema$1.prototype.extend = function extend(definition) {\n    var implicit = [];\n    var explicit = [];\n    if (definition instanceof type) {\n        explicit.push(definition);\n    } else if (Array.isArray(definition)) {\n        explicit = explicit.concat(definition);\n    } else if (definition && (Array.isArray(definition.implicit) || Array.isArray(definition.explicit))) {\n        if (definition.implicit) implicit = implicit.concat(definition.implicit);\n        if (definition.explicit) explicit = explicit.concat(definition.explicit);\n    } else {\n        throw new exception(\"Schema.extend argument should be a Type, [ Type ], \" + \"or a schema definition ({ implicit: [...], explicit: [...] })\");\n    }\n    implicit.forEach(function(type$1) {\n        if (!(type$1 instanceof type)) {\n            throw new exception(\"Specified list of YAML types (or a single Type object) contains a non-Type object.\");\n        }\n        if (type$1.loadKind && type$1.loadKind !== \"scalar\") {\n            throw new exception(\"There is a non-scalar type in the implicit list of a schema. Implicit resolving of such types is not supported.\");\n        }\n        if (type$1.multi) {\n            throw new exception(\"There is a multi type in the implicit list of a schema. Multi tags can only be listed as explicit.\");\n        }\n    });\n    explicit.forEach(function(type$1) {\n        if (!(type$1 instanceof type)) {\n            throw new exception(\"Specified list of YAML types (or a single Type object) contains a non-Type object.\");\n        }\n    });\n    var result = Object.create(Schema$1.prototype);\n    result.implicit = (this.implicit || []).concat(implicit);\n    result.explicit = (this.explicit || []).concat(explicit);\n    result.compiledImplicit = compileList(result, \"implicit\");\n    result.compiledExplicit = compileList(result, \"explicit\");\n    result.compiledTypeMap = compileMap(result.compiledImplicit, result.compiledExplicit);\n    return result;\n};\nvar schema = Schema$1;\nvar str = new type(\"tag:yaml.org,2002:str\", {\n    kind: \"scalar\",\n    construct: function construct(data) {\n        return data !== null ? data : \"\";\n    }\n});\nvar seq = new type(\"tag:yaml.org,2002:seq\", {\n    kind: \"sequence\",\n    construct: function construct(data) {\n        return data !== null ? data : [];\n    }\n});\nvar map = new type(\"tag:yaml.org,2002:map\", {\n    kind: \"mapping\",\n    construct: function construct(data) {\n        return data !== null ? data : {};\n    }\n});\nvar failsafe = new schema({\n    explicit: [\n        str,\n        seq,\n        map\n    ]\n});\nfunction resolveYamlNull(data) {\n    if (data === null) return true;\n    var max = data.length;\n    return max === 1 && data === \"~\" || max === 4 && (data === \"null\" || data === \"Null\" || data === \"NULL\");\n}\nfunction constructYamlNull() {\n    return null;\n}\nfunction isNull(object) {\n    return object === null;\n}\nvar _null = new type(\"tag:yaml.org,2002:null\", {\n    kind: \"scalar\",\n    resolve: resolveYamlNull,\n    construct: constructYamlNull,\n    predicate: isNull,\n    represent: {\n        canonical: function canonical() {\n            return \"~\";\n        },\n        lowercase: function lowercase() {\n            return \"null\";\n        },\n        uppercase: function uppercase() {\n            return \"NULL\";\n        },\n        camelcase: function camelcase() {\n            return \"Null\";\n        },\n        empty: function empty() {\n            return \"\";\n        }\n    },\n    defaultStyle: \"lowercase\"\n});\nfunction resolveYamlBoolean(data) {\n    if (data === null) return false;\n    var max = data.length;\n    return max === 4 && (data === \"true\" || data === \"True\" || data === \"TRUE\") || max === 5 && (data === \"false\" || data === \"False\" || data === \"FALSE\");\n}\nfunction constructYamlBoolean(data) {\n    return data === \"true\" || data === \"True\" || data === \"TRUE\";\n}\nfunction isBoolean(object) {\n    return Object.prototype.toString.call(object) === \"[object Boolean]\";\n}\nvar bool = new type(\"tag:yaml.org,2002:bool\", {\n    kind: \"scalar\",\n    resolve: resolveYamlBoolean,\n    construct: constructYamlBoolean,\n    predicate: isBoolean,\n    represent: {\n        lowercase: function lowercase(object) {\n            return object ? \"true\" : \"false\";\n        },\n        uppercase: function uppercase(object) {\n            return object ? \"TRUE\" : \"FALSE\";\n        },\n        camelcase: function camelcase(object) {\n            return object ? \"True\" : \"False\";\n        }\n    },\n    defaultStyle: \"lowercase\"\n});\nfunction isHexCode(c) {\n    return 0x30 <= c && c <= 0x39 || 0x41 <= c && c <= 0x46 || 0x61 <= c && c <= 0x66;\n}\nfunction isOctCode(c) {\n    return 0x30 <= c && c <= 0x37;\n}\nfunction isDecCode(c) {\n    return 0x30 <= c && c <= 0x39;\n}\nfunction resolveYamlInteger(data) {\n    if (data === null) return false;\n    var max = data.length, index = 0, hasDigits = false, ch;\n    if (!max) return false;\n    ch = data[index];\n    if (ch === \"-\" || ch === \"+\") {\n        ch = data[++index];\n    }\n    if (ch === \"0\") {\n        if (index + 1 === max) return true;\n        ch = data[++index];\n        if (ch === \"b\") {\n            index++;\n            for(; index < max; index++){\n                ch = data[index];\n                if (ch === \"_\") continue;\n                if (ch !== \"0\" && ch !== \"1\") return false;\n                hasDigits = true;\n            }\n            return hasDigits && ch !== \"_\";\n        }\n        if (ch === \"x\") {\n            index++;\n            for(; index < max; index++){\n                ch = data[index];\n                if (ch === \"_\") continue;\n                if (!isHexCode(data.charCodeAt(index))) return false;\n                hasDigits = true;\n            }\n            return hasDigits && ch !== \"_\";\n        }\n        if (ch === \"o\") {\n            index++;\n            for(; index < max; index++){\n                ch = data[index];\n                if (ch === \"_\") continue;\n                if (!isOctCode(data.charCodeAt(index))) return false;\n                hasDigits = true;\n            }\n            return hasDigits && ch !== \"_\";\n        }\n    }\n    if (ch === \"_\") return false;\n    for(; index < max; index++){\n        ch = data[index];\n        if (ch === \"_\") continue;\n        if (!isDecCode(data.charCodeAt(index))) {\n            return false;\n        }\n        hasDigits = true;\n    }\n    if (!hasDigits || ch === \"_\") return false;\n    return true;\n}\nfunction constructYamlInteger(data) {\n    var value = data, sign = 1, ch;\n    if (value.indexOf(\"_\") !== -1) {\n        value = value.replace(/_/g, \"\");\n    }\n    ch = value[0];\n    if (ch === \"-\" || ch === \"+\") {\n        if (ch === \"-\") sign = -1;\n        value = value.slice(1);\n        ch = value[0];\n    }\n    if (value === \"0\") return 0;\n    if (ch === \"0\") {\n        if (value[1] === \"b\") return sign * parseInt(value.slice(2), 2);\n        if (value[1] === \"x\") return sign * parseInt(value.slice(2), 16);\n        if (value[1] === \"o\") return sign * parseInt(value.slice(2), 8);\n    }\n    return sign * parseInt(value, 10);\n}\nfunction isInteger(object) {\n    return Object.prototype.toString.call(object) === \"[object Number]\" && object % 1 === 0 && !common.isNegativeZero(object);\n}\nvar int = new type(\"tag:yaml.org,2002:int\", {\n    kind: \"scalar\",\n    resolve: resolveYamlInteger,\n    construct: constructYamlInteger,\n    predicate: isInteger,\n    represent: {\n        binary: function binary(obj) {\n            return obj >= 0 ? \"0b\" + obj.toString(2) : \"-0b\" + obj.toString(2).slice(1);\n        },\n        octal: function octal(obj) {\n            return obj >= 0 ? \"0o\" + obj.toString(8) : \"-0o\" + obj.toString(8).slice(1);\n        },\n        decimal: function decimal(obj) {\n            return obj.toString(10);\n        },\n        hexadecimal: function hexadecimal(obj) {\n            return obj >= 0 ? \"0x\" + obj.toString(16).toUpperCase() : \"-0x\" + obj.toString(16).toUpperCase().slice(1);\n        }\n    },\n    defaultStyle: \"decimal\",\n    styleAliases: {\n        binary: [\n            2,\n            \"bin\"\n        ],\n        octal: [\n            8,\n            \"oct\"\n        ],\n        decimal: [\n            10,\n            \"dec\"\n        ],\n        hexadecimal: [\n            16,\n            \"hex\"\n        ]\n    }\n});\nvar YAML_FLOAT_PATTERN = new RegExp(\"^(?:[-+]?(?:[0-9][0-9_]*)(?:\\\\.[0-9_]*)?(?:[eE][-+]?[0-9]+)?\" + \"|\\\\.[0-9_]+(?:[eE][-+]?[0-9]+)?\" + \"|[-+]?\\\\.(?:inf|Inf|INF)\" + \"|\\\\.(?:nan|NaN|NAN))$\");\nfunction resolveYamlFloat(data) {\n    if (data === null) return false;\n    if (!YAML_FLOAT_PATTERN.test(data) || data[data.length - 1] === \"_\") {\n        return false;\n    }\n    return true;\n}\nfunction constructYamlFloat(data) {\n    var value, sign;\n    value = data.replace(/_/g, \"\").toLowerCase();\n    sign = value[0] === \"-\" ? -1 : 1;\n    if (\"+-\".indexOf(value[0]) >= 0) {\n        value = value.slice(1);\n    }\n    if (value === \".inf\") {\n        return sign === 1 ? Number.POSITIVE_INFINITY : Number.NEGATIVE_INFINITY;\n    } else if (value === \".nan\") {\n        return NaN;\n    }\n    return sign * parseFloat(value, 10);\n}\nvar SCIENTIFIC_WITHOUT_DOT = /^[-+]?[0-9]+e/;\nfunction representYamlFloat(object, style) {\n    var res;\n    if (isNaN(object)) {\n        switch(style){\n            case \"lowercase\":\n                return \".nan\";\n            case \"uppercase\":\n                return \".NAN\";\n            case \"camelcase\":\n                return \".NaN\";\n        }\n    } else if (Number.POSITIVE_INFINITY === object) {\n        switch(style){\n            case \"lowercase\":\n                return \".inf\";\n            case \"uppercase\":\n                return \".INF\";\n            case \"camelcase\":\n                return \".Inf\";\n        }\n    } else if (Number.NEGATIVE_INFINITY === object) {\n        switch(style){\n            case \"lowercase\":\n                return \"-.inf\";\n            case \"uppercase\":\n                return \"-.INF\";\n            case \"camelcase\":\n                return \"-.Inf\";\n        }\n    } else if (common.isNegativeZero(object)) {\n        return \"-0.0\";\n    }\n    res = object.toString(10);\n    return SCIENTIFIC_WITHOUT_DOT.test(res) ? res.replace(\"e\", \".e\") : res;\n}\nfunction isFloat(object) {\n    return Object.prototype.toString.call(object) === \"[object Number]\" && (object % 1 !== 0 || common.isNegativeZero(object));\n}\nvar float = new type(\"tag:yaml.org,2002:float\", {\n    kind: \"scalar\",\n    resolve: resolveYamlFloat,\n    construct: constructYamlFloat,\n    predicate: isFloat,\n    represent: representYamlFloat,\n    defaultStyle: \"lowercase\"\n});\nvar json = failsafe.extend({\n    implicit: [\n        _null,\n        bool,\n        int,\n        float\n    ]\n});\nvar core = json;\nvar YAML_DATE_REGEXP = new RegExp(\"^([0-9][0-9][0-9][0-9])\" + \"-([0-9][0-9])\" + \"-([0-9][0-9])$\");\nvar YAML_TIMESTAMP_REGEXP = new RegExp(\"^([0-9][0-9][0-9][0-9])\" + \"-([0-9][0-9]?)\" + \"-([0-9][0-9]?)\" + \"(?:[Tt]|[ \\\\t]+)\" + \"([0-9][0-9]?)\" + \":([0-9][0-9])\" + \":([0-9][0-9])\" + \"(?:\\\\.([0-9]*))?\" + \"(?:[ \\\\t]*(Z|([-+])([0-9][0-9]?)\" + \"(?::([0-9][0-9]))?))?$\");\nfunction resolveYamlTimestamp(data) {\n    if (data === null) return false;\n    if (YAML_DATE_REGEXP.exec(data) !== null) return true;\n    if (YAML_TIMESTAMP_REGEXP.exec(data) !== null) return true;\n    return false;\n}\nfunction constructYamlTimestamp(data) {\n    var match, year, month, day, hour, minute, second, fraction = 0, delta = null, tz_hour, tz_minute, date;\n    match = YAML_DATE_REGEXP.exec(data);\n    if (match === null) match = YAML_TIMESTAMP_REGEXP.exec(data);\n    if (match === null) throw new Error(\"Date resolve error\");\n    year = +match[1];\n    month = +match[2] - 1;\n    day = +match[3];\n    if (!match[4]) {\n        return new Date(Date.UTC(year, month, day));\n    }\n    hour = +match[4];\n    minute = +match[5];\n    second = +match[6];\n    if (match[7]) {\n        fraction = match[7].slice(0, 3);\n        while(fraction.length < 3){\n            fraction += \"0\";\n        }\n        fraction = +fraction;\n    }\n    if (match[9]) {\n        tz_hour = +match[10];\n        tz_minute = +(match[11] || 0);\n        delta = (tz_hour * 60 + tz_minute) * 60000;\n        if (match[9] === \"-\") delta = -delta;\n    }\n    date = new Date(Date.UTC(year, month, day, hour, minute, second, fraction));\n    if (delta) date.setTime(date.getTime() - delta);\n    return date;\n}\nfunction representYamlTimestamp(object) {\n    return object.toISOString();\n}\nvar timestamp = new type(\"tag:yaml.org,2002:timestamp\", {\n    kind: \"scalar\",\n    resolve: resolveYamlTimestamp,\n    construct: constructYamlTimestamp,\n    instanceOf: Date,\n    represent: representYamlTimestamp\n});\nfunction resolveYamlMerge(data) {\n    return data === \"<<\" || data === null;\n}\nvar merge = new type(\"tag:yaml.org,2002:merge\", {\n    kind: \"scalar\",\n    resolve: resolveYamlMerge\n});\nvar BASE64_MAP = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\\n\\r\";\nfunction resolveYamlBinary(data) {\n    if (data === null) return false;\n    var code, idx, bitlen = 0, max = data.length, map = BASE64_MAP;\n    for(idx = 0; idx < max; idx++){\n        code = map.indexOf(data.charAt(idx));\n        if (code > 64) continue;\n        if (code < 0) return false;\n        bitlen += 6;\n    }\n    return bitlen % 8 === 0;\n}\nfunction constructYamlBinary(data) {\n    var idx, tailbits, input = data.replace(/[\\r\\n=]/g, \"\"), max = input.length, map = BASE64_MAP, bits = 0, result = [];\n    for(idx = 0; idx < max; idx++){\n        if (idx % 4 === 0 && idx) {\n            result.push(bits >> 16 & 0xFF);\n            result.push(bits >> 8 & 0xFF);\n            result.push(bits & 0xFF);\n        }\n        bits = bits << 6 | map.indexOf(input.charAt(idx));\n    }\n    tailbits = max % 4 * 6;\n    if (tailbits === 0) {\n        result.push(bits >> 16 & 0xFF);\n        result.push(bits >> 8 & 0xFF);\n        result.push(bits & 0xFF);\n    } else if (tailbits === 18) {\n        result.push(bits >> 10 & 0xFF);\n        result.push(bits >> 2 & 0xFF);\n    } else if (tailbits === 12) {\n        result.push(bits >> 4 & 0xFF);\n    }\n    return new Uint8Array(result);\n}\nfunction representYamlBinary(object) {\n    var result = \"\", bits = 0, idx, tail, max = object.length, map = BASE64_MAP;\n    for(idx = 0; idx < max; idx++){\n        if (idx % 3 === 0 && idx) {\n            result += map[bits >> 18 & 0x3F];\n            result += map[bits >> 12 & 0x3F];\n            result += map[bits >> 6 & 0x3F];\n            result += map[bits & 0x3F];\n        }\n        bits = (bits << 8) + object[idx];\n    }\n    tail = max % 3;\n    if (tail === 0) {\n        result += map[bits >> 18 & 0x3F];\n        result += map[bits >> 12 & 0x3F];\n        result += map[bits >> 6 & 0x3F];\n        result += map[bits & 0x3F];\n    } else if (tail === 2) {\n        result += map[bits >> 10 & 0x3F];\n        result += map[bits >> 4 & 0x3F];\n        result += map[bits << 2 & 0x3F];\n        result += map[64];\n    } else if (tail === 1) {\n        result += map[bits >> 2 & 0x3F];\n        result += map[bits << 4 & 0x3F];\n        result += map[64];\n        result += map[64];\n    }\n    return result;\n}\nfunction isBinary(obj) {\n    return Object.prototype.toString.call(obj) === \"[object Uint8Array]\";\n}\nvar binary = new type(\"tag:yaml.org,2002:binary\", {\n    kind: \"scalar\",\n    resolve: resolveYamlBinary,\n    construct: constructYamlBinary,\n    predicate: isBinary,\n    represent: representYamlBinary\n});\nvar _hasOwnProperty$3 = Object.prototype.hasOwnProperty;\nvar _toString$2 = Object.prototype.toString;\nfunction resolveYamlOmap(data) {\n    if (data === null) return true;\n    var objectKeys = [], index, length, pair, pairKey, pairHasKey, object = data;\n    for(index = 0, length = object.length; index < length; index += 1){\n        pair = object[index];\n        pairHasKey = false;\n        if (_toString$2.call(pair) !== \"[object Object]\") return false;\n        for(pairKey in pair){\n            if (_hasOwnProperty$3.call(pair, pairKey)) {\n                if (!pairHasKey) pairHasKey = true;\n                else return false;\n            }\n        }\n        if (!pairHasKey) return false;\n        if (objectKeys.indexOf(pairKey) === -1) objectKeys.push(pairKey);\n        else return false;\n    }\n    return true;\n}\nfunction constructYamlOmap(data) {\n    return data !== null ? data : [];\n}\nvar omap = new type(\"tag:yaml.org,2002:omap\", {\n    kind: \"sequence\",\n    resolve: resolveYamlOmap,\n    construct: constructYamlOmap\n});\nvar _toString$1 = Object.prototype.toString;\nfunction resolveYamlPairs(data) {\n    if (data === null) return true;\n    var index, length, pair, keys, result, object = data;\n    result = new Array(object.length);\n    for(index = 0, length = object.length; index < length; index += 1){\n        pair = object[index];\n        if (_toString$1.call(pair) !== \"[object Object]\") return false;\n        keys = Object.keys(pair);\n        if (keys.length !== 1) return false;\n        result[index] = [\n            keys[0],\n            pair[keys[0]]\n        ];\n    }\n    return true;\n}\nfunction constructYamlPairs(data) {\n    if (data === null) return [];\n    var index, length, pair, keys, result, object = data;\n    result = new Array(object.length);\n    for(index = 0, length = object.length; index < length; index += 1){\n        pair = object[index];\n        keys = Object.keys(pair);\n        result[index] = [\n            keys[0],\n            pair[keys[0]]\n        ];\n    }\n    return result;\n}\nvar pairs = new type(\"tag:yaml.org,2002:pairs\", {\n    kind: \"sequence\",\n    resolve: resolveYamlPairs,\n    construct: constructYamlPairs\n});\nvar _hasOwnProperty$2 = Object.prototype.hasOwnProperty;\nfunction resolveYamlSet(data) {\n    if (data === null) return true;\n    var key, object = data;\n    for(key in object){\n        if (_hasOwnProperty$2.call(object, key)) {\n            if (object[key] !== null) return false;\n        }\n    }\n    return true;\n}\nfunction constructYamlSet(data) {\n    return data !== null ? data : {};\n}\nvar set = new type(\"tag:yaml.org,2002:set\", {\n    kind: \"mapping\",\n    resolve: resolveYamlSet,\n    construct: constructYamlSet\n});\nvar _default = core.extend({\n    implicit: [\n        timestamp,\n        merge\n    ],\n    explicit: [\n        binary,\n        omap,\n        pairs,\n        set\n    ]\n});\nvar _hasOwnProperty$1 = Object.prototype.hasOwnProperty;\nvar CONTEXT_FLOW_IN = 1;\nvar CONTEXT_FLOW_OUT = 2;\nvar CONTEXT_BLOCK_IN = 3;\nvar CONTEXT_BLOCK_OUT = 4;\nvar CHOMPING_CLIP = 1;\nvar CHOMPING_STRIP = 2;\nvar CHOMPING_KEEP = 3;\nvar PATTERN_NON_PRINTABLE = /[\\x00-\\x08\\x0B\\x0C\\x0E-\\x1F\\x7F-\\x84\\x86-\\x9F\\uFFFE\\uFFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/;\nvar PATTERN_NON_ASCII_LINE_BREAKS = /[\\x85\\u2028\\u2029]/;\nvar PATTERN_FLOW_INDICATORS = /[,\\[\\]\\{\\}]/;\nvar PATTERN_TAG_HANDLE = /^(?:!|!!|![a-z\\-]+!)$/i;\nvar PATTERN_TAG_URI = /^(?:!|[^,\\[\\]\\{\\}])(?:%[0-9a-f]{2}|[0-9a-z\\-#;\\/\\?:@&=\\+\\$,_\\.!~\\*'\\(\\)\\[\\]])*$/i;\nfunction _class(obj) {\n    return Object.prototype.toString.call(obj);\n}\nfunction is_EOL(c) {\n    return c === 0x0A || c === 0x0D;\n}\nfunction is_WHITE_SPACE(c) {\n    return c === 0x09 || c === 0x20;\n}\nfunction is_WS_OR_EOL(c) {\n    return c === 0x09 || c === 0x20 || c === 0x0A || c === 0x0D;\n}\nfunction is_FLOW_INDICATOR(c) {\n    return c === 0x2C || c === 0x5B || c === 0x5D || c === 0x7B || c === 0x7D;\n}\nfunction fromHexCode(c) {\n    var lc;\n    if (0x30 <= c && c <= 0x39) {\n        return c - 0x30;\n    }\n    lc = c | 0x20;\n    if (0x61 <= lc && lc <= 0x66) {\n        return lc - 0x61 + 10;\n    }\n    return -1;\n}\nfunction escapedHexLen(c) {\n    if (c === 0x78) {\n        return 2;\n    }\n    if (c === 0x75) {\n        return 4;\n    }\n    if (c === 0x55) {\n        return 8;\n    }\n    return 0;\n}\nfunction fromDecimalCode(c) {\n    if (0x30 <= c && c <= 0x39) {\n        return c - 0x30;\n    }\n    return -1;\n}\nfunction simpleEscapeSequence(c) {\n    return c === 0x30 ? \"\\x00\" : c === 0x61 ? \"\\x07\" : c === 0x62 ? \"\\b\" : c === 0x74 ? \"\t\" : c === 0x09 ? \"\t\" : c === 0x6E ? \"\\n\" : c === 0x76 ? \"\\v\" : c === 0x66 ? \"\\f\" : c === 0x72 ? \"\\r\" : c === 0x65 ? \"\\x1b\" : c === 0x20 ? \" \" : c === 0x22 ? '\"' : c === 0x2F ? \"/\" : c === 0x5C ? \"\\\\\" : c === 0x4E ? \"\\x85\" : c === 0x5F ? \"\\xa0\" : c === 0x4C ? \"\\u2028\" : c === 0x50 ? \"\\u2029\" : \"\";\n}\nfunction charFromCodepoint(c) {\n    if (c <= 0xFFFF) {\n        return String.fromCharCode(c);\n    }\n    return String.fromCharCode((c - 0x010000 >> 10) + 0xD800, (c - 0x010000 & 0x03FF) + 0xDC00);\n}\nvar simpleEscapeCheck = new Array(256);\nvar simpleEscapeMap = new Array(256);\nfor(var i = 0; i < 256; i++){\n    simpleEscapeCheck[i] = simpleEscapeSequence(i) ? 1 : 0;\n    simpleEscapeMap[i] = simpleEscapeSequence(i);\n}\nfunction State$1(input, options) {\n    this.input = input;\n    this.filename = options[\"filename\"] || null;\n    this.schema = options[\"schema\"] || _default;\n    this.onWarning = options[\"onWarning\"] || null;\n    this.legacy = options[\"legacy\"] || false;\n    this.json = options[\"json\"] || false;\n    this.listener = options[\"listener\"] || null;\n    this.implicitTypes = this.schema.compiledImplicit;\n    this.typeMap = this.schema.compiledTypeMap;\n    this.length = input.length;\n    this.position = 0;\n    this.line = 0;\n    this.lineStart = 0;\n    this.lineIndent = 0;\n    this.firstTabInLine = -1;\n    this.documents = [];\n}\nfunction generateError(state, message) {\n    var mark = {\n        name: state.filename,\n        buffer: state.input.slice(0, -1),\n        position: state.position,\n        line: state.line,\n        column: state.position - state.lineStart\n    };\n    mark.snippet = snippet(mark);\n    return new exception(message, mark);\n}\nfunction throwError(state, message) {\n    throw generateError(state, message);\n}\nfunction throwWarning(state, message) {\n    if (state.onWarning) {\n        state.onWarning.call(null, generateError(state, message));\n    }\n}\nvar directiveHandlers = {\n    YAML: function handleYamlDirective(state, name, args) {\n        var match, major, minor;\n        if (state.version !== null) {\n            throwError(state, \"duplication of %YAML directive\");\n        }\n        if (args.length !== 1) {\n            throwError(state, \"YAML directive accepts exactly one argument\");\n        }\n        match = /^([0-9]+)\\.([0-9]+)$/.exec(args[0]);\n        if (match === null) {\n            throwError(state, \"ill-formed argument of the YAML directive\");\n        }\n        major = parseInt(match[1], 10);\n        minor = parseInt(match[2], 10);\n        if (major !== 1) {\n            throwError(state, \"unacceptable YAML version of the document\");\n        }\n        state.version = args[0];\n        state.checkLineBreaks = minor < 2;\n        if (minor !== 1 && minor !== 2) {\n            throwWarning(state, \"unsupported YAML version of the document\");\n        }\n    },\n    TAG: function handleTagDirective(state, name, args) {\n        var handle, prefix;\n        if (args.length !== 2) {\n            throwError(state, \"TAG directive accepts exactly two arguments\");\n        }\n        handle = args[0];\n        prefix = args[1];\n        if (!PATTERN_TAG_HANDLE.test(handle)) {\n            throwError(state, \"ill-formed tag handle (first argument) of the TAG directive\");\n        }\n        if (_hasOwnProperty$1.call(state.tagMap, handle)) {\n            throwError(state, 'there is a previously declared suffix for \"' + handle + '\" tag handle');\n        }\n        if (!PATTERN_TAG_URI.test(prefix)) {\n            throwError(state, \"ill-formed tag prefix (second argument) of the TAG directive\");\n        }\n        try {\n            prefix = decodeURIComponent(prefix);\n        } catch (err) {\n            throwError(state, \"tag prefix is malformed: \" + prefix);\n        }\n        state.tagMap[handle] = prefix;\n    }\n};\nfunction captureSegment(state, start, end, checkJson) {\n    var _position, _length, _character, _result;\n    if (start < end) {\n        _result = state.input.slice(start, end);\n        if (checkJson) {\n            for(_position = 0, _length = _result.length; _position < _length; _position += 1){\n                _character = _result.charCodeAt(_position);\n                if (!(_character === 0x09 || 0x20 <= _character && _character <= 0x10FFFF)) {\n                    throwError(state, \"expected valid JSON character\");\n                }\n            }\n        } else if (PATTERN_NON_PRINTABLE.test(_result)) {\n            throwError(state, \"the stream contains non-printable characters\");\n        }\n        state.result += _result;\n    }\n}\nfunction mergeMappings(state, destination, source, overridableKeys) {\n    var sourceKeys, key, index, quantity;\n    if (!common.isObject(source)) {\n        throwError(state, \"cannot merge mappings; the provided source object is unacceptable\");\n    }\n    sourceKeys = Object.keys(source);\n    for(index = 0, quantity = sourceKeys.length; index < quantity; index += 1){\n        key = sourceKeys[index];\n        if (!_hasOwnProperty$1.call(destination, key)) {\n            destination[key] = source[key];\n            overridableKeys[key] = true;\n        }\n    }\n}\nfunction storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, startLine, startLineStart, startPos) {\n    var index, quantity;\n    if (Array.isArray(keyNode)) {\n        keyNode = Array.prototype.slice.call(keyNode);\n        for(index = 0, quantity = keyNode.length; index < quantity; index += 1){\n            if (Array.isArray(keyNode[index])) {\n                throwError(state, \"nested arrays are not supported inside keys\");\n            }\n            if (_typeof(keyNode) === \"object\" && _class(keyNode[index]) === \"[object Object]\") {\n                keyNode[index] = \"[object Object]\";\n            }\n        }\n    }\n    if (_typeof(keyNode) === \"object\" && _class(keyNode) === \"[object Object]\") {\n        keyNode = \"[object Object]\";\n    }\n    keyNode = String(keyNode);\n    if (_result === null) {\n        _result = {};\n    }\n    if (keyTag === \"tag:yaml.org,2002:merge\") {\n        if (Array.isArray(valueNode)) {\n            for(index = 0, quantity = valueNode.length; index < quantity; index += 1){\n                mergeMappings(state, _result, valueNode[index], overridableKeys);\n            }\n        } else {\n            mergeMappings(state, _result, valueNode, overridableKeys);\n        }\n    } else {\n        if (!state.json && !_hasOwnProperty$1.call(overridableKeys, keyNode) && _hasOwnProperty$1.call(_result, keyNode)) {\n            state.line = startLine || state.line;\n            state.lineStart = startLineStart || state.lineStart;\n            state.position = startPos || state.position;\n            throwError(state, \"duplicated mapping key\");\n        }\n        if (keyNode === \"__proto__\") {\n            Object.defineProperty(_result, keyNode, {\n                configurable: true,\n                enumerable: true,\n                writable: true,\n                value: valueNode\n            });\n        } else {\n            _result[keyNode] = valueNode;\n        }\n        delete overridableKeys[keyNode];\n    }\n    return _result;\n}\nfunction readLineBreak(state) {\n    var ch;\n    ch = state.input.charCodeAt(state.position);\n    if (ch === 0x0A) {\n        state.position++;\n    } else if (ch === 0x0D) {\n        state.position++;\n        if (state.input.charCodeAt(state.position) === 0x0A) {\n            state.position++;\n        }\n    } else {\n        throwError(state, \"a line break is expected\");\n    }\n    state.line += 1;\n    state.lineStart = state.position;\n    state.firstTabInLine = -1;\n}\nfunction skipSeparationSpace(state, allowComments, checkIndent) {\n    var lineBreaks = 0, ch = state.input.charCodeAt(state.position);\n    while(ch !== 0){\n        while(is_WHITE_SPACE(ch)){\n            if (ch === 0x09 && state.firstTabInLine === -1) {\n                state.firstTabInLine = state.position;\n            }\n            ch = state.input.charCodeAt(++state.position);\n        }\n        if (allowComments && ch === 0x23) {\n            do {\n                ch = state.input.charCodeAt(++state.position);\n            }while (ch !== 0x0A && ch !== 0x0D && ch !== 0);\n        }\n        if (is_EOL(ch)) {\n            readLineBreak(state);\n            ch = state.input.charCodeAt(state.position);\n            lineBreaks++;\n            state.lineIndent = 0;\n            while(ch === 0x20){\n                state.lineIndent++;\n                ch = state.input.charCodeAt(++state.position);\n            }\n        } else {\n            break;\n        }\n    }\n    if (checkIndent !== -1 && lineBreaks !== 0 && state.lineIndent < checkIndent) {\n        throwWarning(state, \"deficient indentation\");\n    }\n    return lineBreaks;\n}\nfunction testDocumentSeparator(state) {\n    var _position = state.position, ch;\n    ch = state.input.charCodeAt(_position);\n    if ((ch === 0x2D || ch === 0x2E) && ch === state.input.charCodeAt(_position + 1) && ch === state.input.charCodeAt(_position + 2)) {\n        _position += 3;\n        ch = state.input.charCodeAt(_position);\n        if (ch === 0 || is_WS_OR_EOL(ch)) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction writeFoldedLines(state, count) {\n    if (count === 1) {\n        state.result += \" \";\n    } else if (count > 1) {\n        state.result += common.repeat(\"\\n\", count - 1);\n    }\n}\nfunction readPlainScalar(state, nodeIndent, withinFlowCollection) {\n    var preceding, following, captureStart, captureEnd, hasPendingContent, _line, _lineStart, _lineIndent, _kind = state.kind, _result = state.result, ch;\n    ch = state.input.charCodeAt(state.position);\n    if (is_WS_OR_EOL(ch) || is_FLOW_INDICATOR(ch) || ch === 0x23 || ch === 0x26 || ch === 0x2A || ch === 0x21 || ch === 0x7C || ch === 0x3E || ch === 0x27 || ch === 0x22 || ch === 0x25 || ch === 0x40 || ch === 0x60) {\n        return false;\n    }\n    if (ch === 0x3F || ch === 0x2D) {\n        following = state.input.charCodeAt(state.position + 1);\n        if (is_WS_OR_EOL(following) || withinFlowCollection && is_FLOW_INDICATOR(following)) {\n            return false;\n        }\n    }\n    state.kind = \"scalar\";\n    state.result = \"\";\n    captureStart = captureEnd = state.position;\n    hasPendingContent = false;\n    while(ch !== 0){\n        if (ch === 0x3A) {\n            following = state.input.charCodeAt(state.position + 1);\n            if (is_WS_OR_EOL(following) || withinFlowCollection && is_FLOW_INDICATOR(following)) {\n                break;\n            }\n        } else if (ch === 0x23) {\n            preceding = state.input.charCodeAt(state.position - 1);\n            if (is_WS_OR_EOL(preceding)) {\n                break;\n            }\n        } else if (state.position === state.lineStart && testDocumentSeparator(state) || withinFlowCollection && is_FLOW_INDICATOR(ch)) {\n            break;\n        } else if (is_EOL(ch)) {\n            _line = state.line;\n            _lineStart = state.lineStart;\n            _lineIndent = state.lineIndent;\n            skipSeparationSpace(state, false, -1);\n            if (state.lineIndent >= nodeIndent) {\n                hasPendingContent = true;\n                ch = state.input.charCodeAt(state.position);\n                continue;\n            } else {\n                state.position = captureEnd;\n                state.line = _line;\n                state.lineStart = _lineStart;\n                state.lineIndent = _lineIndent;\n                break;\n            }\n        }\n        if (hasPendingContent) {\n            captureSegment(state, captureStart, captureEnd, false);\n            writeFoldedLines(state, state.line - _line);\n            captureStart = captureEnd = state.position;\n            hasPendingContent = false;\n        }\n        if (!is_WHITE_SPACE(ch)) {\n            captureEnd = state.position + 1;\n        }\n        ch = state.input.charCodeAt(++state.position);\n    }\n    captureSegment(state, captureStart, captureEnd, false);\n    if (state.result) {\n        return true;\n    }\n    state.kind = _kind;\n    state.result = _result;\n    return false;\n}\nfunction readSingleQuotedScalar(state, nodeIndent) {\n    var ch, captureStart, captureEnd;\n    ch = state.input.charCodeAt(state.position);\n    if (ch !== 0x27) {\n        return false;\n    }\n    state.kind = \"scalar\";\n    state.result = \"\";\n    state.position++;\n    captureStart = captureEnd = state.position;\n    while((ch = state.input.charCodeAt(state.position)) !== 0){\n        if (ch === 0x27) {\n            captureSegment(state, captureStart, state.position, true);\n            ch = state.input.charCodeAt(++state.position);\n            if (ch === 0x27) {\n                captureStart = state.position;\n                state.position++;\n                captureEnd = state.position;\n            } else {\n                return true;\n            }\n        } else if (is_EOL(ch)) {\n            captureSegment(state, captureStart, captureEnd, true);\n            writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));\n            captureStart = captureEnd = state.position;\n        } else if (state.position === state.lineStart && testDocumentSeparator(state)) {\n            throwError(state, \"unexpected end of the document within a single quoted scalar\");\n        } else {\n            state.position++;\n            captureEnd = state.position;\n        }\n    }\n    throwError(state, \"unexpected end of the stream within a single quoted scalar\");\n}\nfunction readDoubleQuotedScalar(state, nodeIndent) {\n    var captureStart, captureEnd, hexLength, hexResult, tmp, ch;\n    ch = state.input.charCodeAt(state.position);\n    if (ch !== 0x22) {\n        return false;\n    }\n    state.kind = \"scalar\";\n    state.result = \"\";\n    state.position++;\n    captureStart = captureEnd = state.position;\n    while((ch = state.input.charCodeAt(state.position)) !== 0){\n        if (ch === 0x22) {\n            captureSegment(state, captureStart, state.position, true);\n            state.position++;\n            return true;\n        } else if (ch === 0x5C) {\n            captureSegment(state, captureStart, state.position, true);\n            ch = state.input.charCodeAt(++state.position);\n            if (is_EOL(ch)) {\n                skipSeparationSpace(state, false, nodeIndent);\n            } else if (ch < 256 && simpleEscapeCheck[ch]) {\n                state.result += simpleEscapeMap[ch];\n                state.position++;\n            } else if ((tmp = escapedHexLen(ch)) > 0) {\n                hexLength = tmp;\n                hexResult = 0;\n                for(; hexLength > 0; hexLength--){\n                    ch = state.input.charCodeAt(++state.position);\n                    if ((tmp = fromHexCode(ch)) >= 0) {\n                        hexResult = (hexResult << 4) + tmp;\n                    } else {\n                        throwError(state, \"expected hexadecimal character\");\n                    }\n                }\n                state.result += charFromCodepoint(hexResult);\n                state.position++;\n            } else {\n                throwError(state, \"unknown escape sequence\");\n            }\n            captureStart = captureEnd = state.position;\n        } else if (is_EOL(ch)) {\n            captureSegment(state, captureStart, captureEnd, true);\n            writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));\n            captureStart = captureEnd = state.position;\n        } else if (state.position === state.lineStart && testDocumentSeparator(state)) {\n            throwError(state, \"unexpected end of the document within a double quoted scalar\");\n        } else {\n            state.position++;\n            captureEnd = state.position;\n        }\n    }\n    throwError(state, \"unexpected end of the stream within a double quoted scalar\");\n}\nfunction readFlowCollection(state, nodeIndent) {\n    var readNext = true, _line, _lineStart, _pos, _tag = state.tag, _result, _anchor = state.anchor, following, terminator, isPair, isExplicitPair, isMapping, overridableKeys = Object.create(null), keyNode, keyTag, valueNode, ch;\n    ch = state.input.charCodeAt(state.position);\n    if (ch === 0x5B) {\n        terminator = 0x5D;\n        isMapping = false;\n        _result = [];\n    } else if (ch === 0x7B) {\n        terminator = 0x7D;\n        isMapping = true;\n        _result = {};\n    } else {\n        return false;\n    }\n    if (state.anchor !== null) {\n        state.anchorMap[state.anchor] = _result;\n    }\n    ch = state.input.charCodeAt(++state.position);\n    while(ch !== 0){\n        skipSeparationSpace(state, true, nodeIndent);\n        ch = state.input.charCodeAt(state.position);\n        if (ch === terminator) {\n            state.position++;\n            state.tag = _tag;\n            state.anchor = _anchor;\n            state.kind = isMapping ? \"mapping\" : \"sequence\";\n            state.result = _result;\n            return true;\n        } else if (!readNext) {\n            throwError(state, \"missed comma between flow collection entries\");\n        } else if (ch === 0x2C) {\n            throwError(state, \"expected the node content, but found ','\");\n        }\n        keyTag = keyNode = valueNode = null;\n        isPair = isExplicitPair = false;\n        if (ch === 0x3F) {\n            following = state.input.charCodeAt(state.position + 1);\n            if (is_WS_OR_EOL(following)) {\n                isPair = isExplicitPair = true;\n                state.position++;\n                skipSeparationSpace(state, true, nodeIndent);\n            }\n        }\n        _line = state.line;\n        _lineStart = state.lineStart;\n        _pos = state.position;\n        composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);\n        keyTag = state.tag;\n        keyNode = state.result;\n        skipSeparationSpace(state, true, nodeIndent);\n        ch = state.input.charCodeAt(state.position);\n        if ((isExplicitPair || state.line === _line) && ch === 0x3A) {\n            isPair = true;\n            ch = state.input.charCodeAt(++state.position);\n            skipSeparationSpace(state, true, nodeIndent);\n            composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);\n            valueNode = state.result;\n        }\n        if (isMapping) {\n            storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, _line, _lineStart, _pos);\n        } else if (isPair) {\n            _result.push(storeMappingPair(state, null, overridableKeys, keyTag, keyNode, valueNode, _line, _lineStart, _pos));\n        } else {\n            _result.push(keyNode);\n        }\n        skipSeparationSpace(state, true, nodeIndent);\n        ch = state.input.charCodeAt(state.position);\n        if (ch === 0x2C) {\n            readNext = true;\n            ch = state.input.charCodeAt(++state.position);\n        } else {\n            readNext = false;\n        }\n    }\n    throwError(state, \"unexpected end of the stream within a flow collection\");\n}\nfunction readBlockScalar(state, nodeIndent) {\n    var captureStart, folding, chomping = CHOMPING_CLIP, didReadContent = false, detectedIndent = false, textIndent = nodeIndent, emptyLines = 0, atMoreIndented = false, tmp, ch;\n    ch = state.input.charCodeAt(state.position);\n    if (ch === 0x7C) {\n        folding = false;\n    } else if (ch === 0x3E) {\n        folding = true;\n    } else {\n        return false;\n    }\n    state.kind = \"scalar\";\n    state.result = \"\";\n    while(ch !== 0){\n        ch = state.input.charCodeAt(++state.position);\n        if (ch === 0x2B || ch === 0x2D) {\n            if (CHOMPING_CLIP === chomping) {\n                chomping = ch === 0x2B ? CHOMPING_KEEP : CHOMPING_STRIP;\n            } else {\n                throwError(state, \"repeat of a chomping mode identifier\");\n            }\n        } else if ((tmp = fromDecimalCode(ch)) >= 0) {\n            if (tmp === 0) {\n                throwError(state, \"bad explicit indentation width of a block scalar; it cannot be less than one\");\n            } else if (!detectedIndent) {\n                textIndent = nodeIndent + tmp - 1;\n                detectedIndent = true;\n            } else {\n                throwError(state, \"repeat of an indentation width identifier\");\n            }\n        } else {\n            break;\n        }\n    }\n    if (is_WHITE_SPACE(ch)) {\n        do {\n            ch = state.input.charCodeAt(++state.position);\n        }while (is_WHITE_SPACE(ch));\n        if (ch === 0x23) {\n            do {\n                ch = state.input.charCodeAt(++state.position);\n            }while (!is_EOL(ch) && ch !== 0);\n        }\n    }\n    while(ch !== 0){\n        readLineBreak(state);\n        state.lineIndent = 0;\n        ch = state.input.charCodeAt(state.position);\n        while((!detectedIndent || state.lineIndent < textIndent) && ch === 0x20){\n            state.lineIndent++;\n            ch = state.input.charCodeAt(++state.position);\n        }\n        if (!detectedIndent && state.lineIndent > textIndent) {\n            textIndent = state.lineIndent;\n        }\n        if (is_EOL(ch)) {\n            emptyLines++;\n            continue;\n        }\n        if (state.lineIndent < textIndent) {\n            if (chomping === CHOMPING_KEEP) {\n                state.result += common.repeat(\"\\n\", didReadContent ? 1 + emptyLines : emptyLines);\n            } else if (chomping === CHOMPING_CLIP) {\n                if (didReadContent) {\n                    state.result += \"\\n\";\n                }\n            }\n            break;\n        }\n        if (folding) {\n            if (is_WHITE_SPACE(ch)) {\n                atMoreIndented = true;\n                state.result += common.repeat(\"\\n\", didReadContent ? 1 + emptyLines : emptyLines);\n            } else if (atMoreIndented) {\n                atMoreIndented = false;\n                state.result += common.repeat(\"\\n\", emptyLines + 1);\n            } else if (emptyLines === 0) {\n                if (didReadContent) {\n                    state.result += \" \";\n                }\n            } else {\n                state.result += common.repeat(\"\\n\", emptyLines);\n            }\n        } else {\n            state.result += common.repeat(\"\\n\", didReadContent ? 1 + emptyLines : emptyLines);\n        }\n        didReadContent = true;\n        detectedIndent = true;\n        emptyLines = 0;\n        captureStart = state.position;\n        while(!is_EOL(ch) && ch !== 0){\n            ch = state.input.charCodeAt(++state.position);\n        }\n        captureSegment(state, captureStart, state.position, false);\n    }\n    return true;\n}\nfunction readBlockSequence(state, nodeIndent) {\n    var _line, _tag = state.tag, _anchor = state.anchor, _result = [], following, detected = false, ch;\n    if (state.firstTabInLine !== -1) return false;\n    if (state.anchor !== null) {\n        state.anchorMap[state.anchor] = _result;\n    }\n    ch = state.input.charCodeAt(state.position);\n    while(ch !== 0){\n        if (state.firstTabInLine !== -1) {\n            state.position = state.firstTabInLine;\n            throwError(state, \"tab characters must not be used in indentation\");\n        }\n        if (ch !== 0x2D) {\n            break;\n        }\n        following = state.input.charCodeAt(state.position + 1);\n        if (!is_WS_OR_EOL(following)) {\n            break;\n        }\n        detected = true;\n        state.position++;\n        if (skipSeparationSpace(state, true, -1)) {\n            if (state.lineIndent <= nodeIndent) {\n                _result.push(null);\n                ch = state.input.charCodeAt(state.position);\n                continue;\n            }\n        }\n        _line = state.line;\n        composeNode(state, nodeIndent, CONTEXT_BLOCK_IN, false, true);\n        _result.push(state.result);\n        skipSeparationSpace(state, true, -1);\n        ch = state.input.charCodeAt(state.position);\n        if ((state.line === _line || state.lineIndent > nodeIndent) && ch !== 0) {\n            throwError(state, \"bad indentation of a sequence entry\");\n        } else if (state.lineIndent < nodeIndent) {\n            break;\n        }\n    }\n    if (detected) {\n        state.tag = _tag;\n        state.anchor = _anchor;\n        state.kind = \"sequence\";\n        state.result = _result;\n        return true;\n    }\n    return false;\n}\nfunction readBlockMapping(state, nodeIndent, flowIndent) {\n    var following, allowCompact, _line, _keyLine, _keyLineStart, _keyPos, _tag = state.tag, _anchor = state.anchor, _result = {}, overridableKeys = Object.create(null), keyTag = null, keyNode = null, valueNode = null, atExplicitKey = false, detected = false, ch;\n    if (state.firstTabInLine !== -1) return false;\n    if (state.anchor !== null) {\n        state.anchorMap[state.anchor] = _result;\n    }\n    ch = state.input.charCodeAt(state.position);\n    while(ch !== 0){\n        if (!atExplicitKey && state.firstTabInLine !== -1) {\n            state.position = state.firstTabInLine;\n            throwError(state, \"tab characters must not be used in indentation\");\n        }\n        following = state.input.charCodeAt(state.position + 1);\n        _line = state.line;\n        if ((ch === 0x3F || ch === 0x3A) && is_WS_OR_EOL(following)) {\n            if (ch === 0x3F) {\n                if (atExplicitKey) {\n                    storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null, _keyLine, _keyLineStart, _keyPos);\n                    keyTag = keyNode = valueNode = null;\n                }\n                detected = true;\n                atExplicitKey = true;\n                allowCompact = true;\n            } else if (atExplicitKey) {\n                atExplicitKey = false;\n                allowCompact = true;\n            } else {\n                throwError(state, \"incomplete explicit mapping pair; a key node is missed; or followed by a non-tabulated empty line\");\n            }\n            state.position += 1;\n            ch = following;\n        } else {\n            _keyLine = state.line;\n            _keyLineStart = state.lineStart;\n            _keyPos = state.position;\n            if (!composeNode(state, flowIndent, CONTEXT_FLOW_OUT, false, true)) {\n                break;\n            }\n            if (state.line === _line) {\n                ch = state.input.charCodeAt(state.position);\n                while(is_WHITE_SPACE(ch)){\n                    ch = state.input.charCodeAt(++state.position);\n                }\n                if (ch === 0x3A) {\n                    ch = state.input.charCodeAt(++state.position);\n                    if (!is_WS_OR_EOL(ch)) {\n                        throwError(state, \"a whitespace character is expected after the key-value separator within a block mapping\");\n                    }\n                    if (atExplicitKey) {\n                        storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null, _keyLine, _keyLineStart, _keyPos);\n                        keyTag = keyNode = valueNode = null;\n                    }\n                    detected = true;\n                    atExplicitKey = false;\n                    allowCompact = false;\n                    keyTag = state.tag;\n                    keyNode = state.result;\n                } else if (detected) {\n                    throwError(state, \"can not read an implicit mapping pair; a colon is missed\");\n                } else {\n                    state.tag = _tag;\n                    state.anchor = _anchor;\n                    return true;\n                }\n            } else if (detected) {\n                throwError(state, \"can not read a block mapping entry; a multiline key may not be an implicit key\");\n            } else {\n                state.tag = _tag;\n                state.anchor = _anchor;\n                return true;\n            }\n        }\n        if (state.line === _line || state.lineIndent > nodeIndent) {\n            if (atExplicitKey) {\n                _keyLine = state.line;\n                _keyLineStart = state.lineStart;\n                _keyPos = state.position;\n            }\n            if (composeNode(state, nodeIndent, CONTEXT_BLOCK_OUT, true, allowCompact)) {\n                if (atExplicitKey) {\n                    keyNode = state.result;\n                } else {\n                    valueNode = state.result;\n                }\n            }\n            if (!atExplicitKey) {\n                storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, _keyLine, _keyLineStart, _keyPos);\n                keyTag = keyNode = valueNode = null;\n            }\n            skipSeparationSpace(state, true, -1);\n            ch = state.input.charCodeAt(state.position);\n        }\n        if ((state.line === _line || state.lineIndent > nodeIndent) && ch !== 0) {\n            throwError(state, \"bad indentation of a mapping entry\");\n        } else if (state.lineIndent < nodeIndent) {\n            break;\n        }\n    }\n    if (atExplicitKey) {\n        storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null, _keyLine, _keyLineStart, _keyPos);\n    }\n    if (detected) {\n        state.tag = _tag;\n        state.anchor = _anchor;\n        state.kind = \"mapping\";\n        state.result = _result;\n    }\n    return detected;\n}\nfunction readTagProperty(state) {\n    var _position, isVerbatim = false, isNamed = false, tagHandle, tagName, ch;\n    ch = state.input.charCodeAt(state.position);\n    if (ch !== 0x21) return false;\n    if (state.tag !== null) {\n        throwError(state, \"duplication of a tag property\");\n    }\n    ch = state.input.charCodeAt(++state.position);\n    if (ch === 0x3C) {\n        isVerbatim = true;\n        ch = state.input.charCodeAt(++state.position);\n    } else if (ch === 0x21) {\n        isNamed = true;\n        tagHandle = \"!!\";\n        ch = state.input.charCodeAt(++state.position);\n    } else {\n        tagHandle = \"!\";\n    }\n    _position = state.position;\n    if (isVerbatim) {\n        do {\n            ch = state.input.charCodeAt(++state.position);\n        }while (ch !== 0 && ch !== 0x3E);\n        if (state.position < state.length) {\n            tagName = state.input.slice(_position, state.position);\n            ch = state.input.charCodeAt(++state.position);\n        } else {\n            throwError(state, \"unexpected end of the stream within a verbatim tag\");\n        }\n    } else {\n        while(ch !== 0 && !is_WS_OR_EOL(ch)){\n            if (ch === 0x21) {\n                if (!isNamed) {\n                    tagHandle = state.input.slice(_position - 1, state.position + 1);\n                    if (!PATTERN_TAG_HANDLE.test(tagHandle)) {\n                        throwError(state, \"named tag handle cannot contain such characters\");\n                    }\n                    isNamed = true;\n                    _position = state.position + 1;\n                } else {\n                    throwError(state, \"tag suffix cannot contain exclamation marks\");\n                }\n            }\n            ch = state.input.charCodeAt(++state.position);\n        }\n        tagName = state.input.slice(_position, state.position);\n        if (PATTERN_FLOW_INDICATORS.test(tagName)) {\n            throwError(state, \"tag suffix cannot contain flow indicator characters\");\n        }\n    }\n    if (tagName && !PATTERN_TAG_URI.test(tagName)) {\n        throwError(state, \"tag name cannot contain such characters: \" + tagName);\n    }\n    try {\n        tagName = decodeURIComponent(tagName);\n    } catch (err) {\n        throwError(state, \"tag name is malformed: \" + tagName);\n    }\n    if (isVerbatim) {\n        state.tag = tagName;\n    } else if (_hasOwnProperty$1.call(state.tagMap, tagHandle)) {\n        state.tag = state.tagMap[tagHandle] + tagName;\n    } else if (tagHandle === \"!\") {\n        state.tag = \"!\" + tagName;\n    } else if (tagHandle === \"!!\") {\n        state.tag = \"tag:yaml.org,2002:\" + tagName;\n    } else {\n        throwError(state, 'undeclared tag handle \"' + tagHandle + '\"');\n    }\n    return true;\n}\nfunction readAnchorProperty(state) {\n    var _position, ch;\n    ch = state.input.charCodeAt(state.position);\n    if (ch !== 0x26) return false;\n    if (state.anchor !== null) {\n        throwError(state, \"duplication of an anchor property\");\n    }\n    ch = state.input.charCodeAt(++state.position);\n    _position = state.position;\n    while(ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)){\n        ch = state.input.charCodeAt(++state.position);\n    }\n    if (state.position === _position) {\n        throwError(state, \"name of an anchor node must contain at least one character\");\n    }\n    state.anchor = state.input.slice(_position, state.position);\n    return true;\n}\nfunction readAlias(state) {\n    var _position, alias, ch;\n    ch = state.input.charCodeAt(state.position);\n    if (ch !== 0x2A) return false;\n    ch = state.input.charCodeAt(++state.position);\n    _position = state.position;\n    while(ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)){\n        ch = state.input.charCodeAt(++state.position);\n    }\n    if (state.position === _position) {\n        throwError(state, \"name of an alias node must contain at least one character\");\n    }\n    alias = state.input.slice(_position, state.position);\n    if (!_hasOwnProperty$1.call(state.anchorMap, alias)) {\n        throwError(state, 'unidentified alias \"' + alias + '\"');\n    }\n    state.result = state.anchorMap[alias];\n    skipSeparationSpace(state, true, -1);\n    return true;\n}\nfunction composeNode(state, parentIndent, nodeContext, allowToSeek, allowCompact) {\n    var allowBlockStyles, allowBlockScalars, allowBlockCollections, indentStatus = 1, atNewLine = false, hasContent = false, typeIndex, typeQuantity, typeList, type, flowIndent, blockIndent;\n    if (state.listener !== null) {\n        state.listener(\"open\", state);\n    }\n    state.tag = null;\n    state.anchor = null;\n    state.kind = null;\n    state.result = null;\n    allowBlockStyles = allowBlockScalars = allowBlockCollections = CONTEXT_BLOCK_OUT === nodeContext || CONTEXT_BLOCK_IN === nodeContext;\n    if (allowToSeek) {\n        if (skipSeparationSpace(state, true, -1)) {\n            atNewLine = true;\n            if (state.lineIndent > parentIndent) {\n                indentStatus = 1;\n            } else if (state.lineIndent === parentIndent) {\n                indentStatus = 0;\n            } else if (state.lineIndent < parentIndent) {\n                indentStatus = -1;\n            }\n        }\n    }\n    if (indentStatus === 1) {\n        while(readTagProperty(state) || readAnchorProperty(state)){\n            if (skipSeparationSpace(state, true, -1)) {\n                atNewLine = true;\n                allowBlockCollections = allowBlockStyles;\n                if (state.lineIndent > parentIndent) {\n                    indentStatus = 1;\n                } else if (state.lineIndent === parentIndent) {\n                    indentStatus = 0;\n                } else if (state.lineIndent < parentIndent) {\n                    indentStatus = -1;\n                }\n            } else {\n                allowBlockCollections = false;\n            }\n        }\n    }\n    if (allowBlockCollections) {\n        allowBlockCollections = atNewLine || allowCompact;\n    }\n    if (indentStatus === 1 || CONTEXT_BLOCK_OUT === nodeContext) {\n        if (CONTEXT_FLOW_IN === nodeContext || CONTEXT_FLOW_OUT === nodeContext) {\n            flowIndent = parentIndent;\n        } else {\n            flowIndent = parentIndent + 1;\n        }\n        blockIndent = state.position - state.lineStart;\n        if (indentStatus === 1) {\n            if (allowBlockCollections && (readBlockSequence(state, blockIndent) || readBlockMapping(state, blockIndent, flowIndent)) || readFlowCollection(state, flowIndent)) {\n                hasContent = true;\n            } else {\n                if (allowBlockScalars && readBlockScalar(state, flowIndent) || readSingleQuotedScalar(state, flowIndent) || readDoubleQuotedScalar(state, flowIndent)) {\n                    hasContent = true;\n                } else if (readAlias(state)) {\n                    hasContent = true;\n                    if (state.tag !== null || state.anchor !== null) {\n                        throwError(state, \"alias node should not have any properties\");\n                    }\n                } else if (readPlainScalar(state, flowIndent, CONTEXT_FLOW_IN === nodeContext)) {\n                    hasContent = true;\n                    if (state.tag === null) {\n                        state.tag = \"?\";\n                    }\n                }\n                if (state.anchor !== null) {\n                    state.anchorMap[state.anchor] = state.result;\n                }\n            }\n        } else if (indentStatus === 0) {\n            hasContent = allowBlockCollections && readBlockSequence(state, blockIndent);\n        }\n    }\n    if (state.tag === null) {\n        if (state.anchor !== null) {\n            state.anchorMap[state.anchor] = state.result;\n        }\n    } else if (state.tag === \"?\") {\n        if (state.result !== null && state.kind !== \"scalar\") {\n            throwError(state, 'unacceptable node kind for !<?> tag; it should be \"scalar\", not \"' + state.kind + '\"');\n        }\n        for(typeIndex = 0, typeQuantity = state.implicitTypes.length; typeIndex < typeQuantity; typeIndex += 1){\n            type = state.implicitTypes[typeIndex];\n            if (type.resolve(state.result)) {\n                state.result = type.construct(state.result);\n                state.tag = type.tag;\n                if (state.anchor !== null) {\n                    state.anchorMap[state.anchor] = state.result;\n                }\n                break;\n            }\n        }\n    } else if (state.tag !== \"!\") {\n        if (_hasOwnProperty$1.call(state.typeMap[state.kind || \"fallback\"], state.tag)) {\n            type = state.typeMap[state.kind || \"fallback\"][state.tag];\n        } else {\n            type = null;\n            typeList = state.typeMap.multi[state.kind || \"fallback\"];\n            for(typeIndex = 0, typeQuantity = typeList.length; typeIndex < typeQuantity; typeIndex += 1){\n                if (state.tag.slice(0, typeList[typeIndex].tag.length) === typeList[typeIndex].tag) {\n                    type = typeList[typeIndex];\n                    break;\n                }\n            }\n        }\n        if (!type) {\n            throwError(state, \"unknown tag !<\" + state.tag + \">\");\n        }\n        if (state.result !== null && type.kind !== state.kind) {\n            throwError(state, \"unacceptable node kind for !<\" + state.tag + '> tag; it should be \"' + type.kind + '\", not \"' + state.kind + '\"');\n        }\n        if (!type.resolve(state.result, state.tag)) {\n            throwError(state, \"cannot resolve a node with !<\" + state.tag + \"> explicit tag\");\n        } else {\n            state.result = type.construct(state.result, state.tag);\n            if (state.anchor !== null) {\n                state.anchorMap[state.anchor] = state.result;\n            }\n        }\n    }\n    if (state.listener !== null) {\n        state.listener(\"close\", state);\n    }\n    return state.tag !== null || state.anchor !== null || hasContent;\n}\nfunction readDocument(state) {\n    var documentStart = state.position, _position, directiveName, directiveArgs, hasDirectives = false, ch;\n    state.version = null;\n    state.checkLineBreaks = state.legacy;\n    state.tagMap = Object.create(null);\n    state.anchorMap = Object.create(null);\n    while((ch = state.input.charCodeAt(state.position)) !== 0){\n        skipSeparationSpace(state, true, -1);\n        ch = state.input.charCodeAt(state.position);\n        if (state.lineIndent > 0 || ch !== 0x25) {\n            break;\n        }\n        hasDirectives = true;\n        ch = state.input.charCodeAt(++state.position);\n        _position = state.position;\n        while(ch !== 0 && !is_WS_OR_EOL(ch)){\n            ch = state.input.charCodeAt(++state.position);\n        }\n        directiveName = state.input.slice(_position, state.position);\n        directiveArgs = [];\n        if (directiveName.length < 1) {\n            throwError(state, \"directive name must not be less than one character in length\");\n        }\n        while(ch !== 0){\n            while(is_WHITE_SPACE(ch)){\n                ch = state.input.charCodeAt(++state.position);\n            }\n            if (ch === 0x23) {\n                do {\n                    ch = state.input.charCodeAt(++state.position);\n                }while (ch !== 0 && !is_EOL(ch));\n                break;\n            }\n            if (is_EOL(ch)) break;\n            _position = state.position;\n            while(ch !== 0 && !is_WS_OR_EOL(ch)){\n                ch = state.input.charCodeAt(++state.position);\n            }\n            directiveArgs.push(state.input.slice(_position, state.position));\n        }\n        if (ch !== 0) readLineBreak(state);\n        if (_hasOwnProperty$1.call(directiveHandlers, directiveName)) {\n            directiveHandlers[directiveName](state, directiveName, directiveArgs);\n        } else {\n            throwWarning(state, 'unknown document directive \"' + directiveName + '\"');\n        }\n    }\n    skipSeparationSpace(state, true, -1);\n    if (state.lineIndent === 0 && state.input.charCodeAt(state.position) === 0x2D && state.input.charCodeAt(state.position + 1) === 0x2D && state.input.charCodeAt(state.position + 2) === 0x2D) {\n        state.position += 3;\n        skipSeparationSpace(state, true, -1);\n    } else if (hasDirectives) {\n        throwError(state, \"directives end mark is expected\");\n    }\n    composeNode(state, state.lineIndent - 1, CONTEXT_BLOCK_OUT, false, true);\n    skipSeparationSpace(state, true, -1);\n    if (state.checkLineBreaks && PATTERN_NON_ASCII_LINE_BREAKS.test(state.input.slice(documentStart, state.position))) {\n        throwWarning(state, \"non-ASCII line breaks are interpreted as content\");\n    }\n    state.documents.push(state.result);\n    if (state.position === state.lineStart && testDocumentSeparator(state)) {\n        if (state.input.charCodeAt(state.position) === 0x2E) {\n            state.position += 3;\n            skipSeparationSpace(state, true, -1);\n        }\n        return;\n    }\n    if (state.position < state.length - 1) {\n        throwError(state, \"end of the stream or a document separator is expected\");\n    } else {\n        return;\n    }\n}\nfunction loadDocuments(input, options) {\n    input = String(input);\n    options = options || {};\n    if (input.length !== 0) {\n        if (input.charCodeAt(input.length - 1) !== 0x0A && input.charCodeAt(input.length - 1) !== 0x0D) {\n            input += \"\\n\";\n        }\n        if (input.charCodeAt(0) === 0xFEFF) {\n            input = input.slice(1);\n        }\n    }\n    var state = new State$1(input, options);\n    var nullpos = input.indexOf(\"\\x00\");\n    if (nullpos !== -1) {\n        state.position = nullpos;\n        throwError(state, \"null byte is not allowed in input\");\n    }\n    state.input += \"\\x00\";\n    while(state.input.charCodeAt(state.position) === 0x20){\n        state.lineIndent += 1;\n        state.position += 1;\n    }\n    while(state.position < state.length - 1){\n        readDocument(state);\n    }\n    return state.documents;\n}\nfunction loadAll$1(input, iterator, options) {\n    if (iterator !== null && _typeof(iterator) === \"object\" && typeof options === \"undefined\") {\n        options = iterator;\n        iterator = null;\n    }\n    var documents = loadDocuments(input, options);\n    if (typeof iterator !== \"function\") {\n        return documents;\n    }\n    for(var index = 0, length = documents.length; index < length; index += 1){\n        iterator(documents[index]);\n    }\n}\nfunction load$1(input, options) {\n    var documents = loadDocuments(input, options);\n    if (documents.length === 0) {\n        return undefined;\n    } else if (documents.length === 1) {\n        return documents[0];\n    }\n    throw new exception(\"expected a single document in the stream, but found more\");\n}\nvar loadAll_1 = loadAll$1;\nvar load_1 = load$1;\nvar loader = {\n    loadAll: loadAll_1,\n    load: load_1\n};\nvar _toString = Object.prototype.toString;\nvar _hasOwnProperty = Object.prototype.hasOwnProperty;\nvar CHAR_BOM = 0xFEFF;\nvar CHAR_TAB = 0x09;\nvar CHAR_LINE_FEED = 0x0A;\nvar CHAR_CARRIAGE_RETURN = 0x0D;\nvar CHAR_SPACE = 0x20;\nvar CHAR_EXCLAMATION = 0x21;\nvar CHAR_DOUBLE_QUOTE = 0x22;\nvar CHAR_SHARP = 0x23;\nvar CHAR_PERCENT = 0x25;\nvar CHAR_AMPERSAND = 0x26;\nvar CHAR_SINGLE_QUOTE = 0x27;\nvar CHAR_ASTERISK = 0x2A;\nvar CHAR_COMMA = 0x2C;\nvar CHAR_MINUS = 0x2D;\nvar CHAR_COLON = 0x3A;\nvar CHAR_EQUALS = 0x3D;\nvar CHAR_GREATER_THAN = 0x3E;\nvar CHAR_QUESTION = 0x3F;\nvar CHAR_COMMERCIAL_AT = 0x40;\nvar CHAR_LEFT_SQUARE_BRACKET = 0x5B;\nvar CHAR_RIGHT_SQUARE_BRACKET = 0x5D;\nvar CHAR_GRAVE_ACCENT = 0x60;\nvar CHAR_LEFT_CURLY_BRACKET = 0x7B;\nvar CHAR_VERTICAL_LINE = 0x7C;\nvar CHAR_RIGHT_CURLY_BRACKET = 0x7D;\nvar ESCAPE_SEQUENCES = {};\nESCAPE_SEQUENCES[0x00] = \"\\\\0\";\nESCAPE_SEQUENCES[0x07] = \"\\\\a\";\nESCAPE_SEQUENCES[0x08] = \"\\\\b\";\nESCAPE_SEQUENCES[0x09] = \"\\\\t\";\nESCAPE_SEQUENCES[0x0A] = \"\\\\n\";\nESCAPE_SEQUENCES[0x0B] = \"\\\\v\";\nESCAPE_SEQUENCES[0x0C] = \"\\\\f\";\nESCAPE_SEQUENCES[0x0D] = \"\\\\r\";\nESCAPE_SEQUENCES[0x1B] = \"\\\\e\";\nESCAPE_SEQUENCES[0x22] = '\\\\\"';\nESCAPE_SEQUENCES[0x5C] = \"\\\\\\\\\";\nESCAPE_SEQUENCES[0x85] = \"\\\\N\";\nESCAPE_SEQUENCES[0xA0] = \"\\\\_\";\nESCAPE_SEQUENCES[0x2028] = \"\\\\L\";\nESCAPE_SEQUENCES[0x2029] = \"\\\\P\";\nvar DEPRECATED_BOOLEANS_SYNTAX = [\n    \"y\",\n    \"Y\",\n    \"yes\",\n    \"Yes\",\n    \"YES\",\n    \"on\",\n    \"On\",\n    \"ON\",\n    \"n\",\n    \"N\",\n    \"no\",\n    \"No\",\n    \"NO\",\n    \"off\",\n    \"Off\",\n    \"OFF\"\n];\nvar DEPRECATED_BASE60_SYNTAX = /^[-+]?[0-9_]+(?::[0-9_]+)+(?:\\.[0-9_]*)?$/;\nfunction compileStyleMap(schema, map) {\n    var result, keys, index, length, tag, style, type;\n    if (map === null) return {};\n    result = {};\n    keys = Object.keys(map);\n    for(index = 0, length = keys.length; index < length; index += 1){\n        tag = keys[index];\n        style = String(map[tag]);\n        if (tag.slice(0, 2) === \"!!\") {\n            tag = \"tag:yaml.org,2002:\" + tag.slice(2);\n        }\n        type = schema.compiledTypeMap[\"fallback\"][tag];\n        if (type && _hasOwnProperty.call(type.styleAliases, style)) {\n            style = type.styleAliases[style];\n        }\n        result[tag] = style;\n    }\n    return result;\n}\nfunction encodeHex(character) {\n    var string, handle, length;\n    string = character.toString(16).toUpperCase();\n    if (character <= 0xFF) {\n        handle = \"x\";\n        length = 2;\n    } else if (character <= 0xFFFF) {\n        handle = \"u\";\n        length = 4;\n    } else if (character <= 0xFFFFFFFF) {\n        handle = \"U\";\n        length = 8;\n    } else {\n        throw new exception(\"code point within a string may not be greater than 0xFFFFFFFF\");\n    }\n    return \"\\\\\" + handle + common.repeat(\"0\", length - string.length) + string;\n}\nvar QUOTING_TYPE_SINGLE = 1, QUOTING_TYPE_DOUBLE = 2;\nfunction State(options) {\n    this.schema = options[\"schema\"] || _default;\n    this.indent = Math.max(1, options[\"indent\"] || 2);\n    this.noArrayIndent = options[\"noArrayIndent\"] || false;\n    this.skipInvalid = options[\"skipInvalid\"] || false;\n    this.flowLevel = common.isNothing(options[\"flowLevel\"]) ? -1 : options[\"flowLevel\"];\n    this.styleMap = compileStyleMap(this.schema, options[\"styles\"] || null);\n    this.sortKeys = options[\"sortKeys\"] || false;\n    this.lineWidth = options[\"lineWidth\"] || 80;\n    this.noRefs = options[\"noRefs\"] || false;\n    this.noCompatMode = options[\"noCompatMode\"] || false;\n    this.condenseFlow = options[\"condenseFlow\"] || false;\n    this.quotingType = options[\"quotingType\"] === '\"' ? QUOTING_TYPE_DOUBLE : QUOTING_TYPE_SINGLE;\n    this.forceQuotes = options[\"forceQuotes\"] || false;\n    this.replacer = typeof options[\"replacer\"] === \"function\" ? options[\"replacer\"] : null;\n    this.implicitTypes = this.schema.compiledImplicit;\n    this.explicitTypes = this.schema.compiledExplicit;\n    this.tag = null;\n    this.result = \"\";\n    this.duplicates = [];\n    this.usedDuplicates = null;\n}\nfunction indentString(string, spaces) {\n    var ind = common.repeat(\" \", spaces), position = 0, next = -1, result = \"\", line, length = string.length;\n    while(position < length){\n        next = string.indexOf(\"\\n\", position);\n        if (next === -1) {\n            line = string.slice(position);\n            position = length;\n        } else {\n            line = string.slice(position, next + 1);\n            position = next + 1;\n        }\n        if (line.length && line !== \"\\n\") result += ind;\n        result += line;\n    }\n    return result;\n}\nfunction generateNextLine(state, level) {\n    return \"\\n\" + common.repeat(\" \", state.indent * level);\n}\nfunction testImplicitResolving(state, str) {\n    var index, length, type;\n    for(index = 0, length = state.implicitTypes.length; index < length; index += 1){\n        type = state.implicitTypes[index];\n        if (type.resolve(str)) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction isWhitespace(c) {\n    return c === CHAR_SPACE || c === CHAR_TAB;\n}\nfunction isPrintable(c) {\n    return 0x00020 <= c && c <= 0x00007E || 0x000A1 <= c && c <= 0x00D7FF && c !== 0x2028 && c !== 0x2029 || 0x0E000 <= c && c <= 0x00FFFD && c !== CHAR_BOM || 0x10000 <= c && c <= 0x10FFFF;\n}\nfunction isNsCharOrWhitespace(c) {\n    return isPrintable(c) && c !== CHAR_BOM && c !== CHAR_CARRIAGE_RETURN && c !== CHAR_LINE_FEED;\n}\nfunction isPlainSafe(c, prev, inblock) {\n    var cIsNsCharOrWhitespace = isNsCharOrWhitespace(c);\n    var cIsNsChar = cIsNsCharOrWhitespace && !isWhitespace(c);\n    return (inblock ? cIsNsCharOrWhitespace : cIsNsCharOrWhitespace && c !== CHAR_COMMA && c !== CHAR_LEFT_SQUARE_BRACKET && c !== CHAR_RIGHT_SQUARE_BRACKET && c !== CHAR_LEFT_CURLY_BRACKET && c !== CHAR_RIGHT_CURLY_BRACKET) && c !== CHAR_SHARP && !(prev === CHAR_COLON && !cIsNsChar) || isNsCharOrWhitespace(prev) && !isWhitespace(prev) && c === CHAR_SHARP || prev === CHAR_COLON && cIsNsChar;\n}\nfunction isPlainSafeFirst(c) {\n    return isPrintable(c) && c !== CHAR_BOM && !isWhitespace(c) && c !== CHAR_MINUS && c !== CHAR_QUESTION && c !== CHAR_COLON && c !== CHAR_COMMA && c !== CHAR_LEFT_SQUARE_BRACKET && c !== CHAR_RIGHT_SQUARE_BRACKET && c !== CHAR_LEFT_CURLY_BRACKET && c !== CHAR_RIGHT_CURLY_BRACKET && c !== CHAR_SHARP && c !== CHAR_AMPERSAND && c !== CHAR_ASTERISK && c !== CHAR_EXCLAMATION && c !== CHAR_VERTICAL_LINE && c !== CHAR_EQUALS && c !== CHAR_GREATER_THAN && c !== CHAR_SINGLE_QUOTE && c !== CHAR_DOUBLE_QUOTE && c !== CHAR_PERCENT && c !== CHAR_COMMERCIAL_AT && c !== CHAR_GRAVE_ACCENT;\n}\nfunction isPlainSafeLast(c) {\n    return !isWhitespace(c) && c !== CHAR_COLON;\n}\nfunction codePointAt(string, pos) {\n    var first = string.charCodeAt(pos), second;\n    if (first >= 0xD800 && first <= 0xDBFF && pos + 1 < string.length) {\n        second = string.charCodeAt(pos + 1);\n        if (second >= 0xDC00 && second <= 0xDFFF) {\n            return (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n        }\n    }\n    return first;\n}\nfunction needIndentIndicator(string) {\n    var leadingSpaceRe = /^\\n* /;\n    return leadingSpaceRe.test(string);\n}\nvar STYLE_PLAIN = 1, STYLE_SINGLE = 2, STYLE_LITERAL = 3, STYLE_FOLDED = 4, STYLE_DOUBLE = 5;\nfunction chooseScalarStyle(string, singleLineOnly, indentPerLevel, lineWidth, testAmbiguousType, quotingType, forceQuotes, inblock) {\n    var i;\n    var char = 0;\n    var prevChar = null;\n    var hasLineBreak = false;\n    var hasFoldableLine = false;\n    var shouldTrackWidth = lineWidth !== -1;\n    var previousLineBreak = -1;\n    var plain = isPlainSafeFirst(codePointAt(string, 0)) && isPlainSafeLast(codePointAt(string, string.length - 1));\n    if (singleLineOnly || forceQuotes) {\n        for(i = 0; i < string.length; char >= 0x10000 ? i += 2 : i++){\n            char = codePointAt(string, i);\n            if (!isPrintable(char)) {\n                return STYLE_DOUBLE;\n            }\n            plain = plain && isPlainSafe(char, prevChar, inblock);\n            prevChar = char;\n        }\n    } else {\n        for(i = 0; i < string.length; char >= 0x10000 ? i += 2 : i++){\n            char = codePointAt(string, i);\n            if (char === CHAR_LINE_FEED) {\n                hasLineBreak = true;\n                if (shouldTrackWidth) {\n                    hasFoldableLine = hasFoldableLine || i - previousLineBreak - 1 > lineWidth && string[previousLineBreak + 1] !== \" \";\n                    previousLineBreak = i;\n                }\n            } else if (!isPrintable(char)) {\n                return STYLE_DOUBLE;\n            }\n            plain = plain && isPlainSafe(char, prevChar, inblock);\n            prevChar = char;\n        }\n        hasFoldableLine = hasFoldableLine || shouldTrackWidth && i - previousLineBreak - 1 > lineWidth && string[previousLineBreak + 1] !== \" \";\n    }\n    if (!hasLineBreak && !hasFoldableLine) {\n        if (plain && !forceQuotes && !testAmbiguousType(string)) {\n            return STYLE_PLAIN;\n        }\n        return quotingType === QUOTING_TYPE_DOUBLE ? STYLE_DOUBLE : STYLE_SINGLE;\n    }\n    if (indentPerLevel > 9 && needIndentIndicator(string)) {\n        return STYLE_DOUBLE;\n    }\n    if (!forceQuotes) {\n        return hasFoldableLine ? STYLE_FOLDED : STYLE_LITERAL;\n    }\n    return quotingType === QUOTING_TYPE_DOUBLE ? STYLE_DOUBLE : STYLE_SINGLE;\n}\nfunction writeScalar(state, string, level, iskey, inblock) {\n    state.dump = function() {\n        if (string.length === 0) {\n            return state.quotingType === QUOTING_TYPE_DOUBLE ? '\"\"' : \"''\";\n        }\n        if (!state.noCompatMode) {\n            if (DEPRECATED_BOOLEANS_SYNTAX.indexOf(string) !== -1 || DEPRECATED_BASE60_SYNTAX.test(string)) {\n                return state.quotingType === QUOTING_TYPE_DOUBLE ? '\"' + string + '\"' : \"'\" + string + \"'\";\n            }\n        }\n        var indent = state.indent * Math.max(1, level);\n        var lineWidth = state.lineWidth === -1 ? -1 : Math.max(Math.min(state.lineWidth, 40), state.lineWidth - indent);\n        var singleLineOnly = iskey || state.flowLevel > -1 && level >= state.flowLevel;\n        function testAmbiguity(string) {\n            return testImplicitResolving(state, string);\n        }\n        switch(chooseScalarStyle(string, singleLineOnly, state.indent, lineWidth, testAmbiguity, state.quotingType, state.forceQuotes && !iskey, inblock)){\n            case STYLE_PLAIN:\n                return string;\n            case STYLE_SINGLE:\n                return \"'\" + string.replace(/'/g, \"''\") + \"'\";\n            case STYLE_LITERAL:\n                return \"|\" + blockHeader(string, state.indent) + dropEndingNewline(indentString(string, indent));\n            case STYLE_FOLDED:\n                return \">\" + blockHeader(string, state.indent) + dropEndingNewline(indentString(foldString(string, lineWidth), indent));\n            case STYLE_DOUBLE:\n                return '\"' + escapeString(string) + '\"';\n            default:\n                throw new exception(\"impossible error: invalid scalar style\");\n        }\n    }();\n}\nfunction blockHeader(string, indentPerLevel) {\n    var indentIndicator = needIndentIndicator(string) ? String(indentPerLevel) : \"\";\n    var clip = string[string.length - 1] === \"\\n\";\n    var keep = clip && (string[string.length - 2] === \"\\n\" || string === \"\\n\");\n    var chomp = keep ? \"+\" : clip ? \"\" : \"-\";\n    return indentIndicator + chomp + \"\\n\";\n}\nfunction dropEndingNewline(string) {\n    return string[string.length - 1] === \"\\n\" ? string.slice(0, -1) : string;\n}\nfunction foldString(string, width) {\n    var lineRe = /(\\n+)([^\\n]*)/g;\n    var result = function() {\n        var nextLF = string.indexOf(\"\\n\");\n        nextLF = nextLF !== -1 ? nextLF : string.length;\n        lineRe.lastIndex = nextLF;\n        return foldLine(string.slice(0, nextLF), width);\n    }();\n    var prevMoreIndented = string[0] === \"\\n\" || string[0] === \" \";\n    var moreIndented;\n    var match;\n    while(match = lineRe.exec(string)){\n        var prefix = match[1], line = match[2];\n        moreIndented = line[0] === \" \";\n        result += prefix + (!prevMoreIndented && !moreIndented && line !== \"\" ? \"\\n\" : \"\") + foldLine(line, width);\n        prevMoreIndented = moreIndented;\n    }\n    return result;\n}\nfunction foldLine(line, width) {\n    if (line === \"\" || line[0] === \" \") return line;\n    var breakRe = / [^ ]/g;\n    var match;\n    var start = 0, end, curr = 0, next = 0;\n    var result = \"\";\n    while(match = breakRe.exec(line)){\n        next = match.index;\n        if (next - start > width) {\n            end = curr > start ? curr : next;\n            result += \"\\n\" + line.slice(start, end);\n            start = end + 1;\n        }\n        curr = next;\n    }\n    result += \"\\n\";\n    if (line.length - start > width && curr > start) {\n        result += line.slice(start, curr) + \"\\n\" + line.slice(curr + 1);\n    } else {\n        result += line.slice(start);\n    }\n    return result.slice(1);\n}\nfunction escapeString(string) {\n    var result = \"\";\n    var char = 0;\n    var escapeSeq;\n    for(var i = 0; i < string.length; char >= 0x10000 ? i += 2 : i++){\n        char = codePointAt(string, i);\n        escapeSeq = ESCAPE_SEQUENCES[char];\n        if (!escapeSeq && isPrintable(char)) {\n            result += string[i];\n            if (char >= 0x10000) result += string[i + 1];\n        } else {\n            result += escapeSeq || encodeHex(char);\n        }\n    }\n    return result;\n}\nfunction writeFlowSequence(state, level, object) {\n    var _result = \"\", _tag = state.tag, index, length, value;\n    for(index = 0, length = object.length; index < length; index += 1){\n        value = object[index];\n        if (state.replacer) {\n            value = state.replacer.call(object, String(index), value);\n        }\n        if (writeNode(state, level, value, false, false) || typeof value === \"undefined\" && writeNode(state, level, null, false, false)) {\n            if (_result !== \"\") _result += \",\" + (!state.condenseFlow ? \" \" : \"\");\n            _result += state.dump;\n        }\n    }\n    state.tag = _tag;\n    state.dump = \"[\" + _result + \"]\";\n}\nfunction writeBlockSequence(state, level, object, compact) {\n    var _result = \"\", _tag = state.tag, index, length, value;\n    for(index = 0, length = object.length; index < length; index += 1){\n        value = object[index];\n        if (state.replacer) {\n            value = state.replacer.call(object, String(index), value);\n        }\n        if (writeNode(state, level + 1, value, true, true, false, true) || typeof value === \"undefined\" && writeNode(state, level + 1, null, true, true, false, true)) {\n            if (!compact || _result !== \"\") {\n                _result += generateNextLine(state, level);\n            }\n            if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {\n                _result += \"-\";\n            } else {\n                _result += \"- \";\n            }\n            _result += state.dump;\n        }\n    }\n    state.tag = _tag;\n    state.dump = _result || \"[]\";\n}\nfunction writeFlowMapping(state, level, object) {\n    var _result = \"\", _tag = state.tag, objectKeyList = Object.keys(object), index, length, objectKey, objectValue, pairBuffer;\n    for(index = 0, length = objectKeyList.length; index < length; index += 1){\n        pairBuffer = \"\";\n        if (_result !== \"\") pairBuffer += \", \";\n        if (state.condenseFlow) pairBuffer += '\"';\n        objectKey = objectKeyList[index];\n        objectValue = object[objectKey];\n        if (state.replacer) {\n            objectValue = state.replacer.call(object, objectKey, objectValue);\n        }\n        if (!writeNode(state, level, objectKey, false, false)) {\n            continue;\n        }\n        if (state.dump.length > 1024) pairBuffer += \"? \";\n        pairBuffer += state.dump + (state.condenseFlow ? '\"' : \"\") + \":\" + (state.condenseFlow ? \"\" : \" \");\n        if (!writeNode(state, level, objectValue, false, false)) {\n            continue;\n        }\n        pairBuffer += state.dump;\n        _result += pairBuffer;\n    }\n    state.tag = _tag;\n    state.dump = \"{\" + _result + \"}\";\n}\nfunction writeBlockMapping(state, level, object, compact) {\n    var _result = \"\", _tag = state.tag, objectKeyList = Object.keys(object), index, length, objectKey, objectValue, explicitPair, pairBuffer;\n    if (state.sortKeys === true) {\n        objectKeyList.sort();\n    } else if (typeof state.sortKeys === \"function\") {\n        objectKeyList.sort(state.sortKeys);\n    } else if (state.sortKeys) {\n        throw new exception(\"sortKeys must be a boolean or a function\");\n    }\n    for(index = 0, length = objectKeyList.length; index < length; index += 1){\n        pairBuffer = \"\";\n        if (!compact || _result !== \"\") {\n            pairBuffer += generateNextLine(state, level);\n        }\n        objectKey = objectKeyList[index];\n        objectValue = object[objectKey];\n        if (state.replacer) {\n            objectValue = state.replacer.call(object, objectKey, objectValue);\n        }\n        if (!writeNode(state, level + 1, objectKey, true, true, true)) {\n            continue;\n        }\n        explicitPair = state.tag !== null && state.tag !== \"?\" || state.dump && state.dump.length > 1024;\n        if (explicitPair) {\n            if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {\n                pairBuffer += \"?\";\n            } else {\n                pairBuffer += \"? \";\n            }\n        }\n        pairBuffer += state.dump;\n        if (explicitPair) {\n            pairBuffer += generateNextLine(state, level);\n        }\n        if (!writeNode(state, level + 1, objectValue, true, explicitPair)) {\n            continue;\n        }\n        if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {\n            pairBuffer += \":\";\n        } else {\n            pairBuffer += \": \";\n        }\n        pairBuffer += state.dump;\n        _result += pairBuffer;\n    }\n    state.tag = _tag;\n    state.dump = _result || \"{}\";\n}\nfunction detectType(state, object, explicit) {\n    var _result, typeList, index, length, type, style;\n    typeList = explicit ? state.explicitTypes : state.implicitTypes;\n    for(index = 0, length = typeList.length; index < length; index += 1){\n        type = typeList[index];\n        if ((type.instanceOf || type.predicate) && (!type.instanceOf || _typeof(object) === \"object\" && object instanceof type.instanceOf) && (!type.predicate || type.predicate(object))) {\n            if (explicit) {\n                if (type.multi && type.representName) {\n                    state.tag = type.representName(object);\n                } else {\n                    state.tag = type.tag;\n                }\n            } else {\n                state.tag = \"?\";\n            }\n            if (type.represent) {\n                style = state.styleMap[type.tag] || type.defaultStyle;\n                if (_toString.call(type.represent) === \"[object Function]\") {\n                    _result = type.represent(object, style);\n                } else if (_hasOwnProperty.call(type.represent, style)) {\n                    _result = type.represent[style](object, style);\n                } else {\n                    throw new exception(\"!<\" + type.tag + '> tag resolver accepts not \"' + style + '\" style');\n                }\n                state.dump = _result;\n            }\n            return true;\n        }\n    }\n    return false;\n}\nfunction writeNode(state, level, object, block, compact, iskey, isblockseq) {\n    state.tag = null;\n    state.dump = object;\n    if (!detectType(state, object, false)) {\n        detectType(state, object, true);\n    }\n    var type = _toString.call(state.dump);\n    var inblock = block;\n    var tagStr;\n    if (block) {\n        block = state.flowLevel < 0 || state.flowLevel > level;\n    }\n    var objectOrArray = type === \"[object Object]\" || type === \"[object Array]\", duplicateIndex, duplicate;\n    if (objectOrArray) {\n        duplicateIndex = state.duplicates.indexOf(object);\n        duplicate = duplicateIndex !== -1;\n    }\n    if (state.tag !== null && state.tag !== \"?\" || duplicate || state.indent !== 2 && level > 0) {\n        compact = false;\n    }\n    if (duplicate && state.usedDuplicates[duplicateIndex]) {\n        state.dump = \"*ref_\" + duplicateIndex;\n    } else {\n        if (objectOrArray && duplicate && !state.usedDuplicates[duplicateIndex]) {\n            state.usedDuplicates[duplicateIndex] = true;\n        }\n        if (type === \"[object Object]\") {\n            if (block && Object.keys(state.dump).length !== 0) {\n                writeBlockMapping(state, level, state.dump, compact);\n                if (duplicate) {\n                    state.dump = \"&ref_\" + duplicateIndex + state.dump;\n                }\n            } else {\n                writeFlowMapping(state, level, state.dump);\n                if (duplicate) {\n                    state.dump = \"&ref_\" + duplicateIndex + \" \" + state.dump;\n                }\n            }\n        } else if (type === \"[object Array]\") {\n            if (block && state.dump.length !== 0) {\n                if (state.noArrayIndent && !isblockseq && level > 0) {\n                    writeBlockSequence(state, level - 1, state.dump, compact);\n                } else {\n                    writeBlockSequence(state, level, state.dump, compact);\n                }\n                if (duplicate) {\n                    state.dump = \"&ref_\" + duplicateIndex + state.dump;\n                }\n            } else {\n                writeFlowSequence(state, level, state.dump);\n                if (duplicate) {\n                    state.dump = \"&ref_\" + duplicateIndex + \" \" + state.dump;\n                }\n            }\n        } else if (type === \"[object String]\") {\n            if (state.tag !== \"?\") {\n                writeScalar(state, state.dump, level, iskey, inblock);\n            }\n        } else if (type === \"[object Undefined]\") {\n            return false;\n        } else {\n            if (state.skipInvalid) return false;\n            throw new exception(\"unacceptable kind of an object to dump \" + type);\n        }\n        if (state.tag !== null && state.tag !== \"?\") {\n            tagStr = encodeURI(state.tag[0] === \"!\" ? state.tag.slice(1) : state.tag).replace(/!/g, \"%21\");\n            if (state.tag[0] === \"!\") {\n                tagStr = \"!\" + tagStr;\n            } else if (tagStr.slice(0, 18) === \"tag:yaml.org,2002:\") {\n                tagStr = \"!!\" + tagStr.slice(18);\n            } else {\n                tagStr = \"!<\" + tagStr + \">\";\n            }\n            state.dump = tagStr + \" \" + state.dump;\n        }\n    }\n    return true;\n}\nfunction getDuplicateReferences(object, state) {\n    var objects = [], duplicatesIndexes = [], index, length;\n    inspectNode(object, objects, duplicatesIndexes);\n    for(index = 0, length = duplicatesIndexes.length; index < length; index += 1){\n        state.duplicates.push(objects[duplicatesIndexes[index]]);\n    }\n    state.usedDuplicates = new Array(length);\n}\nfunction inspectNode(object, objects, duplicatesIndexes) {\n    var objectKeyList, index, length;\n    if (object !== null && _typeof(object) === \"object\") {\n        index = objects.indexOf(object);\n        if (index !== -1) {\n            if (duplicatesIndexes.indexOf(index) === -1) {\n                duplicatesIndexes.push(index);\n            }\n        } else {\n            objects.push(object);\n            if (Array.isArray(object)) {\n                for(index = 0, length = object.length; index < length; index += 1){\n                    inspectNode(object[index], objects, duplicatesIndexes);\n                }\n            } else {\n                objectKeyList = Object.keys(object);\n                for(index = 0, length = objectKeyList.length; index < length; index += 1){\n                    inspectNode(object[objectKeyList[index]], objects, duplicatesIndexes);\n                }\n            }\n        }\n    }\n}\nfunction dump$1(input, options) {\n    options = options || {};\n    var state = new State(options);\n    if (!state.noRefs) getDuplicateReferences(input, state);\n    var value = input;\n    if (state.replacer) {\n        value = state.replacer.call({\n            \"\": value\n        }, \"\", value);\n    }\n    if (writeNode(state, 0, value, true, true)) return state.dump + \"\\n\";\n    return \"\";\n}\nvar dump_1 = dump$1;\nvar dumper = {\n    dump: dump_1\n};\nfunction renamed(from, to) {\n    return function() {\n        throw new Error(\"Function yaml.\" + from + \" is removed in js-yaml 4. \" + \"Use yaml.\" + to + \" instead, which is now safe by default.\");\n    };\n}\nvar Type = type;\nvar Schema = schema;\nvar FAILSAFE_SCHEMA = failsafe;\nvar JSON_SCHEMA = json;\nvar CORE_SCHEMA = core;\nvar DEFAULT_SCHEMA = _default;\nvar load = loader.load;\nvar loadAll = loader.loadAll;\nvar dump = dumper.dump;\nvar YAMLException = exception;\nvar types = {\n    binary: binary,\n    float: float,\n    map: map,\n    null: _null,\n    pairs: pairs,\n    set: set,\n    timestamp: timestamp,\n    bool: bool,\n    int: int,\n    merge: merge,\n    omap: omap,\n    seq: seq,\n    str: str\n};\nvar safeLoad = renamed(\"safeLoad\", \"load\");\nvar safeLoadAll = renamed(\"safeLoadAll\", \"loadAll\");\nvar safeDump = renamed(\"safeDump\", \"dump\");\nvar jsYaml = {\n    Type: Type,\n    Schema: Schema,\n    FAILSAFE_SCHEMA: FAILSAFE_SCHEMA,\n    JSON_SCHEMA: JSON_SCHEMA,\n    CORE_SCHEMA: CORE_SCHEMA,\n    DEFAULT_SCHEMA: DEFAULT_SCHEMA,\n    load: load,\n    loadAll: loadAll,\n    dump: dump,\n    YAMLException: YAMLException,\n    types: types,\n    safeLoad: safeLoad,\n    safeLoadAll: safeLoadAll,\n    safeDump: safeDump\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (jsYaml);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/i18next-fs-backend/esm/formats/yaml.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/i18next-fs-backend/esm/index.js":
/*!******************************************************!*\
  !*** ./node_modules/i18next-fs-backend/esm/index.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(rsc)/./node_modules/i18next-fs-backend/esm/utils.js\");\n/* harmony import */ var _readFile_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./readFile.js */ \"(rsc)/./node_modules/i18next-fs-backend/esm/readFile.js\");\n/* harmony import */ var _writeFile_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./writeFile.js */ \"(rsc)/./node_modules/i18next-fs-backend/esm/writeFile.js\");\nfunction _typeof(o) {\n    \"@babel/helpers - typeof\";\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(o) {\n        return typeof o;\n    } : function(o) {\n        return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n    }, _typeof(o);\n}\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);\n    }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    Object.defineProperty(Constructor, \"prototype\", {\n        writable: false\n    });\n    return Constructor;\n}\nfunction _toPropertyKey(arg) {\n    var key = _toPrimitive(arg, \"string\");\n    return _typeof(key) === \"symbol\" ? key : String(key);\n}\nfunction _toPrimitive(input, hint) {\n    if (_typeof(input) !== \"object\" || input === null) return input;\n    var prim = input[Symbol.toPrimitive];\n    if (prim !== undefined) {\n        var res = prim.call(input, hint || \"default\");\n        if (_typeof(res) !== \"object\") return res;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (hint === \"string\" ? String : Number)(input);\n}\n\n\n\nvar getDefaults = function getDefaults() {\n    return {\n        loadPath: \"/locales/{{lng}}/{{ns}}.json\",\n        addPath: \"/locales/{{lng}}/{{ns}}.missing.json\",\n        ident: 2,\n        parse: JSON.parse,\n        stringify: JSON.stringify\n    };\n};\nvar Backend = function() {\n    function Backend(services) {\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        var allOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        _classCallCheck(this, Backend);\n        this.services = services;\n        this.options = options;\n        this.allOptions = allOptions;\n        this.type = \"backend\";\n        this.init(services, options, allOptions);\n    }\n    _createClass(Backend, [\n        {\n            key: \"init\",\n            value: function init(services) {\n                var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n                var allOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n                this.services = services;\n                this.options = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.defaults)(options, this.options || {}, getDefaults());\n                this.allOptions = allOptions;\n                this.queuedWrites = {};\n                this.debouncedWrite = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.debounce)(this.write, 250);\n            }\n        },\n        {\n            key: \"read\",\n            value: function read(language, namespace, callback) {\n                var _this = this;\n                var loadPath = this.options.loadPath;\n                if (typeof this.options.loadPath === \"function\") {\n                    loadPath = this.options.loadPath(language, namespace);\n                }\n                var filename = this.services.interpolator.interpolate(loadPath, {\n                    lng: language,\n                    ns: namespace\n                });\n                if (this.allOptions.initImmediate === false) {\n                    try {\n                        var _readFileSync = (0,_readFile_js__WEBPACK_IMPORTED_MODULE_1__.readFileSync)(filename, this.options), data = _readFileSync.data, stat = _readFileSync.stat;\n                        var timestamp = stat && stat.mtime && stat.mtime.getTime();\n                        if (this.options.expirationTime && timestamp && timestamp + this.options.expirationTime < Date.now()) {\n                            this.removeFile(language, namespace);\n                            return callback(new Error(\"File expired!\"), false);\n                        }\n                        callback(null, data, timestamp);\n                    } catch (err) {\n                        callback(err, false);\n                    }\n                    return;\n                }\n                (0,_readFile_js__WEBPACK_IMPORTED_MODULE_1__.readFile)(filename, this.options).then(function(_ref) {\n                    var data = _ref.data, stat = _ref.stat;\n                    var timestamp = stat && stat.mtime && stat.mtime.getTime();\n                    if (_this.options.expirationTime && timestamp && timestamp + _this.options.expirationTime < Date.now()) {\n                        _this.removeFile(language, namespace);\n                        return callback(new Error(\"File expired!\"), false);\n                    }\n                    callback(null, data, timestamp);\n                }).catch(function(err) {\n                    return callback(err, false);\n                });\n            }\n        },\n        {\n            key: \"create\",\n            value: function create(languages, namespace, key, fallbackValue, callback) {\n                var _this2 = this;\n                if (typeof callback !== \"function\") callback = function callback() {};\n                if (typeof languages === \"string\") languages = [\n                    languages\n                ];\n                var todo = languages.length;\n                var done = function done() {\n                    if (!--todo) callback();\n                };\n                languages.forEach(function(lng) {\n                    _this2.queue.call(_this2, lng, namespace, key, fallbackValue, done);\n                });\n            }\n        },\n        {\n            key: \"save\",\n            value: function save(language, namespace, data, callback) {\n                var _this3 = this;\n                if (!callback) callback = function callback() {};\n                var keys = Object.keys(data);\n                var todo = keys.length;\n                var done = function done() {\n                    if (!--todo) callback();\n                };\n                keys.forEach(function(key) {\n                    _this3.queue.call(_this3, language, namespace, key, data[key], done);\n                });\n            }\n        },\n        {\n            key: \"removeFile\",\n            value: function removeFile(language, namespace) {\n                var addPath = this.options.addPath;\n                if (typeof this.options.addPath === \"function\") {\n                    addPath = this.options.addPath(language, namespace);\n                }\n                var filename = this.services.interpolator.interpolate(addPath, {\n                    lng: language,\n                    ns: namespace\n                });\n                (0,_writeFile_js__WEBPACK_IMPORTED_MODULE_2__.removeFile)(filename, this.options).then(function() {}).catch(function() {});\n            }\n        },\n        {\n            key: \"write\",\n            value: function write() {\n                for(var lng in this.queuedWrites){\n                    var namespaces = this.queuedWrites[lng];\n                    if (lng !== \"locks\") {\n                        for(var ns in namespaces){\n                            this.writeFile(lng, ns);\n                        }\n                    }\n                }\n            }\n        },\n        {\n            key: \"writeFile\",\n            value: function writeFile(lng, namespace) {\n                var _this4 = this;\n                var lock = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.getPath)(this.queuedWrites, [\n                    \"locks\",\n                    lng,\n                    namespace\n                ]);\n                if (lock) return;\n                var addPath = this.options.addPath;\n                if (typeof this.options.addPath === \"function\") {\n                    addPath = this.options.addPath(lng, namespace);\n                }\n                var filename = this.services.interpolator.interpolate(addPath, {\n                    lng: lng,\n                    ns: namespace\n                });\n                var missings = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.getPath)(this.queuedWrites, [\n                    lng,\n                    namespace\n                ]);\n                (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.setPath)(this.queuedWrites, [\n                    lng,\n                    namespace\n                ], []);\n                if (missings.length) {\n                    (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.setPath)(this.queuedWrites, [\n                        \"locks\",\n                        lng,\n                        namespace\n                    ], true);\n                    var proceed = function proceed(_ref2) {\n                        var data = _ref2.data;\n                        missings.forEach(function(missing) {\n                            var path = _this4.allOptions.keySeparator === false ? [\n                                missing.key\n                            ] : missing.key.split(_this4.allOptions.keySeparator || \".\");\n                            try {\n                                (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.setPath)(data, path, missing.fallbackValue);\n                            } catch (e) {\n                                if (path.length < 2 || !e.message || e.message.indexOf(\"Cannot create property\") < 0) throw e;\n                                (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.setPath)(data, [\n                                    missing.key\n                                ], missing.fallbackValue);\n                            }\n                        });\n                        var proceedWrite = function proceedWrite() {\n                            (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.setPath)(_this4.queuedWrites, [\n                                \"locks\",\n                                lng,\n                                namespace\n                            ], false);\n                            missings.forEach(function(missing) {\n                                if (missing.callback) missing.callback();\n                            });\n                            _this4.debouncedWrite();\n                        };\n                        (0,_writeFile_js__WEBPACK_IMPORTED_MODULE_2__.writeFile)(filename, data, _this4.options).then(proceedWrite).catch(proceedWrite);\n                    };\n                    (0,_readFile_js__WEBPACK_IMPORTED_MODULE_1__.readFile)(filename, this.options).then(proceed).catch(function() {\n                        return proceed({\n                            data: {}\n                        });\n                    });\n                }\n            }\n        },\n        {\n            key: \"queue\",\n            value: function queue(lng, namespace, key, fallbackValue, callback) {\n                (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.pushPath)(this.queuedWrites, [\n                    lng,\n                    namespace\n                ], {\n                    key: key,\n                    fallbackValue: fallbackValue || \"\",\n                    callback: callback\n                });\n                this.debouncedWrite();\n            }\n        }\n    ]);\n    return Backend;\n}();\nBackend.type = \"backend\";\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Backend);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/i18next-fs-backend/esm/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/i18next-fs-backend/esm/readFile.js":
/*!*********************************************************!*\
  !*** ./node_modules/i18next-fs-backend/esm/readFile.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("var _fs_cjs__WEBPACK_IMPORTED_MODULE_2___namespace_cache;\nvar _path_cjs__WEBPACK_IMPORTED_MODULE_3___namespace_cache;\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   readFile: () => (/* binding */ readFile),\n/* harmony export */   readFileSync: () => (/* binding */ readFileSync)\n/* harmony export */ });\n/* harmony import */ var _formats_json5_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./formats/json5.js */ \"(rsc)/./node_modules/i18next-fs-backend/esm/formats/json5.js\");\n/* harmony import */ var _formats_yaml_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./formats/yaml.js */ \"(rsc)/./node_modules/i18next-fs-backend/esm/formats/yaml.js\");\n/* harmony import */ var _fs_cjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./fs.cjs */ \"(rsc)/./node_modules/i18next-fs-backend/esm/fs.cjs\");\n/* harmony import */ var _path_cjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./path.cjs */ \"(rsc)/./node_modules/i18next-fs-backend/esm/path.cjs\");\n/* harmony import */ var _extname_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./extname.js */ \"(rsc)/./node_modules/i18next-fs-backend/esm/extname.js\");\n\n\n\n\n\nvar isDeno = typeof Deno !== \"undefined\";\nvar isBun = typeof Bun !== \"undefined\";\nvar YAML = typeof _formats_yaml_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"] !== \"undefined\" && _formats_yaml_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].load ? _formats_yaml_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"] : undefined;\nvar fs = /*#__PURE__*/ (_fs_cjs__WEBPACK_IMPORTED_MODULE_2___namespace_cache || (_fs_cjs__WEBPACK_IMPORTED_MODULE_2___namespace_cache = __webpack_require__.t(_fs_cjs__WEBPACK_IMPORTED_MODULE_2__, 2))) ? _fs_cjs__WEBPACK_IMPORTED_MODULE_2__ || /*#__PURE__*/ (_fs_cjs__WEBPACK_IMPORTED_MODULE_2___namespace_cache || (_fs_cjs__WEBPACK_IMPORTED_MODULE_2___namespace_cache = __webpack_require__.t(_fs_cjs__WEBPACK_IMPORTED_MODULE_2__, 2))) : undefined;\nvar path = /*#__PURE__*/ (_path_cjs__WEBPACK_IMPORTED_MODULE_3___namespace_cache || (_path_cjs__WEBPACK_IMPORTED_MODULE_3___namespace_cache = __webpack_require__.t(_path_cjs__WEBPACK_IMPORTED_MODULE_3__, 2))) ? _path_cjs__WEBPACK_IMPORTED_MODULE_3__ || /*#__PURE__*/ (_path_cjs__WEBPACK_IMPORTED_MODULE_3___namespace_cache || (_path_cjs__WEBPACK_IMPORTED_MODULE_3___namespace_cache = __webpack_require__.t(_path_cjs__WEBPACK_IMPORTED_MODULE_3__, 2))) : undefined;\nvar evalAlias = eval;\nvar readFileInNodeSync = function readFileInNodeSync(filename) {\n    var data = fs.readFileSync(filename, \"utf8\");\n    var stat;\n    try {\n        stat = fs.statSync(filename);\n    } catch (e) {}\n    return {\n        data: data,\n        stat: stat\n    };\n};\nvar readFileInNode = function readFileInNode(filename) {\n    return new Promise(function(resolve, reject) {\n        fs.readFile(filename, \"utf8\", function(err, data) {\n            if (err) return reject(err);\n            fs.stat(filename, function(err, stat) {\n                if (err) return resolve({\n                    data: data\n                });\n                return resolve({\n                    data: data,\n                    stat: stat\n                });\n            });\n        });\n    });\n};\nvar readFileInDenoSync = function readFileInDenoSync(filename) {\n    var decoder = new TextDecoder(\"utf-8\");\n    var d = Deno.readFileSync(filename);\n    var data = decoder.decode(d);\n    var stat;\n    try {\n        stat = Deno.statSync(filename);\n    } catch (e) {}\n    return {\n        data: data,\n        stat: stat\n    };\n};\nvar readFileInDeno = function readFileInDeno(filename) {\n    return new Promise(function(resolve, reject) {\n        var decoder = new TextDecoder(\"utf-8\");\n        Deno.readFile(filename).then(function(d) {\n            var data = decoder.decode(d);\n            Deno.stat(filename).then(function(stat) {\n                return resolve({\n                    data: data,\n                    stat: stat\n                });\n            }).catch(function() {\n                return resolve({\n                    data: data\n                });\n            });\n        }).catch(reject);\n    });\n};\nvar readFileInBunSync = readFileInNodeSync;\nvar readFileInBun = readFileInNode;\nvar replaceLast = function replaceLast(str, find, replace) {\n    var index = str.lastIndexOf(find);\n    if (index > -1) {\n        return str.substring(0, index) + replace + str.substring(index + find.length);\n    }\n    return str.toString();\n};\nvar parseData = function parseData(extension, data, options) {\n    data = data.replace(/^\\uFEFF/, \"\");\n    var result = {};\n    switch(extension){\n        case \".js\":\n        case \".ts\":\n            if (typeof module === \"undefined\") {\n                if (data.indexOf(\"exports\") > -1) {\n                    data = \"(\".concat(replaceLast(data.substring(data.indexOf(\"=\") + 1), \"};\", \"\"), \")\");\n                } else if (data.indexOf(\"export default \") > -1) {\n                    data = \"(\".concat(replaceLast(data.substring(data.indexOf(\"export default \") + 15), \"};\", \"\"), \")\");\n                }\n            }\n            result = evalAlias(data);\n            break;\n        case \".json5\":\n            result = _formats_json5_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].parse(data);\n            break;\n        case \".yml\":\n        case \".yaml\":\n            result = YAML.load(data);\n            break;\n        default:\n            result = options.parse(data);\n    }\n    return result;\n};\nvar resolvePath = function resolvePath(filename) {\n    return !path.isAbsolute(filename) && typeof process !== \"undefined\" && process.cwd && !fs.existsSync(filename) ? path.join(process.cwd(), filename) : filename;\n};\nfunction readFileSync(filename, options) {\n    var ext = (0,_extname_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(filename);\n    if ([\n        \".js\",\n        \".ts\"\n    ].indexOf(ext) > -1 && typeof require !== \"undefined\") {\n        return require(resolvePath(filename));\n    }\n    var data, stat;\n    if (isBun) {\n        var ret = readFileInBunSync(filename);\n        data = ret.data;\n        stat = ret.stat;\n    } else if (isDeno) {\n        var _ret = readFileInDenoSync(filename);\n        data = _ret.data;\n        stat = _ret.stat;\n    } else {\n        var _ret2 = readFileInNodeSync(filename);\n        data = _ret2.data;\n        stat = _ret2.stat;\n    }\n    return {\n        data: parseData(ext, data, options),\n        stat: stat\n    };\n}\nfunction readFile(filename) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n        parse: JSON.parse\n    };\n    var ext = (0,_extname_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(filename);\n    if ([\n        \".js\",\n        \".ts\"\n    ].indexOf(ext) > -1 && typeof require !== \"undefined\") {\n        return new Promise(function(resolve, reject) {\n            try {\n                resolve({\n                    data: require(resolvePath(filename))\n                });\n            } catch (err) {\n                reject(err);\n            }\n        });\n    }\n    var fn = isBun ? readFileInBun : isDeno ? readFileInDeno : readFileInNode;\n    return new Promise(function(resolve, reject) {\n        fn(filename).then(function(_ref) {\n            var data = _ref.data, stat = _ref.stat;\n            try {\n                var ret = parseData(ext, data, options);\n                resolve({\n                    data: ret,\n                    stat: stat\n                });\n            } catch (err) {\n                err.message = \"error parsing \" + filename + \": \" + err.message;\n                reject(err);\n            }\n        }).catch(reject);\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/i18next-fs-backend/esm/readFile.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/i18next-fs-backend/esm/utils.js":
/*!******************************************************!*\
  !*** ./node_modules/i18next-fs-backend/esm/utils.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   debounce: () => (/* binding */ debounce),\n/* harmony export */   defaults: () => (/* binding */ defaults),\n/* harmony export */   getPath: () => (/* binding */ getPath),\n/* harmony export */   pushPath: () => (/* binding */ pushPath),\n/* harmony export */   setPath: () => (/* binding */ setPath)\n/* harmony export */ });\nvar arr = [];\nvar each = arr.forEach;\nvar slice = arr.slice;\nfunction defaults(obj) {\n    each.call(slice.call(arguments, 1), function(source) {\n        if (source) {\n            for(var prop in source){\n                if (obj[prop] === undefined) obj[prop] = source[prop];\n            }\n        }\n    });\n    return obj;\n}\nfunction debounce(func, wait, immediate) {\n    var timeout;\n    return function() {\n        var context = this;\n        var args = arguments;\n        var later = function later() {\n            timeout = null;\n            if (!immediate) func.apply(context, args);\n        };\n        var callNow = immediate && !timeout;\n        clearTimeout(timeout);\n        timeout = setTimeout(later, wait);\n        if (callNow) func.apply(context, args);\n    };\n}\nfunction getLastOfPath(object, path, Empty) {\n    function cleanKey(key) {\n        return key && key.indexOf(\"###\") > -1 ? key.replace(/###/g, \".\") : key;\n    }\n    var stack = typeof path !== \"string\" ? [].concat(path) : path.split(\".\");\n    while(stack.length > 1){\n        if (!object) return {};\n        var key = cleanKey(stack.shift());\n        if (!object[key] && Empty) object[key] = new Empty();\n        object = object[key];\n    }\n    if (!object) return {};\n    return {\n        obj: object,\n        k: cleanKey(stack.shift())\n    };\n}\nfunction setPath(object, path, newValue) {\n    var _getLastOfPath = getLastOfPath(object, path, Object), obj = _getLastOfPath.obj, k = _getLastOfPath.k;\n    if (Array.isArray(obj) && isNaN(k)) throw new Error('Cannot create property \"'.concat(k, '\" here since object is an array'));\n    obj[k] = newValue;\n}\nfunction pushPath(object, path, newValue, concat) {\n    var _getLastOfPath2 = getLastOfPath(object, path, Object), obj = _getLastOfPath2.obj, k = _getLastOfPath2.k;\n    obj[k] = obj[k] || [];\n    if (concat) obj[k] = obj[k].concat(newValue);\n    if (!concat) obj[k].push(newValue);\n}\nfunction getPath(object, path) {\n    var _getLastOfPath3 = getLastOfPath(object, path), obj = _getLastOfPath3.obj, k = _getLastOfPath3.k;\n    if (!obj) return undefined;\n    return obj[k];\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaTE4bmV4dC1mcy1iYWNrZW5kL2VzbS91dGlscy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBLElBQUlBLE1BQU0sRUFBRTtBQUNaLElBQUlDLE9BQU9ELElBQUlFLE9BQU87QUFDdEIsSUFBSUMsUUFBUUgsSUFBSUcsS0FBSztBQUNkLFNBQVNDLFNBQVNDLEdBQUc7SUFDMUJKLEtBQUtLLElBQUksQ0FBQ0gsTUFBTUcsSUFBSSxDQUFDQyxXQUFXLElBQUksU0FBVUMsTUFBTTtRQUNsRCxJQUFJQSxRQUFRO1lBQ1YsSUFBSyxJQUFJQyxRQUFRRCxPQUFRO2dCQUN2QixJQUFJSCxHQUFHLENBQUNJLEtBQUssS0FBS0MsV0FBV0wsR0FBRyxDQUFDSSxLQUFLLEdBQUdELE1BQU0sQ0FBQ0MsS0FBSztZQUN2RDtRQUNGO0lBQ0Y7SUFDQSxPQUFPSjtBQUNUO0FBQ08sU0FBU00sU0FBU0MsSUFBSSxFQUFFQyxJQUFJLEVBQUVDLFNBQVM7SUFDNUMsSUFBSUM7SUFDSixPQUFPO1FBQ0wsSUFBSUMsVUFBVSxJQUFJO1FBQ2xCLElBQUlDLE9BQU9WO1FBQ1gsSUFBSVcsUUFBUSxTQUFTQTtZQUNuQkgsVUFBVTtZQUNWLElBQUksQ0FBQ0QsV0FBV0YsS0FBS08sS0FBSyxDQUFDSCxTQUFTQztRQUN0QztRQUNBLElBQUlHLFVBQVVOLGFBQWEsQ0FBQ0M7UUFDNUJNLGFBQWFOO1FBQ2JBLFVBQVVPLFdBQVdKLE9BQU9MO1FBQzVCLElBQUlPLFNBQVNSLEtBQUtPLEtBQUssQ0FBQ0gsU0FBU0M7SUFDbkM7QUFDRjtBQUNBLFNBQVNNLGNBQWNDLE1BQU0sRUFBRUMsSUFBSSxFQUFFQyxLQUFLO0lBQ3hDLFNBQVNDLFNBQVNDLEdBQUc7UUFDbkIsT0FBT0EsT0FBT0EsSUFBSUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxJQUFJRCxJQUFJRSxPQUFPLENBQUMsUUFBUSxPQUFPRjtJQUNyRTtJQUNBLElBQUlHLFFBQVEsT0FBT04sU0FBUyxXQUFXLEVBQUUsQ0FBQ08sTUFBTSxDQUFDUCxRQUFRQSxLQUFLUSxLQUFLLENBQUM7SUFDcEUsTUFBT0YsTUFBTUcsTUFBTSxHQUFHLEVBQUc7UUFDdkIsSUFBSSxDQUFDVixRQUFRLE9BQU8sQ0FBQztRQUNyQixJQUFJSSxNQUFNRCxTQUFTSSxNQUFNSSxLQUFLO1FBQzlCLElBQUksQ0FBQ1gsTUFBTSxDQUFDSSxJQUFJLElBQUlGLE9BQU9GLE1BQU0sQ0FBQ0ksSUFBSSxHQUFHLElBQUlGO1FBQzdDRixTQUFTQSxNQUFNLENBQUNJLElBQUk7SUFDdEI7SUFDQSxJQUFJLENBQUNKLFFBQVEsT0FBTyxDQUFDO0lBQ3JCLE9BQU87UUFDTG5CLEtBQUttQjtRQUNMWSxHQUFHVCxTQUFTSSxNQUFNSSxLQUFLO0lBQ3pCO0FBQ0Y7QUFDTyxTQUFTRSxRQUFRYixNQUFNLEVBQUVDLElBQUksRUFBRWEsUUFBUTtJQUM1QyxJQUFJQyxpQkFBaUJoQixjQUFjQyxRQUFRQyxNQUFNZSxTQUMvQ25DLE1BQU1rQyxlQUFlbEMsR0FBRyxFQUN4QitCLElBQUlHLGVBQWVILENBQUM7SUFDdEIsSUFBSUssTUFBTUMsT0FBTyxDQUFDckMsUUFBUXNDLE1BQU1QLElBQUksTUFBTSxJQUFJUSxNQUFNLDJCQUE0QlosTUFBTSxDQUFDSSxHQUFHO0lBQzFGL0IsR0FBRyxDQUFDK0IsRUFBRSxHQUFHRTtBQUNYO0FBQ08sU0FBU08sU0FBU3JCLE1BQU0sRUFBRUMsSUFBSSxFQUFFYSxRQUFRLEVBQUVOLE1BQU07SUFDckQsSUFBSWMsa0JBQWtCdkIsY0FBY0MsUUFBUUMsTUFBTWUsU0FDaERuQyxNQUFNeUMsZ0JBQWdCekMsR0FBRyxFQUN6QitCLElBQUlVLGdCQUFnQlYsQ0FBQztJQUN2Qi9CLEdBQUcsQ0FBQytCLEVBQUUsR0FBRy9CLEdBQUcsQ0FBQytCLEVBQUUsSUFBSSxFQUFFO0lBQ3JCLElBQUlKLFFBQVEzQixHQUFHLENBQUMrQixFQUFFLEdBQUcvQixHQUFHLENBQUMrQixFQUFFLENBQUNKLE1BQU0sQ0FBQ007SUFDbkMsSUFBSSxDQUFDTixRQUFRM0IsR0FBRyxDQUFDK0IsRUFBRSxDQUFDVyxJQUFJLENBQUNUO0FBQzNCO0FBQ08sU0FBU1UsUUFBUXhCLE1BQU0sRUFBRUMsSUFBSTtJQUNsQyxJQUFJd0Isa0JBQWtCMUIsY0FBY0MsUUFBUUMsT0FDMUNwQixNQUFNNEMsZ0JBQWdCNUMsR0FBRyxFQUN6QitCLElBQUlhLGdCQUFnQmIsQ0FBQztJQUN2QixJQUFJLENBQUMvQixLQUFLLE9BQU9LO0lBQ2pCLE9BQU9MLEdBQUcsQ0FBQytCLEVBQUU7QUFDZiIsInNvdXJjZXMiOlsid2VicGFjazovL2NoYXJ0LWdlbmVyYXRvci8uL25vZGVfbW9kdWxlcy9pMThuZXh0LWZzLWJhY2tlbmQvZXNtL3V0aWxzLmpzP2M2MjciXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGFyciA9IFtdO1xudmFyIGVhY2ggPSBhcnIuZm9yRWFjaDtcbnZhciBzbGljZSA9IGFyci5zbGljZTtcbmV4cG9ydCBmdW5jdGlvbiBkZWZhdWx0cyhvYmopIHtcbiAgZWFjaC5jYWxsKHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSwgZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgIGlmIChzb3VyY2UpIHtcbiAgICAgIGZvciAodmFyIHByb3AgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChvYmpbcHJvcF0gPT09IHVuZGVmaW5lZCkgb2JqW3Byb3BdID0gc291cmNlW3Byb3BdO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG4gIHJldHVybiBvYmo7XG59XG5leHBvcnQgZnVuY3Rpb24gZGVib3VuY2UoZnVuYywgd2FpdCwgaW1tZWRpYXRlKSB7XG4gIHZhciB0aW1lb3V0O1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHZhciBjb250ZXh0ID0gdGhpcztcbiAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcbiAgICB2YXIgbGF0ZXIgPSBmdW5jdGlvbiBsYXRlcigpIHtcbiAgICAgIHRpbWVvdXQgPSBudWxsO1xuICAgICAgaWYgKCFpbW1lZGlhdGUpIGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgfTtcbiAgICB2YXIgY2FsbE5vdyA9IGltbWVkaWF0ZSAmJiAhdGltZW91dDtcbiAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgdGltZW91dCA9IHNldFRpbWVvdXQobGF0ZXIsIHdhaXQpO1xuICAgIGlmIChjYWxsTm93KSBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICB9O1xufVxuZnVuY3Rpb24gZ2V0TGFzdE9mUGF0aChvYmplY3QsIHBhdGgsIEVtcHR5KSB7XG4gIGZ1bmN0aW9uIGNsZWFuS2V5KGtleSkge1xuICAgIHJldHVybiBrZXkgJiYga2V5LmluZGV4T2YoJyMjIycpID4gLTEgPyBrZXkucmVwbGFjZSgvIyMjL2csICcuJykgOiBrZXk7XG4gIH1cbiAgdmFyIHN0YWNrID0gdHlwZW9mIHBhdGggIT09ICdzdHJpbmcnID8gW10uY29uY2F0KHBhdGgpIDogcGF0aC5zcGxpdCgnLicpO1xuICB3aGlsZSAoc3RhY2subGVuZ3RoID4gMSkge1xuICAgIGlmICghb2JqZWN0KSByZXR1cm4ge307XG4gICAgdmFyIGtleSA9IGNsZWFuS2V5KHN0YWNrLnNoaWZ0KCkpO1xuICAgIGlmICghb2JqZWN0W2tleV0gJiYgRW1wdHkpIG9iamVjdFtrZXldID0gbmV3IEVtcHR5KCk7XG4gICAgb2JqZWN0ID0gb2JqZWN0W2tleV07XG4gIH1cbiAgaWYgKCFvYmplY3QpIHJldHVybiB7fTtcbiAgcmV0dXJuIHtcbiAgICBvYmo6IG9iamVjdCxcbiAgICBrOiBjbGVhbktleShzdGFjay5zaGlmdCgpKVxuICB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIHNldFBhdGgob2JqZWN0LCBwYXRoLCBuZXdWYWx1ZSkge1xuICB2YXIgX2dldExhc3RPZlBhdGggPSBnZXRMYXN0T2ZQYXRoKG9iamVjdCwgcGF0aCwgT2JqZWN0KSxcbiAgICBvYmogPSBfZ2V0TGFzdE9mUGF0aC5vYmosXG4gICAgayA9IF9nZXRMYXN0T2ZQYXRoLms7XG4gIGlmIChBcnJheS5pc0FycmF5KG9iaikgJiYgaXNOYU4oaykpIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBjcmVhdGUgcHJvcGVydHkgXFxcIlwiLmNvbmNhdChrLCBcIlxcXCIgaGVyZSBzaW5jZSBvYmplY3QgaXMgYW4gYXJyYXlcIikpO1xuICBvYmpba10gPSBuZXdWYWx1ZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwdXNoUGF0aChvYmplY3QsIHBhdGgsIG5ld1ZhbHVlLCBjb25jYXQpIHtcbiAgdmFyIF9nZXRMYXN0T2ZQYXRoMiA9IGdldExhc3RPZlBhdGgob2JqZWN0LCBwYXRoLCBPYmplY3QpLFxuICAgIG9iaiA9IF9nZXRMYXN0T2ZQYXRoMi5vYmosXG4gICAgayA9IF9nZXRMYXN0T2ZQYXRoMi5rO1xuICBvYmpba10gPSBvYmpba10gfHwgW107XG4gIGlmIChjb25jYXQpIG9ialtrXSA9IG9ialtrXS5jb25jYXQobmV3VmFsdWUpO1xuICBpZiAoIWNvbmNhdCkgb2JqW2tdLnB1c2gobmV3VmFsdWUpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldFBhdGgob2JqZWN0LCBwYXRoKSB7XG4gIHZhciBfZ2V0TGFzdE9mUGF0aDMgPSBnZXRMYXN0T2ZQYXRoKG9iamVjdCwgcGF0aCksXG4gICAgb2JqID0gX2dldExhc3RPZlBhdGgzLm9iaixcbiAgICBrID0gX2dldExhc3RPZlBhdGgzLms7XG4gIGlmICghb2JqKSByZXR1cm4gdW5kZWZpbmVkO1xuICByZXR1cm4gb2JqW2tdO1xufSJdLCJuYW1lcyI6WyJhcnIiLCJlYWNoIiwiZm9yRWFjaCIsInNsaWNlIiwiZGVmYXVsdHMiLCJvYmoiLCJjYWxsIiwiYXJndW1lbnRzIiwic291cmNlIiwicHJvcCIsInVuZGVmaW5lZCIsImRlYm91bmNlIiwiZnVuYyIsIndhaXQiLCJpbW1lZGlhdGUiLCJ0aW1lb3V0IiwiY29udGV4dCIsImFyZ3MiLCJsYXRlciIsImFwcGx5IiwiY2FsbE5vdyIsImNsZWFyVGltZW91dCIsInNldFRpbWVvdXQiLCJnZXRMYXN0T2ZQYXRoIiwib2JqZWN0IiwicGF0aCIsIkVtcHR5IiwiY2xlYW5LZXkiLCJrZXkiLCJpbmRleE9mIiwicmVwbGFjZSIsInN0YWNrIiwiY29uY2F0Iiwic3BsaXQiLCJsZW5ndGgiLCJzaGlmdCIsImsiLCJzZXRQYXRoIiwibmV3VmFsdWUiLCJfZ2V0TGFzdE9mUGF0aCIsIk9iamVjdCIsIkFycmF5IiwiaXNBcnJheSIsImlzTmFOIiwiRXJyb3IiLCJwdXNoUGF0aCIsIl9nZXRMYXN0T2ZQYXRoMiIsInB1c2giLCJnZXRQYXRoIiwiX2dldExhc3RPZlBhdGgzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/i18next-fs-backend/esm/utils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/i18next-fs-backend/esm/writeFile.js":
/*!**********************************************************!*\
  !*** ./node_modules/i18next-fs-backend/esm/writeFile.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("var _fs_cjs__WEBPACK_IMPORTED_MODULE_2___namespace_cache;\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   removeFile: () => (/* binding */ removeFile),\n/* harmony export */   removeFileSync: () => (/* binding */ removeFileSync),\n/* harmony export */   writeFile: () => (/* binding */ writeFile),\n/* harmony export */   writeFileSync: () => (/* binding */ writeFileSync)\n/* harmony export */ });\n/* harmony import */ var _formats_json5_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./formats/json5.js */ \"(rsc)/./node_modules/i18next-fs-backend/esm/formats/json5.js\");\n/* harmony import */ var _formats_yaml_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./formats/yaml.js */ \"(rsc)/./node_modules/i18next-fs-backend/esm/formats/yaml.js\");\n/* harmony import */ var _fs_cjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./fs.cjs */ \"(rsc)/./node_modules/i18next-fs-backend/esm/fs.cjs\");\n/* harmony import */ var _extname_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./extname.js */ \"(rsc)/./node_modules/i18next-fs-backend/esm/extname.js\");\n\n\n\n\nvar isDeno = typeof Deno !== \"undefined\";\nvar isBun = typeof Bun !== \"undefined\";\nvar YAML = typeof _formats_yaml_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"] !== \"undefined\" && _formats_yaml_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].load ? _formats_yaml_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"] : undefined;\nvar fs = /*#__PURE__*/ (_fs_cjs__WEBPACK_IMPORTED_MODULE_2___namespace_cache || (_fs_cjs__WEBPACK_IMPORTED_MODULE_2___namespace_cache = __webpack_require__.t(_fs_cjs__WEBPACK_IMPORTED_MODULE_2__, 2))) ? _fs_cjs__WEBPACK_IMPORTED_MODULE_2__ || /*#__PURE__*/ (_fs_cjs__WEBPACK_IMPORTED_MODULE_2___namespace_cache || (_fs_cjs__WEBPACK_IMPORTED_MODULE_2___namespace_cache = __webpack_require__.t(_fs_cjs__WEBPACK_IMPORTED_MODULE_2__, 2))) : undefined;\nfunction dirname(path) {\n    if (path.length === 0) return \".\";\n    var code = path.charCodeAt(0);\n    var hasRoot = code === 47;\n    var end = -1;\n    var matchedSlash = true;\n    for(var i = path.length - 1; i >= 1; --i){\n        code = path.charCodeAt(i);\n        if (code === 47) {\n            if (!matchedSlash) {\n                end = i;\n                break;\n            }\n        } else {\n            matchedSlash = false;\n        }\n    }\n    if (end === -1) return hasRoot ? \"/\" : \".\";\n    if (hasRoot && end === 1) return \"//\";\n    return path.slice(0, end);\n}\nvar writeFileInNodeSync = function writeFileInNodeSync(filename, payload) {\n    try {\n        fs.mkdirSync(dirname(filename), {\n            recursive: true\n        });\n    } catch (err) {}\n    return fs.writeFileSync(filename, payload, \"utf8\");\n};\nvar writeFileInNode = function writeFileInNode(filename, payload) {\n    return new Promise(function(resolve, reject) {\n        fs.mkdir(dirname(filename), {\n            recursive: true\n        }, function() {\n            fs.writeFile(filename, payload, \"utf8\", function(err, data) {\n                return err ? reject(err) : resolve(data);\n            });\n        });\n    });\n};\nvar removeFileInNodeSync = function removeFileInNodeSync(filename) {\n    return fs.unlinkSync(filename);\n};\nvar removeFileInNode = function removeFileInNode(filename) {\n    return new Promise(function(resolve, reject) {\n        return fs.unlink(filename, function(err) {\n            return err ? reject(err) : resolve();\n        });\n    });\n};\nvar writeFileInDenoSync = function writeFileInDenoSync(filename, payload) {\n    var encoder = new TextEncoder();\n    var data = encoder.encode(payload);\n    try {\n        Deno.mkdirSync(dirname(filename), {\n            recursive: true\n        });\n    } catch (err) {}\n    Deno.writeFileSync(filename, data);\n};\nvar writeFileInDeno = function writeFileInDeno(filename, payload) {\n    var encoder = new TextEncoder();\n    var data = encoder.encode(payload);\n    return new Promise(function(resolve, reject) {\n        Deno.mkdir(dirname(filename), {\n            recursive: true\n        }).then(function() {\n            Deno.writeFile(filename, data).then(resolve, reject);\n        }).catch(function() {\n            Deno.writeFile(filename, data).then(resolve, reject);\n        });\n    });\n};\nvar removeFileInDenoSync = function removeFileInDenoSync(filename) {\n    Deno.removeSync(filename);\n};\nvar removeFileInDeno = function removeFileInDeno(filename) {\n    return Deno.remove(filename);\n};\nvar writeFileInBunSync = writeFileInNodeSync;\nvar writeFileInBun = writeFileInNode;\nvar removeFileInBunSync = removeFileInNodeSync;\nvar removeFileInBun = removeFileInNode;\nvar stringifyData = function stringifyData(extension, data, options) {\n    var result = \"\";\n    switch(extension){\n        case \".js\":\n        case \".ts\":\n            if (typeof module === \"undefined\") {\n                result = \"export default \".concat(options.stringify(data, null, options.ident));\n            } else {\n                result = \"module.exports = \".concat(options.stringify(data, null, options.ident));\n            }\n            break;\n        case \".json5\":\n            result = _formats_json5_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].stringify(data, null, options.ident);\n            break;\n        case \".yml\":\n        case \".yaml\":\n            result = YAML.dump(data, {\n                ident: options.indent\n            });\n            break;\n        default:\n            result = options.stringify(data, null, options.ident);\n    }\n    return result;\n};\nfunction writeFileSync(filename, payload, options) {\n    var ext = (0,_extname_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(filename);\n    var data;\n    try {\n        data = stringifyData(ext, payload, options);\n    } catch (err) {\n        err.message = \"error stringifying \" + filename + \": \" + err.message;\n        throw err;\n    }\n    if (isBun) {\n        return writeFileInBunSync(filename, data);\n    } else if (isDeno) {\n        return writeFileInDenoSync(filename, data);\n    } else {\n        return writeFileInNodeSync(filename, data);\n    }\n}\nfunction writeFile(filename, payload) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n        stringify: JSON.stringify,\n        ident: 2\n    };\n    var ext = (0,_extname_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(filename);\n    var data;\n    try {\n        data = stringifyData(ext, payload, options);\n    } catch (err) {\n        err.message = \"error stringifying \" + filename + \": \" + err.message;\n        throw err;\n    }\n    var fn = isBun ? writeFileInBun : isDeno ? writeFileInDeno : writeFileInNode;\n    return fn(filename, data);\n}\nfunction removeFileSync(filename) {\n    if (isBun) {\n        return removeFileInBunSync(filename);\n    } else if (isDeno) {\n        return removeFileInDenoSync(filename);\n    } else {\n        return removeFileInNodeSync(filename);\n    }\n}\nfunction removeFile(filename) {\n    var fn = isBun ? removeFileInBun : isDeno ? removeFileInDeno : removeFileInNode;\n    return fn(filename);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/i18next-fs-backend/esm/writeFile.js\n");

/***/ })

};
;