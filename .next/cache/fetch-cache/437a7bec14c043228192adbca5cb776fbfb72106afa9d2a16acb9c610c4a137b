{"kind":"FETCH","data":{"headers":{"accept-ranges":"bytes","access-control-allow-origin":"*","cache-control":"max-age=300","connection":"keep-alive","content-encoding":"gzip","content-length":"208634","content-security-policy":"default-src 'none'; style-src 'unsafe-inline'; sandbox","content-type":"text/plain; charset=utf-8","cross-origin-resource-policy":"cross-origin","date":"Sun, 12 Nov 2023 17:27:32 GMT","etag":"W/\"77e12a11f122e69eea0b00d80a64b292fc272059e1fbe9e6390e9d1cf2fbe6ad\"","expires":"Sun, 12 Nov 2023 17:32:32 GMT","source-age":"31","strict-transport-security":"max-age=31536000","vary":"Authorization,Accept-Encoding,Origin","via":"1.1 varnish","x-cache":"HIT","x-cache-hits":"1","x-content-type-options":"nosniff","x-fastly-request-id":"578b8798d16d68d26226fb10b5c41a20a13192e1","x-frame-options":"deny","x-github-request-id":"139A:1A9F:3DFF437:40EBD00:65510AE5","x-served-by":"cache-mad22082-MAD","x-timer":"S1699810052.441499,VS0,VE3","x-xss-protection":"1; mode=block"},"body":"{
    "1,4-butanediol": {
        "aliases": [
            "bd",
            "1,4-bd",
            "14bd"
        ],
        "categories": [
            "depressant",
            "habit-forming"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "2-4"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "1-1.5ml",
                "Light": "0.5-1ml",
                "Strong": "1.5ml+"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "3-5"
        },
        "formatted_effects": [
            "Anxiolytic",
            "Sedative",
            "Muscle Relaxant",
            "Amnesia",
            "Dystaxia",
            "Hypnotic"
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "10-45"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_14Butanediol.shtml"
        },
        "name": "1,4-butanediol",
        "pretty_name": "1,4-Butanediol",
        "properties": {
            "after-effects": "2-4 hours",
            "aliases": [
                "bd",
                "1,4-bd",
                "14bd"
            ],
            "avoid": "All other CNS depressants.",
            "categories": [
                "depressant",
                "habit-forming"
            ],
            "dose": "Light: 0.5-1ml Common: 1-1.5ml Strong: 1.5ml+",
            "duration": "3-5 hours",
            "half-life": "39.3 minutes +/- 11 minutes.",
            "onset": "10-45 minutes.",
            "summary": "1,4-BD is a clear liquid with intoxicating effects. It is a pro-drug for GHB, and has similar though reportedly inferior effects. It also carries the potential for more health risks than GHB, such as liver toxicity.",
            "test-kits": "Marquis: Faint Brown. | Mandelin: Brown."
        },
        "pweffects": {
            "Amnesia": "https://psychonautwiki.org/wiki/Amnesia",
            "Anxiety suppression": "https://psychonautwiki.org/wiki/Anxiety_suppression",
            "Cognitive euphoria": "https://psychonautwiki.org/wiki/Cognitive_euphoria",
            "Dehydration": "https://psychonautwiki.org/wiki/Dehydration",
            "Disinhibition": "https://psychonautwiki.org/wiki/Disinhibition",
            "Dizziness": "https://psychonautwiki.org/wiki/Dizziness",
            "Empathy, love, and sociability enhancement": "https://psychonautwiki.org/wiki/Empathy,_love,_and_sociability_enhancement",
            "Increased libido": "https://psychonautwiki.org/wiki/Increased_libido",
            "Information processing suppression": "https://psychonautwiki.org/wiki/Information_processing_suppression",
            "Motor control loss": "https://psychonautwiki.org/wiki/Motor_control_loss",
            "Nausea": "https://psychonautwiki.org/wiki/Nausea",
            "Physical euphoria": "https://psychonautwiki.org/wiki/Physical_euphoria",
            "Respiratory depression": "https://psychonautwiki.org/wiki/Respiratory_depression",
            "Sedation": "https://psychonautwiki.org/wiki/Sedation",
            "Stimulation": "https://psychonautwiki.org/wiki/Stimulation",
            "Thought deceleration": "https://psychonautwiki.org/wiki/Thought_deceleration"
        }
    },
    "1b-lsd": {
        "aliases": [
            "1b"
        ],
        "categories": [
            "tentative",
            "research-chemical",
            "psychedelic"
        ],
        "dose_note": " NOTE: At the time of this chemical's release, the manufacturers claimed 1B-LSD was expected to be slightly less potent than 1P-LSD, supposedly owing to the increased mass of the butanoyl group over the propionyl group, however anecdotes seem to indicate approximate equipotency to 1P-LSD.",
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "6-24"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "50-125ug",
                "Light": "25-50ug",
                "Strong": "125-250ug"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "8-12"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "45-90"
        },
        "name": "1b-lsd",
        "pretty_name": "1B-LSD",
        "properties": {
            "after-effects": "6-24 hours",
            "aliases": [
                "1b"
            ],
            "categories": [
                "tentative",
                "research-chemical",
                "psychedelic"
            ],
            "dose": "Oral Light: 25-50ug Common: 50-125ug's Strong: 125-250ug's. | NOTE: At the time of this chemical's release, the manufacturers claimed 1B-LSD was expected to be slightly less potent than 1P-LSD, supposedly owing to the increased mass of the butanoyl group over the propionyl group, however anecdotes seem to indicate approximate equipotency to 1P-LSD.",
            "duration": "8-12 hours",
            "onset": "45-90 minutes",
            "summary": "1B-LSD (1-butanoyl-lysergic acid diethylamide) is an LSD analogue which appears to be about as potent as 1P-LSD (slightly more potent than LSD) and has a slightly shorter duration than that of LSD, again thought to be about the same as 1P-LSD. Released in late 2018, and marketed agressively as a replacement for 1P-LSD. 1B-LSD does not yet have a clearly established safety profile,"
        }
    },
    "1cp-lsd": {
        "aliases": [
            "1cplsd",
            "curie",
            "1cp"
        ],
        "categories": [
            "psychedelic",
            "research-chemical",
            "tentative"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "6-24"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "50-100ug",
                "Light": "25-50ug",
                "Strong": "100-200ug"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "8-10"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "30-90"
        },
        "name": "1cp-lsd",
        "pretty_name": "1CP-LSD",
        "properties": {
            "after-effects": "6-24 hours",
            "aliases": [
                "1cplsd",
                "curie",
                "1cp"
            ],
            "categories": [
                "psychedelic",
                "research-chemical",
                "tentative"
            ],
            "dose": "Oral Light: 25-50ug Common: 50-100ug Strong: 100-200ug",
            "duration": "8-10 hours",
            "onset": "30-90 minutes",
            "summary": "1cP-LSD (1-cyclopropionyl-lysergic acid diethylamide) is a novel lysergamide with little to no history of use. It is said to be a less pushy and shorter lasting version of LSD. Described as having a more gradual onset than 1P-LSD, with a less visual more meditative headspace when compared with LSD.*NOTE: This is a very new research chemical - take all info with a grain of salt.*"
        }
    },
    "1p-eth-lad": {
        "aliases": [
            "1pethlad"
        ],
        "categories": [
            "psychedelic",
            "tentative",
            "research-chemical"
        ],
        "dose_note": " NOTE: These doses are very tentative, and are based on the likelihood that the dosage profile will be similar to ETH-LAD.",
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "2-12"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "60-100ug",
                "Light": "30-60ug",
                "Strong": "100-200ug+",
                "Threshold": "20-30ug"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "6-10"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "15-90"
        },
        "name": "1p-eth-lad",
        "pretty_name": "1P-ETH-LAD",
        "properties": {
            "after-effects": "2-12 hours.",
            "aliases": [
                "1pethlad"
            ],
            "categories": [
                "psychedelic",
                "tentative",
                "research-chemical"
            ],
            "dose": "Oral Threshold: 20-30ug Light: 30-60ug Common: 60-100ug Strong: 100-200ug+ | NOTE: These doses are very tentative, and are based on the likelihood that the dosage profile will be similar to ETH-LAD.",
            "duration": "6-10 hours.",
            "experiences": "https://erowid.org/experiences/subs/exp_1PETHLAD.shtml",
            "onset": "15-90 minutes",
            "summary": "A new psychedelic lysergamide which is suspected to be a prodrug of ETH-LAD, which could explain why the doses are very similar. Or it could be active on its own. Scientific studies would need to be written to understand, yet there are none."
        }
    },
    "1p-lsd": {
        "aliases": [
            "1plsd",
            "1p"
        ],
        "categories": [
            "psychedelic",
            "research-chemical"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "6-24"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "50-125ug",
                "Light": "25-50ug",
                "Strong": "125-200ug"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "8-12"
        },
        "formatted_effects": [
            "Euphoria",
            "empathy",
            "insight",
            "brightened colour",
            "Closed/Open eye visuals",
            "enhanced tactile sensation",
            "mental/physical stimulation",
            "decreased appetite",
            "pupil dilation",
            "restlessness",
            "change in perception",
            "ego softening",
            "sweating/chills",
            "muscle tension",
            "confusion",
            "insomnia",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "45-90"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_1PLSD.shtml"
        },
        "name": "1p-lsd",
        "pretty_name": "1P-LSD",
        "properties": {
            "after-effects": "6-24 hours",
            "aliases": [
                "1plsd",
                "1p"
            ],
            "categories": [
                "psychedelic",
                "research-chemical"
            ],
            "dose": "Oral Light: 25-50ug Common: 50-125ug Strong: 125-200ug",
            "duration": "8-12 hours",
            "onset": "45-90 minutes.",
            "summary": "An LSD analogue which appears to be slightly more potent with a shorter duration. Its effects are reported to be extremely similar to LSD, and thus far seems to be similarly safe. Released in late 2014, It has quickly become a highly popular research chemical due to its implicit legality, similarity to LSD and wide availability on the Internet.",
            "test-kits": "Marquis: Slow Purple. | Mecke: Brown. | Mandelin: No colour change. | Froehde: No colour change. | Liebermann: No colour change. | Ehrlich's Reagent: No colour change. | Gallic Acid: Brown."
        },
        "pweffects": {
            "8A Geometry - Exposure to semantic concept network": "https://psychonautwiki.org/wiki/8A_Geometry_-_Exposure_to_semantic_concept_network",
            "8B Geometry - Exposure to inner mechanics of consciousness": "https://psychonautwiki.org/wiki/8B_Geometry_-_Exposure_to_inner_mechanics_of_consciousness",
            "Acuity enhancement": "https://psychonautwiki.org/wiki/Acuity_enhancement",
            "Analysis enhancement": "https://psychonautwiki.org/wiki/Analysis_enhancement",
            "Auditory distortion": "https://psychonautwiki.org/wiki/Auditory_distortion",
            "Auditory enhancement": "https://psychonautwiki.org/wiki/Auditory_enhancement",
            "Auditory hallucinations": "https://psychonautwiki.org/wiki/Auditory_hallucinations",
            "Autonomous entities": "https://psychonautwiki.org/wiki/Autonomous_entities",
            "Bodily control enhancement": "https://psychonautwiki.org/wiki/Bodily_control_enhancement",
            "Colour enhancement": "https://psychonautwiki.org/wiki/Colour_enhancement",
            "Colour shifting": "https://psychonautwiki.org/wiki/Colour_shifting",
            "Conceptual thinking": "https://psychonautwiki.org/wiki/Conceptual_thinking",
            "Creativity enhancement": "https://psychonautwiki.org/wiki/Creativity_enhancement",
            "Delusions": "https://psychonautwiki.org/wiki/Delusions",
            "Depth perception distortions": "https://psychonautwiki.org/wiki/Depth_perception_distortions",
            "Drifting": "https://psychonautwiki.org/wiki/Drifting",
            "Emotion enhancement": "https://psychonautwiki.org/wiki/Emotion_enhancement",
            "External hallucinations": "https://psychonautwiki.org/wiki/External_hallucinations",
            "Feelings of interdependent opposites": "https://psychonautwiki.org/wiki/Feelings_of_interdependent_opposites",
            "Feelings of self-design": "https://psychonautwiki.org/wiki/Feelings_of_self-design",
            "Geometry": "https://psychonautwiki.org/wiki/Geometry",
            "Immersion enhancement": "https://psychonautwiki.org/wiki/Immersion_enhancement",
            "Increased heart rate": "https://psychonautwiki.org/wiki/Increased_heart_rate",
            "Internal hallucinations": "https://psychonautwiki.org/wiki/Internal_hallucinations",
            "Memory suppression": "https://psychonautwiki.org/wiki/Memory_suppression",
            "Mindfulness": "https://psychonautwiki.org/wiki/Mindfulness",
            "Muscle spasms": "https://psychonautwiki.org/wiki/Muscle_spasms",
            "Nausea": "https://psychonautwiki.org/wiki/Nausea",
            "Novelty enhancement": "https://psychonautwiki.org/wiki/Novelty_enhancement",
            "Pattern recognition enhancement": "https://psychonautwiki.org/wiki/Pattern_recognition_enhancement",
            "Personal bias suppression": "https://psychonautwiki.org/wiki/Personal_bias_suppression",
            "Perspective alterations": "https://psychonautwiki.org/wiki/Perspective_alterations",
            "Perspective distortions": "https://psychonautwiki.org/wiki/Perspective_distortions",
            "Pupil dilation": "https://psychonautwiki.org/wiki/Pupil_dilation",
            "Scenarios and plots": "https://psychonautwiki.org/wiki/Scenarios_and_plots",
            "Settings, sceneries, and landscapes": "https://psychonautwiki.org/wiki/Settings,_sceneries,_and_landscapes",
            "Spirituality enhancement": "https://psychonautwiki.org/wiki/Spirituality_enhancement",
            "Spontaneous tactile sensations": "https://psychonautwiki.org/wiki/Spontaneous_tactile_sensations",
            "Stimulation": "https://psychonautwiki.org/wiki/Stimulation",
            "Symmetrical texture repetition": "https://psychonautwiki.org/wiki/Symmetrical_texture_repetition",
            "Tactile enhancement": "https://psychonautwiki.org/wiki/Tactile_enhancement",
            "Thought acceleration": "https://psychonautwiki.org/wiki/Thought_acceleration",
            "Thought disorganization": "https://psychonautwiki.org/wiki/Thought_disorganization",
            "Thought loops": "https://psychonautwiki.org/wiki/Thought_loops",
            "Time distortion": "https://psychonautwiki.org/wiki/Time_distortion",
            "Tracers": "https://psychonautwiki.org/wiki/Tracers",
            "Transformations": "https://psychonautwiki.org/wiki/Transformations",
            "Unity and interconnectedness": "https://psychonautwiki.org/wiki/Unity_and_interconnectedness",
            "Wakefulness": "https://psychonautwiki.org/wiki/Wakefulness"
        }
    },
    "2-ai": {
        "aliases": [
            "2ai",
            "2-aminoindan"
        ],
        "categories": [
            "stimulant",
            "research-chemical",
            "habit-forming",
            "tentative"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "2-4"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "10-20mg",
                "Light": "5-10mg",
                "Strong": "20-40mg+",
                "Threshold": "3-5mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "1-2"
        },
        "formatted_effects": [
            "Euphoria",
            "increased energy/alertness",
            "decreased need for sleep",
            "increased sociability",
            "mood lift",
            "increased sexuality",
            "excessive talking",
            "decreased appetite",
            "weight loss",
            "sweating",
            "disturbed sleep patterns",
            "bruxism",
            "visual and auditory hallucinations",
            "itchiness",
            "aggressiveness",
            "moodiness",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "10-30"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_2Aminoindan.shtml"
        },
        "name": "2-ai",
        "pretty_name": "2-AI",
        "properties": {
            "after-effects": "2-4 hours",
            "aliases": [
                "2ai",
                "2-aminoindan"
            ],
            "categories": [
                "stimulant",
                "research-chemical",
                "habit-forming",
                "tentative"
            ],
            "dose": "Oral Threshold: 3-5mg Light: 5-10mg Common: 10-20mg Strong: 20-40mg+",
            "duration": "1-2 hours.",
            "experiences": "https://www.erowid.org/experiences/subs/exp_2Aminoindan.shtml",
            "half-life": "1-2 hours.",
            "onset": "10-30 minutes",
            "summary": "Short acting stimulant that is sometimes compared to the likes of Methamphetamine. It is a rigid analogue of Amphetamine, and also partially substitutes for the prior in rat discrimination studies. ",
            "test-kits": "Marquis: Orange > Brown. | Mecke: Yellow. | Mandelin: Blue. | Liebermann: Yellow Brown. | Ehrlich: No colour change."
        },
        "pweffects": {
            "Acuity enhancement": "https://psychonautwiki.org/wiki/Acuity_enhancement",
            "Analysis enhancement": "https://psychonautwiki.org/wiki/Analysis_enhancement",
            "Anxiety": "https://psychonautwiki.org/wiki/Anxiety",
            "Appetite suppression": "https://psychonautwiki.org/wiki/Appetite_suppression",
            "Cognitive euphoria": "https://psychonautwiki.org/wiki/Cognitive_euphoria",
            "Cognitive fatigue": "https://psychonautwiki.org/wiki/Cognitive_fatigue",
            "Compulsive redosing": "https://psychonautwiki.org/wiki/Compulsive_redosing",
            "Dehydration": "https://psychonautwiki.org/wiki/Dehydration",
            "Depression": "https://psychonautwiki.org/wiki/Depression",
            "Focus enhancement": "https://psychonautwiki.org/wiki/Focus_enhancement",
            "Increased heart rate": "https://psychonautwiki.org/wiki/Increased_heart_rate",
            "Increased perspiration": "https://psychonautwiki.org/wiki/Increased_perspiration",
            "Irritability": "https://psychonautwiki.org/wiki/Irritability",
            "Memory enhancement": "https://psychonautwiki.org/wiki/Memory_enhancement",
            "Motivation enhancement": "https://psychonautwiki.org/wiki/Motivation_enhancement",
            "Nausea": "https://psychonautwiki.org/wiki/Nausea",
            "Pain relief": "https://psychonautwiki.org/wiki/Pain_relief",
            "Stimulation": "https://psychonautwiki.org/wiki/Stimulation",
            "Teeth grinding": "https://psychonautwiki.org/wiki/Teeth_grinding",
            "Temporary erectile dysfunction": "https://psychonautwiki.org/wiki/Temporary_erectile_dysfunction",
            "Thought acceleration": "https://psychonautwiki.org/wiki/Thought_acceleration",
            "Thought deceleration": "https://psychonautwiki.org/wiki/Thought_deceleration",
            "Wakefulness": "https://psychonautwiki.org/wiki/Wakefulness"
        }
    },
    "2-chloro-ephenidine": {
        "aliases": [
            "2-chloroephenidine",
            "2chloroephenidine",
            "2-cl-ephenidine",
            "2clephenidine"
        ],
        "categories": [
            "dissociative",
            "research-chemical",
            "tentative"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-6"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "130-175mg",
                "Heavy": "200mg+",
                "Light": "100-130mg",
                "Strong": "175-200mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "3-6"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "10-30"
        },
        "name": "2-chloro-ephenidine",
        "pretty_name": "2-Chloroephenidine",
        "properties": {
            "after-effects": "1-6 hours.",
            "aliases": [
                "2-chloroephenidine",
                "2chloroephenidine",
                "2-cl-ephenidine",
                "2clephenidine"
            ],
            "categories": [
                "dissociative",
                "research-chemical",
                "tentative"
            ],
            "dose": "Oral Light: 100-130mg Common: 130-175mg Strong: 175-200mg Heavy: 200mg+",
            "duration": "3-6 hours",
            "onset": "10-30 minutes",
            "summary": "Analogue of Ephenidine. Very little is known about this quite obscure compound. Very likely to exhibit dissociative effects, and is slightly less potent than the parent drug Ephenidine."
        }
    },
    "2-dpmp": {
        "aliases": [
            "desoxypipradrol",
            "2dpmp",
            "2-desoxypiperadol",
            "desoxypipradol"
        ],
        "categories": [
            "stimulant",
            "research-chemical",
            "habit-forming",
            "tentative"
        ],
        "dose_note": " NOTE: This drug is extremely potent and extremely long lasting, even at 'common' doses. Be sure to start low and avoid redosing.",
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-72"
        },
        "formatted_dose": {
            "Insufflated": {
                "Common": "3-4mg",
                "Light": "2-3mg",
                "Strong": "4-6mg",
                "Threshold": "1-2mg"
            },
            "Oral": {
                "Common": "4-6mg",
                "Light": "2-4mg",
                "Strong": "6-8mg",
                "Threshold": "1-2mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "16-72"
        },
        "formatted_effects": [
            "Euphoria",
            "increased energy/alertness",
            "decreased need for sleep",
            "increased sociability",
            "mood lift",
            "increased sexuality",
            "excessive talking",
            "decreased appetite",
            "weight loss",
            "sweating",
            "disturbed sleep patterns",
            "bruxism",
            "visual and auditory hallucinations",
            "itchiness",
            "aggressiveness",
            "moodiness",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "60-120"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_Desoxypipradrol_.shtml",
            "pihkal": "https://www.erowid.org/library/books_online/pihkal/pihkal052.shtml"
        },
        "name": "2-dpmp",
        "pretty_name": "2-DPMP",
        "properties": {
            "after-effects": "1-72 hours.",
            "aliases": [
                "desoxypipradrol",
                "2dpmp",
                "2-desoxypiperadol",
                "desoxypipradol"
            ],
            "categories": [
                "stimulant",
                "research-chemical",
                "habit-forming",
                "tentative"
            ],
            "dose": "Oral Threshold: 1-2mg Light: 2-4mg Common: 4-6mg Strong: 6-8mg | Insufflated Threshold: 1-2mg Light: 2-3mg Common: 3-4mg Strong: 4-6mg | NOTE: This drug is extremely potent and extremely long lasting, even at 'common' doses. Be sure to start low and avoid redosing.",
            "duration": "16-72 hours",
            "half-life": "16-20 hours.",
            "onset": "60-120 minutes.",
            "summary": "A very potent stimulant that is a NDRI. Developed by Novartis in the 1950s, to treat narcolepsy and ADHD, however dropped when Methylphenidate was produced a few years later, which was seen as superior due to its shorter T\u00bd. 2-DPMP Half life 16-20 hours. Warning: subjective reports suggest this drug is caustic to the nasal mucosa and may cause damage to the nasal cavity.",
            "warning": "Due to the long half life (16-20 hours) redosing is strongly recommended against."
        }
    },
    "2-fa": {
        "aliases": [
            "2-fluoroamphetamine",
            "2-fmp",
            "2fa"
        ],
        "categories": [
            "stimulant",
            "research-chemical",
            "habit-forming"
        ],
        "dose_note": " Note: Insufflating does not appear to raise the bioavailability than oral ingestion, and can cause damage to nasal cavities.",
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "2-12"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "15-30mg",
                "Heavy": "50mg+",
                "Light": "5-15mg",
                "Strong": "30-50mg"
            }
        },
        "formatted_duration": {
            "Insufflated": "1-2",
            "Oral": "3-5",
            "_unit": "hours"
        },
        "formatted_effects": [
            "Euphoria",
            "increased energy/alertness",
            "decreased need for sleep",
            "increased sociability",
            "mood lift",
            "increased sexuality",
            "excessive talking",
            "decreased appetite",
            "weight loss",
            "sweating",
            "disturbed sleep patterns",
            "bruxism",
            "visual and auditory hallucinations",
            "itchiness",
            "aggressiveness",
            "moodiness",
            ""
        ],
        "formatted_onset": {
            "Insufflated": "2-5",
            "Oral": "15-20",
            "_unit": "minutes"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_2Fluoroamphetamine.shtml"
        },
        "name": "2-fa",
        "pretty_name": "2-FA",
        "properties": {
            "after-effects": "2-12 hours.",
            "aliases": [
                "2-fluoroamphetamine",
                "2-fmp",
                "2fa"
            ],
            "categories": [
                "stimulant",
                "research-chemical",
                "habit-forming"
            ],
            "dose": "Oral Light: 5-15mg Common: 15-30mg Strong: 30-50mg Heavy: 50mg+ | Note: Insufflating does not appear to raise the bioavailability than oral ingestion, and can cause damage to nasal cavities.",
            "duration": "Oral: 3-5 hours | Insufflated: 1-2 hours",
            "onset": "Oral: 15-20 minutes | Insufflated: 2-5 minutes",
            "summary": "Stimulant drug of the amphetamine family. Reported as having effects similar to those of Dextroamphetamine, but with a milder euphoria and a comparatively smoother comedown. Has a shorter duration and less empathogenic effect-profile as compared with 4-FA. Thought to produce less neurotoxic metabolites compared to amphetamine."
        }
    },
    "2-fdck": {
        "aliases": [
            "2f-ketamine",
            "2f-ket",
            "2-fluorodeschloroketamine",
            "2-fl-2'-oxo-pcm",
            "2f-dck",
            "2fket",
            "2fdck"
        ],
        "categories": [
            "tentative",
            "dissociative",
            "habit-forming"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-3"
        },
        "formatted_dose": {
            "Insufflated": {
                "Common": "50-100mg",
                "Light": "20-50mg",
                "Strong": "100-175mg+"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "1-3"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "20-40"
        },
        "name": "2-fdck",
        "pretty_name": "2-FDCK",
        "properties": {
            "after-effects": "1-3 hours.",
            "aliases": [
                "2f-ketamine",
                "2f-ket",
                "2-fluorodeschloroketamine",
                "2-fl-2'-oxo-pcm",
                "2f-dck",
                "2fket",
                "2fdck"
            ],
            "categories": [
                "tentative",
                "dissociative",
                "habit-forming"
            ],
            "dose": "Insufflated Light: 20-50mg Common: 50-100mg Strong: 100-175mg+",
            "duration": "1-3 hours.",
            "onset": "20-40 minutes.",
            "summary": "Dissociative anesthetic of the arylcyclohexylamine class. Seemingly on par with ketamine in dosage. Longer onset than the prior."
        }
    },
    "2-fea": {
        "aliases": [
            "2-fluoroethylamphetamine"
        ],
        "categories": [
            "stimulant",
            "tentative",
            "research-chemical"
        ],
        "name": "2-fea",
        "pretty_name": "2-FEA",
        "properties": {
            "aliases": [
                "2-fluoroethylamphetamine"
            ],
            "categories": [
                "stimulant",
                "tentative",
                "research-chemical"
            ],
            "summary": "Stimulant closely related to 2-FMA. Presumably slightly less potent than the prior. Toxicology and the likes are pretty much completely unknown. Tread with caution."
        }
    },
    "2-fma": {
        "aliases": [
            "2fma"
        ],
        "categories": [
            "stimulant",
            "research-chemical",
            "habit-forming"
        ],
        "dose_note": " NOTE: Sensitivity varies from",
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-24"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "25-35mg",
                "Heavy": "65-80mg+",
                "Light": "15-25mg",
                "Strong": "35-65mg"
            },
            "person-to-person": {}
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "6-8"
        },
        "formatted_effects": [
            "Euphoria",
            "increased energy/alertness",
            "decreased need for sleep",
            "increased sociability",
            "mood lift",
            "increased sexuality",
            "excessive talking",
            "decreased appetite",
            "weight loss",
            "sweating",
            "disturbed sleep patterns",
            "bruxism",
            "visual and auditory hallucinations",
            "itchiness",
            "aggressiveness",
            "moodiness",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "20-60"
        },
        "name": "2-fma",
        "pretty_name": "2-FMA",
        "properties": {
            "after-effects": "1-24 hours.",
            "aliases": [
                "2fma"
            ],
            "categories": [
                "stimulant",
                "research-chemical",
                "habit-forming"
            ],
            "dose": "Oral Light: 15-25mg Common: 25-35mg Strong: 35-65mg Heavy: 65-80mg+ | NOTE: Sensitivity varies from| person-to-person and with usage factors. Higher doses can often result in long crashes and sleepless nights. Always start low and titrate slowly.",
            "duration": "6-8 hours",
            "marquis": "Light yellow",
            "onset": "20-60 minutes",
            "summary": "A long-acting stimulant often compared to lisdexamphetamine. Thought to lack some of amphetamine's neurotoxic metabolites. Very functional, and for this reason it is commonly used for studying."
        },
        "pweffects": {
            "Analysis enhancement": "https://psychonautwiki.org/wiki/Analysis_enhancement",
            "Anxiety": "https://psychonautwiki.org/wiki/Anxiety",
            "Anxiety suppression": "https://psychonautwiki.org/wiki/Anxiety_suppression",
            "Appetite suppression": "https://psychonautwiki.org/wiki/Appetite_suppression",
            "Cognitive fatigue": "https://psychonautwiki.org/wiki/Cognitive_fatigue",
            "Compulsive redosing": "https://psychonautwiki.org/wiki/Compulsive_redosing",
            "Dehydration": "https://psychonautwiki.org/wiki/Dehydration",
            "Depression": "https://psychonautwiki.org/wiki/Depression",
            "Focus enhancement": "https://psychonautwiki.org/wiki/Focus_enhancement",
            "Increased heart rate": "https://psychonautwiki.org/wiki/Increased_heart_rate",
            "Increased perspiration": "https://psychonautwiki.org/wiki/Increased_perspiration",
            "Irritability": "https://psychonautwiki.org/wiki/Irritability",
            "Motivation enhancement": "https://psychonautwiki.org/wiki/Motivation_enhancement",
            "Physical euphoria": "https://psychonautwiki.org/wiki/Physical_euphoria",
            "Stimulation": "https://psychonautwiki.org/wiki/Stimulation",
            "Tactile enhancement": "https://psychonautwiki.org/wiki/Tactile_enhancement",
            "Teeth grinding": "https://psychonautwiki.org/wiki/Teeth_grinding",
            "Thought acceleration": "https://psychonautwiki.org/wiki/Thought_acceleration",
            "Thought deceleration": "https://psychonautwiki.org/wiki/Thought_deceleration",
            "Wakefulness": "https://psychonautwiki.org/wiki/Wakefulness"
        }
    },
    "2-me-dmt": {
        "categories": [
            "psychedelic",
            "research-chemical",
            "tentative"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-5"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "50-75mg",
                "Light": "30-50mg",
                "Strong": "75-100mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "3-8"
        },
        "formatted_effects": [
            "Euphoria",
            "empathy",
            "insight",
            "brightened colour",
            "Closed/Open eye visuals",
            "enhanced tactile sensation",
            "mental/physical stimulation",
            "decreased appetite",
            "pupil dilation",
            "restlessness",
            "change in perception",
            "ego softening",
            "sweating/chills",
            "muscle tension",
            "confusion",
            "insomnia",
            ""
        ],
        "formatted_onset": {
            "Insufflated": "15-40",
            "Oral": "60-90",
            "_unit": "minutes"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_2MeDMT.shtml",
            "tihkal": "https://www.erowid.org/library/books_online/tihkal/tihkal34.shtml"
        },
        "name": "2-me-dmt",
        "pretty_name": "2-Me-DMT",
        "properties": {
            "after-effects": "1-5 hours.",
            "categories": [
                "psychedelic",
                "research-chemical",
                "tentative"
            ],
            "dose": "Oral Light: 30-50mg Common: 50-75mg Strong: 75-100mg",
            "duration": "3-8 hours",
            "effects": "Euphoria, empathy, insight, brightened colour, Closed/Open eye visuals, enhanced tactile sensation, mental/physical stimulation, decreased appetite, pupil dilation, restlessness, change in perception, ego softening, sweating/chills, muscle tension, confusion, insomnia.",
            "onset": "Oral: 60-90 minutes. | Insufflated: 15-40 minutes.",
            "summary": "Also known as 2,N,N-TMT, this drug was first synthesised by Alexander Shulgin. Described as a very mild psychedelic of similar subjective effects to other tryptamines. Reported as having an unusual and unpredictable dose curve, it is recommended to start low with this drug."
        }
    },
    "2-mec": {
        "categories": [
            "stimulant",
            "research-chemical",
            "habit-forming",
            "tentative"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-6"
        },
        "formatted_dose": {
            "Insufflated": {
                "Common": "50-100mg",
                "Light": "25-50mg",
                "Strong": "100-250mg+"
            },
            "Oral": {
                "Common": "100-200mg",
                "Light": "50-100mg",
                "Strong": "200-350mg+"
            }
        },
        "formatted_duration": {
            "Insufflated": "2-4",
            "Oral": "3-5",
            "_unit": "hours"
        },
        "name": "2-mec",
        "pretty_name": "2-MEC",
        "properties": {
            "after-effects": "1-6 hours.",
            "categories": [
                "stimulant",
                "research-chemical",
                "habit-forming",
                "tentative"
            ],
            "dose": "Oral Light: 50-100mg Common: 100-200mg Strong: 200-350mg+ | Insufflated Light: 25-50mg Common: 50-100mg Strong: 100-250mg+",
            "duration": "Oral: 3-5 hours. | Insufflated: 2-4 hours.",
            "summary": "Cathinone which some users report to feel like a weaker MDMA with a shorter onset."
        }
    },
    "2-methyl-2-butanol": {
        "aliases": [
            "2m2b"
        ],
        "categories": [
            "habit-forming",
            "depressant",
            "tentative"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "2-6"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "5-7.5g",
                "Light": "2.5-5g",
                "Strong": "7.5-15g+"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "4-8"
        },
        "formatted_effects": [
            "Anxiolytic",
            "Sedative",
            "Muscle Relaxant",
            "Amnesia",
            "Dystaxia",
            "Hypnotic",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "5-25"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_2Methyl2Butanol.shtml"
        },
        "name": "2-methyl-2-butanol",
        "pretty_name": "2-methyl-2-butanol",
        "properties": {
            "after-effects": "2-6 hours.",
            "aliases": [
                "2m2b"
            ],
            "avoid": "All other CNS depressants.",
            "categories": [
                "habit-forming",
                "depressant",
                "tentative"
            ],
            "dose": "Oral Light: 2.5-5g Common: 5-7.5g Strong: 7.5-15g+",
            "duration": "4-8 hours.",
            "effects": "Anxiolytic, Sedative, Muscle Relaxant, Amnesia, Dystaxia, Hypnotic.",
            "onset": "5-25 minutes.",
            "summary": "A tertiary alcohol that has sedative, hypnotic, and anxiolytic effects. It is also roughly 20x more potent than Ethanol by weight."
        },
        "pweffects": {
            "Amnesia": "https://psychonautwiki.org/wiki/Amnesia",
            "Anxiety suppression": "https://psychonautwiki.org/wiki/Anxiety_suppression",
            "Cognitive euphoria": "https://psychonautwiki.org/wiki/Cognitive_euphoria",
            "Disinhibition": "https://psychonautwiki.org/wiki/Disinhibition",
            "Dizziness": "https://psychonautwiki.org/wiki/Dizziness",
            "Information processing suppression": "https://psychonautwiki.org/wiki/Information_processing_suppression",
            "Motor control loss": "https://psychonautwiki.org/wiki/Motor_control_loss",
            "Muscle relaxation": "https://psychonautwiki.org/wiki/Muscle_relaxation",
            "Pain relief": "https://psychonautwiki.org/wiki/Pain_relief",
            "Respiratory depression": "https://psychonautwiki.org/wiki/Respiratory_depression",
            "Sedation": "https://psychonautwiki.org/wiki/Sedation",
            "Thought deceleration": "https://psychonautwiki.org/wiki/Thought_deceleration"
        }
    },
    "2-methylamphetamine": {
        "aliases": [
            "2-ma"
        ],
        "categories": [
            "stimulant",
            "research-chemical",
            "habit-forming",
            "tentative"
        ],
        "formatted_aftereffects": {
            "Insufflated": "1-10",
            "_unit": "hours"
        },
        "formatted_dose": {
            "Insufflated": {
                "Common": "30-50mg",
                "Light": "10-30mg",
                "Strong": "50-70mg+"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "Insufflated"
        },
        "formatted_effects": [
            "Euphoria",
            "increased energy/alertness",
            "decreased need for sleep",
            "increased sociability",
            "mood lift",
            "increased sexuality",
            "excessive talking",
            "decreased appetite",
            "weight loss",
            "sweating",
            "disturbed sleep patterns",
            "bruxism",
            "visual and auditory hallucinations",
            "itchiness",
            "aggressiveness",
            "moodiness",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "Insufflated"
        },
        "name": "2-methylamphetamine",
        "pretty_name": "2-MA",
        "properties": {
            "after-effects": "Insufflated: 1-10 hours.",
            "aliases": [
                "2-ma"
            ],
            "categories": [
                "stimulant",
                "research-chemical",
                "habit-forming",
                "tentative"
            ],
            "dose": "Insufflated Light: 10-30mg Common: 30-50mg Strong: 50-70mg+",
            "duration": "Insufflated 3-6 hours.",
            "effects": "Euphoria, increased energy/alertness, decreased need for sleep, increased sociability, mood lift, increased sexuality, excessive talking, decreased appetite, weight loss, sweating, disturbed sleep patterns, bruxism, visual and auditory hallucinations, itchiness, aggressiveness, moodiness.",
            "onset": "Insufflated 10-30 minutes.",
            "summary": "Also known as Ortetamine, this rarely seen amphetamine is approximately 1/10th as potent as dextroamphetamine. Little information exists regarding its safety or effects."
        }
    },
    "2-mmc": {
        "categories": [
            "stimulant",
            "habit-forming",
            "tentative",
            "research-chemical"
        ],
        "formatted_aftereffects": {
            "Insufflated": "2-4",
            "Oral": "2-8",
            "_unit": "hours"
        },
        "formatted_dose": {
            "Insufflated": {
                "Common": "15-40mg",
                "Light": "5-15mg",
                "Strong": "40-80mg."
            },
            "Oral": {
                "Common": "50-100mg",
                "Light": "20-50mg",
                "Strong": "100-135mg."
            }
        },
        "formatted_duration": {
            "Insufflated": "2-4",
            "Oral": "3-5",
            "_unit": "hours"
        },
        "formatted_onset": {
            "Insufflated": "2-15",
            "Oral": "15-45",
            "_unit": "minutes"
        },
        "name": "2-mmc",
        "pretty_name": "2-MMC",
        "properties": {
            "after-effects": "Oral: 2-8 hours. | Insufflated: 2-4 hours.",
            "categories": [
                "stimulant",
                "habit-forming",
                "tentative",
                "research-chemical"
            ],
            "dose": "Oral Light: 20-50mg Common: 50-100mg Strong: 100-135mg. | Insufflated Light: 5-15mg Common: 15-40mg Strong: 40-80mg.",
            "duration": "Oral: 3-5 hours. | Insufflated: 2-4 hours.",
            "onset": "Oral: 15-45 minutes. | Insufflated: 2-15 minutes.",
            "summary": "A cathinone, yet the effects are noted more of the likes of 2-FA or amphetamine. Which apparently left people dissapointed."
        }
    },
    "2-mppp": {
        "aliases": [
            "n-piperidinecathinone"
        ],
        "categories": [
            "research-chemical",
            "habit-forming",
            "stimulant",
            "tentative"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-12"
        },
        "formatted_dose": {
            "Insufflated": {
                "Common": "30-60mg",
                "Heavy": "110mg+",
                "Light": "15-30mg",
                "Strong": "60-110mg"
            },
            "Oral": {
                "Common": "50-100mg",
                "Heavy": "150mg+.",
                "Light": "25-50mg",
                "Strong": "100-150mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "2-4"
        },
        "formatted_effects": [
            "Euphoria",
            "increased energy/alertness",
            "decreased need for sleep",
            "increased sociability",
            "mood lift",
            "increased sexuality",
            "excessive talking",
            "decreased appetite",
            "weight loss",
            "sweating",
            "disturbed sleep patterns",
            "bruxism",
            "visual and auditory hallucinations",
            "itchiness",
            "aggressiveness",
            "moodiness",
            ""
        ],
        "formatted_onset": {
            "Oral": "10-20",
            "Rectal": "10-15",
            "_unit": "minutes"
        },
        "name": "2-mppp",
        "pretty_name": "2-MPPP",
        "properties": {
            "after-effects": "1-12 hours.",
            "aliases": [
                "n-piperidinecathinone"
            ],
            "categories": [
                "research-chemical",
                "habit-forming",
                "stimulant",
                "tentative"
            ],
            "dose": "Oral Light: 25-50mg Common: 50-100mg Strong: 100-150mg Heavy: 150mg+. | Insufflated Light: 15-30mg Common: 30-60mg Strong: 60-110mg Heavy: 110mg+",
            "duration": "2-4 hours",
            "effects": "Euphoria, increased energy/alertness, decreased need for sleep, increased sociability, mood lift, increased sexuality, excessive talking, decreased appetite, weight loss, sweating, disturbed sleep patterns, bruxism, visual and auditory hallucinations, itchiness, aggressiveness, moodiness.",
            "onset": "Oral: 10-20 minutes | Rectal 10-15 minutes",
            "summary": "A novel stimulant that is similar to methcathinone."
        }
    },
    "2-nmc": {
        "categories": [
            "inactive"
        ],
        "name": "2-nmc",
        "pretty_name": "2-NMC",
        "properties": {
            "categories": [
                "inactive"
            ],
            "summary": "Inactive."
        }
    },
    "2-pa": {
        "aliases": [
            "2-phenylacetamide"
        ],
        "categories": [
            "stimulant",
            "research-chemical",
            "habit-forming",
            "tentative"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-10"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "25-50mg",
                "Heavy": "100+mg.",
                "Light": "10-25mg",
                "Strong": "50-100mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "3-5"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "15-45"
        },
        "name": "2-pa",
        "pretty_name": "2-PA",
        "properties": {
            "after-effects": "1-10 hours.",
            "aliases": [
                "2-phenylacetamide"
            ],
            "categories": [
                "stimulant",
                "research-chemical",
                "habit-forming",
                "tentative"
            ],
            "dose": "Oral Light: 10-25mg Common: 25-50mg Strong: 50-100mg Heavy: 100+mg.",
            "duration": "3-5 hours.",
            "onset": "15-45 minutes.",
            "summary": "Amphetamine with the alpha-methyl replaced by ketone. Very few reports. Also no information on the safety of this compound. As always treat with caution."
        }
    },
    "2-pta": {
        "aliases": [
            "4-methyl-2-pa",
            "2-(p-tolyl)acetamide"
        ],
        "categories": [
            "stimulant",
            "research-chemical",
            "habit-forming",
            "tentative"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-6"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "20-40mg",
                "Heavy": "80+mg.",
                "Light": "10-20mg",
                "Strong": "40-80mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "1-3"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "10-25"
        },
        "name": "2-pta",
        "pretty_name": "2-PTA",
        "properties": {
            "after-effects": "1-6 hours.",
            "aliases": [
                "4-methyl-2-pa",
                "2-(p-tolyl)acetamide"
            ],
            "categories": [
                "stimulant",
                "research-chemical",
                "habit-forming",
                "tentative"
            ],
            "dose": "Oral Light: 10-20mg Common: 20-40mg Strong: 40-80mg Heavy: 80+mg.",
            "duration": "1-3 hours.",
            "onset": "10-25 minutes.",
            "summary": "4-Methylamphetamine with the alpha-methyl replaced by ketone. Very few reports. Also no information of the safety of this compound. As always treat with caution."
        }
    },
    "25b-nboh": {
        "aliases": [
            "25bnboh",
            "nboh-2cb",
            "2cb-nboh",
            "2c-b-nboh"
        ],
        "categories": [
            "psychedelic",
            "research-chemical",
            "tentative"
        ],
        "dose_note": " NOTE: Do not play around with this substance as there is very little data around.",
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-12"
        },
        "formatted_dose": {
            "Sublingually": {
                "Common": "400-800ug",
                "Light": "200-400ug",
                "Strong": "800ug-1mg."
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "4-10"
        },
        "formatted_effects": [
            "Euphoria",
            "empathy",
            "insight",
            "brightened colour",
            "Closed/Open eye visuals",
            "enhanced tactile sensation",
            "mental/physical stimulation",
            "decreased appetite",
            "pupil dilation",
            "restlessness",
            "change in perception",
            "ego softening",
            "sweating/chills",
            "muscle tension",
            "confusion",
            "insomnia",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "20-40"
        },
        "name": "25b-nboh",
        "pretty_name": "25B-NBOH",
        "properties": {
            "after-effects": "1-12 hours.",
            "aliases": [
                "25bnboh",
                "nboh-2cb",
                "2cb-nboh",
                "2c-b-nboh"
            ],
            "avoid": "Other psychedelics, stimulants, and double dosing.",
            "categories": [
                "psychedelic",
                "research-chemical",
                "tentative"
            ],
            "dose": "Sublingually Light: 200-400ug Common: 400-800ug Strong: 800ug-1mg. | NOTE: Do not play around with this substance as there is very little data around.",
            "duration": "4-10 hours.",
            "effects": "Euphoria, empathy, insight, brightened colour, Closed/Open eye visuals, enhanced tactile sensation, mental/physical stimulation, decreased appetite, pupil dilation, restlessness, change in perception, ego softening, sweating/chills, muscle tension, confusion, insomnia.",
            "onset": "20-40 minutes.",
            "summary": "A phenethylamine psychedelic  and stimulant derivative of 2C-B, this compound is related to and has similar effects to 25b-NBOMe. It is significantly more potent than 2C-B  but less potent than 25B-NBOMe. Overdoses of NBOH compounds may cause  dangerous vasoconstriction. May induce uncomfortable body load."
        }
    },
    "25b-nbome": {
        "aliases": [
            "25b"
        ],
        "categories": [
            "psychedelic",
            "research-chemical"
        ],
        "dose_note": " Note: Do not exceed 1500ug.",
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "2-6"
        },
        "formatted_dose": {
            "Insufflated": {
                "Common": "200-350ug",
                "Light": "50-200ug",
                "Strong": "350-500+",
                "Threshold": "50ug"
            },
            "Sublingual": {
                "Common": "350-500ug",
                "Light": "100-300ug",
                "Strong": "500-700ug+",
                "Threshold": "100ug"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "8-12"
        },
        "formatted_effects": [
            "Euphoria",
            "empathy",
            "insight",
            "brightened colour",
            "Closed/Open eye visuals",
            "enhanced tactile sensation",
            "mental/physical stimulation",
            "decreased appetite",
            "pupil dilation",
            "restlessness",
            "change in perception",
            "ego softening",
            "sweating/chills",
            "muscle tension",
            "confusion",
            "insomnia",
            ""
        ],
        "formatted_onset": {
            "Insufflated": "2-5",
            "Sublingual": "20-40",
            "_unit": "minutes"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_25BNBOMe.shtml"
        },
        "name": "25b-nbome",
        "pretty_name": "25B-NBOMe",
        "properties": {
            "a": "common bomamine analogue of 2C-B. Extremely potent psychedelic with stimulating qualities. May cause  potentially dangerous vasoconstriction at high doses. May induce uncomfortable body load.",
            "after-effects": "2-6 hours.",
            "aliases": [
                "25b"
            ],
            "categories": [
                "psychedelic",
                "research-chemical"
            ],
            "dose": "Sublingual Threshold: 100ug Light: 100-300ug Common: 350-500ug Strong: 500-700ug+ | Insufflated Threshold: 50ug Light: 50-200ug Common: 200-350ug Strong: 350-500+ | Note: Do not exceed 1500ug.",
            "duration": "8-12 hours.",
            "effects": "Euphoria, empathy, insight, brightened colour, Closed/Open eye visuals, enhanced tactile sensation, mental/physical stimulation, decreased appetite, pupil dilation, restlessness, change in perception, ego softening, sweating/chills, muscle tension, confusion, insomnia.",
            "marquis": "Dark Green.",
            "onset": "Sublingual: 20-40 minutes. | Insufflated 2-5 minutes.",
            "summary": "Psychedelic Phenethylamine, active in the lower microgram range, that is not active orally.",
            "test-kits": "Marquis: Dark Green. | Mecke: Dark Green. | Mandelin: Red and Green. | Froehde: Yellow | Liebermann: Yellow > Black. | Ehrlich's Reagent: No colour change."
        },
        "pweffects": {
            "8A Geometry - Exposure to semantic concept network": "https://psychonautwiki.org/wiki/8A_Geometry_-_Exposure_to_semantic_concept_network",
            "Acuity enhancement": "https://psychonautwiki.org/wiki/Acuity_enhancement",
            "After images": "https://psychonautwiki.org/wiki/After_images",
            "Analysis enhancement": "https://psychonautwiki.org/wiki/Analysis_enhancement",
            "Auditory distortion": "https://psychonautwiki.org/wiki/Auditory_distortion",
            "Auditory enhancement": "https://psychonautwiki.org/wiki/Auditory_enhancement",
            "Auditory hallucinations": "https://psychonautwiki.org/wiki/Auditory_hallucinations",
            "Autonomous entities": "https://psychonautwiki.org/wiki/Autonomous_entities",
            "Colour enhancement": "https://psychonautwiki.org/wiki/Colour_enhancement",
            "Colour shifting": "https://psychonautwiki.org/wiki/Colour_shifting",
            "Conceptual thinking": "https://psychonautwiki.org/wiki/Conceptual_thinking",
            "Drifting": "https://psychonautwiki.org/wiki/Drifting",
            "Emotion enhancement": "https://psychonautwiki.org/wiki/Emotion_enhancement",
            "Empathy, love, and sociability enhancement": "https://psychonautwiki.org/wiki/Empathy,_love,_and_sociability_enhancement",
            "Geometry": "https://psychonautwiki.org/wiki/Geometry",
            "Immersion enhancement": "https://psychonautwiki.org/wiki/Immersion_enhancement",
            "Increased heart rate": "https://psychonautwiki.org/wiki/Increased_heart_rate",
            "Increased libido": "https://psychonautwiki.org/wiki/Increased_libido",
            "Internal hallucinations": "https://psychonautwiki.org/wiki/Internal_hallucinations",
            "Memory suppression": "https://psychonautwiki.org/wiki/Memory_suppression",
            "Nausea": "https://psychonautwiki.org/wiki/Nausea",
            "Novelty enhancement": "https://psychonautwiki.org/wiki/Novelty_enhancement",
            "Pattern recognition enhancement": "https://psychonautwiki.org/wiki/Pattern_recognition_enhancement",
            "Perception of decreased weight": "https://psychonautwiki.org/wiki/Perception_of_decreased_weight",
            "Personal bias suppression": "https://psychonautwiki.org/wiki/Personal_bias_suppression",
            "Perspective alterations": "https://psychonautwiki.org/wiki/Perspective_alterations",
            "Pupil dilation": "https://psychonautwiki.org/wiki/Pupil_dilation",
            "Scenarios and plots": "https://psychonautwiki.org/wiki/Scenarios_and_plots",
            "Scenery slicing": "https://psychonautwiki.org/wiki/Scenery_slicing",
            "Settings, sceneries, and landscapes": "https://psychonautwiki.org/wiki/Settings,_sceneries,_and_landscapes",
            "Spontaneous tactile sensations": "https://psychonautwiki.org/wiki/Spontaneous_tactile_sensations",
            "Stimulation": "https://psychonautwiki.org/wiki/Stimulation",
            "Sublingual numbing": "https://psychonautwiki.org/wiki/Sublingual_numbing",
            "Symmetrical texture repetition": "https://psychonautwiki.org/wiki/Symmetrical_texture_repetition",
            "Thought acceleration": "https://psychonautwiki.org/wiki/Thought_acceleration",
            "Thought connectivity": "https://psychonautwiki.org/wiki/Thought_connectivity",
            "Time distortion": "https://psychonautwiki.org/wiki/Time_distortion",
            "Tracers": "https://psychonautwiki.org/wiki/Tracers",
            "Transformations": "https://psychonautwiki.org/wiki/Transformations",
            "Vasoconstriction": "https://psychonautwiki.org/wiki/Vasoconstriction",
            "Wakefulness": "https://psychonautwiki.org/wiki/Wakefulness"
        }
    },
    "25c-nboh": {
        "categories": [
            "psychedelic",
            "research-chemical",
            "tentative"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-10"
        },
        "formatted_dose": {
            "Sublingual": {
                "Common": "600-1400ug",
                "Heavy": "1400-2000ug+",
                "Light": "300-600ug",
                "Threshold": "100-200ug"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "4-6"
        },
        "formatted_effects": [
            "Euphoria",
            "empathy",
            "insight",
            "brightened colour",
            "Closed/Open eye visuals",
            "enhanced tactile sensation",
            "mental/physical stimulation",
            "decreased appetite",
            "pupil dilation",
            "restlessness",
            "change in perception",
            "ego softening",
            "sweating/chills",
            "muscle tension",
            "confusion",
            "insomnia",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "20-40"
        },
        "name": "25c-nboh",
        "pretty_name": "25C-NBOH",
        "properties": {
            "after-effects": "1-10 hours.",
            "avoid": "Other psychedelics, stimulants, and double dosing.",
            "categories": [
                "psychedelic",
                "research-chemical",
                "tentative"
            ],
            "dose": "Sublingual Threshold: 100-200ug Light: 300-600ug Common: 600-1400ug Heavy: 1400-2000ug+",
            "duration": "4-6 hours",
            "effects": "Euphoria, empathy, insight, brightened colour, Closed/Open eye visuals, enhanced tactile sensation, mental/physical stimulation, decreased appetite, pupil dilation, restlessness, change in perception, ego softening, sweating/chills, muscle tension, confusion, insomnia.",
            "onset": "20-40 minutes",
            "summary": "A phenethylamine psychedelic and stimulant derivative of 2C-C, this compound is related and has  similar effects to 25c-NBOMe. It is significantly more potent than 2C-C but less potent than 25c-NBOMe. Overdoses of NBOH compounds may cause dangerous vasoconstriction. May induce uncomfortable body load."
        }
    },
    "25c-nbome": {
        "aliases": [
            "25c",
            "2c-nbome"
        ],
        "categories": [
            "psychedelic",
            "research-chemical",
            "common"
        ],
        "dose_note": " Note: Do not exceed 1500ug.",
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-24"
        },
        "formatted_dose": {
            "Sublingual": {
                "Common": "500-750ug",
                "Light": "250-500ug",
                "Strong": "750-1250ug+",
                "Threshold": "50-250ug"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "4-10"
        },
        "formatted_effects": [
            "Mild OEV's",
            "strong CEV's",
            "A sense of well being and contentedness",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "45-90"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_25CNBOMe.shtml"
        },
        "name": "25c-nbome",
        "pretty_name": "25C-NBOMe",
        "properties": {
            "after-effects": "1-24 hours.",
            "aliases": [
                "25c",
                "2c-nbome"
            ],
            "categories": [
                "psychedelic",
                "research-chemical",
                "common"
            ],
            "dose": "Sublingual Threshold: 50-250ug Light: 250-500ug Common: 500-750ug Strong: 750-1250ug+ | Note: Do not exceed 1500ug.",
            "duration": "4-10 hours.",
            "effects": "Mild OEV's, strong CEV's, A sense of well being and contentedness.",
            "onset": "45-90 minutes.",
            "summary": "A relatively new and popular research chemical. A short acting psychedelic related to 2C-C with similar effects to LSD, though more visual with less of a 'head-trip.' Frequently mis-sold as LSD. Causes an uncomfortable body load and has caused several deaths even within regular dose ranges.",
            "test-kits": "Marquis: Slow Purple. | Mecke: Brown. | Mandelin: No colour change.  | Froehde: Yellow. | Liebermann: Yellow > Black. | Ehrlich's Reagent: No colour change.",
            "tolerance": "25c has an extremely prevalent tolerence, with users reporting a strong cross tolerence with LSD, mushrooms, 2c-X, 25x, and DOx chemicals. Tolerence lasts roughly 2 weeks, depending on the user."
        },
        "pweffects": {
            "8A Geometry - Exposure to semantic concept network": "https://psychonautwiki.org/wiki/8A_Geometry_-_Exposure_to_semantic_concept_network",
            "Acuity enhancement": "https://psychonautwiki.org/wiki/Acuity_enhancement",
            "After images": "https://psychonautwiki.org/wiki/After_images",
            "Analysis enhancement": "https://psychonautwiki.org/wiki/Analysis_enhancement",
            "Auditory distortion": "https://psychonautwiki.org/wiki/Auditory_distortion",
            "Auditory enhancement": "https://psychonautwiki.org/wiki/Auditory_enhancement",
            "Auditory hallucinations": "https://psychonautwiki.org/wiki/Auditory_hallucinations",
            "Autonomous entities": "https://psychonautwiki.org/wiki/Autonomous_entities",
            "Changes in gravity": "https://psychonautwiki.org/wiki/Changes_in_gravity",
            "Colour enhancement": "https://psychonautwiki.org/wiki/Colour_enhancement",
            "Colour shifting": "https://psychonautwiki.org/wiki/Colour_shifting",
            "Conceptual thinking": "https://psychonautwiki.org/wiki/Conceptual_thinking",
            "Diffraction": "https://psychonautwiki.org/wiki/Diffraction",
            "Drifting": "https://psychonautwiki.org/wiki/Drifting",
            "Emotion enhancement": "https://psychonautwiki.org/wiki/Emotion_enhancement",
            "Empathy, love, and sociability enhancement": "https://psychonautwiki.org/wiki/Empathy,_love,_and_sociability_enhancement",
            "Environmental cubism": "https://psychonautwiki.org/wiki/Environmental_cubism",
            "External hallucinations": "https://psychonautwiki.org/wiki/External_hallucinations",
            "Geometry": "https://psychonautwiki.org/wiki/Geometry",
            "Immersion enhancement": "https://psychonautwiki.org/wiki/Immersion_enhancement",
            "Increased blood pressure": "https://psychonautwiki.org/wiki/Increased_blood_pressure",
            "Increased heart rate": "https://psychonautwiki.org/wiki/Increased_heart_rate",
            "Increased libido": "https://psychonautwiki.org/wiki/Increased_libido",
            "Internal hallucinations": "https://psychonautwiki.org/wiki/Internal_hallucinations",
            "Memory suppression": "https://psychonautwiki.org/wiki/Memory_suppression",
            "Nausea": "https://psychonautwiki.org/wiki/Nausea",
            "Novelty enhancement": "https://psychonautwiki.org/wiki/Novelty_enhancement",
            "Pattern recognition enhancement": "https://psychonautwiki.org/wiki/Pattern_recognition_enhancement",
            "Perception of decreased weight": "https://psychonautwiki.org/wiki/Perception_of_decreased_weight",
            "Personal bias suppression": "https://psychonautwiki.org/wiki/Personal_bias_suppression",
            "Perspective alterations": "https://psychonautwiki.org/wiki/Perspective_alterations",
            "Pupil dilation": "https://psychonautwiki.org/wiki/Pupil_dilation",
            "Recursion": "https://psychonautwiki.org/wiki/Recursion",
            "Scenarios and plots": "https://psychonautwiki.org/wiki/Scenarios_and_plots",
            "Scenery slicing": "https://psychonautwiki.org/wiki/Scenery_slicing",
            "Sedation": "https://psychonautwiki.org/wiki/Sedation",
            "Settings, sceneries, and landscapes": "https://psychonautwiki.org/wiki/Settings,_sceneries,_and_landscapes",
            "Spontaneous tactile sensations": "https://psychonautwiki.org/wiki/Spontaneous_tactile_sensations",
            "Stimulation": "https://psychonautwiki.org/wiki/Stimulation",
            "Sublingual numbing": "https://psychonautwiki.org/wiki/Sublingual_numbing",
            "Symmetrical texture repetition": "https://psychonautwiki.org/wiki/Symmetrical_texture_repetition",
            "Tactile hallucinations": "https://psychonautwiki.org/wiki/Tactile_hallucinations",
            "Temperature regulation suppression": "https://psychonautwiki.org/wiki/Temperature_regulation_suppression",
            "Thought acceleration": "https://psychonautwiki.org/wiki/Thought_acceleration",
            "Thought connectivity": "https://psychonautwiki.org/wiki/Thought_connectivity",
            "Time distortion": "https://psychonautwiki.org/wiki/Time_distortion",
            "Tracers": "https://psychonautwiki.org/wiki/Tracers",
            "Transformations": "https://psychonautwiki.org/wiki/Transformations",
            "Vasoconstriction": "https://psychonautwiki.org/wiki/Vasoconstriction",
            "Wakefulness": "https://psychonautwiki.org/wiki/Wakefulness"
        },
        "sources": {
            "_general": [
                "Two cases of severe intoxication associated with analytically confirmed use of the novel psychoactive substances 25B-NBOMe and 25C-NBOMe - http://www.ncbi.nlm.nih.gov/pubmed/24779864"
            ]
        }
    },
    "25d-nbome": {
        "aliases": [
            "2c-d-nbome",
            "25d"
        ],
        "categories": [
            "psychedelic",
            "research-chemical"
        ],
        "dose_note": " Note: Do not exceed 1500ug.",
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "6-24"
        },
        "formatted_dose": {
            "Sublingual": {
                "Common": "500-1000ug",
                "Light": "300-500ug.",
                "Strong": "1000-1250ug+",
                "Threshold": "100-300ug."
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "4-6"
        },
        "formatted_effects": [
            "Euphoria",
            "empathy",
            "insight",
            "brightened colour",
            "Closed/Open eye visuals",
            "enhanced tactile sensation",
            "mental/physical stimulation",
            "decreased appetite",
            "pupil dilation",
            "restlessness",
            "change in perception",
            "ego softening",
            "sweating/chills",
            "muscle tension",
            "confusion",
            "insomnia",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "20-40"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_25DNBOMe.shtml"
        },
        "name": "25d-nbome",
        "pretty_name": "25D-NBOMe",
        "properties": {
            "after-effects": "6-24 hours.",
            "aliases": [
                "2c-d-nbome",
                "25d"
            ],
            "categories": [
                "psychedelic",
                "research-chemical"
            ],
            "dose": "Sublingual Threshold: 100-300ug. Light: 300-500ug. Common: 500-1000ug Strong: 1000-1250ug+ | Note: Do not exceed 1500ug.",
            "duration": "4-6 hours.",
            "effects": "Euphoria, empathy, insight, brightened colour, Closed/Open eye visuals, enhanced tactile sensation, mental/physical stimulation, decreased appetite, pupil dilation, restlessness, change in perception, ego softening, sweating/chills, muscle tension, confusion, insomnia.",
            "onset": "20-40 minutes.",
            "summary": "Uncommon analogue of 2C-D. Extremely potent psychedelic with stimulating qualities. Could cause dangerous vasoconstriction at high doses. May induce uncomfortable body load.",
            "test-kits": "Marquis: Orange > Red. | Mecke: Brown > Green. | Mandelin: Red and Green. | Liebermann: Yellow > Black. | Simon's: Red > Brown. | Ehrlich: No colour change."
        }
    },
    "25e-nbome": {
        "aliases": [
            "25e"
        ],
        "categories": [
            "psychedelic",
            "research-chemical"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "2-10"
        },
        "formatted_dose": {
            "Sublingual": {
                "Common": "200-400ug",
                "Light": "50-200ug",
                "Strong": "400-800ug.",
                "Threshold": "50-100ug"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "5-10"
        },
        "formatted_effects": [
            "Euphoria",
            "empathy",
            "insight",
            "brightened colour",
            "Closed/Open eye visuals",
            "enhanced tactile sensation",
            "mental/physical stimulation",
            "decreased appetite",
            "pupil dilation",
            "restlessness",
            "change in perception",
            "ego softening",
            "sweating/chills",
            "muscle tension",
            "confusion",
            "insomnia",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "15-60"
        },
        "name": "25e-nbome",
        "pretty_name": "25E-NBOMe",
        "properties": {
            "after-effects": "2-10 hours.",
            "aliases": [
                "25e"
            ],
            "categories": [
                "psychedelic",
                "research-chemical"
            ],
            "dose": "Sublingual Threshold: 50-100ug Light: 150-300ug Common: 300-600ug Strong: 600-1000ug. Insufflated Light: 50-200ug Common: 200-400ug Strong: 400-800ug.",
            "duration": "5-10 hours.",
            "effects": "Euphoria, empathy, insight, brightened colour, Closed/Open eye visuals, enhanced tactile sensation, mental/physical stimulation, decreased appetite, pupil dilation, restlessness, change in perception, ego softening, sweating/chills, muscle tension, confusion, insomnia.",
            "onset": "15-60 minutes.",
            "summary": "A potent psychedelic phenethylamine and derivative of 2C-E, usually sold on blotters. May be mis-sold as LSD. Effects include vivid hallucinations, stimulation, heavy body load and vasoconstriction. At high doses vasoconstriction can endanger life, exercise caution.",
            "test-kits": "Marquis: Red > Yellow. | Mecke: Green. | Mandelin: Red. | Ehrlich: No colour change.",
            "warning": "Do not exceed 2mg+ of this compound."
        }
    },
    "25g-nbome": {
        "aliases": [
            "25g",
            "25gnbome"
        ],
        "categories": [
            "psychedelic",
            "research-chemical",
            "tentative"
        ],
        "dose_note": " NOTE: Users report wildly varying reactions to the same doses. Start low and work your way up.",
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-2"
        },
        "formatted_dose": {
            "Buccal/Sublingual": {
                "Common": "1500-2000ug",
                "Light": "1000-1500ug",
                "Strong": "2000ug+",
                "Threshold": "500ug"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "5-7"
        },
        "formatted_effects": [
            "Euphoria",
            "empathy",
            "insight",
            "brightened colour",
            "Closed/Open eye visuals",
            "enhanced tactile sensation",
            "mental/physical stimulation",
            "decreased appetite",
            "pupil dilation",
            "restlessness",
            "change in perception",
            "ego softening",
            "sweating/chills",
            "muscle tension",
            "confusion",
            "insomnia",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "30-50"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_25GNBOMe.shtml"
        },
        "name": "25g-nbome",
        "pretty_name": "25G-NBOMe",
        "properties": {
            "after-effects": "1-2 hours",
            "aliases": [
                "25g",
                "25gnbome"
            ],
            "categories": [
                "psychedelic",
                "research-chemical",
                "tentative"
            ],
            "dose": "Buccal/Sublingual Threshold: 500ug Light: 1000-1500ug Common: 1500-2000ug Strong: 2000ug+ | NOTE: Users report wildly varying reactions to the same doses. Start low and work your way up.",
            "duration": "5-7 hours.",
            "effects": "Euphoria, empathy, insight, brightened colour, Closed/Open eye visuals, enhanced tactile sensation, mental/physical stimulation, decreased appetite, pupil dilation, restlessness, change in perception, ego softening, sweating/chills, muscle tension, confusion, insomnia.",
            "onset": "30-50 minutes",
            "summary": "A rare psychedelic stimulant and bomamine. A derivative of 2C-G, but far more potent. Likely to have hallucinogenic, stimulant and vasoconstrictive  properties which may be dangerous at high doses. A heavy body load is to  be expected."
        }
    },
    "25h-nbome": {
        "aliases": [
            "25h",
            "25-h-nbome"
        ],
        "categories": [
            "psychedelic",
            "research-chemical",
            "tentative"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "2-3"
        },
        "formatted_dose": {
            "Oral": {
                "NOTE": "This"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "3-5"
        },
        "formatted_effects": [
            "Euphoria",
            "empathy",
            "insight",
            "brightened colour",
            "Closed/Open eye visuals",
            "enhanced tactile sensation",
            "mental/physical stimulation",
            "decreased appetite",
            "pupil dilation",
            "restlessness",
            "change in perception",
            "ego softening",
            "sweating/chills",
            "muscle tension",
            "confusion",
            "insomnia",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "30-90"
        },
        "name": "25h-nbome",
        "pretty_name": "25H-NBOMe",
        "properties": {
            "after-effects": "2-3 hours.",
            "aliases": [
                "25h",
                "25-h-nbome"
            ],
            "categories": [
                "psychedelic",
                "research-chemical",
                "tentative"
            ],
            "dose": "NOTE: This chemical has an extremely odd response curve. Some get effects from 2mg while other don't until around the 7mg range. If you plan to use this chemical start with a low dose and work your way up.",
            "duration": "3-5 hours.",
            "effects": "Euphoria, empathy, insight, brightened colour, Closed/Open eye visuals, enhanced tactile sensation, mental/physical stimulation, decreased appetite, pupil dilation, restlessness, change in perception, ego softening, sweating/chills, muscle tension, confusion, insomnia.",
            "onset": "30-90 minutes.",
            "summary": "A rare psychedelic stimulant and bomamine. A derivative of 2C-H, but many times more potent. Likely to have hallucinogenic, stimulant and vasoconstrictive properties which may be dangerous at high doses. A heavy body load is to be expected.",
            "test-kits": "Marquis: Light Brown > Brown. | Mecke: Yellow > Green/Brown. | Mandelin: Green/Brown > Orange. | Simon's: Orange > Black."
        }
    },
    "25i-nbf": {
        "categories": [
            "tentative",
            "psychedelic",
            "research-chemical"
        ],
        "name": "25i-nbf",
        "pretty_name": "25I-NBF",
        "properties": {
            "categories": [
                "tentative",
                "psychedelic",
                "research-chemical"
            ],
            "summary": "Is a derivate of the psychedelic 2C-I. Was sold breifly in a few countries before being banned. Based purely on the pharmacological evidence it'll be between 6-8x less potent than it's parent compound 25I-NBOMe.",
            "test-kits": "Marquis: Dark Green. | Mecke: Orange > Black. | Mandelin: Orange > Black. | Froehde: Orange > Black. | Liebermann: Orange > Black. | Ehrlich: No colour change. | Gallic Acid: Orange > Black."
        }
    },
    "25i-nbmd": {
        "categories": [
            "psychedelic",
            "research-chemical",
            "tentative"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-8"
        },
        "formatted_dose": {
            "Sublingual": {
                "Common": "1500-2000ug",
                "Light": "800-1500ug",
                "Strong": "2000-3000ug+"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "4-6"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "20-40"
        },
        "name": "25i-nbmd",
        "pretty_name": "25I-NBMD",
        "properties": {
            "after-effects": "1-8 hours.",
            "avoid": "Other psychedelics, stimulants, and double dosing.",
            "categories": [
                "psychedelic",
                "research-chemical",
                "tentative"
            ],
            "dose": "Sublingual Light: 800-1500ug Common: 1500-2000ug Strong: 2000-3000ug+",
            "duration": "4-6 hours.",
            "onset": "20-40 minutes.",
            "summary": "A psychedelic phenethylamine that is related to the 25X-NBOMe series which in turn makes it related to the 2C-X series. Quite potent substance."
        }
    },
    "25i-nboh": {
        "aliases": [
            "nboh-2ci",
            "cimbi-27"
        ],
        "categories": [
            "psychedelic",
            "research-chemical",
            "tentative"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-12"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "800-1400ug",
                "Light": "416ug-766ug",
                "Strong": "1400ug-2000ug+",
                "Threshold": "166ug-416ug"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "5-10"
        },
        "formatted_effects": [
            "Euphoria",
            "empathy",
            "insight",
            "brightened colour",
            "Closed/Open eye visuals",
            "enhanced tactile sensation",
            "mental/physical stimulation",
            "decreased appetite",
            "pupil dilation",
            "restlessness",
            "change in perception",
            "ego softening",
            "sweating/chills",
            "muscle tension",
            "confusion",
            "insomnia",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "20-40"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_25INBOH.shtml"
        },
        "name": "25i-nboh",
        "pretty_name": "25I-NBOH",
        "properties": {
            "after-effects": "1-12 hours.",
            "aliases": [
                "nboh-2ci",
                "cimbi-27"
            ],
            "avoid": "Other psychedelics, stimulants, and double dosing.",
            "categories": [
                "psychedelic",
                "research-chemical",
                "tentative"
            ],
            "dose": "Threshold: 166ug-416ug Light: 416ug-766ug Common: 800-1400ug Strong: 1400ug-2000ug+",
            "duration": "5-10 hours.",
            "effects": "Euphoria, empathy, insight, brightened colour, Closed/Open eye visuals, enhanced tactile sensation, mental/physical stimulation, decreased appetite, pupil dilation, restlessness, change in perception, ego softening, sweating/chills, muscle tension, confusion, insomnia.",
            "onset": "20-40 minutes",
            "summary": "A phenethylamine psychedelic and stimulant derivative of 2C-I, this compound is related and has similar effects to 25i-NBOMe. It is significantly more potent than 2C-I but less potent than 25i-NBOMe. Overdoses of NBOH compounds may cause dangerous vasoconstriction. May induce uncomfortable body load."
        }
    },
    "25i-nbome": {
        "aliases": [
            "25i",
            "2-c-i-nbome",
            "25-i"
        ],
        "categories": [
            "psychedelic",
            "research-chemical",
            "common"
        ],
        "dose_note": " Note: Do not exceed 1500ug.",
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "6-24"
        },
        "formatted_dose": {
            "Sublingual": {
                "Common": "500-750ug",
                "Light": "200-500ug",
                "Strong": "700-1000ug+",
                "Threshold": "50-250ug"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "5-10"
        },
        "formatted_effects": [
            "Euphoria",
            "empathy",
            "insight",
            "brightened colour",
            "Closed/Open eye visuals",
            "enhanced tactile sensation",
            "mental/physical stimulation",
            "decreased appetite",
            "pupil dilation",
            "restlessness",
            "change in perception",
            "ego softening",
            "sweating/chills",
            "muscle tension",
            "confusion",
            "insomnia",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "45-90"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_25INBOMe.shtml"
        },
        "name": "25i-nbome",
        "pretty_name": "25I-NBOMe",
        "properties": {
            "after-effects": "6-24 hours",
            "aliases": [
                "25i",
                "2-c-i-nbome",
                "25-i"
            ],
            "categories": [
                "psychedelic",
                "research-chemical",
                "common"
            ],
            "dose": "Sublingual Threshold: 50-250ug Light: 200-500ug Common: 500-750ug Strong: 700-1000ug+ | Note: Do not exceed 1500ug.",
            "duration": "5-10 hours.",
            "effects": "Euphoria, empathy, insight, brightened colour, Closed/Open eye visuals, enhanced tactile sensation, mental/physical stimulation, decreased appetite, pupil dilation, restlessness, change in perception, ego softening, sweating/chills, muscle tension, confusion, insomnia.",
            "marquis": "Orange",
            "onset": "45-90 minutes.",
            "summary": "A relatively new and popular research chemical with psychedelic properties. Users report an uncomfortable body load with very strong visuals, though with less of a mental aspect than most psychedelics. Commonly mis-sold as LSD, since it is much cheaper to produce. Is considered quite unsafe, and has caused several deaths at 'regular' doses.",
            "test-kits": "Marquis: Orange > Black. | Mecke: Brown > Black. | Mandelin: Brown > Black. | Froehde: Yellow | Ehrlich: No colour change.",
            "tolerance": "25i-nbome has an extremely prevalent tolerance, with users reporting a strong cross tolerance with LSD, mushrooms, 2C-*, DO* and other 25* chemicals. Tolerance lasts roughly 2 weeks depending on the user.",
            "wiki": "http://wiki.tripsit.me/wiki/NBOMes"
        },
        "pweffects": {
            "8A Geometry - Exposure to semantic concept network": "https://psychonautwiki.org/wiki/8A_Geometry_-_Exposure_to_semantic_concept_network",
            "Acuity enhancement": "https://psychonautwiki.org/wiki/Acuity_enhancement",
            "After images": "https://psychonautwiki.org/wiki/After_images",
            "Analysis enhancement": "https://psychonautwiki.org/wiki/Analysis_enhancement",
            "Auditory distortion": "https://psychonautwiki.org/wiki/Auditory_distortion",
            "Auditory enhancement": "https://psychonautwiki.org/wiki/Auditory_enhancement",
            "Auditory hallucinations": "https://psychonautwiki.org/wiki/Auditory_hallucinations",
            "Autonomous entities": "https://psychonautwiki.org/wiki/Autonomous_entities",
            "Colour enhancement": "https://psychonautwiki.org/wiki/Colour_enhancement",
            "Colour shifting": "https://psychonautwiki.org/wiki/Colour_shifting",
            "Conceptual thinking": "https://psychonautwiki.org/wiki/Conceptual_thinking",
            "Difficulty urinating": "https://psychonautwiki.org/wiki/Difficulty_urinating",
            "Drifting": "https://psychonautwiki.org/wiki/Drifting",
            "Emotion enhancement": "https://psychonautwiki.org/wiki/Emotion_enhancement",
            "Empathy, love, and sociability enhancement": "https://psychonautwiki.org/wiki/Empathy,_love,_and_sociability_enhancement",
            "Feelings of impending doom": "https://psychonautwiki.org/wiki/Feelings_of_impending_doom",
            "Geometry": "https://psychonautwiki.org/wiki/Geometry",
            "Immersion enhancement": "https://psychonautwiki.org/wiki/Immersion_enhancement",
            "Increased blood pressure": "https://psychonautwiki.org/wiki/Increased_blood_pressure",
            "Increased heart rate": "https://psychonautwiki.org/wiki/Increased_heart_rate",
            "Increased libido": "https://psychonautwiki.org/wiki/Increased_libido",
            "Internal hallucinations": "https://psychonautwiki.org/wiki/Internal_hallucinations",
            "Language suppression": "https://psychonautwiki.org/wiki/Language_suppression",
            "Laughter": "https://psychonautwiki.org/wiki/Laughter",
            "Magnification": "https://psychonautwiki.org/wiki/Magnification",
            "Memory suppression": "https://psychonautwiki.org/wiki/Memory_suppression",
            "Nausea": "https://psychonautwiki.org/wiki/Nausea",
            "Novelty enhancement": "https://psychonautwiki.org/wiki/Novelty_enhancement",
            "Pattern recognition enhancement": "https://psychonautwiki.org/wiki/Pattern_recognition_enhancement",
            "Perception of decreased weight": "https://psychonautwiki.org/wiki/Perception_of_decreased_weight",
            "Personal bias suppression": "https://psychonautwiki.org/wiki/Personal_bias_suppression",
            "Perspective alterations": "https://psychonautwiki.org/wiki/Perspective_alterations",
            "Pupil dilation": "https://psychonautwiki.org/wiki/Pupil_dilation",
            "Scenarios and plots": "https://psychonautwiki.org/wiki/Scenarios_and_plots",
            "Scenery slicing": "https://psychonautwiki.org/wiki/Scenery_slicing",
            "Settings, sceneries, and landscapes": "https://psychonautwiki.org/wiki/Settings,_sceneries,_and_landscapes",
            "Spontaneous tactile sensations": "https://psychonautwiki.org/wiki/Spontaneous_tactile_sensations",
            "Stimulation": "https://psychonautwiki.org/wiki/Stimulation",
            "Sublingual numbing": "https://psychonautwiki.org/wiki/Sublingual_numbing",
            "Symmetrical texture repetition": "https://psychonautwiki.org/wiki/Symmetrical_texture_repetition",
            "Thought acceleration": "https://psychonautwiki.org/wiki/Thought_acceleration",
            "Thought connectivity": "https://psychonautwiki.org/wiki/Thought_connectivity",
            "Time distortion": "https://psychonautwiki.org/wiki/Time_distortion",
            "Tracers": "https://psychonautwiki.org/wiki/Tracers",
            "Transformations": "https://psychonautwiki.org/wiki/Transformations",
            "Vasoconstriction": "https://psychonautwiki.org/wiki/Vasoconstriction",
            "Wakefulness": "https://psychonautwiki.org/wiki/Wakefulness"
        },
        "sources": {
            "_general": [
                "Severe clinical toxicity associated with analytically confirmed recreational use of 25I-NBOMe: case series - http://www.ncbi.nlm.nih.gov/pubmed/23731373"
            ]
        }
    },
    "25ip-nbome": {
        "aliases": [
            "25ip"
        ],
        "categories": [
            "psychedelic",
            "research-chemical",
            "tentative"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-12"
        },
        "formatted_dose": {
            "Sublingual": {
                "Common": "750-1000ug",
                "Light": "300-750ug",
                "Strong": "1000-1500ug",
                "Threshold": "250ug"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "5-7"
        },
        "formatted_effects": [
            "Euphoria",
            "empathy",
            "insight",
            "brightened colour",
            "Closed/Open eye visuals",
            "enhanced tactile sensation",
            "mental/physical stimulation",
            "decreased appetite",
            "pupil dilation",
            "restlessness",
            "change in perception",
            "ego softening",
            "sweating/chills",
            "muscle tension",
            "confusion",
            "insomnia",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "30-60"
        },
        "name": "25ip-nbome",
        "pretty_name": "25iP-NBOMe",
        "properties": {
            "after-effects": "1-12 hours.",
            "aliases": [
                "25ip"
            ],
            "categories": [
                "psychedelic",
                "research-chemical",
                "tentative"
            ],
            "dose": "Sublingual Threshold: 250ug Light: 300-750ug Common: 750-1000ug Strong: 1000-1500ug",
            "duration": "5-7 hours.",
            "effects": "Euphoria, empathy, insight, brightened colour, Closed/Open eye visuals, enhanced tactile sensation, mental/physical stimulation, decreased appetite, pupil dilation, restlessness, change in perception, ego softening, sweating/chills, muscle tension, confusion, insomnia.",
            "onset": "30-60 minutes.",
            "summary": "Almost unheard-of bomamine analogue of 2C-iP. Extremely potent psychedelic with stimulating qualities. May cause potentially dangerous vasoconstriction at high doses. May induce uncomfortable body load.",
            "test-kits": "Marquis: Red. | Mecke: Green. | Mandelin: Red and Green. | Froehde: Green. | Liebermann: Yellow > Brown. | Ehrlich: No colour change."
        }
    },
    "25n-nbome": {
        "aliases": [
            "2-c-n-nbome",
            "25n"
        ],
        "categories": [
            "psychedelic",
            "research-chemical",
            "tentative"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-12"
        },
        "formatted_dose": {
            "Sublingual/Buccal": {
                "Common": "300-800ug",
                "Light": "100-300ug",
                "Strong": "800-1300ug+"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "5-10"
        },
        "formatted_effects": [
            "Euphoria",
            "empathy",
            "insight",
            "brightened colour",
            "Closed/Open eye visuals",
            "enhanced tactile sensation",
            "mental/physical stimulation",
            "decreased appetite",
            "pupil dilation",
            "restlessness",
            "change in perception",
            "ego softening",
            "sweating/chills",
            "muscle tension",
            "confusion",
            "insomnia",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "45-75"
        },
        "name": "25n-nbome",
        "pretty_name": "25N-NBOMe",
        "properties": {
            "after-effects": "1-12 hours.",
            "aliases": [
                "2-c-n-nbome",
                "25n"
            ],
            "categories": [
                "psychedelic",
                "research-chemical",
                "tentative"
            ],
            "dose": "Sublingual/Buccal Light: 100-300ug Common: 300-800ug Strong: 800-1300ug+",
            "duration": "5-10 hours.",
            "effects": "Euphoria, empathy, insight, brightened colour, Closed/Open eye visuals, enhanced tactile sensation, mental/physical stimulation, decreased appetite, pupil dilation, restlessness, change in perception, ego softening, sweating/chills, muscle tension, confusion, insomnia.",
            "onset": "45-75 minutes.",
            "summary": "A rare, highly potent and yellow psychedelic phenethylamine and derivative of 2C-N. Effects are similar to other NBOMe compounds, with hallucinations, intense body load, stimulation and vasoconstriction. At high doses vasoconstriction can be dangerous, exercise caution.",
            "test-kits": "Marquis: Red > Brown. | Mecke: Blue > Black. | Mandelin: Blue > Black. | Froehde: Brown. | Liebermann: Brown. | Simon's: Red > Brown. | Ehrlich: No colour change."
        }
    },
    "25p-nbome": {
        "categories": [
            "psychedelic",
            "research-chemical",
            "tentative"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-16"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "450-700ug",
                "Light": "250-450ug",
                "Strong": "700-1500ug",
                "Threshold": "100-250ug"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "7-14"
        },
        "formatted_effects": [
            "Euphoria",
            "empathy",
            "insight",
            "brightened colour",
            "Closed/Open eye visuals",
            "enhanced tactile sensation",
            "mental/physical stimulation",
            "decreased appetite",
            "pupil dilation",
            "restlessness",
            "change in perception",
            "ego softening",
            "sweating/chills",
            "muscle tension",
            "confusion",
            "insomnia",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "25-40"
        },
        "name": "25p-nbome",
        "pretty_name": "25P-NBOMe",
        "properties": {
            "after-effects": "1-16 hours.",
            "categories": [
                "psychedelic",
                "research-chemical",
                "tentative"
            ],
            "dose": "Threshold: 100-250ug Light: 250-450ug Common: 450-700ug Strong: 700-1500ug",
            "duration": "7-14 hours.",
            "effects": "Euphoria, empathy, insight, brightened colour, Closed/Open eye visuals, enhanced tactile sensation, mental/physical stimulation, decreased appetite, pupil dilation, restlessness, change in perception, ego softening, sweating/chills, muscle tension, confusion, insomnia.",
            "onset": "25-40 minutes.",
            "summary": "A rare potent psychedelic drug with similar effects and risks to others in the NBOMe class. Yet no trip reports... when the substance was first sold in mid-late 2012, and resurfaced in early 2015."
        }
    },
    "25t-2-nbome": {
        "aliases": [
            "25t2-nbome"
        ],
        "categories": [
            "psychedelic",
            "research-chemical",
            "tentative"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "2-10"
        },
        "formatted_dose": {
            "Sublingual": {
                "Common": "300-600ug",
                "Light": "100-300ug",
                "Strong": "600-1000ug."
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "6-10"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "30-45"
        },
        "name": "25t-2-nbome",
        "pretty_name": "25T-2-NBOMe",
        "properties": {
            "after-effects": "2-10 hours.",
            "aliases": [
                "25t2-nbome"
            ],
            "categories": [
                "psychedelic",
                "research-chemical",
                "tentative"
            ],
            "dose": "Sublingual Light: 100-300ug Common: 300-600ug Strong: 600-1000ug.",
            "duration": "6-10 hours.",
            "onset": "30-45 minutes.",
            "summary": "A potent serotonin receptor agonist at the 5-HT2a receptor that is of the NBOMe drug class. It is a hallucinogenic and psychedelic with limited recorded human use."
        }
    },
    "25t-4-nbome": {
        "aliases": [
            "25t4-nbome"
        ],
        "categories": [
            "tentative",
            "psychedelic",
            "research-chemical"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "2-12"
        },
        "formatted_dose": {
            "Sublingual": {
                "Common": "300-750ug",
                "Light": "150-300ug",
                "Strong": "750-1200ug."
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "5-9"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "20-45"
        },
        "name": "25t-4-nbome",
        "pretty_name": "25T-4-NBOMe",
        "properties": {
            "after-effects": "2-12 hours.",
            "aliases": [
                "25t4-nbome"
            ],
            "categories": [
                "tentative",
                "psychedelic",
                "research-chemical"
            ],
            "dose": "Sublingual Light: 150-300ug Common: 300-750ug Strong: 750-1200ug.",
            "duration": "5-9 hours.",
            "onset": "20-45 minutes.",
            "summary": "A psychedelic RC of the NBOMe class of drugs that is expected to cause hallucinations. Limited human use has been recorded on this drug and caution should be used with dosing."
        }
    },
    "2c-b": {
        "aliases": [
            "bees",
            "nexus",
            "2cb",
            "2cb",
            "2-cb"
        ],
        "categories": [
            "psychedelic",
            "empathogen",
            "common"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "2-4"
        },
        "formatted_dose": {
            "Insufflated/Plugged": {
                "Common": "10-20mg",
                "Heavy": "30mg+",
                "Light": "5-10mg",
                "Strong": "20-30mg"
            },
            "Oral": {
                "Common": "15-30mg",
                "Heavy": "50mg+",
                "Light": "5-15mg",
                "Strong": "30-50mg"
            }
        },
        "formatted_duration": {
            "Insufflated": "2-4",
            "Oral": "4-8",
            "Plugged": "3-5",
            "_unit": "hours"
        },
        "formatted_effects": [
            "euphoria",
            "giggling",
            "empathy",
            "insight",
            "brightened color",
            "closed/open eye visuals",
            "enhanced tactile sensation",
            "mental/physical stimulation",
            "decreased appetite",
            "pupil dilation",
            "restlessness",
            "change in perception of time",
            "ego softening",
            "nausea",
            "sweating/chills",
            "muscle tension",
            "confusion",
            "insomnia"
        ],
        "formatted_onset": {
            "Insufflated": "1-10",
            "Oral": "20-75",
            "Plugged": "5-20",
            "_unit": "minutes"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_2CB.shtml",
            "pihkal": "https://www.erowid.org/library/books_online/pihkal/pihkal020.shtml"
        },
        "name": "2c-b",
        "pretty_name": "2C-B",
        "properties": {
            "after-effects": "2-4 hours",
            "aliases": [
                "bees",
                "nexus",
                "2cb",
                "2cb",
                "2-cb"
            ],
            "categories": [
                "psychedelic",
                "empathogen",
                "common"
            ],
            "dose": "Oral Light: 5-15mg  Common: 15-30mg  Strong: 30-50mg  Heavy: 50mg+ | Insufflated/Plugged  Light: 5-10mg  Common: 10-20mg  Strong: 20-30mg  Heavy: 30mg+",
            "duration": "Oral: 4-8 hours | Insufflated: 2-4 hours | Plugged: 3-5 hours",
            "effects": "euphoria, giggling, empathy, insight, brightened color, closed/open eye visuals, enhanced tactile sensation, mental/physical stimulation, decreased appetite, pupil dilation, restlessness, change in perception of time, ego softening, nausea, sweating/chills, muscle tension, confusion, insomnia",
            "onset": "Oral: 20-75 minutes | Insufflated: 1-10 minutes | Plugged: 5-20 minutes",
            "summary": "A popular psychedelic in the phenethylamine family. Provides empathic experiences at lower doses and strong visual and psychedelic experiences at higher doses. Commonly used as a party drug as it is more clear-headed than most psychedelics. 2C-B has been in use since the early 1990s",
            "test-kits": "Marquis: Yellow > Green. | Mecke: Yellow > Green/Brown. | Mandelin: Green. | Froehde: Yellow > Green. | Liebermann: Yellow > Black. | Simon's No colour change or Purple. | Ehrlich: No colour change."
        },
        "pweffects": {
            "8A Geometry - Exposure to semantic concept network": "https://psychonautwiki.org/wiki/8A_Geometry_-_Exposure_to_semantic_concept_network",
            "Acuity enhancement": "https://psychonautwiki.org/wiki/Acuity_enhancement",
            "After images": "https://psychonautwiki.org/wiki/After_images",
            "Analysis enhancement": "https://psychonautwiki.org/wiki/Analysis_enhancement",
            "Auditory distortion": "https://psychonautwiki.org/wiki/Auditory_distortion",
            "Auditory enhancement": "https://psychonautwiki.org/wiki/Auditory_enhancement",
            "Auditory hallucinations": "https://psychonautwiki.org/wiki/Auditory_hallucinations",
            "Autonomous entities": "https://psychonautwiki.org/wiki/Autonomous_entities",
            "Bodily control enhancement": "https://psychonautwiki.org/wiki/Bodily_control_enhancement",
            "Colour enhancement": "https://psychonautwiki.org/wiki/Colour_enhancement",
            "Colour shifting": "https://psychonautwiki.org/wiki/Colour_shifting",
            "Conceptual thinking": "https://psychonautwiki.org/wiki/Conceptual_thinking",
            "Delusions": "https://psychonautwiki.org/wiki/Delusions",
            "Depth perception distortions": "https://psychonautwiki.org/wiki/Depth_perception_distortions",
            "Drifting": "https://psychonautwiki.org/wiki/Drifting",
            "Emotion enhancement": "https://psychonautwiki.org/wiki/Emotion_enhancement",
            "Empathy, love, and sociability enhancement": "https://psychonautwiki.org/wiki/Empathy,_love,_and_sociability_enhancement",
            "Feelings of interdependent opposites": "https://psychonautwiki.org/wiki/Feelings_of_interdependent_opposites",
            "Feelings of predeterminism": "https://psychonautwiki.org/wiki/Feelings_of_predeterminism",
            "Feelings of self-design": "https://psychonautwiki.org/wiki/Feelings_of_self-design",
            "Geometry": "https://psychonautwiki.org/wiki/Geometry",
            "Immersion enhancement": "https://psychonautwiki.org/wiki/Immersion_enhancement",
            "Increased blood pressure": "https://psychonautwiki.org/wiki/Increased_blood_pressure",
            "Increased heart rate": "https://psychonautwiki.org/wiki/Increased_heart_rate",
            "Increased libido": "https://psychonautwiki.org/wiki/Increased_libido",
            "Internal hallucinations": "https://psychonautwiki.org/wiki/Internal_hallucinations",
            "Memory suppression": "https://psychonautwiki.org/wiki/Memory_suppression",
            "Nausea": "https://psychonautwiki.org/wiki/Nausea",
            "Novelty enhancement": "https://psychonautwiki.org/wiki/Novelty_enhancement",
            "Pattern recognition enhancement": "https://psychonautwiki.org/wiki/Pattern_recognition_enhancement",
            "Personal bias suppression": "https://psychonautwiki.org/wiki/Personal_bias_suppression",
            "Perspective alterations": "https://psychonautwiki.org/wiki/Perspective_alterations",
            "Physical euphoria": "https://psychonautwiki.org/wiki/Physical_euphoria",
            "Pupil dilation": "https://psychonautwiki.org/wiki/Pupil_dilation",
            "Rejuvenation": "https://psychonautwiki.org/wiki/Rejuvenation",
            "Scenarios and plots": "https://psychonautwiki.org/wiki/Scenarios_and_plots",
            "Scenery slicing": "https://psychonautwiki.org/wiki/Scenery_slicing",
            "Settings, sceneries, and landscapes": "https://psychonautwiki.org/wiki/Settings,_sceneries,_and_landscapes",
            "Spontaneous tactile sensations": "https://psychonautwiki.org/wiki/Spontaneous_tactile_sensations",
            "Stimulation": "https://psychonautwiki.org/wiki/Stimulation",
            "Symmetrical texture repetition": "https://psychonautwiki.org/wiki/Symmetrical_texture_repetition",
            "Synaesthesia": "https://psychonautwiki.org/wiki/Synaesthesia",
            "Tactile enhancement": "https://psychonautwiki.org/wiki/Tactile_enhancement",
            "Teeth grinding": "https://psychonautwiki.org/wiki/Teeth_grinding",
            "Thought acceleration": "https://psychonautwiki.org/wiki/Thought_acceleration",
            "Thought connectivity": "https://psychonautwiki.org/wiki/Thought_connectivity",
            "Time distortion": "https://psychonautwiki.org/wiki/Time_distortion",
            "Tracers": "https://psychonautwiki.org/wiki/Tracers",
            "Transformations": "https://psychonautwiki.org/wiki/Transformations",
            "Visual haze": "https://psychonautwiki.org/wiki/Visual_haze"
        },
        "sources": {
            "_general": [
                "In vivo metabolism of 4-bromo-2,5-dimethoxyphenethylamine (2C-B) in the rat: identification of urinary metabolites - http://www.ncbi.nlm.nih.gov/pubmed/11916016"
            ]
        }
    },
    "2c-b-an": {
        "categories": [
            "psychedelic",
            "tentative",
            "research-chemical"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-6"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "45-70mg",
                "Heavy": "100+mg",
                "Light": "30-45mg",
                "Strong": "70-100mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "5-9"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "40-75"
        },
        "name": "2c-b-an",
        "pretty_name": "2C-B-AN",
        "properties": {
            "after-effects": "1-6 hours.",
            "categories": [
                "psychedelic",
                "tentative",
                "research-chemical"
            ],
            "dose": "Oral Light: 30-45mg Common: 45-70mg Strong: 70-100mg Heavy: 100+mg",
            "duration": "5-9 hours",
            "onset": "40-75 minutes",
            "summary": "2C-B-AN is a novel prodrug for 2C-B."
        }
    },
    "2c-b-fly": {
        "aliases": [
            "2cb-fly",
            "2cbfly"
        ],
        "categories": [
            "psychedelic",
            "research-chemical"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-24"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "10-18mg",
                "Heavy": "25mg+",
                "Light": "5-10mg",
                "Strong": "18-25mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "6-12"
        },
        "formatted_effects": [
            "Euphoria",
            "empathy",
            "insight",
            "brightened colour",
            "Closed/Open eye visuals",
            "enhanced tactile sensation",
            "mental/physical stimulation",
            "decreased appetite",
            "pupil dilation",
            "restlessness",
            "change in perception",
            "ego softening",
            "sweating/chills",
            "muscle tension",
            "confusion",
            "insomnia",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "30-90"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_2CBFly.shtml"
        },
        "name": "2c-b-fly",
        "pretty_name": "2C-B-FLY",
        "properties": {
            "after-effects": "1-24 hours.",
            "aliases": [
                "2cb-fly",
                "2cbfly"
            ],
            "categories": [
                "psychedelic",
                "research-chemical"
            ],
            "dose": "Oral Light: 5-10mg Common: 10-18mg Strong: 18-25mg Heavy: 25mg+",
            "duration": "6-12 hours",
            "effects": "Euphoria, empathy, insight, brightened colour, Closed/Open eye visuals, enhanced tactile sensation, mental/physical stimulation, decreased appetite, pupil dilation, restlessness, change in perception, ego softening, sweating/chills, muscle tension, confusion, insomnia.",
            "onset": "30-90 minutes.",
            "summary": "Psychedelic phenethylamine that is the dihydrodifuran analog of 2C-B.",
            "test-kits": "Marquis: Yellow > Brown Green. | Mecke: Yellow > Brown Green. | Mandelin: Brown."
        }
    },
    "2c-b-fly-nbome": {
        "aliases": [
            "2cbflynbome"
        ],
        "categories": [
            "tentative",
            "psychedelic",
            "empathogen",
            "research-chemical"
        ],
        "dose_note": " Note: More research needs to be done with this chemical. Stay safe.",
        "formatted_dose": {
            "Insufflated": {
                "Threshold": "100-200ug"
            }
        },
        "formatted_onset": {
            "Insufflated": "5-10",
            "_unit": "minutes"
        },
        "name": "2c-b-fly-nbome",
        "pretty_name": "2C-B-FLY-NBOMe",
        "properties": {
            "aliases": [
                "2cbflynbome"
            ],
            "categories": [
                "tentative",
                "psychedelic",
                "empathogen",
                "research-chemical"
            ],
            "dose": "Insufflated Threshold: 100-200ug | Note: More research needs to be done with this chemical. Stay safe.",
            "onset": "Insufflated: 5-10 minutes."
        }
    },
    "2c-c": {
        "aliases": [
            "2cc"
        ],
        "categories": [
            "psychedelic",
            "research-chemical"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-12"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "15-25mg",
                "Heavy": "30-40mg+",
                "Light": "5-15mg",
                "Strong": "25-30mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "4-8"
        },
        "formatted_effects": [
            "euphoria",
            "giggling",
            "empathy",
            "insight",
            "brightened color",
            "closed/open eye visuals",
            "enhanced tactile sensation",
            "mental/physical stimulation",
            "decreased appetite",
            "pupil dilation",
            "restlessness",
            "change in perception of time",
            "ego  softening",
            "nausea",
            "sweating/chills",
            "muscle tension",
            "confusion",
            "insomnia"
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "30-120"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_2CC.shtml",
            "pihkal": "https://www.erowid.org/library/books_online/pihkal/pihkal022.shtml"
        },
        "name": "2c-c",
        "pretty_name": "2C-C",
        "properties": {
            "after-effects": "1-12 hours.",
            "aliases": [
                "2cc"
            ],
            "categories": [
                "psychedelic",
                "research-chemical"
            ],
            "dose": "Oral Light: 15-25mg Common: 25-35mg Strong: 35-55mg Insufflated/Plugged Light: 5-15mg Common: 15-25mg Strong: 25-30mg Heavy: 30-40mg+",
            "duration": "4-8 hours",
            "effects": "euphoria, giggling, empathy, insight, brightened color, closed/open eye visuals, enhanced tactile sensation, mental/physical stimulation, decreased appetite, pupil dilation, restlessness, change in perception of time, ego  softening, nausea, sweating/chills, muscle tension, confusion, insomnia",
            "onset": "30-120 minutes",
            "summary": "A short-acting psychedelic research chemical of the 2c-x family. Often described as being less stimulating than the other 2c-x, and is a relatively unique psychedelic in this respect.",
            "test-kits": "Marquis: Yellow > Green Brown. | Mecke: Yellow Green > Brown. | Mandelin: Orange > Yellow. | Froehde: Yellow > Green. | Liebermann: Yellow > Black > Clear. | Simon's: Pink > Brown. | Ehrlich: No colour change."
        },
        "pweffects": {
            "8B Geometry - Exposure to inner mechanics of consciousness": "https://psychonautwiki.org/wiki/8B_Geometry_-_Exposure_to_inner_mechanics_of_consciousness",
            "Acuity enhancement": "https://psychonautwiki.org/wiki/Acuity_enhancement",
            "Analysis enhancement": "https://psychonautwiki.org/wiki/Analysis_enhancement",
            "Auditory distortion": "https://psychonautwiki.org/wiki/Auditory_distortion",
            "Auditory enhancement": "https://psychonautwiki.org/wiki/Auditory_enhancement",
            "Auditory hallucinations": "https://psychonautwiki.org/wiki/Auditory_hallucinations",
            "Autonomous entities": "https://psychonautwiki.org/wiki/Autonomous_entities",
            "Bodily control enhancement": "https://psychonautwiki.org/wiki/Bodily_control_enhancement",
            "Colour enhancement": "https://psychonautwiki.org/wiki/Colour_enhancement",
            "Colour shifting": "https://psychonautwiki.org/wiki/Colour_shifting",
            "Conceptual thinking": "https://psychonautwiki.org/wiki/Conceptual_thinking",
            "Drifting": "https://psychonautwiki.org/wiki/Drifting",
            "Emotion enhancement": "https://psychonautwiki.org/wiki/Emotion_enhancement",
            "Empathy, love, and sociability enhancement": "https://psychonautwiki.org/wiki/Empathy,_love,_and_sociability_enhancement",
            "External hallucinations": "https://psychonautwiki.org/wiki/External_hallucinations",
            "Geometry": "https://psychonautwiki.org/wiki/Geometry",
            "Immersion enhancement": "https://psychonautwiki.org/wiki/Immersion_enhancement",
            "Increased heart rate": "https://psychonautwiki.org/wiki/Increased_heart_rate",
            "Increased libido": "https://psychonautwiki.org/wiki/Increased_libido",
            "Internal hallucinations": "https://psychonautwiki.org/wiki/Internal_hallucinations",
            "Machinescapes": "https://psychonautwiki.org/wiki/Machinescapes",
            "Memory suppression": "https://psychonautwiki.org/wiki/Memory_suppression",
            "Mindfulness": "https://psychonautwiki.org/wiki/Mindfulness",
            "Nausea": "https://psychonautwiki.org/wiki/Nausea",
            "Novelty enhancement": "https://psychonautwiki.org/wiki/Novelty_enhancement",
            "Pattern recognition enhancement": "https://psychonautwiki.org/wiki/Pattern_recognition_enhancement",
            "Personal bias suppression": "https://psychonautwiki.org/wiki/Personal_bias_suppression",
            "Perspective alterations": "https://psychonautwiki.org/wiki/Perspective_alterations",
            "Pupil dilation": "https://psychonautwiki.org/wiki/Pupil_dilation",
            "Scenarios and plots": "https://psychonautwiki.org/wiki/Scenarios_and_plots",
            "Sedation": "https://psychonautwiki.org/wiki/Sedation",
            "Settings, sceneries, and landscapes": "https://psychonautwiki.org/wiki/Settings,_sceneries,_and_landscapes",
            "Spontaneous tactile sensations": "https://psychonautwiki.org/wiki/Spontaneous_tactile_sensations",
            "Stimulation": "https://psychonautwiki.org/wiki/Stimulation",
            "Tactile enhancement": "https://psychonautwiki.org/wiki/Tactile_enhancement",
            "Temperature regulation suppression": "https://psychonautwiki.org/wiki/Temperature_regulation_suppression",
            "Thought acceleration": "https://psychonautwiki.org/wiki/Thought_acceleration",
            "Thought connectivity": "https://psychonautwiki.org/wiki/Thought_connectivity",
            "Time distortion": "https://psychonautwiki.org/wiki/Time_distortion",
            "Tracers": "https://psychonautwiki.org/wiki/Tracers",
            "Transformations": "https://psychonautwiki.org/wiki/Transformations",
            "Unity and interconnectedness": "https://psychonautwiki.org/wiki/Unity_and_interconnectedness",
            "Wakefulness": "https://psychonautwiki.org/wiki/Wakefulness"
        }
    },
    "2c-d": {
        "aliases": [
            "2cd",
            "2c-m",
            "2cm"
        ],
        "categories": [
            "psychedelic",
            "research-chemical"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-8"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "20-50mg",
                "Light": "5-15mg",
                "Strong": "50-100mg",
                "Threshold": "3-4mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "3-5"
        },
        "formatted_effects": [
            "comparable to 2C-B",
            "mental and physical stimulation",
            "mood lift",
            "euphoria",
            "cognitive enhancement",
            "increased mental clarity and interest",
            "feelings of empathy",
            "enhanced tactile sensation",
            "sensory enhancement",
            "brightened colors",
            "sociability",
            "introspection",
            "giggling",
            "pupil dilation",
            "increased heart rate",
            "changes in perception of time",
            "stomach discomfort",
            "headache",
            "dizziness",
            "anxiety"
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "15-45"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_2CD.shtml",
            "pihkal": "https://www.erowid.org/library/books_online/pihkal/pihkal023.shtml"
        },
        "name": "2c-d",
        "pretty_name": "2C-D",
        "properties": {
            "after-effects": "1-8 hours.",
            "aliases": [
                "2cd",
                "2c-m",
                "2cm"
            ],
            "categories": [
                "psychedelic",
                "research-chemical"
            ],
            "dose": "Oral Threshold: 3-4mg Light: 5-15mg Common: 20-50mg Strong: 50-100mg",
            "duration": "3-5 hours",
            "effects": "comparable to 2C-B, mental and physical stimulation, mood lift, euphoria, cognitive enhancement, increased mental clarity and interest, feelings of empathy, enhanced tactile sensation, sensory enhancement, brightened colors, sociability, introspection, giggling, pupil dilation, increased heart rate, changes in perception of time, stomach discomfort, headache, dizziness, anxiety",
            "onset": "15-45 minutes",
            "summary": "A fairly generic psychedelic famed for being usable as \"psychedelic tofu\". Little character of its own but pleasant in combinations.",
            "test-kits": "Marquis: Yellow > Brown. | Mecke: Green > Brown. | Mandelin: Green/Yellow. | Simon's Brown > Red. | Ehrlich: No colour change."
        },
        "pweffects": {
            "8B Geometry - Exposure to inner mechanics of consciousness": "https://psychonautwiki.org/wiki/8B_Geometry_-_Exposure_to_inner_mechanics_of_consciousness",
            "Acuity enhancement": "https://psychonautwiki.org/wiki/Acuity_enhancement",
            "Analysis enhancement": "https://psychonautwiki.org/wiki/Analysis_enhancement",
            "Auditory distortion": "https://psychonautwiki.org/wiki/Auditory_distortion",
            "Auditory enhancement": "https://psychonautwiki.org/wiki/Auditory_enhancement",
            "Auditory hallucinations": "https://psychonautwiki.org/wiki/Auditory_hallucinations",
            "Autonomous entities": "https://psychonautwiki.org/wiki/Autonomous_entities",
            "Bodily control enhancement": "https://psychonautwiki.org/wiki/Bodily_control_enhancement",
            "Colour enhancement": "https://psychonautwiki.org/wiki/Colour_enhancement",
            "Colour shifting": "https://psychonautwiki.org/wiki/Colour_shifting",
            "Conceptual thinking": "https://psychonautwiki.org/wiki/Conceptual_thinking",
            "Drifting": "https://psychonautwiki.org/wiki/Drifting",
            "Emotion enhancement": "https://psychonautwiki.org/wiki/Emotion_enhancement",
            "External hallucinations": "https://psychonautwiki.org/wiki/External_hallucinations",
            "Geometry": "https://psychonautwiki.org/wiki/Geometry",
            "Internal hallucinations": "https://psychonautwiki.org/wiki/Internal_hallucinations",
            "Memory suppression": "https://psychonautwiki.org/wiki/Memory_suppression",
            "Nausea": "https://psychonautwiki.org/wiki/Nausea",
            "Novelty enhancement": "https://psychonautwiki.org/wiki/Novelty_enhancement",
            "Pattern recognition enhancement": "https://psychonautwiki.org/wiki/Pattern_recognition_enhancement",
            "Personal bias suppression": "https://psychonautwiki.org/wiki/Personal_bias_suppression",
            "Perspective alterations": "https://psychonautwiki.org/wiki/Perspective_alterations",
            "Pupil dilation": "https://psychonautwiki.org/wiki/Pupil_dilation",
            "Scenarios and plots": "https://psychonautwiki.org/wiki/Scenarios_and_plots",
            "Sedation": "https://psychonautwiki.org/wiki/Sedation",
            "Settings, sceneries, and landscapes": "https://psychonautwiki.org/wiki/Settings,_sceneries,_and_landscapes",
            "Spontaneous tactile sensations": "https://psychonautwiki.org/wiki/Spontaneous_tactile_sensations",
            "Tactile enhancement": "https://psychonautwiki.org/wiki/Tactile_enhancement",
            "Temperature regulation suppression": "https://psychonautwiki.org/wiki/Temperature_regulation_suppression",
            "Thought acceleration": "https://psychonautwiki.org/wiki/Thought_acceleration",
            "Thought connectivity": "https://psychonautwiki.org/wiki/Thought_connectivity",
            "Time distortion": "https://psychonautwiki.org/wiki/Time_distortion",
            "Tracers": "https://psychonautwiki.org/wiki/Tracers",
            "Transformations": "https://psychonautwiki.org/wiki/Transformations"
        }
    },
    "2c-e": {
        "aliases": [
            "2ce"
        ],
        "categories": [
            "psychedelic",
            "research-chemical",
            "common"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "2-6"
        },
        "formatted_dose": {
            "Insufflated": {
                "Common": "3-7mg",
                "Heavy": "10mg+",
                "Light": "1-3mg",
                "Strong": "6-10mg"
            },
            "Oral": {
                "Common": "10-15mg",
                "Heavy": "25-40mg",
                "Light": "5-10mg",
                "Strong": "15-30mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "6-14"
        },
        "formatted_effects": [
            "euphoria",
            "giggling",
            "empathy",
            "insight",
            "brightened color",
            "closed/open eye visuals",
            "enhanced tactile sensation",
            "mental/physical stimulation",
            "decreased appetite",
            "pupil dilation",
            "restlessness",
            "change in perception of time",
            "ego  softening",
            "nausea",
            "sweating/chills",
            "muscle tension",
            "confusion",
            "insomnia"
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "20-90"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_2CE.shtml",
            "pihkal": "https://www.erowid.org/library/books_online/pihkal/pihkal024.shtml"
        },
        "name": "2c-e",
        "pretty_name": "2C-E",
        "properties": {
            "after-effects": "2-6 hours",
            "aliases": [
                "2ce"
            ],
            "categories": [
                "psychedelic",
                "research-chemical",
                "common"
            ],
            "dose": "Oral Light: 5-10mg Common: 10-15mg Strong: 15-30mg Heavy: 25-40mg | Insufflated Light: 1-3mg Common: 3-7mg Strong: 6-10mg Heavy: 10mg+",
            "duration": "6-14 hours (depending on dose)",
            "effects": "euphoria, giggling, empathy, insight, brightened color, closed/open eye visuals, enhanced tactile sensation, mental/physical stimulation, decreased appetite, pupil dilation, restlessness, change in perception of time, ego  softening, nausea, sweating/chills, muscle tension, confusion, insomnia",
            "onset": "20-90 minutes",
            "summary": "An intense psychedelic drug with very strong visuals, sometimes criticised for its relatively uncomfortable body load. Otherwise, effects are comparable to other 2c-x drugs.",
            "test-kits": "Marquis: Yellow-Pale Brown. | Mecke: Yellow > Brown. | Mandelin: Yellow-Green. | Froehde: Yellow. | Liebermann: Yellow > Black. | Simon's: No colour change. | Ehrlich: No colour change."
        },
        "pweffects": {
            "8B Geometry - Exposure to inner mechanics of consciousness": "https://psychonautwiki.org/wiki/8B_Geometry_-_Exposure_to_inner_mechanics_of_consciousness",
            "Acuity enhancement": "https://psychonautwiki.org/wiki/Acuity_enhancement",
            "After images": "https://psychonautwiki.org/wiki/After_images",
            "Analysis enhancement": "https://psychonautwiki.org/wiki/Analysis_enhancement",
            "Auditory distortion": "https://psychonautwiki.org/wiki/Auditory_distortion",
            "Auditory enhancement": "https://psychonautwiki.org/wiki/Auditory_enhancement",
            "Auditory hallucinations": "https://psychonautwiki.org/wiki/Auditory_hallucinations",
            "Autonomous entities": "https://psychonautwiki.org/wiki/Autonomous_entities",
            "Bodily control enhancement": "https://psychonautwiki.org/wiki/Bodily_control_enhancement",
            "Colour enhancement": "https://psychonautwiki.org/wiki/Colour_enhancement",
            "Colour shifting": "https://psychonautwiki.org/wiki/Colour_shifting",
            "Conceptual thinking": "https://psychonautwiki.org/wiki/Conceptual_thinking",
            "Creativity enhancement": "https://psychonautwiki.org/wiki/Creativity_enhancement",
            "Drifting": "https://psychonautwiki.org/wiki/Drifting",
            "Emotion enhancement": "https://psychonautwiki.org/wiki/Emotion_enhancement",
            "Empathy, love, and sociability enhancement": "https://psychonautwiki.org/wiki/Empathy,_love,_and_sociability_enhancement",
            "Geometry": "https://psychonautwiki.org/wiki/Geometry",
            "Immersion enhancement": "https://psychonautwiki.org/wiki/Immersion_enhancement",
            "Increased blood pressure": "https://psychonautwiki.org/wiki/Increased_blood_pressure",
            "Increased heart rate": "https://psychonautwiki.org/wiki/Increased_heart_rate",
            "Increased libido": "https://psychonautwiki.org/wiki/Increased_libido",
            "Internal hallucinations": "https://psychonautwiki.org/wiki/Internal_hallucinations",
            "Memory suppression": "https://psychonautwiki.org/wiki/Memory_suppression",
            "Nausea": "https://psychonautwiki.org/wiki/Nausea",
            "Novelty enhancement": "https://psychonautwiki.org/wiki/Novelty_enhancement",
            "Pattern recognition enhancement": "https://psychonautwiki.org/wiki/Pattern_recognition_enhancement",
            "Personal bias suppression": "https://psychonautwiki.org/wiki/Personal_bias_suppression",
            "Perspective alterations": "https://psychonautwiki.org/wiki/Perspective_alterations",
            "Pupil dilation": "https://psychonautwiki.org/wiki/Pupil_dilation",
            "Scenarios and plots": "https://psychonautwiki.org/wiki/Scenarios_and_plots",
            "Scenery slicing": "https://psychonautwiki.org/wiki/Scenery_slicing",
            "Settings, sceneries, and landscapes": "https://psychonautwiki.org/wiki/Settings,_sceneries,_and_landscapes",
            "Spirituality enhancement": "https://psychonautwiki.org/wiki/Spirituality_enhancement",
            "Spontaneous tactile sensations": "https://psychonautwiki.org/wiki/Spontaneous_tactile_sensations",
            "Stimulation": "https://psychonautwiki.org/wiki/Stimulation",
            "Symmetrical texture repetition": "https://psychonautwiki.org/wiki/Symmetrical_texture_repetition",
            "Synaesthesia": "https://psychonautwiki.org/wiki/Synaesthesia",
            "Tactile enhancement": "https://psychonautwiki.org/wiki/Tactile_enhancement",
            "Temperature regulation suppression": "https://psychonautwiki.org/wiki/Temperature_regulation_suppression",
            "Thought acceleration": "https://psychonautwiki.org/wiki/Thought_acceleration",
            "Thought connectivity": "https://psychonautwiki.org/wiki/Thought_connectivity",
            "Time distortion": "https://psychonautwiki.org/wiki/Time_distortion",
            "Tracers": "https://psychonautwiki.org/wiki/Tracers",
            "Transformations": "https://psychonautwiki.org/wiki/Transformations",
            "Wakefulness": "https://psychonautwiki.org/wiki/Wakefulness"
        }
    },
    "2c-g": {
        "aliases": [
            "2cg"
        ],
        "categories": [
            "psychedelic",
            "research-chemical",
            "tentative"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-72"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "25-30mg",
                "Light": "20-25mg",
                "Strong": "30mg+"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "15-35"
        },
        "formatted_effects": [
            "Euphoria",
            "empathy",
            "insight",
            "brightened colour",
            "Closed/Open eye visuals",
            "enhanced tactile sensation",
            "mental/physical stimulation",
            "decreased appetite",
            "pupil dilation",
            "restlessness",
            "change in perception",
            "ego softening",
            "sweating/chills",
            "muscle tension",
            "confusion",
            "insomnia",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "30-120"
        },
        "name": "2c-g",
        "pretty_name": "2C-G",
        "properties": {
            "after-effects": "1-72 hours.",
            "aliases": [
                "2cg"
            ],
            "categories": [
                "psychedelic",
                "research-chemical",
                "tentative"
            ],
            "dose": "Light: 20-25mg Common: 25-30mg Strong: 30mg+",
            "duration": "15-35 hours (greatly dependant on dose)",
            "effects": "Euphoria, empathy, insight, brightened colour, Closed/Open eye visuals, enhanced tactile sensation, mental/physical stimulation, decreased appetite, pupil dilation, restlessness, change in perception, ego softening, sweating/chills, muscle tension, confusion, insomnia.",
            "onset": "30-120 minutes.",
            "summary": "Extremely rare drug of the 2C-X family. An extremely long lasting substance. Is nearly as potent as its amphetamine counter-part, Ganesha. Yet is said to have very little visual activity.",
            "warning": "Note this is a very long lasting compound that can be very hard on the body."
        }
    },
    "2c-i": {
        "aliases": [
            "2ci"
        ],
        "categories": [
            "psychedelic",
            "research-chemical"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "4-12"
        },
        "formatted_dose": {
            "Insufflated": {
                "Common": "5-10mg",
                "Strong": "10mg+",
                "Threshold": "0.5-2mg"
            },
            "Oral": {
                "Common": "10-25mg",
                "Light": "5-15mg",
                "Strong": "20-30mg",
                "Threshold": "2-5mg"
            }
        },
        "formatted_duration": {
            "Insufflated": "4-8",
            "Oral": "4-12",
            "_unit": "hours"
        },
        "formatted_effects": [
            "euphoria",
            "giggling",
            "empathy",
            "insight",
            "brightened color",
            "closed/open eye visuals",
            "enhanced tactile sensation",
            "mental/physical stimulation",
            "decreased appetite",
            "pupil dilation",
            "restlessness",
            "change in perception of  time",
            "ego  softening",
            "nausea",
            "sweating/chills",
            "muscle tension",
            "confusion",
            "insomnia"
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "45-120"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_2CI.shtml",
            "pihkal": "https://www.erowid.org/library/books_online/pihkal/pihkal033.shtml"
        },
        "name": "2c-i",
        "pretty_name": "2C-I",
        "properties": {
            "after-effects": "4-12 hours",
            "aliases": [
                "2ci"
            ],
            "categories": [
                "psychedelic",
                "research-chemical"
            ],
            "dose": "Oral Threshold: 2-5mg Light: 5-15mg Common: 10-25mg Strong: 20-30mg | Insufflated Threshold: 0.5-2mg Common: 5-10mg Strong: 10mg+",
            "duration": "Oral: 4-12 Hours | Insufflated: 4-8 hours",
            "effects": "euphoria, giggling, empathy, insight, brightened color, closed/open eye visuals, enhanced tactile sensation, mental/physical stimulation, decreased appetite, pupil dilation, restlessness, change in perception of  time, ego  softening, nausea, sweating/chills, muscle tension, confusion, insomnia",
            "onset": "45-120 minutes",
            "summary": "A psychedelic similar to the more well-known 2C-B. Users frequently report very vivid and bright open-eye visuals and more mild closed-eye visuals compared to 2C-B and other drugs in the 2C family. Can also be more stimulating than 2C-B along with having a slight body load for some users. Less safe at high doses compared to 2C-B",
            "test-kits": "Marquis: Yellow > Green/Blue. | Mecke: Brown > Black. | Mandelin: (Pale) Brown > Black. | Simon's: Red > Orange. | Ehrlich: Brown."
        },
        "pweffects": {
            "8A Geometry - Exposure to semantic concept network": "https://psychonautwiki.org/wiki/8A_Geometry_-_Exposure_to_semantic_concept_network",
            "Acuity enhancement": "https://psychonautwiki.org/wiki/Acuity_enhancement",
            "Analysis enhancement": "https://psychonautwiki.org/wiki/Analysis_enhancement",
            "Auditory distortion": "https://psychonautwiki.org/wiki/Auditory_distortion",
            "Auditory enhancement": "https://psychonautwiki.org/wiki/Auditory_enhancement",
            "Auditory hallucinations": "https://psychonautwiki.org/wiki/Auditory_hallucinations",
            "Autonomous entities": "https://psychonautwiki.org/wiki/Autonomous_entities",
            "Bodily control enhancement": "https://psychonautwiki.org/wiki/Bodily_control_enhancement",
            "Colour enhancement": "https://psychonautwiki.org/wiki/Colour_enhancement",
            "Colour shifting": "https://psychonautwiki.org/wiki/Colour_shifting",
            "Drifting": "https://psychonautwiki.org/wiki/Drifting",
            "Emotion enhancement": "https://psychonautwiki.org/wiki/Emotion_enhancement",
            "Empathy, love, and sociability enhancement": "https://psychonautwiki.org/wiki/Empathy,_love,_and_sociability_enhancement",
            "External hallucinations": "https://psychonautwiki.org/wiki/External_hallucinations",
            "Geometry": "https://psychonautwiki.org/wiki/Geometry",
            "Immersion enhancement": "https://psychonautwiki.org/wiki/Immersion_enhancement",
            "Increased heart rate": "https://psychonautwiki.org/wiki/Increased_heart_rate",
            "Increased libido": "https://psychonautwiki.org/wiki/Increased_libido",
            "Internal hallucinations": "https://psychonautwiki.org/wiki/Internal_hallucinations",
            "Memory suppression": "https://psychonautwiki.org/wiki/Memory_suppression",
            "Nausea": "https://psychonautwiki.org/wiki/Nausea",
            "Novelty enhancement": "https://psychonautwiki.org/wiki/Novelty_enhancement",
            "Pattern recognition enhancement": "https://psychonautwiki.org/wiki/Pattern_recognition_enhancement",
            "Perspective alterations": "https://psychonautwiki.org/wiki/Perspective_alterations",
            "Physical euphoria": "https://psychonautwiki.org/wiki/Physical_euphoria",
            "Pupil dilation": "https://psychonautwiki.org/wiki/Pupil_dilation",
            "Scenarios and plots": "https://psychonautwiki.org/wiki/Scenarios_and_plots",
            "Scenery slicing": "https://psychonautwiki.org/wiki/Scenery_slicing",
            "Settings, sceneries, and landscapes": "https://psychonautwiki.org/wiki/Settings,_sceneries,_and_landscapes",
            "Spontaneous tactile sensations": "https://psychonautwiki.org/wiki/Spontaneous_tactile_sensations",
            "Stimulation": "https://psychonautwiki.org/wiki/Stimulation",
            "Symmetrical texture repetition": "https://psychonautwiki.org/wiki/Symmetrical_texture_repetition",
            "Synaesthesia": "https://psychonautwiki.org/wiki/Synaesthesia",
            "Tactile enhancement": "https://psychonautwiki.org/wiki/Tactile_enhancement",
            "Temperature regulation suppression": "https://psychonautwiki.org/wiki/Temperature_regulation_suppression",
            "Time distortion": "https://psychonautwiki.org/wiki/Time_distortion",
            "Tracers": "https://psychonautwiki.org/wiki/Tracers",
            "Transformations": "https://psychonautwiki.org/wiki/Transformations",
            "Unity and interconnectedness": "https://psychonautwiki.org/wiki/Unity_and_interconnectedness",
            "Wakefulness": "https://psychonautwiki.org/wiki/Wakefulness"
        }
    },
    "2c-ip": {
        "categories": [
            "psychedelic",
            "research-chemical",
            "tentative"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "4-8"
        },
        "formatted_dose": {
            "none": {
                "Common": "15-30mg",
                "Heavy": "30-45mg",
                "Light": "5-15mg",
                "Threshold": "5mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "12-16"
        },
        "formatted_effects": [
            "Euphoria",
            "empathy",
            "insight",
            "brightened colour",
            "Closed/Open eye visuals",
            "enhanced tactile sensation",
            "mental/physical stimulation",
            "decreased appetite",
            "pupil dilation",
            "restlessness",
            "change in perception",
            "ego softening",
            "sweating/chills",
            "muscle tension",
            "confusion",
            "insomnia",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "45-90"
        },
        "name": "2c-ip",
        "pretty_name": "2C-IP",
        "properties": {
            "after-effects": "4-8 hours.",
            "categories": [
                "psychedelic",
                "research-chemical",
                "tentative"
            ],
            "duration": "12-16 hours.",
            "effects": "Euphoria, empathy, insight, brightened colour, Closed/Open eye visuals, enhanced tactile sensation, mental/physical stimulation, decreased appetite, pupil dilation, restlessness, change in perception, ego softening, sweating/chills, muscle tension, confusion, insomnia.",
            "onset": "45-90 minutes.",
            "summary": "Isopropyl analog (branched analog) of 2C-P with a slightly shorter duration and lower potency.",
            "test-kits": "Marquis: Orange > Red. | Mecke: Yellow > Brown. | Mandelin: Green. | Ehrlich: No colour change."
        }
    },
    "2c-n": {
        "aliases": [
            "2cn"
        ],
        "categories": [
            "psychedelic",
            "research-chemical",
            "tentative"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "2-4"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "100-125mg",
                "Light": "100mg",
                "Strong": "125-150mg+"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "4-6"
        },
        "formatted_effects": [
            "Euphoria",
            "empathy",
            "insight",
            "brightened colour",
            "Closed/Open eye visuals",
            "enhanced tactile sensation",
            "mental/physical stimulation",
            "decreased appetite",
            "pupil dilation",
            "restlessness",
            "change in perception",
            "ego softening",
            "sweating/chills",
            "muscle tension",
            "confusion",
            "insomnia",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "15-45"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_2CN.shtml",
            "pihkal": "https://www.erowid.org/library/books_online/pihkal/pihkal034.shtml"
        },
        "name": "2c-n",
        "pretty_name": "2C-N",
        "properties": {
            "after-effects": "2-4 hours.",
            "aliases": [
                "2cn"
            ],
            "categories": [
                "psychedelic",
                "research-chemical",
                "tentative"
            ],
            "dose": "Light: 100mg Common: 100-125mg Strong: 125-150mg+",
            "duration": "4-6 hours.",
            "effects": "Euphoria, empathy, insight, brightened colour, Closed/Open eye visuals, enhanced tactile sensation, mental/physical stimulation, decreased appetite, pupil dilation, restlessness, change in perception, ego softening, sweating/chills, muscle tension, confusion, insomnia.",
            "onset": "15-45 minutes.",
            "summary": "A relatively uncommon and short-acting psychedelic phenethylamine of the 2C-x family. It behaves much like other 2C-x drugs, but is unique in that it is a yellowish golden-coloured salt. Described by some, namely Shulgin, as being quite underwhelming."
        }
    },
    "2c-p": {
        "aliases": [
            "2cp"
        ],
        "categories": [
            "psychedelic",
            "research-chemical"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "6-24"
        },
        "formatted_dose": {
            "Insufflated": {
                "Common": "3-5mg",
                "Light": "1-3mg",
                "Strong": "5-10mg."
            },
            "Oral": {
                "Common": "4-6mg",
                "Light": "2-4mg",
                "Strong": "6-10mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "10-16"
        },
        "formatted_effects": [
            "Euphoria",
            "Giggling",
            "Empathy",
            "Insight",
            "Brightened Colors",
            "Closed/Open Eye Visuals",
            "Enhanced Tactile-Sensation",
            "Mental/Physical Stimulation",
            "Decreased Appetite",
            "Pupil-Dilation",
            "Restlessness",
            "Changes in Perception-Of-Time",
            "Ego-Softening",
            "Nausea",
            "Sweating/Chills",
            "Muscle-Tension",
            "Confusion",
            "Insomnia"
        ],
        "formatted_onset": {
            "Insufflated": "15-45",
            "Oral": "60-180",
            "_unit": "minutes"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_2CP.shtml",
            "pihkal": "https://www.erowid.org/library/books_online/pihkal/pihkal036.shtml"
        },
        "name": "2c-p",
        "pretty_name": "2C-P",
        "properties": {
            "after-effects": "6-24 hours",
            "aliases": [
                "2cp"
            ],
            "categories": [
                "psychedelic",
                "research-chemical"
            ],
            "dose": "Oral Light: 2-4mg Common: 4-6mg Strong: 6-10mg | Insufflated Light: 1-3mg Common: 3-5mg Strong: 5-10mg.",
            "duration": "10-16 hours",
            "effects": "Euphoria, Giggling, Empathy, Insight, Brightened Colors, Closed/Open Eye Visuals, Enhanced Tactile-Sensation, Mental/Physical Stimulation, Decreased Appetite, Pupil-Dilation, Restlessness, Changes in Perception-Of-Time, Ego-Softening, Nausea, Sweating/Chills, Muscle-Tension, Confusion, Insomnia",
            "onset": "Oral: 60-180 minutes | Insufflated: 15-45 minutes",
            "summary": "A synthetic phenylethlyamine that is sometimes compared in effects to 2C-E, yet with a much longer duration. With a much more pronouced bodyload. Is one of the most potent of the 2C-X series.",
            "test-kits": "Marquis: Yellow. | Mecke: Green > Brown. | Mandelin: Green. | Froehde: Green. | Liebermann: Green. | Ehrlich: No colour change."
        },
        "pweffects": {
            "8B Geometry - Exposure to inner mechanics of consciousness": "https://psychonautwiki.org/wiki/8B_Geometry_-_Exposure_to_inner_mechanics_of_consciousness",
            "Acuity enhancement": "https://psychonautwiki.org/wiki/Acuity_enhancement",
            "After images": "https://psychonautwiki.org/wiki/After_images",
            "Analysis enhancement": "https://psychonautwiki.org/wiki/Analysis_enhancement",
            "Auditory distortion": "https://psychonautwiki.org/wiki/Auditory_distortion",
            "Auditory enhancement": "https://psychonautwiki.org/wiki/Auditory_enhancement",
            "Auditory hallucinations": "https://psychonautwiki.org/wiki/Auditory_hallucinations",
            "Autonomous entities": "https://psychonautwiki.org/wiki/Autonomous_entities",
            "Bodily control enhancement": "https://psychonautwiki.org/wiki/Bodily_control_enhancement",
            "Colour enhancement": "https://psychonautwiki.org/wiki/Colour_enhancement",
            "Colour shifting": "https://psychonautwiki.org/wiki/Colour_shifting",
            "Conceptual thinking": "https://psychonautwiki.org/wiki/Conceptual_thinking",
            "Creativity enhancement": "https://psychonautwiki.org/wiki/Creativity_enhancement",
            "Delusions": "https://psychonautwiki.org/wiki/Delusions",
            "Depth perception distortions": "https://psychonautwiki.org/wiki/Depth_perception_distortions",
            "Drifting": "https://psychonautwiki.org/wiki/Drifting",
            "Emotion enhancement": "https://psychonautwiki.org/wiki/Emotion_enhancement",
            "Feelings of interdependent opposites": "https://psychonautwiki.org/wiki/Feelings_of_interdependent_opposites",
            "Geometry": "https://psychonautwiki.org/wiki/Geometry",
            "Immersion enhancement": "https://psychonautwiki.org/wiki/Immersion_enhancement",
            "Increased blood pressure": "https://psychonautwiki.org/wiki/Increased_blood_pressure",
            "Increased heart rate": "https://psychonautwiki.org/wiki/Increased_heart_rate",
            "Increased libido": "https://psychonautwiki.org/wiki/Increased_libido",
            "Internal hallucinations": "https://psychonautwiki.org/wiki/Internal_hallucinations",
            "Machinescapes": "https://psychonautwiki.org/wiki/Machinescapes",
            "Memory suppression": "https://psychonautwiki.org/wiki/Memory_suppression",
            "Nausea": "https://psychonautwiki.org/wiki/Nausea",
            "Novelty enhancement": "https://psychonautwiki.org/wiki/Novelty_enhancement",
            "Pattern recognition enhancement": "https://psychonautwiki.org/wiki/Pattern_recognition_enhancement",
            "Personal bias suppression": "https://psychonautwiki.org/wiki/Personal_bias_suppression",
            "Personal meaning enhancement": "https://psychonautwiki.org/wiki/Personal_meaning_enhancement",
            "Perspective alterations": "https://psychonautwiki.org/wiki/Perspective_alterations",
            "Pupil dilation": "https://psychonautwiki.org/wiki/Pupil_dilation",
            "Scenarios and plots": "https://psychonautwiki.org/wiki/Scenarios_and_plots",
            "Scenery slicing": "https://psychonautwiki.org/wiki/Scenery_slicing",
            "Settings, sceneries, and landscapes": "https://psychonautwiki.org/wiki/Settings,_sceneries,_and_landscapes",
            "Spirituality enhancement": "https://psychonautwiki.org/wiki/Spirituality_enhancement",
            "Spontaneous tactile sensations": "https://psychonautwiki.org/wiki/Spontaneous_tactile_sensations",
            "Stimulation": "https://psychonautwiki.org/wiki/Stimulation",
            "Subconscious communication": "https://psychonautwiki.org/wiki/Subconscious_communication",
            "Symmetrical texture repetition": "https://psychonautwiki.org/wiki/Symmetrical_texture_repetition",
            "Tactile enhancement": "https://psychonautwiki.org/wiki/Tactile_enhancement",
            "Temperature regulation suppression": "https://psychonautwiki.org/wiki/Temperature_regulation_suppression",
            "Thought acceleration": "https://psychonautwiki.org/wiki/Thought_acceleration",
            "Thought loops": "https://psychonautwiki.org/wiki/Thought_loops",
            "Time distortion": "https://psychonautwiki.org/wiki/Time_distortion",
            "Tracers": "https://psychonautwiki.org/wiki/Tracers",
            "Transformations": "https://psychonautwiki.org/wiki/Transformations",
            "Unity and interconnectedness": "https://psychonautwiki.org/wiki/Unity_and_interconnectedness",
            "Unspeakable horrors": "https://psychonautwiki.org/wiki/Unspeakable_horrors"
        }
    },
    "2c-t": {
        "aliases": [
            "2ct"
        ],
        "categories": [
            "psychedelic",
            "empathogen",
            "research-chemical",
            "tentative"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-4"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "60-90mg",
                "Light": "50-60mg",
                "Strong": "90-120mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "2-6"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "25-60"
        },
        "name": "2c-t",
        "pretty_name": "2C-T",
        "properties": {
            "after-effects": "1-4 hours.",
            "aliases": [
                "2ct"
            ],
            "categories": [
                "psychedelic",
                "empathogen",
                "research-chemical",
                "tentative"
            ],
            "dose": "Light: 50-60mg Common: 60-90mg Strong: 90-120mg",
            "duration": "2-6 hours.",
            "onset": "25-60 minutes.",
            "summary": "A very rare psychedelic phenylethylamine, that is quite lovely."
        }
    },
    "2c-t-2": {
        "aliases": [
            "2ct2"
        ],
        "categories": [
            "psychedelic",
            "research-chemical"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-6"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "10-20mg",
                "Light": "5-10mg",
                "Strong": "20-25mg+",
                "Threshold": "5mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "5-8"
        },
        "formatted_effects": [
            "Euphoria",
            "empathy",
            "insight",
            "brightened colour",
            "Closed/Open eye visuals",
            "enhanced tactile sensation",
            "mental/physical stimulation",
            "decreased appetite",
            "pupil dilation",
            "restlessness",
            "change in perception",
            "ego softening",
            "sweating/chills",
            "muscle tension",
            "confusion",
            "insomnia",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "45-90"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_2CT2.shtml",
            "pihkal": "https://www.erowid.org/library/books_online/pihkal/pihkal040.shtml"
        },
        "name": "2c-t-2",
        "pretty_name": "2C-T-2",
        "properties": {
            "after-effects": "1-6 hours.",
            "aliases": [
                "2ct2"
            ],
            "avoid": "MAOI's as the dangers with 2C-T-7 could also fall into this substance as well (Serotonin Syndrome)",
            "categories": [
                "psychedelic",
                "research-chemical"
            ],
            "dose": "Oral Threshold: 5mg Light: 5-10mg Common: 10-20mg Strong: 20-25mg+",
            "duration": "5-8 hours.",
            "effects": "Euphoria, empathy, insight, brightened colour, Closed/Open eye visuals, enhanced tactile sensation, mental/physical stimulation, decreased appetite, pupil dilation, restlessness, change in perception, ego softening, sweating/chills, muscle tension, confusion, insomnia.",
            "onset": "45-90 minutes.",
            "summary": "An unusual psychedelic with similar effects to 2C-B and a slightly longer duration, but maligned because of some deaths in the 2000s. Also similar to 2c-t-7, but with a shorter duration. Potentially unsafe with stimulants and empathogens.",
            "test-kits": "Marquis: Fizzes Pale Orange. | Mecke: Orange > Purple. | Mandelin: Purple. | Froehde: Orange > Purple | Liebermann: Red or Purple. | Ehrlich: No colour change."
        },
        "pweffects": {
            "8B Geometry - Exposure to inner mechanics of consciousness": "https://psychonautwiki.org/wiki/8B_Geometry_-_Exposure_to_inner_mechanics_of_consciousness",
            "Acuity enhancement": "https://psychonautwiki.org/wiki/Acuity_enhancement",
            "After images": "https://psychonautwiki.org/wiki/After_images",
            "Analysis enhancement": "https://psychonautwiki.org/wiki/Analysis_enhancement",
            "Auditory distortion": "https://psychonautwiki.org/wiki/Auditory_distortion",
            "Auditory enhancement": "https://psychonautwiki.org/wiki/Auditory_enhancement",
            "Auditory hallucinations": "https://psychonautwiki.org/wiki/Auditory_hallucinations",
            "Autonomous entities": "https://psychonautwiki.org/wiki/Autonomous_entities",
            "Bodily control enhancement": "https://psychonautwiki.org/wiki/Bodily_control_enhancement",
            "Colour enhancement": "https://psychonautwiki.org/wiki/Colour_enhancement",
            "Colour shifting": "https://psychonautwiki.org/wiki/Colour_shifting",
            "Conceptual thinking": "https://psychonautwiki.org/wiki/Conceptual_thinking",
            "Delusions": "https://psychonautwiki.org/wiki/Delusions",
            "Drifting": "https://psychonautwiki.org/wiki/Drifting",
            "Emotion enhancement": "https://psychonautwiki.org/wiki/Emotion_enhancement",
            "External hallucinations": "https://psychonautwiki.org/wiki/External_hallucinations",
            "Feelings of interdependent opposites": "https://psychonautwiki.org/wiki/Feelings_of_interdependent_opposites",
            "Geometry": "https://psychonautwiki.org/wiki/Geometry",
            "Immersion enhancement": "https://psychonautwiki.org/wiki/Immersion_enhancement",
            "Increased heart rate": "https://psychonautwiki.org/wiki/Increased_heart_rate",
            "Internal hallucinations": "https://psychonautwiki.org/wiki/Internal_hallucinations",
            "Memory suppression": "https://psychonautwiki.org/wiki/Memory_suppression",
            "Nausea": "https://psychonautwiki.org/wiki/Nausea",
            "Novelty enhancement": "https://psychonautwiki.org/wiki/Novelty_enhancement",
            "Pattern recognition enhancement": "https://psychonautwiki.org/wiki/Pattern_recognition_enhancement",
            "Personal bias suppression": "https://psychonautwiki.org/wiki/Personal_bias_suppression",
            "Perspective alterations": "https://psychonautwiki.org/wiki/Perspective_alterations",
            "Pupil dilation": "https://psychonautwiki.org/wiki/Pupil_dilation",
            "Scenarios and plots": "https://psychonautwiki.org/wiki/Scenarios_and_plots",
            "Scenery slicing": "https://psychonautwiki.org/wiki/Scenery_slicing",
            "Settings, sceneries, and landscapes": "https://psychonautwiki.org/wiki/Settings,_sceneries,_and_landscapes",
            "Spontaneous tactile sensations": "https://psychonautwiki.org/wiki/Spontaneous_tactile_sensations",
            "Stimulation": "https://psychonautwiki.org/wiki/Stimulation",
            "Stomach cramps": "https://psychonautwiki.org/wiki/Stomach_cramps",
            "Symmetrical texture repetition": "https://psychonautwiki.org/wiki/Symmetrical_texture_repetition",
            "Tactile enhancement": "https://psychonautwiki.org/wiki/Tactile_enhancement",
            "Temperature regulation suppression": "https://psychonautwiki.org/wiki/Temperature_regulation_suppression",
            "Thought acceleration": "https://psychonautwiki.org/wiki/Thought_acceleration",
            "Thought loops": "https://psychonautwiki.org/wiki/Thought_loops",
            "Time distortion": "https://psychonautwiki.org/wiki/Time_distortion",
            "Tracers": "https://psychonautwiki.org/wiki/Tracers",
            "Transformations": "https://psychonautwiki.org/wiki/Transformations",
            "Unity and interconnectedness": "https://psychonautwiki.org/wiki/Unity_and_interconnectedness",
            "Vasoconstriction": "https://psychonautwiki.org/wiki/Vasoconstriction",
            "Wakefulness": "https://psychonautwiki.org/wiki/Wakefulness"
        }
    },
    "2c-t-21": {
        "categories": [
            "psychedelic",
            "research-chemical",
            "tentative"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "2-12"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "5-8mg",
                "Heavy": "8-12mg",
                "Light": "3-5mg",
                "Threshold": "3mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "6-12"
        },
        "formatted_effects": [
            "Euphoria",
            "empathy",
            "insight",
            "brightened colour",
            "Closed/Open eye visuals",
            "enhanced tactile sensation",
            "mental/physical stimulation",
            "decreased appetite",
            "pupil dilation",
            "restlessness",
            "change in perception",
            "ego softening",
            "sweating/chills",
            "muscle tension",
            "confusion",
            "insomnia",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "15-40"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_2CT21.shtml",
            "pihkal": "https://www.erowid.org/library/books_online/pihkal/pihkal049.shtml"
        },
        "name": "2c-t-21",
        "pretty_name": "2C-T-21",
        "properties": {
            "after-effects": "2-12 hours.",
            "avoid": "It is likely that this also has the MAO-A properties of the likes of 2c-t-7.",
            "categories": [
                "psychedelic",
                "research-chemical",
                "tentative"
            ],
            "dose": "Threshold: 3mg Light: 3-5mg Common: 5-8mg Heavy: 8-12mg",
            "duration": "6-12 hours.",
            "effects": "Euphoria, empathy, insight, brightened colour, Closed/Open eye visuals, enhanced tactile sensation, mental/physical stimulation, decreased appetite, pupil dilation, restlessness, change in perception, ego softening, sweating/chills, muscle tension, confusion, insomnia.",
            "onset": "15-40 minutes.",
            "summary": "A rare psychedelic phenethylamine.",
            "test-kits": "Marquis: Fizzes Light Orange. | Mecke: Dark Purple. | Simon's: Greenish Blue."
        }
    },
    "2c-t-4": {
        "aliases": [
            "2ct4",
            "2c-t4",
            "2-ct4",
            "2ct-4"
        ],
        "categories": [
            "psychedelic",
            "research-chemical"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "4-8"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "10-15mg",
                "Light": "6-10mg",
                "Strong": "15-20mg",
                "Threshold": "5-6mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "10-18"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "30-120"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_2CT4.shtml",
            "pihkal": "https://www.erowid.org/library/books_online/pihkal/pihkal041.shtml"
        },
        "name": "2c-t-4",
        "pretty_name": "2C-T-4",
        "properties": {
            "after-effects": "4-8 hours.",
            "aliases": [
                "2ct4",
                "2c-t4",
                "2-ct4",
                "2ct-4"
            ],
            "avoid": "MAOI's as the dangers with 2C-T-7 could also fall into this substance as well. (Serotonin Syndrome)",
            "categories": [
                "psychedelic",
                "research-chemical"
            ],
            "dose": "Oral Threshold: 5-6mg Light: 6-10mg Common: 10-15mg Strong: 15-20mg",
            "duration": "10-18 hours.",
            "onset": "30-120 minutes.",
            "summary": "A psychedelic phenethylamine that has a longer onset and duration compared to the more common 2C-T-x (2 and 7).",
            "test-kits": "Marquis: Pale Orange. | Mandelin: Orange (Or Purple). | Liebermann: Purple. | Ehrlich: Purple."
        }
    },
    "2c-t-7": {
        "aliases": [
            "2ct7"
        ],
        "categories": [
            "research-chemical",
            "empathogen",
            "psychedelic"
        ],
        "dose_note": " NOTE: 2C-T-7 reacts widely in varying ways. Start low, work your way up.",
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "4-12"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "15-30mg",
                "Heavy": "40mg+",
                "Light": "10-20mg",
                "Strong": "30-40mg"
            }
        },
        "formatted_duration": {
            "Insufflated": "2-5",
            "Oral": "6-12",
            "_unit": "hours"
        },
        "formatted_effects": [
            "Euphoria",
            "empathy",
            "insight",
            "brightened colour",
            "Closed/Open eye visuals",
            "enhanced tactile sensation",
            "mental/physical stimulation",
            "decreased appetite",
            "pupil dilation",
            "restlessness",
            "change in perception",
            "ego softening",
            "sweating/chills",
            "muscle tension",
            "confusion",
            "insomnia",
            ""
        ],
        "formatted_onset": {
            "Insufflated": "20-90",
            "Oral": "20-140",
            "_unit": "minutes"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_2CT7.shtml",
            "pihkal": "https://www.erowid.org/library/books_online/pihkal/pihkal043.shtml"
        },
        "name": "2c-t-7",
        "pretty_name": "2C-T-7",
        "properties": {
            "after-effects": "4-12 hours",
            "aliases": [
                "2ct7"
            ],
            "avoid": "Do not take if currently taking a MAOI.",
            "categories": [
                "research-chemical",
                "empathogen",
                "psychedelic"
            ],
            "dose": "Oral Light: 10-20mg Common: 15-30mg Strong: 30-40mg Heavy: 40mg+ | NOTE: 2C-T-7 reacts widely in varying ways. Start low, work your way up.",
            "duration": "Oral: 6-12 hours | Insufflated 2-5 hours.",
            "effects": "Euphoria, empathy, insight, brightened colour, Closed/Open eye visuals, enhanced tactile sensation, mental/physical stimulation, decreased appetite, pupil dilation, restlessness, change in perception, ego softening, sweating/chills, muscle tension, confusion, insomnia.",
            "onset": "Oral: 20-140 minutes | Insufflated 20-90 minutes.",
            "risks": "There have been several reports of deaths from 2C-T-7, and many reports of severe dissociation and vomiting (a dangerous combination) after both oral and insufflated use.",
            "summary": "A relatively uncommon psychedelic phenethylamine and possible MAOI. Long lasting, an possesses an unpredictable dosage curve. Questionable safety in combination with most things.",
            "test-kits": "Marquis: Fizzes Pale Orange. | Mecke: Red > Purple. | Mandelin: Red > Purple. | Froehde: Violet Orange | Liebermann: Deep Purple. | Simon's Red > Brown. | Ehrlich: No colour change."
        },
        "pweffects": {
            "8A Geometry - Exposure to semantic concept network": "https://psychonautwiki.org/wiki/8A_Geometry_-_Exposure_to_semantic_concept_network",
            "8B Geometry - Exposure to inner mechanics of consciousness": "https://psychonautwiki.org/wiki/8B_Geometry_-_Exposure_to_inner_mechanics_of_consciousness",
            "Acuity enhancement": "https://psychonautwiki.org/wiki/Acuity_enhancement",
            "After images": "https://psychonautwiki.org/wiki/After_images",
            "Analysis enhancement": "https://psychonautwiki.org/wiki/Analysis_enhancement",
            "Auditory distortion": "https://psychonautwiki.org/wiki/Auditory_distortion",
            "Auditory enhancement": "https://psychonautwiki.org/wiki/Auditory_enhancement",
            "Auditory hallucinations": "https://psychonautwiki.org/wiki/Auditory_hallucinations",
            "Autonomous entities": "https://psychonautwiki.org/wiki/Autonomous_entities",
            "Bodily control enhancement": "https://psychonautwiki.org/wiki/Bodily_control_enhancement",
            "Colour enhancement": "https://psychonautwiki.org/wiki/Colour_enhancement",
            "Colour shifting": "https://psychonautwiki.org/wiki/Colour_shifting",
            "Conceptual thinking": "https://psychonautwiki.org/wiki/Conceptual_thinking",
            "Delusions": "https://psychonautwiki.org/wiki/Delusions",
            "Drifting": "https://psychonautwiki.org/wiki/Drifting",
            "Emotion enhancement": "https://psychonautwiki.org/wiki/Emotion_enhancement",
            "Feelings of interdependent opposites": "https://psychonautwiki.org/wiki/Feelings_of_interdependent_opposites",
            "Geometry": "https://psychonautwiki.org/wiki/Geometry",
            "Headaches": "https://psychonautwiki.org/wiki/Headaches",
            "Immersion enhancement": "https://psychonautwiki.org/wiki/Immersion_enhancement",
            "Increased blood pressure": "https://psychonautwiki.org/wiki/Increased_blood_pressure",
            "Increased heart rate": "https://psychonautwiki.org/wiki/Increased_heart_rate",
            "Internal hallucinations": "https://psychonautwiki.org/wiki/Internal_hallucinations",
            "Memory suppression": "https://psychonautwiki.org/wiki/Memory_suppression",
            "Nausea": "https://psychonautwiki.org/wiki/Nausea",
            "Novelty enhancement": "https://psychonautwiki.org/wiki/Novelty_enhancement",
            "Pattern recognition enhancement": "https://psychonautwiki.org/wiki/Pattern_recognition_enhancement",
            "Personal bias suppression": "https://psychonautwiki.org/wiki/Personal_bias_suppression",
            "Perspective alterations": "https://psychonautwiki.org/wiki/Perspective_alterations",
            "Pupil dilation": "https://psychonautwiki.org/wiki/Pupil_dilation",
            "Scenarios and plots": "https://psychonautwiki.org/wiki/Scenarios_and_plots",
            "Scenery slicing": "https://psychonautwiki.org/wiki/Scenery_slicing",
            "Settings, sceneries, and landscapes": "https://psychonautwiki.org/wiki/Settings,_sceneries,_and_landscapes",
            "Spontaneous tactile sensations": "https://psychonautwiki.org/wiki/Spontaneous_tactile_sensations",
            "Stimulation": "https://psychonautwiki.org/wiki/Stimulation",
            "Symmetrical texture repetition": "https://psychonautwiki.org/wiki/Symmetrical_texture_repetition",
            "Tactile enhancement": "https://psychonautwiki.org/wiki/Tactile_enhancement",
            "Temperature regulation suppression": "https://psychonautwiki.org/wiki/Temperature_regulation_suppression",
            "Thought acceleration": "https://psychonautwiki.org/wiki/Thought_acceleration",
            "Thought loops": "https://psychonautwiki.org/wiki/Thought_loops",
            "Time distortion": "https://psychonautwiki.org/wiki/Time_distortion",
            "Tracers": "https://psychonautwiki.org/wiki/Tracers",
            "Transformations": "https://psychonautwiki.org/wiki/Transformations",
            "Unity and interconnectedness": "https://psychonautwiki.org/wiki/Unity_and_interconnectedness",
            "Wakefulness": "https://psychonautwiki.org/wiki/Wakefulness"
        },
        "sources": {
            "_general": [
                "Sulfur-Substituted \u03b1-Alkyl Phenethylamines as Selective and Reversible MAO-A Inhibitors:\u2009 Biological Activities, CoMFA Analysis, and Active Site Modeling http://pubs.acs.org/doi/abs/10.1021/jm0493109"
            ]
        }
    },
    "3,4-ctmp": {
        "aliases": [
            "34ctmp",
            "3,4-dichloromethylphenidate"
        ],
        "categories": [
            "stimulant",
            "research-chemical",
            "habit-forming"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "2-24"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "4-6mg",
                "Heavy": "6-10mg",
                "Light": "2-4mg",
                "Threshold": "1-2mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "4-18"
        },
        "formatted_effects": [
            "Euphoria",
            "increased energy/alertness",
            "decreased need for sleep",
            "increased sociability",
            "mood lift",
            "increased sexuality",
            "excessive talking",
            "decreased appetite",
            "weight loss",
            "sweating",
            "disturbed sleep patterns",
            "bruxism",
            "visual and auditory hallucinations",
            "itchiness",
            "aggressiveness",
            "moodiness",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "30-90"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_34Dichloromethylphenidate.shtml"
        },
        "name": "3,4-ctmp",
        "pretty_name": "3,4-CTMP",
        "properties": {
            "after-effects": "2-24 hours.",
            "aliases": [
                "34ctmp",
                "3,4-dichloromethylphenidate"
            ],
            "categories": [
                "stimulant",
                "research-chemical",
                "habit-forming"
            ],
            "dose": "Oral Threshold: 1-2mg Light: 2-4mg Common: 4-6mg Heavy: 6-10mg",
            "duration": "4-18 hours",
            "effects": "Euphoria, increased energy/alertness, decreased need for sleep, increased sociability, mood lift, increased sexuality, excessive talking, decreased appetite, weight loss, sweating, disturbed sleep patterns, bruxism, visual and auditory hallucinations, itchiness, aggressiveness, moodiness.",
            "onset": "30-90 minutes.",
            "summary": "A strong stimulant, NDRI and analogue of methylphenidate. Has increased in popularity in recent years. Said to be seven times more potent than methylphenidate but with a slower onset, however discrimination studies have found it to be more addictive than cocaine."
        }
    },
    "3,6-dmpm": {
        "categories": [
            "stimulant",
            "tentative",
            "research-chemical"
        ],
        "name": "3,6-dmpm",
        "pretty_name": "3,6-DMPM",
        "properties": {
            "categories": [
                "stimulant",
                "tentative",
                "research-chemical"
            ],
            "summary": "Stimulant that is related to Phenmetrazine. Nearly no information on dose or effects."
        }
    },
    "3-cmc": {
        "aliases": [
            "3cmc"
        ],
        "categories": [
            "stimulant",
            "research-chemical",
            "habit-forming",
            "tentative"
        ],
        "dose_note": " NOTE: These doses are tentative and may need further research.",
        "formatted_aftereffects": {
            "Insufflated": "3-6",
            "Oral": "4-12",
            "_unit": "hours"
        },
        "formatted_dose": {
            "Insufflated": {
                "Common": "40-80mg",
                "Light": "20-40mg",
                "Strong": "80-100mg."
            },
            "Oral": {
                "Common": "60-100mg",
                "Light": "30-60mg",
                "Strong": "100-180mg."
            }
        },
        "formatted_duration": {
            "Insufflated": "1-2",
            "Oral": "2-4",
            "_unit": "hours"
        },
        "formatted_effects": [
            "Euphoria",
            "increased energy/alertness",
            "decreased need for sleep",
            "increased sociability",
            "mood lift",
            "increased sexuality",
            "excessive talking",
            "decreased appetite",
            "weight loss",
            "sweating",
            "disturbed sleep patterns",
            "bruxism",
            "visual and auditory hallucinations",
            "itchiness",
            "aggressiveness",
            "moodiness",
            ""
        ],
        "formatted_onset": {
            "Insufflated": "10-30",
            "Oral": "30-90",
            "_unit": "minutes"
        },
        "name": "3-cmc",
        "pretty_name": "3-CMC",
        "properties": {
            "after-effects": "Oral: 4-12 hours. | Insufflated: 3-6 hours.",
            "aliases": [
                "3cmc"
            ],
            "categories": [
                "stimulant",
                "research-chemical",
                "habit-forming",
                "tentative"
            ],
            "dose": "Oral Light: 30-60mg Common: 60-100mg Strong: 100-180mg. | Insufflated Light: 20-40mg Common: 40-80mg Strong: 80-100mg.",
            "duration": "Oral: 2-4 hours. | Insufflated: 1-2 hours.",
            "onset": "Oral: 30-90 minutes. | Insufflated: 10-30 minutes.",
            "summary": "A rarely seen halogenated cathinone drug. Likely to be a stimulant, possibly an entactogen. (Note: The amphetamine analogue of this drug, 4-CA, is a highly dangerous neurotoxin, no data about the safety of this one, but should likely be avoided)"
        }
    },
    "3-fa": {
        "aliases": [
            "3fa"
        ],
        "categories": [
            "stimulant",
            "research-chemical",
            "habit-forming",
            "tentative"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-6"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "15-30mg",
                "Light": "5-15mg",
                "Strong": "30-60mg+"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "4-6"
        },
        "formatted_effects": [
            "Euphoria",
            "increased energy/alertness",
            "decreased need for sleep",
            "increased sociability",
            "mood lift",
            "increased sexuality",
            "excessive talking",
            "decreased appetite",
            "weight loss",
            "sweating",
            "disturbed sleep patterns",
            "bruxism",
            "visual and auditory hallucinations",
            "itchiness",
            "aggressiveness",
            "moodiness",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "30-90"
        },
        "name": "3-fa",
        "pretty_name": "3-FA",
        "properties": {
            "after-effects": "1-6 hours.",
            "aliases": [
                "3fa"
            ],
            "categories": [
                "stimulant",
                "research-chemical",
                "habit-forming",
                "tentative"
            ],
            "dose": "Oral Light: 5-15mg Common: 15-30mg Strong: 30-60mg+",
            "duration": "4-6 hours",
            "effects": "Euphoria, increased energy/alertness, decreased need for sleep, increased sociability, mood lift, increased sexuality, excessive talking, decreased appetite, weight loss, sweating, disturbed sleep patterns, bruxism, visual and auditory hallucinations, itchiness, aggressiveness, moodiness.",
            "onset": "30-90 minutes (oral) depending on stomach contents.",
            "summary": "A stimulant that is close to equipotent with methamphetamine and acts as a monoamine releasing agent , but has more selectivity for dopamine/noradrenaline over serotonin."
        }
    },
    "3-fea": {
        "categories": [
            "stimulant",
            "research-chemical",
            "habit-forming",
            "tentative"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-12"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "30-50mg",
                "Light": "10-30mg",
                "Strong": "50-70mg+"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "4-6"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "20-50"
        },
        "name": "3-fea",
        "pretty_name": "3-FEA",
        "properties": {
            "after-effects": "1-12 hours.",
            "categories": [
                "stimulant",
                "research-chemical",
                "habit-forming",
                "tentative"
            ],
            "dose": "Oral Light: 10-30mg Common: 30-50mg Strong: 50-70mg+",
            "duration": "4-6 hours.",
            "onset": "20-50 minutes.",
            "summary": "A novel fluorinated amphetamine with serotonergic properties. Effects are similar to 4-FA, in that it provides slight dopamine and norepinephrine release or reuptake inhibition, as well as serotonin release and reuptake inhibition. Effects on the serotonin side are more pronounced than dopamine and norepinephrine, the latter two being almost negligibly."
        }
    },
    "3-fma": {
        "aliases": [
            "3fma"
        ],
        "categories": [
            "stimulant",
            "research-chemical",
            "habit-forming"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-12"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "15-30mg",
                "Light": "5-15mg",
                "Strong": "30-60mg+"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "4-8"
        },
        "formatted_effects": [
            "Euphoria",
            "increased energy/alertness",
            "decreased need for sleep",
            "increased sociability",
            "mood lift",
            "increased sexuality",
            "excessive talking",
            "decreased appetite",
            "weight loss",
            "sweating",
            "disturbed sleep patterns",
            "bruxism",
            "visual and auditory hallucinations",
            "itchiness",
            "aggressiveness",
            "moodiness",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "20-40"
        },
        "name": "3-fma",
        "pretty_name": "3-FMA",
        "properties": {
            "after-effects": "1-12 hours.",
            "aliases": [
                "3fma"
            ],
            "categories": [
                "stimulant",
                "research-chemical",
                "habit-forming"
            ],
            "dose": "Oral Light: 5-15mg Common: 15-30mg Strong: 30-60mg+",
            "duration": "4-8 hours.",
            "effects": "Euphoria, increased energy/alertness, decreased need for sleep, increased sociability, mood lift, increased sexuality, excessive talking, decreased appetite, weight loss, sweating, disturbed sleep patterns, bruxism, visual and auditory hallucinations, itchiness, aggressiveness, moodiness.",
            "onset": "20-40 minutes.",
            "summary": "Stimulant drug in the amphetamine family"
        }
    },
    "3-fmc": {
        "categories": [
            "stimulant",
            "research-chemical",
            "habit-forming"
        ],
        "dose_note": " NOTE: 3-fmc is very harsh on the nasal membranes",
        "formatted_dose": {
            "Light:": {
                "Common": "50-100mg",
                "Light": "25-50mg",
                "Strong": "100-150mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "2-4"
        },
        "formatted_effects": [
            "Euphoria",
            "increased energy/alertness",
            "decreased need for sleep",
            "increased sociability",
            "mood lift",
            "increased sexuality",
            "excessive talking",
            "decreased appetite",
            "weight loss",
            "sweating",
            "disturbed sleep patterns",
            "bruxism",
            "visual and auditory hallucinations",
            "itchiness",
            "aggressiveness",
            "moodiness",
            ""
        ],
        "formatted_onset": {
            "value": "Rapid."
        },
        "name": "3-fmc",
        "pretty_name": "3-FMC",
        "properties": {
            "categories": [
                "stimulant",
                "research-chemical",
                "habit-forming"
            ],
            "dose": "Light: 25-50mg Common: 50-100mg Strong: 100-150mg | NOTE: 3-fmc is very harsh on the nasal membranes",
            "duration": "2-4 hours.",
            "effects": "Euphoria, increased energy/alertness, decreased need for sleep, increased sociability, mood lift, increased sexuality, excessive talking, decreased appetite, weight loss, sweating, disturbed sleep patterns, bruxism, visual and auditory hallucinations, itchiness, aggressiveness, moodiness.",
            "onset": "Rapid.",
            "summary": "A stimulant drug related to mephedrone. A member of the cathinone class, it is also an amphetamine. Effects similar to other drugs of its class, may possess high addiction potential. May be a monoamine releaser, reuptake inhibitor or both."
        },
        "sources": {
            "_general": [
                "3-FMC is a monoamine releaser - International Review of Neurobiology - The Neuropsychiatric Complications of Stimulant Abuse Vol. 20"
            ]
        }
    },
    "3-fpm": {
        "aliases": [
            "3fpm",
            "3-fph",
            "3f-phenmetrazine",
            "3f-p",
            "3fp",
            "pal-593"
        ],
        "categories": [
            "stimulant",
            "research-chemical",
            "habit-forming"
        ],
        "dose_note": " NOTE: Repeated dosing appears to lengthen after-effects of sleeplessness / insomnia.",
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-12"
        },
        "formatted_dose": {
            "Insufflated": {
                "Common": "20-35mg",
                "Heavy": "50mg-70mg",
                "Light": "10-20mg",
                "Strong": "35-50mg"
            },
            "Oral": {
                "Common": "25-50mg",
                "Heavy": "70-100mg",
                "Light": "10-25mg",
                "Strong": "50-70mg.",
                "Threshold": "5-10mg"
            }
        },
        "formatted_duration": {
            "Insufflated": "3-6",
            "Oral": "5-8",
            "_unit": "hours"
        },
        "formatted_effects": [
            "increased energy/alertness",
            "Decreased need for sleep",
            "Increased sociability",
            "mood lift",
            "increase sexuality",
            "Excessive talking",
            "Decreased appetite",
            "Weight loss",
            "Sweating",
            "Distrubed sleep patterns",
            "Bruxia",
            "Visual and audiotory hallucinations itchiness",
            "agressiveness",
            "moodiness",
            ""
        ],
        "formatted_onset": {
            "Insufflated": "1-5",
            "Oral": "20-30",
            "_unit": "minutes"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_3FPhenmetrazine.shtml"
        },
        "name": "3-fpm",
        "pretty_name": "3-FPM",
        "properties": {
            "after-effects": "1-12 hours.",
            "aliases": [
                "3fpm",
                "3-fph",
                "3f-phenmetrazine",
                "3f-p",
                "3fp",
                "pal-593"
            ],
            "categories": [
                "stimulant",
                "research-chemical",
                "habit-forming"
            ],
            "dose": "Oral Threshold: 5-10mg Light: 10-25mg Common: 25-50mg Strong: 50-70mg. Heavy: 70-100mg | Insufflated Light: 10-20mg Common: 20-35mg Strong: 35-50mg Heavy: 50mg-70mg | NOTE: Repeated dosing appears to lengthen after-effects of sleeplessness / insomnia.",
            "duration": "Oral: 5-8 hours | Insufflated: 3-6 hours.",
            "effects": "increased energy/alertness, Decreased need for sleep, Increased sociability, mood lift, increase sexuality, Excessive talking, Decreased appetite, Weight loss, Sweating, Distrubed sleep patterns, Bruxia, Visual and audiotory hallucinations itchiness, agressiveness, moodiness.",
            "onset": "Oral: 20-30 minutes | Insufflated: 1-5 minutes",
            "summary": "A functional stimulant related to phenmetrazine. Effects similar to amphetamine, but longer and more focused. Observed as being relatively benign in low doses, but seems to cause worrying health effects for heavy users. Pain from insufflation is eye-wateringly intense, but short."
        },
        "pweffects": {
            "Analysis enhancement": "https://psychonautwiki.org/wiki/Analysis_enhancement",
            "Anxiety": "https://psychonautwiki.org/wiki/Anxiety",
            "Appetite suppression": "https://psychonautwiki.org/wiki/Appetite_suppression",
            "Cognitive fatigue": "https://psychonautwiki.org/wiki/Cognitive_fatigue",
            "Depression": "https://psychonautwiki.org/wiki/Depression",
            "Focus enhancement": "https://psychonautwiki.org/wiki/Focus_enhancement",
            "Increased heart rate": "https://psychonautwiki.org/wiki/Increased_heart_rate",
            "Increased libido": "https://psychonautwiki.org/wiki/Increased_libido",
            "Increased perspiration": "https://psychonautwiki.org/wiki/Increased_perspiration",
            "Irritability": "https://psychonautwiki.org/wiki/Irritability",
            "Motivation enhancement": "https://psychonautwiki.org/wiki/Motivation_enhancement",
            "Stimulation": "https://psychonautwiki.org/wiki/Stimulation",
            "Teeth grinding": "https://psychonautwiki.org/wiki/Teeth_grinding",
            "Thought acceleration": "https://psychonautwiki.org/wiki/Thought_acceleration",
            "Thought deceleration": "https://psychonautwiki.org/wiki/Thought_deceleration",
            "Vasoconstriction": "https://psychonautwiki.org/wiki/Vasoconstriction",
            "Wakefulness": "https://psychonautwiki.org/wiki/Wakefulness"
        }
    },
    "3-ho-pce": {
        "aliases": [
            "3hopce"
        ],
        "categories": [
            "dissociative",
            "research-chemical",
            "habit-forming",
            "tentative"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "2"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "5-10mg",
                "Light": "2-5mg",
                "Strong": "10-15mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "3-4"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "20-40"
        },
        "name": "3-ho-pce",
        "pretty_name": "3-HO-PCE",
        "properties": {
            "after-effects": "2 hours to a month.",
            "aliases": [
                "3hopce"
            ],
            "categories": [
                "dissociative",
                "research-chemical",
                "habit-forming",
                "tentative"
            ],
            "dose": "Oral Threshold 1-2mg Light: 2-5mg Common: 5-10mg's Strong: 10-15mg's",
            "duration": "3-4 hours.",
            "onset": "20-40 minutes.",
            "summary": "A rare and very potent PCP analogue, eight times more potent than PCP as NMDA receptor antagonist and also a \u03bc-opioid receptor agonist. Similar in structure to methoxetamine."
        }
    },
    "3-ho-pcp": {
        "aliases": [
            "3hopcp"
        ],
        "categories": [
            "dissociative",
            "research-chemical",
            "habit-forming",
            "tentative"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "2"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "4-5mg",
                "Light": "2-4mg",
                "Strong": "5+mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "3-4"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "20-40"
        },
        "name": "3-ho-pcp",
        "pretty_name": "3-HO-PCP",
        "properties": {
            "after-effects": "2 hours to a month.",
            "aliases": [
                "3hopcp"
            ],
            "categories": [
                "dissociative",
                "research-chemical",
                "habit-forming",
                "tentative"
            ],
            "dose": "Oral Threshold: ~2mg Light: 2-4mg Common: 4-5mg Strong: 5+mg",
            "duration": "3-4 hours",
            "onset": "20-40 minutes",
            "summary": "An arylcyclohexamine dissociative analogue of PCP, this drug is relatively uncommon, and little information is available. It is reported to not only have dissociative activity but also be an opioid. Some trip reports suggest very negative side-effects including intense muscle tension."
        }
    },
    "3-mec": {
        "categories": [
            "stimulant",
            "research-chemical",
            "tentative",
            "habit-forming"
        ],
        "formatted_aftereffects": {
            "Insufflated": "1-3",
            "Oral": "2-5",
            "_unit": "hours"
        },
        "formatted_dose": {
            "Insufflated:": {
                "Common": "50-100mg",
                "Insufflated": "Light",
                "Strong": "100-150mg+"
            },
            "Oral": {
                "Common": "100-175mg",
                "Light": "50-100mg",
                "Strong": "175-250mg+"
            }
        },
        "formatted_duration": {
            "Insufflated": "1-1.5",
            "Oral": "2-5",
            "_unit": "hours"
        },
        "formatted_onset": {
            "Oral": "45-90",
            "_unit": "minutes"
        },
        "name": "3-mec",
        "pretty_name": "3-MEC",
        "properties": {
            "after-effects": "Oral: 2-5 hours. | Insufflated: 1-3 hours.",
            "categories": [
                "stimulant",
                "research-chemical",
                "tentative",
                "habit-forming"
            ],
            "dose": "Oral Light: 50-100mg Common: 100-175mg Strong: 175-250mg+ | Insufflated: Light: 25-50mg Common: 50-100mg Strong: 100-150mg+",
            "duration": "Oral: 2-5 hours. | Insufflated: 1-1.5 hours.",
            "onset": "Oral: 45-90 minutes. Insufflated: 5-15 minutes.",
            "summary": "Another cathinone based stimulant, that is weaker than 4-MEC. Very few reports since it is quite unpopular."
        }
    },
    "3-meo-pce": {
        "aliases": [
            "3meopce",
            "methoxyieticyclidine"
        ],
        "categories": [
            "dissociative",
            "research-chemical",
            "habit-forming",
            "tentative"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-6"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "5-10mg",
                "Light": "3-5mg",
                "Strong": "10-20mg+"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "3-5"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "15-30"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_3MEOPCE_.shtml"
        },
        "name": "3-meo-pce",
        "pretty_name": "3-MeO-PCE",
        "properties": {
            "after-effects": "1-6 hours.",
            "aliases": [
                "3meopce",
                "methoxyieticyclidine"
            ],
            "categories": [
                "dissociative",
                "research-chemical",
                "habit-forming",
                "tentative"
            ],
            "dose": "Oral Light: 3-5mg Common: 5-10mg Strong: 10-20mg+",
            "duration": "3-5 hours.",
            "onset": "15-30 minutes.",
            "summary": "3-MeO-PCP with a change of a ring replacement. Slightly more potent than 3-MeO-PCP."
        }
    },
    "3-meo-pcmo": {
        "categories": [
            "dissociative",
            "research-chemical",
            "tentative"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "2-8"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "80-125mg",
                "Light": "50-80mg",
                "Strong": "125-150mg+"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "3-5"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "30-60"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_3MeOPCMo.shtml"
        },
        "name": "3-meo-pcmo",
        "pretty_name": "3-MeO-PCMO",
        "properties": {
            "after-effects": "2-8 hours.",
            "avoid": "All other CNS depressants.",
            "categories": [
                "dissociative",
                "research-chemical",
                "tentative"
            ],
            "dose": "Oral Light: 50-80mg Common: 80-125mg Strong: 125-150mg+",
            "duration": "3-5 hours.",
            "onset": "30-60 minutes.",
            "summary": "A less common dissociative anaesthetic compound related to PCP. An analogue of 3-meo-pcp, but far less potent. Possibly an antitussive and antidepressant. Very little history of human use or pharmacological information."
        }
    },
    "3-meo-pcp": {
        "aliases": [
            "3meopcp"
        ],
        "categories": [
            "dissociative",
            "research-chemical",
            "habit-forming",
            "common"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "2-48"
        },
        "formatted_dose": {
            "Insufflated": {
                "Common": "5-8mg",
                "Heavy": "12-15mg+",
                "Light": "2-5mg",
                "Strong": "8-12mg",
                "Threshold": "1-2mg"
            },
            "Oral": {
                "Common": "5-10mg.",
                "Heavy": "15-18mg+",
                "Light": "3-5mg",
                "Strong": "10-15mg",
                "Threshold": "1.5-3mg"
            }
        },
        "formatted_duration": {
            "Insufflated": "2-4",
            "Oral": "3-5",
            "_unit": "hours"
        },
        "formatted_onset": {
            "IM": "3-7",
            "Insufflated": "10-30",
            "Oral": "20-90",
            "_unit": "minutes"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_3MeOPCP.shtml"
        },
        "name": "3-meo-pcp",
        "pretty_name": "3-MeO-PCP",
        "properties": {
            "after-effects": "2-48 hours.",
            "aliases": [
                "3meopcp"
            ],
            "categories": [
                "dissociative",
                "research-chemical",
                "habit-forming",
                "common"
            ],
            "dose": "Oral Threshold: 1.5-3mg Light: 3-5mg Common: 5-10mg. Strong: 10-15mg Heavy: 15-18mg+ | Insufflated Threshold: 1-2mg Light: 2-5mg Common: 5-8mg Strong: 8-12mg Heavy: 12-15mg+",
            "duration": "Oral: 3-5 hours +/- an hour dependant on dose. | Insufflated: 2-4 hours +/- ~30 minutes, dependant on dose.",
            "onset": "Oral: 20-90 minutes. | Insufflated: 10-30 minutes. | IM: 3-7 minutes.",
            "summary": "A potent dissociative often compared to MXE but with a longer duration, much less sedating effects and causing an overall different experience. Users have reported effects as being similar to PCP. Roughtly ten times more potent than 4-MeO-PCP."
        },
        "pweffects": {
            "Acuity enhancement": "https://psychonautwiki.org/wiki/Acuity_enhancement",
            "Acuity suppression": "https://psychonautwiki.org/wiki/Acuity_suppression",
            "Amnesia": "https://psychonautwiki.org/wiki/Amnesia",
            "Analysis enhancement": "https://psychonautwiki.org/wiki/Analysis_enhancement",
            "Anxiety suppression": "https://psychonautwiki.org/wiki/Anxiety_suppression",
            "Auditory distortion": "https://psychonautwiki.org/wiki/Auditory_distortion",
            "Auditory enhancement": "https://psychonautwiki.org/wiki/Auditory_enhancement",
            "Auditory hallucinations": "https://psychonautwiki.org/wiki/Auditory_hallucinations",
            "Auditory suppression": "https://psychonautwiki.org/wiki/Auditory_suppression",
            "Autonomous entities": "https://psychonautwiki.org/wiki/Autonomous_entities",
            "Bodily control enhancement": "https://psychonautwiki.org/wiki/Bodily_control_enhancement",
            "Cognitive euphoria": "https://psychonautwiki.org/wiki/Cognitive_euphoria",
            "Colour enhancement": "https://psychonautwiki.org/wiki/Colour_enhancement",
            "Compulsive redosing": "https://psychonautwiki.org/wiki/Compulsive_redosing",
            "Conceptual thinking": "https://psychonautwiki.org/wiki/Conceptual_thinking",
            "Consciousness disconnection": "https://psychonautwiki.org/wiki/Consciousness_disconnection",
            "Creativity enhancement": "https://psychonautwiki.org/wiki/Creativity_enhancement",
            "Depersonalization": "https://psychonautwiki.org/wiki/Depersonalization",
            "Derealization": "https://psychonautwiki.org/wiki/Derealization",
            "Disinhibition": "https://psychonautwiki.org/wiki/Disinhibition",
            "Dizziness": "https://psychonautwiki.org/wiki/Dizziness",
            "Double vision": "https://psychonautwiki.org/wiki/Double_vision",
            "D\u00e9j\u00e0 vu": "https://psychonautwiki.org/wiki/D%C3%A9j%C3%A0_vu",
            "Environmental cubism": "https://psychonautwiki.org/wiki/Environmental_cubism",
            "Environmental orbism": "https://psychonautwiki.org/wiki/Environmental_orbism",
            "Feelings of impending doom": "https://psychonautwiki.org/wiki/Feelings_of_impending_doom",
            "Frame rate suppression": "https://psychonautwiki.org/wiki/Frame_rate_suppression",
            "Geometry": "https://psychonautwiki.org/wiki/Geometry",
            "Immersion enhancement": "https://psychonautwiki.org/wiki/Immersion_enhancement",
            "Increased heart rate": "https://psychonautwiki.org/wiki/Increased_heart_rate",
            "Information processing suppression": "https://psychonautwiki.org/wiki/Information_processing_suppression",
            "Internal hallucinations": "https://psychonautwiki.org/wiki/Internal_hallucinations",
            "Mania": "https://psychonautwiki.org/wiki/Mania",
            "Memory suppression": "https://psychonautwiki.org/wiki/Memory_suppression",
            "Mindfulness": "https://psychonautwiki.org/wiki/Mindfulness",
            "Nausea": "https://psychonautwiki.org/wiki/Nausea",
            "Pattern recognition suppression": "https://psychonautwiki.org/wiki/Pattern_recognition_suppression",
            "Perception of decreased weight": "https://psychonautwiki.org/wiki/Perception_of_decreased_weight",
            "Perspective alterations": "https://psychonautwiki.org/wiki/Perspective_alterations",
            "Perspective distortions": "https://psychonautwiki.org/wiki/Perspective_distortions",
            "Physical autonomy": "https://psychonautwiki.org/wiki/Physical_autonomy",
            "Physical euphoria": "https://psychonautwiki.org/wiki/Physical_euphoria",
            "Psychosis": "https://psychonautwiki.org/wiki/Psychosis",
            "Scenarios and plots": "https://psychonautwiki.org/wiki/Scenarios_and_plots",
            "Scenery slicing": "https://psychonautwiki.org/wiki/Scenery_slicing",
            "Settings, sceneries, and landscapes": "https://psychonautwiki.org/wiki/Settings,_sceneries,_and_landscapes",
            "Spontaneous tactile sensations": "https://psychonautwiki.org/wiki/Spontaneous_tactile_sensations",
            "Stimulation": "https://psychonautwiki.org/wiki/Stimulation",
            "Tactile disconnection": "https://psychonautwiki.org/wiki/Tactile_disconnection",
            "Tactile enhancement": "https://psychonautwiki.org/wiki/Tactile_enhancement"
        }
    },
    "3-meo-pcpr": {
        "categories": [
            "dissociative",
            "tentative",
            "research-chemical",
            "habit-forming"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-4"
        },
        "formatted_dose": {
            "": {},
            "Insufflated": {
                "Common": "3-8mg",
                "Light": "1-3mg",
                "Strong": "8-15mg+"
            },
            "Oral": {
                "Common": "8-15mg",
                "Light": "5-8mg",
                "Strong": "15-20mg+"
            }
        },
        "formatted_duration": {
            "Insufflated": "1-3",
            "Oral": "3-4",
            "_unit": "hours"
        },
        "formatted_onset": {
            "Insufflated": "5-10",
            "Oral": "15-30",
            "_unit": "minutes"
        },
        "name": "3-meo-pcpr",
        "pretty_name": "3-MeO-PCPR",
        "properties": {
            "after-effects": "1-4 hours.",
            "categories": [
                "dissociative",
                "tentative",
                "research-chemical",
                "habit-forming"
            ],
            "dose": "Oral Light: 5-8mg Common: 8-15mg Strong: 15-20mg+ || Insufflated Light: 1-3mg Common: 3-8mg Strong: 8-15mg+",
            "duration": "Oral: 3-4 hours. || Insufflated: 1-3 hours.",
            "onset": "Oral: 15-30 minutes. || Insufflated: 5-10 mintues.",
            "summary": "This is the N-Propyl homologue of 3-MeO-PCE. It is slightly less potent than PCP. Yet seems slightly less manic inducing."
        }
    },
    "3-meo-pcpy": {
        "categories": [
            "dissociative",
            "habit-forming",
            "tentative",
            "research-chemical"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-6"
        },
        "formatted_dose": {
            "Insufflated": {
                "Common": "3-6mg",
                "Light": "1-3mg",
                "Strong": "6-10mg+"
            },
            "Oral": {
                "Common": "4-8mg",
                "Light": "2-4mg",
                "Strong": "8-15mg+"
            }
        },
        "formatted_duration": {
            "Oral": "3-5",
            "_unit": "hours"
        },
        "formatted_onset": {
            "Oral": "15-45",
            "_unit": "minutes"
        },
        "name": "3-meo-pcpy",
        "pretty_name": "3-MeO-PCPY",
        "properties": {
            "after-effects": "1-6 hours.",
            "avoid": "All other CNS depressants.",
            "categories": [
                "dissociative",
                "habit-forming",
                "tentative",
                "research-chemical"
            ],
            "dose": "Oral Light: 2-4mg Common: 4-8mg Strong: 8-15mg+ | Insufflated Light: 1-3mg Common: 3-6mg Strong: 6-10mg+",
            "duration": "Oral: 3-5 hours. Insufflated: 2-4 hours.",
            "onset": "Oral: 15-45 minutes. Insufflated: 5-20 minutes.",
            "summary": "3-Methoxy analogue of Rolicyclidine (PCPy) less opioid effects than Phenylcyclidine (PCP) Yet still prominent."
        }
    },
    "3-meomc": {
        "categories": [
            "stimulant",
            "habit-forming",
            "empathogen"
        ],
        "formatted_dose": {
            "Insufflated": {
                "Common": "50-100mg",
                "Light": "25-50mg",
                "Strong": "100-150mg+"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "5-7"
        },
        "formatted_onset": {
            "Insufflated": "10-20",
            "_unit": "minutes"
        },
        "name": "3-meomc",
        "pretty_name": "3-MeOMC",
        "properties": {
            "avoid": "Other stimulants.",
            "categories": [
                "stimulant",
                "habit-forming",
                "empathogen"
            ],
            "dose": "Insufflated Light: 25-50mg Common: 50-100mg Strong: 100-150mg+",
            "duration": "5-7 hours.",
            "onset": "Insufflated: 10-20 minutes.",
            "summary": "A cathinone that has a short history of human use."
        }
    },
    "3-mmc": {
        "aliases": [
            "3mmc",
            "3-methylmethcathinone",
            "3methylmethcathinone",
            "3-meph",
            "3-mephedrone"
        ],
        "categories": [
            "stimulant",
            "habit-forming",
            "empathogen"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "3-4"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "75-150mg",
                "Light": "25-75mg",
                "Strong": "150mg-300mg+"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "4-7"
        },
        "formatted_effects": [
            "increased energy/alertness",
            "Decreased need for sleep",
            "Increased sociability",
            "mood lift",
            "increase sexuality",
            "Excessive talking",
            "Decreased appetite",
            "Weight loss",
            "Sweating",
            "Distrubed sleep patterns",
            "Bruxia",
            "Visual and audiotory hallucinations itchiness",
            "agressiveness",
            "moodiness",
            ""
        ],
        "formatted_onset": {
            "value": "Within"
        },
        "name": "3-mmc",
        "pretty_name": "3-MMC",
        "properties": {
            "after-effects": "3-4 hours.",
            "aliases": [
                "3mmc",
                "3-methylmethcathinone",
                "3methylmethcathinone",
                "3-meph",
                "3-mephedrone"
            ],
            "categories": [
                "stimulant",
                "habit-forming",
                "empathogen"
            ],
            "dose": "Light: 25-75mg Common: 75-150mg Strong: 150mg-300mg+",
            "duration": "4-7 hours (dependent on dose/ROA/lots of stuff)",
            "effects": "increased energy/alertness, Decreased need for sleep, Increased sociability, mood lift, increase sexuality, Excessive talking, Decreased appetite, Weight loss, Sweating, Distrubed sleep patterns, Bruxia, Visual and audiotory hallucinations itchiness, agressiveness, moodiness.",
            "onset": "Within an hour.",
            "summary": "A euphoric stimulant similar to mephedrone but said to lack much of the \"magic.\" Never gained the same popularity. Slightly less potent."
        }
    },
    "3-oh-phenazepam": {
        "aliases": [
            "3-ho-phenazepam",
            "3hophenazepam",
            "3ohphenazepam",
            "3-ho-p",
            "3hop",
            "3-oh-p",
            "3ohp",
            "3-hydroxyphenazepam"
        ],
        "categories": [
            "tentative",
            "research-chemical",
            "benzodiazepine",
            "habit-forming",
            "depressant"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "2-24"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "1-2mg",
                "Heavy": "2-4mg",
                "Light": "0.5-1mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "10-24"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "30-90"
        },
        "name": "3-oh-phenazepam",
        "pretty_name": "3-OH-PHENAZEPAM",
        "properties": {
            "after-effects": "2-24 hours.",
            "aliases": [
                "3-ho-phenazepam",
                "3hophenazepam",
                "3ohphenazepam",
                "3-ho-p",
                "3hop",
                "3-oh-p",
                "3ohp",
                "3-hydroxyphenazepam"
            ],
            "avoid": "All other CNS depressants.",
            "categories": [
                "tentative",
                "research-chemical",
                "benzodiazepine",
                "habit-forming",
                "depressant"
            ],
            "dose": "Light: 0.5-1mg Common: 1-2mg Heavy: 2-4mg",
            "duration": "10-24 hours.",
            "onset": "30-90 minutes.",
            "summary": "The 3-OH analogue of Phenazepam, which cuts the half life down quite a bit. Psychoactive effects are mostly lead by its metabolites, rather than the drug itself."
        }
    },
    "3c-e": {
        "categories": [
            "psychedelic",
            "research-chemical",
            "stimulant"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "2-16"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "35-50mg",
                "Light": "25-35mg",
                "Strong": "50-70mg+",
                "Threshold": "15-25mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "8-14"
        },
        "formatted_effects": [
            "Euphoria",
            "empathy",
            "insight",
            "brightened colour",
            "Closed/Open eye visuals",
            "enhanced tactile sensation",
            "mental/physical stimulation",
            "decreased appetite",
            "pupil dilation",
            "restlessness",
            "change in perception",
            "ego softening",
            "sweating/chills",
            "muscle tension",
            "confusion",
            "insomnia",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "30-60"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_3CE.shtml",
            "pihkal": "https://www.erowid.org/library/books_online/pihkal/pihkal025.shtml"
        },
        "name": "3c-e",
        "pretty_name": "3C-E",
        "properties": {
            "after-effects": "2-16 hours.",
            "categories": [
                "psychedelic",
                "research-chemical",
                "stimulant"
            ],
            "dose": "Threshold: 15-25mg Light: 25-35mg Common: 35-50mg Strong: 50-70mg+",
            "duration": "8-14 hours",
            "effects": "Euphoria, empathy, insight, brightened colour, Closed/Open eye visuals, enhanced tactile sensation, mental/physical stimulation, decreased appetite, pupil dilation, restlessness, change in perception, ego softening, sweating/chills, muscle tension, confusion, insomnia.",
            "onset": "30-60 minutes.",
            "summary": "Three-Carbon Analog of Escaline. Substituted Amphetamine."
        }
    },
    "3c-p": {
        "aliases": [
            "3cp"
        ],
        "categories": [
            "psychedelic",
            "stimulant",
            "research-chemical"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "2-24"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "20-40mg",
                "Heavy": "40+mg",
                "Light": "10-20mg",
                "Threshold": "5-10mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "10-18"
        },
        "formatted_effects": [
            "Euphoria",
            "empathy",
            "insight",
            "brightened colour",
            "Closed/Open eye visuals",
            "enhanced tactile sensation",
            "mental/physical stimulation",
            "decreased appetite",
            "pupil dilation",
            "restlessness",
            "change in perception",
            "ego softening",
            "sweating/chills",
            "muscle tension",
            "confusion",
            "insomnia",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "60-150"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_3CP.shtml"
        },
        "name": "3c-p",
        "pretty_name": "3C-P",
        "properties": {
            "after-effects": "2-24 hours.",
            "aliases": [
                "3cp"
            ],
            "categories": [
                "psychedelic",
                "stimulant",
                "research-chemical"
            ],
            "dose": "Oral Threshold: 5-10mg Light: 10-20mg Common: 20-40mg Heavy: 40+mg",
            "duration": "10-18 hours",
            "effects": "Euphoria, empathy, insight, brightened colour, Closed/Open eye visuals, enhanced tactile sensation, mental/physical stimulation, decreased appetite, pupil dilation, restlessness, change in perception, ego softening, sweating/chills, muscle tension, confusion, insomnia.",
            "onset": "60-150 minutes.",
            "summary": "Rather new and uncommon stimulant, psychedelic and amphetamine with properties similar to the 2Cx class of drugs. 3-carbon homologue of proscaline."
        }
    },
    "4,4-dmar": {
        "aliases": [
            "serotoni",
            "4,4-dmap"
        ],
        "categories": [
            "stimulant",
            "empathogen",
            "habit-forming",
            "tentative"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-12"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "60-120mg",
                "Light": "30-60mg",
                "Strong": "120-200mg."
            }
        },
        "formatted_onset": {
            "Insufflated": "5-15",
            "Oral": "15-30",
            "_unit": "minutes"
        },
        "name": "4,4-dmar",
        "pretty_name": "4,4-DMAR",
        "properties": {
            "after-effects": "1-12 hours.",
            "aliases": [
                "serotoni",
                "4,4-dmap"
            ],
            "categories": [
                "stimulant",
                "empathogen",
                "habit-forming",
                "tentative"
            ],
            "dose": "Light: 30-60mg Common: 60-120mg Strong: 120-200mg.",
            "onset": "Oral: 15-30 minutes. || Insufflated: 5-15 minutes.",
            "summary": "Very closely related stimulant to Aminorex and Pemoline. Was sold as a designer drug for quite awhile under the brand name \"Serotoni\" has been linked to at least 31 deaths. It is a potent SNDRA."
        }
    },
    "4-aco-dalt": {
        "aliases": [
            "4acodalt"
        ],
        "categories": [
            "psychedelic",
            "research-chemical"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-8"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "50-70mg",
                "Heavy": "100+mg",
                "Light": "40-50mg",
                "Threshold": "20mg"
            },
            "Vaporized": {
                "Common": "10-15mg",
                "Light": "5-8mg",
                "Strong": "15+mg",
                "Threshold": "2-4mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "5-9"
        },
        "formatted_effects": [
            "Euphoria",
            "empathy",
            "insight",
            "brightened colour",
            "Closed/Open eye visuals",
            "enhanced tactile sensation",
            "mental/physical stimulation",
            "decreased appetite",
            "pupil dilation",
            "restlessness",
            "change in perception",
            "ego softening",
            "sweating/chills",
            "muscle tension",
            "confusion",
            "insomnia",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "30-90"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_4AcODALT.shtml"
        },
        "name": "4-aco-dalt",
        "pretty_name": "4-AcO-DALT",
        "properties": {
            "after-effects": "1-8 hours.",
            "aliases": [
                "4acodalt"
            ],
            "categories": [
                "psychedelic",
                "research-chemical"
            ],
            "dosage": "(Very Tentative)Orally Threshold: 20mg Light: 40-50mg Common: 50-70mg Heavy: 100mg+ Smoked Threshold: 2-4mg Light: 5-8mg Common: 10-15mg Strong: 15mg+",
            "dose": "Oral Threshold: 20mg Light: 40-50mg Common: 50-70mg Heavy: 100+mg | Vaporized Threshold: 2-4mg Light: 5-8mg Common: 10-15mg Strong: 15+mg",
            "duration": "5-9 hours.",
            "effects": "Euphoria, empathy, insight, brightened colour, Closed/Open eye visuals, enhanced tactile sensation, mental/physical stimulation, decreased appetite, pupil dilation, restlessness, change in perception, ego softening, sweating/chills, muscle tension, confusion, insomnia.",
            "onset": "30-90 minutes.",
            "summary": "An uncommon tryptamine derivative first reported in the mid 2000s, likely a psychedelic. Little is known about the pharmacology or effects of this compound."
        }
    },
    "4-aco-det": {
        "aliases": [
            "ethacetin",
            "ethylacybin",
            "4-acetoxy-det"
        ],
        "categories": [
            "tentative",
            "psychedelic",
            "research-chemical"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-6"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "10-15mg",
                "Light": "5-15mg",
                "Strong": "15-30mg",
                "Threshold": "2-5mg"
            }
        },
        "formatted_duration": {
            "Oral": "2-6",
            "_unit": "hours"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "15-60"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_4AcODET.shtml"
        },
        "name": "4-aco-det",
        "pretty_name": "4-AcO-DET",
        "properties": {
            "after-effects": "1-6 hours.",
            "aliases": [
                "ethacetin",
                "ethylacybin",
                "4-acetoxy-det"
            ],
            "categories": [
                "tentative",
                "psychedelic",
                "research-chemical"
            ],
            "dose": "Oral Threshold: 2-5mg's Light: 5-15mg's Common: 10-15mg's. Strong: 15-30mg's+\"",
            "duration": "Oral: 2-6 hours.",
            "onset": "15-60 minutes (Dependant on form and stomach contents)",
            "summary": "Rare drug that is of the tryptamine family, can be comparable to Psilocybin. Expected to quickly hydrolyzed into the free phenolic 4-HO-DET."
        }
    },
    "4-aco-dipt": {
        "aliases": [
            "4-acetoxy-dipt",
            "4acodipt",
            "ipracetin",
            "iprocetyl",
            "aces"
        ],
        "categories": [
            "psychedelic",
            "research-chemical"
        ],
        "dose_note": " NOTE: The freebase salt form of 4-AcO-DiPT is 10% more potent than the HCl salt form. These dosages are provided for the freebase salt",
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-8"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "10-20mg",
                "Light": "5-10mg",
                "Strong": "20-35mg",
                "Threshold": "3-5mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "2-5"
        },
        "formatted_effects": [
            "Euphoria",
            "empathy",
            "insight",
            "brightened colour",
            "Closed/Open eye visuals",
            "enhanced tactile sensation",
            "mental/physical stimulation",
            "decreased appetite",
            "pupil dilation",
            "restlessness",
            "change in perception",
            "ego softening",
            "sweating/chills",
            "muscle tension",
            "confusion",
            "insomnia",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "20-90"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_4AcODiPT.shtml"
        },
        "name": "4-aco-dipt",
        "pretty_name": "4-AcO-DiPT",
        "properties": {
            "after-effects": "1-8 hours.",
            "aliases": [
                "4-acetoxy-dipt",
                "4acodipt",
                "ipracetin",
                "iprocetyl",
                "aces"
            ],
            "categories": [
                "psychedelic",
                "research-chemical"
            ],
            "dose": "Oral Threshold: 3-5mg Light: 5-10mg Common: 10-20mg Strong: 20-35mg | NOTE: The freebase salt form of 4-AcO-DiPT is 10% more potent than the HCl salt form. These dosages are provided for the freebase salt",
            "duration": "2-5 hours.",
            "effects": "Euphoria, empathy, insight, brightened colour, Closed/Open eye visuals, enhanced tactile sensation, mental/physical stimulation, decreased appetite, pupil dilation, restlessness, change in perception, ego softening, sweating/chills, muscle tension, confusion, insomnia.",
            "onset": "20-90 minutes. (Dependant on form and stomach contents)",
            "summary": "An uncommon psychedelic tryptamine with a short history of human use, also known as Ipracetin. Possibly first synthesised by Alexander Shulgin. Some reports of heavy nausea, with effects comparable to 2c-b and mushrooms."
        }
    },
    "4-aco-dmt": {
        "aliases": [
            "4acodmt",
            "psilacetin",
            "4-aco",
            "4-acetoxy-dmt"
        ],
        "categories": [
            "psychedelic",
            "research-chemical",
            "common"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-12"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "10-25mg",
                "Heavy": "25-40mg",
                "Light": "5-10mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "4-8"
        },
        "formatted_effects": [
            "4-aco-dmt is a psilocin analog",
            "so effects are very similar to mushrooms",
            "Some users report very little difference between 4-aco-dmt and mushrooms",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "20-90"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_4AcODMT.shtml"
        },
        "name": "4-aco-dmt",
        "pretty_name": "4-AcO-DMT",
        "properties": {
            "after-effects": "1-12 hours.",
            "aliases": [
                "4acodmt",
                "psilacetin",
                "4-aco",
                "4-acetoxy-dmt"
            ],
            "categories": [
                "psychedelic",
                "research-chemical",
                "common"
            ],
            "comeup": "Slow comeup, some users report it taking nearly 2 hours until first effects are felt.",
            "dose": "Oral Light: 5-10mg Common: 10-25mg Heavy: 25-40mg",
            "duration": "4-8 hours.",
            "effects": "4-aco-dmt is a psilocin analog, so effects are very similar to mushrooms. Some users report very little difference between 4-aco-dmt and mushrooms.",
            "onset": "20-90 minutes. (dependant on form and stomach contents)",
            "summary": "A prodrug for Psilocin with extremely similar effects as Mushrooms."
        },
        "pweffects": {
            "8B Geometry - Exposure to inner mechanics of consciousness": "https://psychonautwiki.org/wiki/8B_Geometry_-_Exposure_to_inner_mechanics_of_consciousness",
            "Acuity enhancement": "https://psychonautwiki.org/wiki/Acuity_enhancement",
            "After images": "https://psychonautwiki.org/wiki/After_images",
            "Analysis enhancement": "https://psychonautwiki.org/wiki/Analysis_enhancement",
            "Auditory distortion": "https://psychonautwiki.org/wiki/Auditory_distortion",
            "Auditory enhancement": "https://psychonautwiki.org/wiki/Auditory_enhancement",
            "Auditory hallucinations": "https://psychonautwiki.org/wiki/Auditory_hallucinations",
            "Autonomous entities": "https://psychonautwiki.org/wiki/Autonomous_entities",
            "Colour enhancement": "https://psychonautwiki.org/wiki/Colour_enhancement",
            "Colour shifting": "https://psychonautwiki.org/wiki/Colour_shifting",
            "Conceptual thinking": "https://psychonautwiki.org/wiki/Conceptual_thinking",
            "Creativity enhancement": "https://psychonautwiki.org/wiki/Creativity_enhancement",
            "Delusions": "https://psychonautwiki.org/wiki/Delusions",
            "Drifting": "https://psychonautwiki.org/wiki/Drifting",
            "D\u00e9j\u00e0 vu": "https://psychonautwiki.org/wiki/D%C3%A9j%C3%A0_vu",
            "Emotion enhancement": "https://psychonautwiki.org/wiki/Emotion_enhancement",
            "Enhancement and suppression cycles": "https://psychonautwiki.org/wiki/Enhancement_and_suppression_cycles",
            "Excessive yawning": "https://psychonautwiki.org/wiki/Excessive_yawning",
            "Exposure to inner mechanics of consciousness": "https://psychonautwiki.org/wiki/Exposure_to_inner_mechanics_of_consciousness",
            "External hallucinations": "https://psychonautwiki.org/wiki/External_hallucinations",
            "Feelings of impending doom": "https://psychonautwiki.org/wiki/Feelings_of_impending_doom",
            "Feelings of interdependent opposites": "https://psychonautwiki.org/wiki/Feelings_of_interdependent_opposites",
            "Feelings of predeterminism": "https://psychonautwiki.org/wiki/Feelings_of_predeterminism",
            "Feelings of self-design": "https://psychonautwiki.org/wiki/Feelings_of_self-design",
            "Geometry": "https://psychonautwiki.org/wiki/Geometry",
            "Immersion enhancement": "https://psychonautwiki.org/wiki/Immersion_enhancement",
            "Internal hallucinations": "https://psychonautwiki.org/wiki/Internal_hallucinations",
            "Machinescapes": "https://psychonautwiki.org/wiki/Machinescapes",
            "Memory suppression": "https://psychonautwiki.org/wiki/Memory_suppression",
            "Mindfulness": "https://psychonautwiki.org/wiki/Mindfulness",
            "Novelty enhancement": "https://psychonautwiki.org/wiki/Novelty_enhancement",
            "Pattern recognition enhancement": "https://psychonautwiki.org/wiki/Pattern_recognition_enhancement",
            "Personal bias suppression": "https://psychonautwiki.org/wiki/Personal_bias_suppression",
            "Personal meaning enhancement": "https://psychonautwiki.org/wiki/Personal_meaning_enhancement",
            "Perspective alterations": "https://psychonautwiki.org/wiki/Perspective_alterations",
            "Pupil dilation": "https://psychonautwiki.org/wiki/Pupil_dilation",
            "Rejuvenation": "https://psychonautwiki.org/wiki/Rejuvenation",
            "Runny nose": "https://psychonautwiki.org/wiki/Runny_nose",
            "Salivation": "https://psychonautwiki.org/wiki/Salivation",
            "Scenarios and plots": "https://psychonautwiki.org/wiki/Scenarios_and_plots",
            "Scenery slicing": "https://psychonautwiki.org/wiki/Scenery_slicing",
            "Sedation": "https://psychonautwiki.org/wiki/Sedation",
            "Settings, sceneries, and landscapes": "https://psychonautwiki.org/wiki/Settings,_sceneries,_and_landscapes",
            "Spirituality enhancement": "https://psychonautwiki.org/wiki/Spirituality_enhancement",
            "Spontaneous tactile sensations": "https://psychonautwiki.org/wiki/Spontaneous_tactile_sensations",
            "Subconscious communication": "https://psychonautwiki.org/wiki/Subconscious_communication",
            "Symmetrical texture repetition": "https://psychonautwiki.org/wiki/Symmetrical_texture_repetition",
            "Synaesthesia": "https://psychonautwiki.org/wiki/Synaesthesia",
            "Teeth grinding": "https://psychonautwiki.org/wiki/Teeth_grinding",
            "Temperature regulation suppression": "https://psychonautwiki.org/wiki/Temperature_regulation_suppression"
        }
    },
    "4-aco-dpt": {
        "aliases": [
            "4acodpt"
        ],
        "categories": [
            "psychedelic",
            "tentative",
            "research-chemical"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "2-8"
        },
        "formatted_dose": {
            "Insufflated": {
                "Common": "15-25mg",
                "Light": "10-15mg",
                "Strong": "25-35mg+"
            }
        },
        "formatted_duration": {
            "_unit": "minutes",
            "value": "Insufflated"
        },
        "formatted_onset": {
            "Insufflated": "5-10",
            "_unit": "minutes"
        },
        "name": "4-aco-dpt",
        "pretty_name": "4-AcO-DPT",
        "properties": {
            "after-effects": "2-8 hours.",
            "aliases": [
                "4acodpt"
            ],
            "avoid": "Please, don't mix this substance with another psychedelic/dissociative/stimulant. Respect drugs especially ones that have very few reports and may interact differently than the more common 4-subbed tryptamines.",
            "categories": [
                "psychedelic",
                "tentative",
                "research-chemical"
            ],
            "dose": "Insufflated Light: 10-15mg Common: 15-25mg Strong: 25-35mg+",
            "duration": "Insufflated 60-120 minutes.",
            "note": "It seems that everyone is in favour of taking this substance intranasally, due to a quite poor oral BA.",
            "onset": "Insufflated: 5-10 minutes.",
            "summary": "Research chemical of the Tryptamine class. First noted being sold in 2012, yet never recieved much attention. Conflicting reports. Doesn't dissolve well at all in nearly all solutions it was tested in."
        }
    },
    "4-aco-met": {
        "aliases": [
            "metacetin",
            "4-acetoxy-met",
            "4acomet"
        ],
        "categories": [
            "psychedelic",
            "research-chemical"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "2-12"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "20-25mg",
                "Heavy": "25-35+mg",
                "Light": "12-18mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "4-6"
        },
        "formatted_effects": [
            "Euphoria",
            "empathy",
            "insight",
            "brightened colour",
            "Closed/Open eye visuals",
            "enhanced tactile sensation",
            "mental/physical stimulation",
            "decreased appetite",
            "pupil dilation",
            "restlessness",
            "change in perception",
            "ego softening",
            "sweating/chills",
            "muscle tension",
            "confusion",
            "insomnia",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "20-40"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_4AcOMET.shtml"
        },
        "name": "4-aco-met",
        "pretty_name": "4-AcO-MET",
        "properties": {
            "after-effects": "2-12 hours.",
            "aliases": [
                "metacetin",
                "4-acetoxy-met",
                "4acomet"
            ],
            "categories": [
                "psychedelic",
                "research-chemical"
            ],
            "dose": "Oral Light: 12-18mg Common: 20-25mg Heavy: 25-35+mg",
            "duration": "4-6 hours",
            "effects": "Euphoria, empathy, insight, brightened colour, Closed/Open eye visuals, enhanced tactile sensation, mental/physical stimulation, decreased appetite, pupil dilation, restlessness, change in perception, ego softening, sweating/chills, muscle tension, confusion, insomnia.",
            "onset": "20-40 minutes.",
            "summary": "A rare psychedelic tryptamine which is thought to be metabolised into 4-HO-MET. Onset and duration, intensity will vary but effect profile is largely the same."
        },
        "pweffects": {
            "8A Geometry - Exposure to semantic concept network": "https://psychonautwiki.org/wiki/8A_Geometry_-_Exposure_to_semantic_concept_network",
            "Acuity enhancement": "https://psychonautwiki.org/wiki/Acuity_enhancement",
            "After images": "https://psychonautwiki.org/wiki/After_images",
            "Analysis enhancement": "https://psychonautwiki.org/wiki/Analysis_enhancement",
            "Auditory distortion": "https://psychonautwiki.org/wiki/Auditory_distortion",
            "Auditory enhancement": "https://psychonautwiki.org/wiki/Auditory_enhancement",
            "Auditory hallucinations": "https://psychonautwiki.org/wiki/Auditory_hallucinations",
            "Autonomous entities": "https://psychonautwiki.org/wiki/Autonomous_entities",
            "Colour enhancement": "https://psychonautwiki.org/wiki/Colour_enhancement",
            "Colour shifting": "https://psychonautwiki.org/wiki/Colour_shifting",
            "Conceptual thinking": "https://psychonautwiki.org/wiki/Conceptual_thinking",
            "Delusions": "https://psychonautwiki.org/wiki/Delusions",
            "Drifting": "https://psychonautwiki.org/wiki/Drifting",
            "Emotion enhancement": "https://psychonautwiki.org/wiki/Emotion_enhancement",
            "Feelings of interdependent opposites": "https://psychonautwiki.org/wiki/Feelings_of_interdependent_opposites",
            "Geometry": "https://psychonautwiki.org/wiki/Geometry",
            "Immersion enhancement": "https://psychonautwiki.org/wiki/Immersion_enhancement",
            "Internal hallucinations": "https://psychonautwiki.org/wiki/Internal_hallucinations",
            "Memory suppression": "https://psychonautwiki.org/wiki/Memory_suppression",
            "Nausea": "https://psychonautwiki.org/wiki/Nausea",
            "Novelty enhancement": "https://psychonautwiki.org/wiki/Novelty_enhancement",
            "Pattern recognition enhancement": "https://psychonautwiki.org/wiki/Pattern_recognition_enhancement",
            "Personal bias suppression": "https://psychonautwiki.org/wiki/Personal_bias_suppression",
            "Perspective alterations": "https://psychonautwiki.org/wiki/Perspective_alterations",
            "Pupil dilation": "https://psychonautwiki.org/wiki/Pupil_dilation",
            "Scenarios and plots": "https://psychonautwiki.org/wiki/Scenarios_and_plots",
            "Scenery slicing": "https://psychonautwiki.org/wiki/Scenery_slicing",
            "Sedation": "https://psychonautwiki.org/wiki/Sedation",
            "Settings, sceneries, and landscapes": "https://psychonautwiki.org/wiki/Settings,_sceneries,_and_landscapes",
            "Spontaneous tactile sensations": "https://psychonautwiki.org/wiki/Spontaneous_tactile_sensations",
            "Subconscious communication": "https://psychonautwiki.org/wiki/Subconscious_communication",
            "Symmetrical texture repetition": "https://psychonautwiki.org/wiki/Symmetrical_texture_repetition",
            "Thought acceleration": "https://psychonautwiki.org/wiki/Thought_acceleration",
            "Thought connectivity": "https://psychonautwiki.org/wiki/Thought_connectivity",
            "Thought loops": "https://psychonautwiki.org/wiki/Thought_loops",
            "Time distortion": "https://psychonautwiki.org/wiki/Time_distortion",
            "Tracers": "https://psychonautwiki.org/wiki/Tracers",
            "Transformations": "https://psychonautwiki.org/wiki/Transformations",
            "Unity and interconnectedness": "https://psychonautwiki.org/wiki/Unity_and_interconnectedness",
            "Wakefulness": "https://psychonautwiki.org/wiki/Wakefulness"
        }
    },
    "4-aco-mipt": {
        "aliases": [
            "mipracetin",
            "4acomipt"
        ],
        "categories": [
            "tentative",
            "psychedelic",
            "empathogen",
            "research-chemical"
        ],
        "formatted_dose": {
            "Oral": {
                "Common": "10-20mg",
                "Light": "5-10mg",
                "Strong": "20-40mg."
            },
            "Vapourized": {
                "Common": "5-10mg",
                "Light": "2-5mg",
                "Strong": "10-15"
            }
        },
        "formatted_duration": {
            "Duration": "1-2",
            "Oral": "4-9",
            "_unit": "hours"
        },
        "formatted_onset": {
            "Oral": "15-45",
            "Vapourized": "1-2",
            "_unit": "minutes"
        },
        "name": "4-aco-mipt",
        "pretty_name": "4-AcO-MiPT",
        "properties": {
            "1-6": "hours.",
            "aliases": [
                "mipracetin",
                "4acomipt"
            ],
            "categories": [
                "tentative",
                "psychedelic",
                "empathogen",
                "research-chemical"
            ],
            "dose": "Oral Light: 5-10mg Common: 10-20mg Strong: 20-40mg. | Vapourized Light: 2-5mg Common: 5-10mg Strong: 10-15 mg.",
            "duration": "Oral: 4-9 hours. | Duration: 1-2 hours.",
            "onset": "Oral: 15-45 minutes. | Vapourized: 1-2 minutes.",
            "summary": "A quite potent tryptamine that has be related to having \"shroom-like\" visuals. Yet without much bodyload. Very hydroscopic. Seems to be quite safe in dosing. Similar to the likes of 2C-B."
        }
    },
    "4-benzylpiperidine": {
        "aliases": [
            "4-pmpd"
        ],
        "categories": [
            "stimulant",
            "research-chemical",
            "habit-forming",
            "tentative"
        ],
        "formatted_dose": {
            "Oral": {
                "Common": "125-200mg",
                "Heavy": "350mg+.",
                "Light": "75-125mg",
                "Strong": "200-350mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "2-5"
        },
        "formatted_effects": [
            "Euphoria",
            "increased energy/alertness",
            "decreased need for sleep",
            "increased sociability",
            "mood lift",
            "increased sexuality",
            "excessive talking",
            "decreased appetite",
            "weight loss",
            "sweating",
            "disturbed sleep patterns",
            "bruxism",
            "visual and auditory hallucinations",
            "itchiness",
            "aggressiveness",
            "moodiness",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "10-45"
        },
        "name": "4-benzylpiperidine",
        "pretty_name": "4-Benzylpiperidine",
        "properties": {
            "aliases": [
                "4-pmpd"
            ],
            "categories": [
                "stimulant",
                "research-chemical",
                "habit-forming",
                "tentative"
            ],
            "dose": "Oral Light: 75-125mg Common: 125-200mg Strong: 200-350mg Heavy: 350mg+.",
            "duration": "2-5 hours",
            "effects": "Euphoria, increased energy/alertness, decreased need for sleep, increased sociability, mood lift, increased sexuality, excessive talking, decreased appetite, weight loss, sweating, disturbed sleep patterns, bruxism, visual and auditory hallucinations, itchiness, aggressiveness, moodiness.",
            "onset": "10-45 minutes.",
            "summary": "A dopamine releasing agent with weak serotonin releasing properties. Little evidence of human use. Potentially dangerous in overdose given MAOI + monoamine releasing properties."
        }
    },
    "4-cbc": {
        "categories": [
            "stimulant",
            "research-chemical",
            "empathogen",
            "habit-forming"
        ],
        "dose_note": " Note: Be careful and read the summary before ingesting this substance.",
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "2-6"
        },
        "formatted_dose": {
            "Insufflated:": {
                "Common": "50-80mg",
                "Insufflated": "Light",
                "Strong": "80-100mg."
            },
            "Oral": {
                "Common": "70-100mg",
                "Light": "40-70mg",
                "Strong": "100-130mg"
            }
        },
        "formatted_duration": {
            "Insufflated": "1-3",
            "Oral": "2-4",
            "_unit": "hours"
        },
        "formatted_onset": {
            "Insufflated": "5-20",
            "Oral": "30-60mg",
            "_unit": "minutes"
        },
        "name": "4-cbc",
        "pretty_name": "4-CBC",
        "properties": {
            "after-effects": "2-6 hours.",
            "avoid": "Other stimulants, pretty much everything that can raise your blood pressure.",
            "categories": [
                "stimulant",
                "research-chemical",
                "empathogen",
                "habit-forming"
            ],
            "dose": "Oral Light: 40-70mg Common: 70-100mg Strong: 100-130mg | Insufflated: Light: 30-50mg Common: 50-80mg Strong: 80-100mg. | Note: Be careful and read the summary before ingesting this substance.",
            "duration": "Oral: 2-4 hours. | Insufflated: 1-3 hours.",
            "onset": "Oral: 30-60mg | Insufflated: 5-20 minutes.",
            "summary": "Is a potentially very neurotoxic Cathinone. Obviously no scientic reports have been noted on the neurotoxicity or cardiotoxicity, so please move on with extreme caution."
        }
    },
    "4-chlorodiazepam": {
        "aliases": [
            "ro5-4864",
            "4'-chlorodiazepam"
        ],
        "categories": [
            "research-chemical",
            "tentative"
        ],
        "name": "4-chlorodiazepam",
        "pretty_name": "4-CHLORODIAZEPAM",
        "properties": {
            "aliases": [
                "ro5-4864",
                "4'-chlorodiazepam"
            ],
            "categories": [
                "research-chemical",
                "tentative"
            ],
            "summary": "A benzodiazepine derivative of Diazepam, yet lacks affinity for GABA(a) receptors, yet is still a sedative, that has pro-convulsant effects. Yet at lower doses it has been proven to be neuroprotective."
        }
    },
    "4-cic": {
        "categories": [
            "inactive"
        ],
        "name": "4-cic",
        "pretty_name": "4-CIC",
        "properties": {
            "categories": [
                "inactive"
            ],
            "summary": "Inactive."
        }
    },
    "4-cma": {
        "categories": [
            "research-chemical"
        ],
        "name": "4-cma",
        "pretty_name": "4-CMA",
        "properties": {
            "categories": [
                "research-chemical"
            ],
            "summary": "The stimulant that is the N-Methyl Derivative and prodrug of the neurotoxic para-Chloroamphetamine.",
            "warning": "Prodrug of the Neurotoxic para-Chloroamphetamine."
        }
    },
    "4-cmc": {
        "aliases": [
            "4cmc"
        ],
        "categories": [
            "stimulant",
            "research-chemical",
            "habit-forming"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "Few"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "50mg-100mg",
                "Light": "30-50mg",
                "Strong": "100mg+",
                "Threshold": "20-30mg"
            }
        },
        "formatted_duration": {
            "Oral": "2-4",
            "_unit": "hours"
        },
        "formatted_effects": [
            "Euphoria",
            "increased energy/alertness",
            "decreased need for sleep",
            "increased sociability",
            "mood lift",
            "increased sexuality",
            "excessive talking",
            "decreased appetite",
            "weight loss",
            "sweating",
            "disturbed sleep patterns",
            "bruxism",
            "visual and auditory hallucinations",
            "itchiness",
            "aggressiveness",
            "moodiness",
            ""
        ],
        "formatted_onset": {
            "Oral": "20-60",
            "_unit": "minutes"
        },
        "name": "4-cmc",
        "pretty_name": "4-CMC",
        "properties": {
            "after-effects": "Few hours like most stimulants.",
            "aliases": [
                "4cmc"
            ],
            "categories": [
                "stimulant",
                "research-chemical",
                "habit-forming"
            ],
            "dose": "Oral Threshold: 20-30mg Light: 30-50mg Common: 50mg-100mg Strong: 100mg+",
            "duration": "Oral: 2-4 hours Insufflated 1-3 hours.",
            "effects": "Euphoria, increased energy/alertness, decreased need for sleep, increased sociability, mood lift, increased sexuality, excessive talking, decreased appetite, weight loss, sweating, disturbed sleep patterns, bruxism, visual and auditory hallucinations, itchiness, aggressiveness, moodiness.",
            "onset": "Oral: 20-60 minutes. Insufflated: 10-40 minutes.",
            "summary": "(Note this work is going off just a few users inputs, so take all of this with a grain of salt) The cathinone analogue of 4-CMA which is highly neurotoxic. It is not known if the cathinone family holds the same neurotoxicity problem as with the parent compound."
        }
    },
    "4-emc": {
        "aliases": [
            "4-ethylmethcathinone"
        ],
        "categories": [
            "stimulant",
            "research-chemical",
            "habit-forming"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "2-8"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "100-200mg",
                "Light": "50-100mg",
                "Strong": "200mg+"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "3-5"
        },
        "formatted_effects": [
            "Euphoria",
            "increased energy/alertness",
            "decreased need for sleep",
            "increased sociability",
            "mood lift",
            "increased sexuality",
            "excessive talking",
            "decreased appetite",
            "weight loss",
            "sweating",
            "disturbed sleep patterns",
            "bruxism",
            "visual and auditory hallucinations",
            "itchiness",
            "aggressiveness",
            "moodiness",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "20-60"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_4Ethylmethcathinone.shtml"
        },
        "name": "4-emc",
        "pretty_name": "4-EMC",
        "properties": {
            "after-effects": "2-8 hours.",
            "aliases": [
                "4-ethylmethcathinone"
            ],
            "categories": [
                "stimulant",
                "research-chemical",
                "habit-forming"
            ],
            "dose": "Light: 50-100mg Common: 100-200mg Strong: 200mg+",
            "duration": "3-5 hours",
            "effects": "Euphoria, increased energy/alertness, decreased need for sleep, increased sociability, mood lift, increased sexuality, excessive talking, decreased appetite, weight loss, sweating, disturbed sleep patterns, bruxism, visual and auditory hallucinations, itchiness, aggressiveness, moodiness.",
            "onset": "20-60 minutes.",
            "summary": "A stimulant that is a structural isomer of 4-MEC."
        }
    },
    "4-epd": {
        "aliases": [
            "4-ethylpentedrone"
        ],
        "categories": [
            "stimulant",
            "habit-forming",
            "tentative"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-6"
        },
        "formatted_dose": {
            "Insufflated": {
                "Common": "20-30mg",
                "Light": "10-20mg",
                "Strong": "30-50mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "1-3"
        },
        "formatted_onset": {
            "Insufflated": "10-30",
            "_unit": "minutes"
        },
        "name": "4-epd",
        "pretty_name": "4-EPD",
        "properties": {
            "after-effects": "1-6 hours.",
            "aliases": [
                "4-ethylpentedrone"
            ],
            "categories": [
                "stimulant",
                "habit-forming",
                "tentative"
            ],
            "dose": "Insufflated Light: 10-20mg Common: 20-30mg Strong: 30-50mg's.",
            "duration": "1-3 hours.",
            "onset": "Insufflated: 10-30 minutes.",
            "summary": "An obscure analogue of Pentedrone, which means very little information on this chemical. It is likely is shares the same general effects of the other Pentedrone family."
        }
    },
    "4-fa": {
        "aliases": [
            "4-Fluoroamphetamine",
            "4fa",
            "4-fmp",
            "4-fluoroamphetamine"
        ],
        "categories": [
            "stimulant",
            "research-chemical",
            "habit-forming",
            "empathogen",
            "common"
        ],
        "dose_note": " NOTE: Insufflating does not appear to provide a better bioavailability than oral ingestion, and can cause damage to nasal cavity.",
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-24"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "70-110mg",
                "Heavy": "115-150mg",
                "Light": "50-70mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "4-8"
        },
        "formatted_effects": [
            "Euphoria",
            "increased energy/alertness",
            "decreased need for sleep",
            "increased sociability",
            "mood lift",
            "increased sexuality",
            "excessive talking",
            "decreased appetite",
            "weight loss",
            "sweating",
            "disturbed sleep patterns",
            "bruxism",
            "visual and auditory hallucinations",
            "itchiness",
            "aggressiveness",
            "moodiness",
            ""
        ],
        "formatted_onset": {
            "Oral": "30-90",
            "_unit": "minutes"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_4Fluoroamphetamine.shtml"
        },
        "name": "4-fa",
        "pretty_name": "4-FA",
        "properties": {
            "4-fa": "dose: Oral Light: 50-70mg Common: 70-110mg Heavy: 115-150mg | NOTE: Insufflating does not appear to provide a better bioavailability than oral ingestion, and can cause damage to nasal cavity.",
            "after-effects": "1-24 hours.",
            "aliases": [
                "4-Fluoroamphetamine",
                "4fa",
                "4-fmp",
                "4-fluoroamphetamine"
            ],
            "avoid": "Other stimulants, and depressants. MXE is also to be avoided (possibility of serotonin syndrome). See combo information for more.",
            "categories": [
                "stimulant",
                "research-chemical",
                "habit-forming",
                "empathogen",
                "common"
            ],
            "dose": "Oral Light: 50-70mg Common: 70-110mg Heavy: 115-150mg | NOTE: Insufflating does not appear to provide a better bioavailability than oral ingestion, and can cause damage to nasal cavity.",
            "duration": "4-8 hours",
            "effects": "Euphoria, increased energy/alertness, decreased need for sleep, increased sociability, mood lift, increased sexuality, excessive talking, decreased appetite, weight loss, sweating, disturbed sleep patterns, bruxism, visual and auditory hallucinations, itchiness, aggressiveness, moodiness.",
            "onset": "Oral: 30-90 minutes.",
            "summary": "An empathogen commonly used in place of MDMA, having a similar duration of empathogenic effects. This drug, however, has a longer stimulant \"tail,\" during which effects are more like those of amphetamines. Not to be confused with 4-FMA, which has a similar potency, but is not particularly empathogenic."
        },
        "pweffects": {
            "Analysis enhancement": "https://psychonautwiki.org/wiki/Analysis_enhancement",
            "Anxiety": "https://psychonautwiki.org/wiki/Anxiety",
            "Appetite suppression": "https://psychonautwiki.org/wiki/Appetite_suppression",
            "Cognitive euphoria": "https://psychonautwiki.org/wiki/Cognitive_euphoria",
            "Cognitive fatigue": "https://psychonautwiki.org/wiki/Cognitive_fatigue",
            "Compulsive redosing": "https://psychonautwiki.org/wiki/Compulsive_redosing",
            "Dehydration": "https://psychonautwiki.org/wiki/Dehydration",
            "Depression": "https://psychonautwiki.org/wiki/Depression",
            "Ego inflation": "https://psychonautwiki.org/wiki/Ego_inflation",
            "Empathy, love, and sociability enhancement": "https://psychonautwiki.org/wiki/Empathy,_love,_and_sociability_enhancement",
            "Focus enhancement": "https://psychonautwiki.org/wiki/Focus_enhancement",
            "Increased heart rate": "https://psychonautwiki.org/wiki/Increased_heart_rate",
            "Increased libido": "https://psychonautwiki.org/wiki/Increased_libido",
            "Increased perspiration": "https://psychonautwiki.org/wiki/Increased_perspiration",
            "Irritability": "https://psychonautwiki.org/wiki/Irritability",
            "Motivation enhancement": "https://psychonautwiki.org/wiki/Motivation_enhancement",
            "Novelty enhancement": "https://psychonautwiki.org/wiki/Novelty_enhancement",
            "Physical euphoria": "https://psychonautwiki.org/wiki/Physical_euphoria",
            "Stimulation": "https://psychonautwiki.org/wiki/Stimulation",
            "Tactile enhancement": "https://psychonautwiki.org/wiki/Tactile_enhancement",
            "Teeth grinding": "https://psychonautwiki.org/wiki/Teeth_grinding",
            "Thought acceleration": "https://psychonautwiki.org/wiki/Thought_acceleration",
            "Thought connectivity": "https://psychonautwiki.org/wiki/Thought_connectivity",
            "Thought deceleration": "https://psychonautwiki.org/wiki/Thought_deceleration",
            "Wakefulness": "https://psychonautwiki.org/wiki/Wakefulness"
        },
        "sources": {
            "_general": [
                "Comparison of 4-chloro-, 4-bromo- and 4-fluoroamphetamine in rats: drug levels in brain and effects on brain serotonin metabolism. - https://www.ncbi.nlm.nih.gov/pubmed/1196472",
                "4-Fluoroamphetamine, in contrast, lowered serotonin and 5-hydroxyindoleacetic acid levels only for short times (2\u20136 hr) after drug injection, and 5-hydroxyindole levels were essentially back to normal within 24 hr. -  http://www.sciencedirect.com/science/article/pii/0028390875900994"
            ]
        }
    },
    "4-fea": {
        "aliases": [
            "4-fluoroethylamphetamine"
        ],
        "categories": [
            "stimulant",
            "tentative",
            "research-chemical"
        ],
        "dose_note": " Note: Tentative data as of writing.",
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-12"
        },
        "formatted_dose": {
            "Light:": {
                "Common": "50-75mg",
                "Light": "25-50mg",
                "Strong": "75-150mg+"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "4-6"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "40-60"
        },
        "name": "4-fea",
        "pretty_name": "4-FEA",
        "properties": {
            "after-effects": "1-12 hours.",
            "aliases": [
                "4-fluoroethylamphetamine"
            ],
            "categories": [
                "stimulant",
                "tentative",
                "research-chemical"
            ],
            "dose": "Light: 25-50mg Common: 50-75mg Strong: 75-150mg+ | Note: Tentative data as of writing.",
            "duration": "4-6 hours.",
            "onset": "40-60 minutes.",
            "summary": "Stimulant that is the ethyl analogue of 4-FMA."
        }
    },
    "4-fluoroethylphenidate": {
        "aliases": [
            "4f-eph",
            "4-feph"
        ],
        "categories": [
            "stimulant",
            "research-chemical",
            "habit-forming",
            "tentative"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-12"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "10-30mg",
                "Light": "5-10mg",
                "Strong": "30-50mg+"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "5-6"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "10-25"
        },
        "name": "4-fluoroethylphenidate",
        "pretty_name": "4-Fluoroethylphenidate",
        "properties": {
            "after-effects": "1-12 hours.",
            "aliases": [
                "4f-eph",
                "4-feph"
            ],
            "categories": [
                "stimulant",
                "research-chemical",
                "habit-forming",
                "tentative"
            ],
            "dose": "Light: 5-10mg Common: 10-30mg Strong: 30-50mg+",
            "duration": "5-6 hours.",
            "onset": "10-25 minutes.",
            "summary": "A more potent and longer lasting analogue of Ethylphenidate."
        }
    },
    "4-fluoromethylphenidate": {
        "aliases": [
            "4f-mph",
            "4-fmph",
            "4fmph",
            "4-fl-mph",
            "4-fluoro-mph"
        ],
        "categories": [
            "stimulant",
            "research-chemical",
            "habit-forming",
            "tentative"
        ],
        "dose_note": " Note: There has been a range of different reactions to similar doses, particularly some users have reported 15mg being too intense. It is advisable to start low with this drug.",
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "5-10"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "10-15mg",
                "Heavy": "20-25mg",
                "Light": "5-10mg",
                "Strong": "15-20mg",
                "Threshold": "1-5mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "4-8"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "25-40"
        },
        "name": "4-fluoromethylphenidate",
        "pretty_name": "4-Fluoromethylphenidate",
        "properties": {
            "after-effects": "5-10 hours",
            "aliases": [
                "4f-mph",
                "4-fmph",
                "4fmph",
                "4-fl-mph",
                "4-fluoro-mph"
            ],
            "categories": [
                "stimulant",
                "research-chemical",
                "habit-forming",
                "tentative"
            ],
            "dose": "Oral Threshold: 1-5mg Light: 5-10mg Common: 10-15mg Strong: 15-20mg Heavy: 20-25mg | Note: There has been a range of different reactions to similar doses, particularly some users have reported 15mg being too intense. It is advisable to start low with this drug.",
            "duration": "4-8 hours",
            "onset": "25-40 minutes",
            "summary": "A relatively uncommon, more serotonergic RC derivative of methylphenidate. A dopamine reuptake inhibitor possessing similar effects to associated stimulant compounds."
        }
    },
    "4-fluoropentedrone": {
        "aliases": [
            "4-fpd",
            "4-f-pentedrone",
            "4f-pentedrone"
        ],
        "categories": [
            "stimulant",
            "research-chemical",
            "tentative",
            "habit-forming"
        ],
        "name": "4-fluoropentedrone",
        "pretty_name": "4-Fluoropentedrone",
        "properties": {
            "aliases": [
                "4-fpd",
                "4-f-pentedrone",
                "4f-pentedrone"
            ],
            "categories": [
                "stimulant",
                "research-chemical",
                "tentative",
                "habit-forming"
            ],
            "summary": "An obscure analogue of pentedrone, little information exists about this cathinone. It is likely that it has the same general effects as pentedrone, mephedrone and other related stimulants."
        }
    },
    "4-fma": {
        "aliases": [
            "4-fluromethamphetamine",
            "4fma"
        ],
        "categories": [
            "stimulant",
            "research-chemical",
            "habit-forming",
            "empathogen"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-6"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "75-125mg",
                "Heavy": "125-200mg+",
                "Light": "50-75mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "3-5"
        },
        "formatted_effects": [
            "Euphoria",
            "increased energy/alertness",
            "decreased need for sleep",
            "increased sociability",
            "mood lift",
            "increased sexuality",
            "excessive talking",
            "decreased appetite",
            "weight loss",
            "sweating",
            "disturbed sleep patterns",
            "bruxism",
            "visual and auditory hallucinations",
            "itchiness",
            "aggressiveness",
            "moodiness",
            ""
        ],
        "formatted_onset": {
            "Insufflated": "5-10",
            "Oral": "20-40",
            "_unit": "minutes"
        },
        "name": "4-fma",
        "pretty_name": "4-FMA",
        "properties": {
            "after-effects": "1-6 hours.",
            "aliases": [
                "4-fluromethamphetamine",
                "4fma"
            ],
            "categories": [
                "stimulant",
                "research-chemical",
                "habit-forming",
                "empathogen"
            ],
            "dose": "Oral Light: 50-75mg's Common: 75-125mg's Heavy: 125-200mg+",
            "duration": "3-5 hours.",
            "effects": "Euphoria, increased energy/alertness, decreased need for sleep, increased sociability, mood lift, increased sexuality, excessive talking, decreased appetite, weight loss, sweating, disturbed sleep patterns, bruxism, visual and auditory hallucinations, itchiness, aggressiveness, moodiness.",
            "onset": "Oral: 20-40 minutes | Insufflated: 5-10 minutes",
            "summary": "A stimulant with some empathogenic properties, and analogue of Methamphetamine with similar effects. Reported to be less effective than 2-FMA and related compounds. Little is known about the pharmacological effects of this compound. Not to be confused with 4-FA, which has a different effect profile, despite similar potency."
        }
    },
    "4-fmc": {
        "aliases": [
            "4-fluoromethcathinone",
            "fpephedrone",
            "flephedrone",
            "4fmc"
        ],
        "categories": [
            "stimulant",
            "research-chemical",
            "habit-forming"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-4"
        },
        "formatted_dose": {
            "Insufflated": {
                "Common": "50-100mg",
                "Light": "25-40mg",
                "Strong": "100-150+mg"
            },
            "Oral": {
                "Common": "100-150mg",
                "Light": "50-100mg",
                "Strong": "150-200+mg"
            }
        },
        "formatted_duration": {
            "Oral": "2-4",
            "_unit": "hours"
        },
        "formatted_effects": [
            "Euphoria",
            "increased energy/alertness",
            "decreased need for sleep",
            "increased sociability",
            "mood lift",
            "increased sexuality",
            "excessive talking",
            "decreased appetite",
            "weight loss",
            "sweating",
            "disturbed sleep patterns",
            "bruxism",
            "visual and auditory hallucinations",
            "itchiness",
            "aggressiveness",
            "moodiness",
            ""
        ],
        "formatted_onset": {
            "Oral": "15-30",
            "_unit": "minutes"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_4Fluoromethcathinone.shtml"
        },
        "name": "4-fmc",
        "pretty_name": "4-FMC",
        "properties": {
            "after-effects": "1-4 hours.",
            "aliases": [
                "4-fluoromethcathinone",
                "fpephedrone",
                "flephedrone",
                "4fmc"
            ],
            "categories": [
                "stimulant",
                "research-chemical",
                "habit-forming"
            ],
            "dose": "Oral Light: 50-100mg Common: 100-150mg Strong: 150-200+mg | Insufflated Light: 25-40mg Common: 50-100mg Strong: 100-150+mg",
            "duration": "Oral: 2-4 hours. Insufflated: 1-3 hours.",
            "effects": "Euphoria, increased energy/alertness, decreased need for sleep, increased sociability, mood lift, increased sexuality, excessive talking, decreased appetite, weight loss, sweating, disturbed sleep patterns, bruxism, visual and auditory hallucinations, itchiness, aggressiveness, moodiness.",
            "onset": "Oral: 15-30 minutes. Insufflated 1-5 minutes.",
            "summary": "A cathinone stimulant also known as flephedrone, appeared in 2008 marketed as a mephedrone replacement. With some mild empathogenic effects, it failed to achieve widespread popularity."
        }
    },
    "4-fpm": {
        "categories": [
            "research-chemical"
        ],
        "formatted_onset": {
            "Insufflated": "20-40",
            "Oral": "60-90",
            "_unit": "minutes"
        },
        "name": "4-fpm",
        "pretty_name": "4-FPM",
        "properties": {
            "categories": [
                "research-chemical"
            ],
            "summary": "Seems to be a substance, that was just made to get money. High doses needed to feel any effects. Would avoid."
        }
    },
    "4-fpp": {
        "categories": [
            "psychedelic",
            "empathogen",
            "tentative",
            "stimulant"
        ],
        "formatted_dose": {
            "Oral": {
                "Common": "40-80mg",
                "Light": "20-40mg",
                "Strong": "80-150mg+"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "4-8"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "15-45"
        },
        "name": "4-fpp",
        "pretty_name": "4-FPP",
        "properties": {
            "categories": [
                "psychedelic",
                "empathogen",
                "tentative",
                "stimulant"
            ],
            "dose": "Light: 20-40mg Common: 40-80mg Strong: 80-150mg+",
            "duration": "4-8 hours.",
            "onset": "15-45 minutes.",
            "summary": "A piperazine derivative that has been reported to have mild pyschedelic effects, and also empathogen qualities. It has been sold in many branded legal highs."
        }
    },
    "4-ho-det": {
        "aliases": [
            "4hodet",
            "4-hydroxy-det"
        ],
        "categories": [
            "psychedelic",
            "research-chemical"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-12"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "15-20mg",
                "Light": "10-15mg",
                "Strong": "20-30mg+"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "3-7"
        },
        "formatted_effects": [
            "Euphoria",
            "empathy",
            "insight",
            "brightened colour",
            "Closed/Open eye visuals",
            "enhanced tactile sensation",
            "mental/physical stimulation",
            "decreased appetite",
            "pupil dilation",
            "restlessness",
            "change in perception",
            "ego softening",
            "sweating/chills",
            "muscle tension",
            "confusion",
            "insomnia",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "30-60"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_4HODET.shtml",
            "tihkal": "https://www.erowid.org/library/books_online/tihkal/tihkal16.shtml"
        },
        "name": "4-ho-det",
        "pretty_name": "4-HO-DET",
        "properties": {
            "after-effects": "1-12 hours.",
            "aliases": [
                "4hodet",
                "4-hydroxy-det"
            ],
            "categories": [
                "psychedelic",
                "research-chemical"
            ],
            "dose": "Light: 10-15mg Common: 15-20mg Strong: 20-30mg+",
            "duration": "3-7 hours.",
            "effects": "Euphoria, empathy, insight, brightened colour, Closed/Open eye visuals, enhanced tactile sensation, mental/physical stimulation, decreased appetite, pupil dilation, restlessness, change in perception, ego softening, sweating/chills, muscle tension, confusion, insomnia.",
            "onset": "30-60 minutes.",
            "summary": "A rare compound first produced by Albert Hoffman, also known as ethocin. Structurally related to 4-HO-MET (metocin) and psilocin (4-HO-DMT), this drug has similar psychedelic effects but little recorded human usage. Probably similar to mushrooms. Potentially stimulating."
        }
    },
    "4-ho-dipt": {
        "aliases": [
            "iprocin"
        ],
        "categories": [
            "psychedelic",
            "research-chemical"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-6"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "10-20mg",
                "Light": "5-10mg",
                "Strong": "20-30mg+",
                "Threshold": "3-5mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "2-4"
        },
        "formatted_effects": [
            "Euphoria",
            "empathy",
            "insight",
            "brightened colour",
            "Closed/Open eye visuals",
            "enhanced tactile sensation",
            "mental/physical stimulation",
            "decreased appetite",
            "pupil dilation",
            "restlessness",
            "change in perception",
            "ego softening",
            "sweating/chills",
            "muscle tension",
            "confusion",
            "insomnia",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "20-60"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_4HODiPT.shtml",
            "tihkal": "https://www.erowid.org/library/books_online/tihkal/tihkal17.shtml"
        },
        "name": "4-ho-dipt",
        "pretty_name": "4-HO-DiPT",
        "properties": {
            "after-effects": "1-6 hours.",
            "aliases": [
                "iprocin"
            ],
            "categories": [
                "psychedelic",
                "research-chemical"
            ],
            "dose": "Threshold: 3-5mg Light: 5-10mg Common: 10-20mg Strong: 20-30mg+",
            "duration": "2-4 hours.",
            "effects": "Euphoria, empathy, insight, brightened colour, Closed/Open eye visuals, enhanced tactile sensation, mental/physical stimulation, decreased appetite, pupil dilation, restlessness, change in perception, ego softening, sweating/chills, muscle tension, confusion, insomnia.",
            "onset": "20-60 minutes.",
            "summary": "A psychedelic tryptamine also known as iprocin. A homologue of psilocin, this drug likely has similar effects to psychedelic mushrooms. Said to have a rapid onset and relatively short duration for a drug of its class."
        }
    },
    "4-ho-dpt": {
        "aliases": [
            "4hodpt",
            "4-hydroxy-n",
            "n-dipropyltryptamine"
        ],
        "categories": [
            "tentative",
            "psychedelic",
            "research-chemical"
        ],
        "formatted_dose": {
            "Oral": {
                "Heavy": "100mg",
                "Light": "25-50mg",
                "Moderate": "50-75mg",
                "Strong": "75-100mg"
            }
        },
        "formatted_duration": {
            "Insufflated": "2-4",
            "_unit": "hours"
        },
        "formatted_onset": {
            "Insufflated": "10-20",
            "_unit": "minutes"
        },
        "name": "4-ho-dpt",
        "pretty_name": "4-HO-DPT",
        "properties": {
            "aliases": [
                "4hodpt",
                "4-hydroxy-n",
                "n-dipropyltryptamine"
            ],
            "categories": [
                "tentative",
                "psychedelic",
                "research-chemical"
            ],
            "dose": "Light: 25-50mg Moderate: 50-75mg Strong: 75-100mg Heavy: 100mg +",
            "duration": "Insufflated: 2-4 hours.",
            "onset": "Insufflated: 10-20 minutes.",
            "summary": "A psychedelic hallucinogenic first synthesized by alexander shulgin. At light doses it causes enhanced cognition and appreciation for things like art and music while high doses cause visuals. The drug is known to cause a bodyload."
        }
    },
    "4-ho-ept": {
        "categories": [
            "psychedelic",
            "tentative"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-12"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "20-30mg",
                "Light": "10-20mg",
                "Strong": "30-50mg+"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "4-8"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "30-45"
        },
        "name": "4-ho-ept",
        "pretty_name": "4-HO-EPT",
        "properties": {
            "after-effects": "1-12 hours.",
            "categories": [
                "psychedelic",
                "tentative"
            ],
            "dose": "Light: 10-20mg Common: 20-30mg Strong: 30-50mg+",
            "duration": "4-8 hours.",
            "onset": "30-45 minutes.",
            "summary": "The 4-Hydroxy version of EPT. Slightly more potent than the prior."
        }
    },
    "4-ho-mcpt": {
        "categories": [
            "psychedelic",
            "tentative",
            "research-chemical"
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "20-40"
        },
        "name": "4-ho-mcpt",
        "pretty_name": "4-HO-MCPT",
        "properties": {
            "categories": [
                "psychedelic",
                "tentative",
                "research-chemical"
            ],
            "onset": "20-40 minutes.",
            "summary": "Novel synthetic tryptamine that is the cyclopropyl homologue of Psilocin. Not much is known about anything."
        }
    },
    "4-ho-met": {
        "aliases": [
            "4homet",
            "homet",
            "metocin",
            "ethocin"
        ],
        "categories": [
            "psychedelic",
            "research-chemical",
            "common"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "2-8"
        },
        "formatted_dose": {
            "Intravenous": {
                "Common": "10-15mg",
                "Light": "5mg",
                "Strong": "20mg+"
            },
            "Oral": {
                "Common": "10-15mg",
                "Light": "10mg",
                "Strong": "20mg+"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "3-7"
        },
        "formatted_effects": [
            "A trip similar to mushrooms",
            "hallucination and general shift in consciousness",
            ""
        ],
        "formatted_onset": {
            "Insufflated": "5-25",
            "Intravenous": "2-10",
            "Oral": "5-60",
            "_unit": "minutes"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_4HOMET.shtml",
            "tihkal": "https://www.erowid.org/library/books_online/tihkal/tihkal21.shtml"
        },
        "name": "4-ho-met",
        "pretty_name": "4-HO-MET",
        "properties": {
            "after-effects": "2-8 hours.",
            "aliases": [
                "4homet",
                "homet",
                "metocin",
                "ethocin"
            ],
            "categories": [
                "psychedelic",
                "research-chemical",
                "common"
            ],
            "detection": "Not known to be tested for in any standard drug tests",
            "dose": "Oral Light: 10mg Common: 10-15mg Strong: 20mg+ | Intravenous Light: 5mg Common: 10-15mg Strong: 20mg+",
            "duration": "3-7 hours Intravenous 2-4 Hours",
            "effects": "A trip similar to mushrooms, hallucination and general shift in consciousness.",
            "onset": "Oral: 5-60 minutes | Insufflated: 5-25 minutes | Intravenous: 2-10 minutes",
            "summary": "A lesser known psychedelic tryptamine. Functional analogue of Psilocin. Very poorly soluble in water and alcohol."
        },
        "pweffects": {
            "Acuity enhancement": "https://psychonautwiki.org/wiki/Acuity_enhancement",
            "Analysis enhancement": "https://psychonautwiki.org/wiki/Analysis_enhancement",
            "Auditory distortion": "https://psychonautwiki.org/wiki/Auditory_distortion",
            "Auditory enhancement": "https://psychonautwiki.org/wiki/Auditory_enhancement",
            "Auditory hallucinations": "https://psychonautwiki.org/wiki/Auditory_hallucinations",
            "Autonomous entities": "https://psychonautwiki.org/wiki/Autonomous_entities",
            "Bodily control enhancement": "https://psychonautwiki.org/wiki/Bodily_control_enhancement",
            "Colour enhancement": "https://psychonautwiki.org/wiki/Colour_enhancement",
            "Colour shifting": "https://psychonautwiki.org/wiki/Colour_shifting",
            "Conceptual thinking": "https://psychonautwiki.org/wiki/Conceptual_thinking",
            "Delusions": "https://psychonautwiki.org/wiki/Delusions",
            "Depth perception distortions": "https://psychonautwiki.org/wiki/Depth_perception_distortions",
            "Drifting": "https://psychonautwiki.org/wiki/Drifting",
            "Emotion enhancement": "https://psychonautwiki.org/wiki/Emotion_enhancement",
            "Geometry": "https://psychonautwiki.org/wiki/Geometry",
            "Immersion enhancement": "https://psychonautwiki.org/wiki/Immersion_enhancement",
            "Increased heart rate": "https://psychonautwiki.org/wiki/Increased_heart_rate",
            "Internal hallucinations": "https://psychonautwiki.org/wiki/Internal_hallucinations",
            "Memory suppression": "https://psychonautwiki.org/wiki/Memory_suppression",
            "Nausea": "https://psychonautwiki.org/wiki/Nausea",
            "Novelty enhancement": "https://psychonautwiki.org/wiki/Novelty_enhancement",
            "Pattern recognition enhancement": "https://psychonautwiki.org/wiki/Pattern_recognition_enhancement",
            "Personal bias suppression": "https://psychonautwiki.org/wiki/Personal_bias_suppression",
            "Perspective alterations": "https://psychonautwiki.org/wiki/Perspective_alterations",
            "Perspective distortions": "https://psychonautwiki.org/wiki/Perspective_distortions",
            "Pupil dilation": "https://psychonautwiki.org/wiki/Pupil_dilation",
            "Scenarios and plots": "https://psychonautwiki.org/wiki/Scenarios_and_plots",
            "Settings, sceneries, and landscapes": "https://psychonautwiki.org/wiki/Settings,_sceneries,_and_landscapes",
            "Spontaneous tactile sensations": "https://psychonautwiki.org/wiki/Spontaneous_tactile_sensations",
            "Symmetrical texture repetition": "https://psychonautwiki.org/wiki/Symmetrical_texture_repetition",
            "Tactile enhancement": "https://psychonautwiki.org/wiki/Tactile_enhancement",
            "Thought acceleration": "https://psychonautwiki.org/wiki/Thought_acceleration",
            "Thought loops": "https://psychonautwiki.org/wiki/Thought_loops",
            "Time distortion": "https://psychonautwiki.org/wiki/Time_distortion",
            "Tracers": "https://psychonautwiki.org/wiki/Tracers",
            "Transformations": "https://psychonautwiki.org/wiki/Transformations",
            "Unity and interconnectedness": "https://psychonautwiki.org/wiki/Unity_and_interconnectedness",
            "Wakefulness": "https://psychonautwiki.org/wiki/Wakefulness"
        }
    },
    "4-ho-mipt": {
        "aliases": [
            "4homipt",
            "homipt",
            "ho-mipt",
            "4-ho",
            "miprocin"
        ],
        "categories": [
            "psychedelic",
            "research-chemical"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-8"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "15-20mg",
                "Heavy": "40mg+",
                "Light": "10-15mg",
                "Strong": "20-30mg",
                "Threshold": "5-10mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "3-6"
        },
        "formatted_effects": [
            "Brightened colors",
            "visual distortions",
            "altered perception",
            "a sense of conectedness with the world around you",
            "heightend emotions",
            "paranoia",
            "unwanted thoughts",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "20-90"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_4HOMiPT.shtml",
            "tihkal": "https://www.erowid.org/library/books_online/tihkal/tihkal22.shtml"
        },
        "name": "4-ho-mipt",
        "pretty_name": "4-HO-MiPT",
        "properties": {
            "after-effects": "1-8 hours.",
            "aliases": [
                "4homipt",
                "homipt",
                "ho-mipt",
                "4-ho",
                "miprocin"
            ],
            "categories": [
                "psychedelic",
                "research-chemical"
            ],
            "dose": "Oral Threshold: 5-10mg Light: 10-15mg Common: 15-20mg Strong: 20-30mg Heavy: 40mg+",
            "duration": "3-6 hours",
            "effects": "Brightened colors, visual distortions, altered perception, a sense of conectedness with the world around you, heightend emotions, paranoia, unwanted thoughts.",
            "onset": "20-90 minutes depending on stomach contents.",
            "summary": "A reasonably popular tryptamine deriviative and Psilocin analogue, first synthesised by Alexander Shulgin. It has been reported as having comparable effects to psychedelic mushrooms, though with a shorter duration."
        },
        "pweffects": {
            "8B Geometry - Exposure to inner mechanics of consciousness": "https://psychonautwiki.org/wiki/8B_Geometry_-_Exposure_to_inner_mechanics_of_consciousness",
            "Acuity enhancement": "https://psychonautwiki.org/wiki/Acuity_enhancement",
            "After images": "https://psychonautwiki.org/wiki/After_images",
            "Analysis enhancement": "https://psychonautwiki.org/wiki/Analysis_enhancement",
            "Auditory distortion": "https://psychonautwiki.org/wiki/Auditory_distortion",
            "Auditory enhancement": "https://psychonautwiki.org/wiki/Auditory_enhancement",
            "Auditory hallucinations": "https://psychonautwiki.org/wiki/Auditory_hallucinations",
            "Autonomous entities": "https://psychonautwiki.org/wiki/Autonomous_entities",
            "Colour enhancement": "https://psychonautwiki.org/wiki/Colour_enhancement",
            "Colour shifting": "https://psychonautwiki.org/wiki/Colour_shifting",
            "Conceptual thinking": "https://psychonautwiki.org/wiki/Conceptual_thinking",
            "Delusions": "https://psychonautwiki.org/wiki/Delusions",
            "Drifting": "https://psychonautwiki.org/wiki/Drifting",
            "D\u00e9j\u00e0 vu": "https://psychonautwiki.org/wiki/D%C3%A9j%C3%A0_vu",
            "Emotion enhancement": "https://psychonautwiki.org/wiki/Emotion_enhancement",
            "Enhancement and suppression cycles": "https://psychonautwiki.org/wiki/Enhancement_and_suppression_cycles",
            "Feelings of interdependent opposites": "https://psychonautwiki.org/wiki/Feelings_of_interdependent_opposites",
            "Feelings of predeterminism": "https://psychonautwiki.org/wiki/Feelings_of_predeterminism",
            "Geometry": "https://psychonautwiki.org/wiki/Geometry",
            "Immersion enhancement": "https://psychonautwiki.org/wiki/Immersion_enhancement",
            "Internal hallucinations": "https://psychonautwiki.org/wiki/Internal_hallucinations",
            "Memory suppression": "https://psychonautwiki.org/wiki/Memory_suppression",
            "Novelty enhancement": "https://psychonautwiki.org/wiki/Novelty_enhancement",
            "Pattern recognition enhancement": "https://psychonautwiki.org/wiki/Pattern_recognition_enhancement",
            "Personal bias suppression": "https://psychonautwiki.org/wiki/Personal_bias_suppression",
            "Perspective alterations": "https://psychonautwiki.org/wiki/Perspective_alterations",
            "Pupil dilation": "https://psychonautwiki.org/wiki/Pupil_dilation",
            "Runny nose": "https://psychonautwiki.org/wiki/Runny_nose",
            "Scenarios and plots": "https://psychonautwiki.org/wiki/Scenarios_and_plots",
            "Scenery slicing": "https://psychonautwiki.org/wiki/Scenery_slicing",
            "Sedation": "https://psychonautwiki.org/wiki/Sedation",
            "Settings, sceneries, and landscapes": "https://psychonautwiki.org/wiki/Settings,_sceneries,_and_landscapes",
            "Spontaneous tactile sensations": "https://psychonautwiki.org/wiki/Spontaneous_tactile_sensations",
            "Subconscious communication": "https://psychonautwiki.org/wiki/Subconscious_communication",
            "Symmetrical texture repetition": "https://psychonautwiki.org/wiki/Symmetrical_texture_repetition",
            "Synaesthesia": "https://psychonautwiki.org/wiki/Synaesthesia",
            "Thought connectivity": "https://psychonautwiki.org/wiki/Thought_connectivity",
            "Thought loops": "https://psychonautwiki.org/wiki/Thought_loops",
            "Time distortion": "https://psychonautwiki.org/wiki/Time_distortion",
            "Tracers": "https://psychonautwiki.org/wiki/Tracers",
            "Transformations": "https://psychonautwiki.org/wiki/Transformations",
            "Unity and interconnectedness": "https://psychonautwiki.org/wiki/Unity_and_interconnectedness",
            "Wakefulness": "https://psychonautwiki.org/wiki/Wakefulness",
            "Watery eyes": "https://psychonautwiki.org/wiki/Watery_eyes"
        }
    },
    "4-ho-mpmi": {
        "aliases": [
            "lucigenol"
        ],
        "categories": [
            "psychedelic",
            "research-chemical",
            "tentative"
        ],
        "dose_note": " Note, this substance has never been reported on past 2mg's. Use you're judgement; It's near eqipotent to DOI.",
        "formatted_dose": {
            "Oral": {
                "Common": "1-2mg.",
                "Light": "750ug-1mg",
                "Threshold": "500-750ug."
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "6-8"
        },
        "formatted_effects": [
            "Euphoria",
            "empathy",
            "insight",
            "brightened colour",
            "Closed/Open eye visuals",
            "enhanced tactile sensation",
            "mental/physical stimulation",
            "decreased appetite",
            "pupil dilation",
            "restlessness",
            "change in perception",
            "ego softening",
            "sweating/chills",
            "muscle tension",
            "confusion",
            "insomnia",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "15-60"
        },
        "name": "4-ho-mpmi",
        "pretty_name": "4-HO-MPMI",
        "properties": {
            "aliases": [
                "lucigenol"
            ],
            "categories": [
                "psychedelic",
                "research-chemical",
                "tentative"
            ],
            "dose": "Oral Threshold: 500-750ug. Light: 750ug-1mg Common: 1-2mg. | Note, this substance has never been reported on past 2mg's. Use you're judgement; It's near eqipotent to DOI.",
            "duration": "6-8 hours.",
            "effects": "Euphoria, empathy, insight, brightened colour, Closed/Open eye visuals, enhanced tactile sensation, mental/physical stimulation, decreased appetite, pupil dilation, restlessness, change in perception, ego softening, sweating/chills, muscle tension, confusion, insomnia.",
            "onset": "15-60 minutes.",
            "summary": "A rare tryptamine derivative first synthesised by David Nichols. This drug, also known as lucigenol, has rarely been documented outside the lab. It is known to be a psychedelic similar to other psychoactive tryptamines, with a potency similar to DOI, but little else is known."
        }
    },
    "4-ho-mpt": {
        "aliases": [
            "4hompt"
        ],
        "categories": [
            "psychedelic",
            "tentative",
            "research-chemical"
        ],
        "dose_note": " Note: I couldn't find a report that taking this substance rectally produced any effects.",
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-6"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "10-15mg",
                "Light": "5-10mg",
                "Strong": "15-25mg"
            },
            "Vapourized": {
                "Common": "5-10mg",
                "Light": "3-5mg",
                "Strong": "10-15mg"
            }
        },
        "formatted_duration": {
            "Oral": "3-6",
            "Vapourized": "45-90",
            "_unit": "hours"
        },
        "formatted_onset": {
            "Oral": "30-60",
            "Vapourized": "1-2",
            "_unit": "minutes"
        },
        "name": "4-ho-mpt",
        "pretty_name": "4-HO-MPT",
        "properties": {
            "after-effects": "1-6 hours.",
            "aliases": [
                "4hompt"
            ],
            "categories": [
                "psychedelic",
                "tentative",
                "research-chemical"
            ],
            "dose": "Oral Light: 5-10mg Common: 10-15mg Strong: 15-25mg | Vapourized Light: 3-5mg Common: 5-10mg Strong: 10-15mg | Note: I couldn't find a report that taking this substance rectally produced any effects.",
            "duration": "Oral: 3-6 hours. | Vapourized: 45-90 minutes.",
            "onset": "Oral: 30-60 minutes. | Vapourized: 1-2 minutes.",
            "summary": "Psychedelic drug of the tryptamine class. Higher homologue of Psilocin, and is the 4-hydroxy analogue of N-Methyl-N-Propyltryptamine."
        }
    },
    "4-mec": {
        "aliases": [
            "4-Methylethcathinone",
            "4mec",
            "4-methylethcathinone"
        ],
        "categories": [
            "stimulant",
            "research-chemical",
            "habit-forming"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "2-4"
        },
        "formatted_dose": {
            "Insufflated": {
                "Common": "40-100mg",
                "Light": "25-40mg",
                "Strong": "100-150mg+"
            },
            "Oral": {
                "Common": "100-200mg",
                "Light": "50-100mg",
                "Strong": "200mg+"
            }
        },
        "formatted_duration": {
            "Oral": "2-5",
            "_unit": "hours"
        },
        "formatted_effects": [
            "Euphoria",
            "increased energy/alertness",
            "decreased need for sleep",
            "increased sociability",
            "mood lift",
            "increased sexuality",
            "excessive talking",
            "decreased appetite",
            "weight loss",
            "sweating",
            "disturbed sleep patterns",
            "bruxism",
            "visual and auditory hallucinations",
            "itchiness",
            "aggressiveness",
            "moodiness",
            ""
        ],
        "formatted_onset": {
            "Oral": "15-45",
            "_unit": "minutes"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_4Methylethcathinone.shtml"
        },
        "name": "4-mec",
        "pretty_name": "4-MEC",
        "properties": {
            "after-effects": "2-4 hours.",
            "aliases": [
                "4-Methylethcathinone",
                "4mec",
                "4-methylethcathinone"
            ],
            "categories": [
                "stimulant",
                "research-chemical",
                "habit-forming"
            ],
            "dose": "Oral Light: 50-100mg Common: 100-200mg Strong: 200mg+ | Insufflated Light: 25-40mg Common: 40-100mg Strong: 100-150mg+",
            "duration": "Oral: 2-5 hours. Insufflated 2-3 hours.",
            "effects": "Euphoria, increased energy/alertness, decreased need for sleep, increased sociability, mood lift, increased sexuality, excessive talking, decreased appetite, weight loss, sweating, disturbed sleep patterns, bruxism, visual and auditory hallucinations, itchiness, aggressiveness, moodiness.",
            "onset": "Oral: 15-45 minutes. Insufflated 3-5 minutes.",
            "summary": "A substituted cathinone stimulant; little is known about its safety or subjective effects. It is believed to have similar effects to mephedrone, but with a lower potency and a stronger stimulating character."
        }
    },
    "4-meo-butryfentanyl": {
        "aliases": [
            "4-meo-bf"
        ],
        "categories": [
            "tentative",
            "research-chemical",
            "opioid",
            "habit-forming"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-2"
        },
        "formatted_duration": {
            "Insufflated": "30-75",
            "Oral": "45-120",
            "_unit": "minutes"
        },
        "formatted_onset": {
            "Insufflated": "1-2",
            "Oral": "5-15",
            "_unit": "minutes"
        },
        "name": "4-meo-butryfentanyl",
        "pretty_name": "4-MeO-Butyrfentanyl",
        "properties": {
            "after-effects": "1-2 hours.",
            "aliases": [
                "4-meo-bf"
            ],
            "categories": [
                "tentative",
                "research-chemical",
                "opioid",
                "habit-forming"
            ],
            "duration": "Oral: 45-120 minutes. | Insufflated: 30-75 minutes.",
            "onset": "Oral: 5-15 minutes. | Insufflated: 1-2 minutes.",
            "summary": "Rare and basically unknown opioid and fentanyl analogue (not to be confused with Butyrfentanyl). Virtually no reliable information exists, safe dosages are unknown. Exercise extreme caution. Overdose may result in respiratory depression. Do not mix with stimulants or depressants."
        }
    },
    "4-meo-mipt": {
        "categories": [
            "psychedelic",
            "research-chemical",
            "tentative"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-4"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "10-20mg",
                "Light": "10mg",
                "Strong": "20+mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "3-7"
        },
        "formatted_effects": [
            "Euphoria",
            "empathy",
            "insight",
            "brightened colour",
            "Closed/Open eye visuals",
            "enhanced tactile sensation",
            "mental/physical stimulation",
            "decreased appetite",
            "pupil dilation",
            "restlessness",
            "change in perception",
            "ego softening",
            "sweating/chills",
            "muscle tension",
            "confusion",
            "insomnia",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "20-60"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_4MeOMiPT.shtml",
            "tihkal": "https://www.erowid.org/library/books_online/tihkal/tihkal39.shtml"
        },
        "name": "4-meo-mipt",
        "pretty_name": "4-MeO-MiPT",
        "properties": {
            "after-effects": "1-4 hours.",
            "categories": [
                "psychedelic",
                "research-chemical",
                "tentative"
            ],
            "dose": "Oral Light: 10mg Common: 10-20mg Strong: 20+mg",
            "duration": "3-7 hours",
            "effects": "Euphoria, empathy, insight, brightened colour, Closed/Open eye visuals, enhanced tactile sensation, mental/physical stimulation, decreased appetite, pupil dilation, restlessness, change in perception, ego softening, sweating/chills, muscle tension, confusion, insomnia.",
            "onset": "20-60 minutes",
            "summary": "A rare psychedelic tryptamine first synthesised by Alexander Shulgin, said to the be \"little brother\" of 5-MeO-MiPT. Said to be relatively mild with lighter visual effects than most tryptamines."
        }
    },
    "4-meo-pcp": {
        "aliases": [
            "4meopcp"
        ],
        "categories": [
            "dissociative",
            "research-chemical",
            "habit-forming"
        ],
        "dose_note": " NOTE: These doses are tentative and may need further research.",
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-24"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "100-150mg",
                "Light": "50-100mg",
                "Strong": "150mg+",
                "Threshold": "25-50mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "8-15"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "45-90"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_4MeOPCP.shtml"
        },
        "name": "4-meo-pcp",
        "pretty_name": "4-MeO-PCP",
        "properties": {
            "after-effects": "1-24 hours.",
            "aliases": [
                "4meopcp"
            ],
            "categories": [
                "dissociative",
                "research-chemical",
                "habit-forming"
            ],
            "dose": "Oral Threshold: 25-50mg Light: 50-100mg Common: 100-150mg Strong: 150mg+ | NOTE: These doses are tentative and may need further research.",
            "duration": "8-15 hours.",
            "onset": "45-90 minutes.",
            "summary": "An arylcyclohexamine dissociative anaesthetic related to PCP. First discovered in the 1960s by Parke-Davis, it was introduced to the RC market in 2008. Reported to be less potent than PCP. It is not commonly seen, but has seen some increase in popularity with the inavailability of other dissociatives."
        }
    },
    "4-methylaminorex": {
        "aliases": [],
        "categories": [
            "stimulant",
            "habit-forming",
            "tentative",
            "research-chemical"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-24"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "5-10mg",
                "Dangerous": "15-20mg+",
                "Light": "1-5mg",
                "Strong": "10-15mg",
                "Threshold": "1mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "14-18"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "5-15"
        },
        "name": "4-methylaminorex",
        "pretty_name": "4-METHYLAMINOREX",
        "properties": {
            "after-effects": "1-24 hours.",
            "aliases": [],
            "categories": [
                "stimulant",
                "habit-forming",
                "tentative",
                "research-chemical"
            ],
            "dose": "Threshold: 1mg Light: 1-5mg Common: 5-10mg Strong: 10-15mg Dangerous: 15-20mg+",
            "duration": "14-18 hours.",
            "onset": "5-15 minutes.",
            "summary": "A very potent stimulant that has quite a long duration of action at around 16 hours."
        }
    },
    "4-methylmethylphenidate": {
        "aliases": [
            "4-mmph",
            "4-me-tmp",
            "4-metmp"
        ],
        "categories": [
            "stimulant",
            "research-chemical",
            "habit-forming",
            "tentative"
        ],
        "formatted_dose": {
            "Insufflated": {
                "Common": "20-45mg",
                "Heavy": "70mg+",
                "Light": "10-20mg",
                "Strong": "45-70mg"
            },
            "Oral": {
                "Common": "40-60mg",
                "Heavy": "90-125mg+",
                "Light": "25-40mg",
                "Strong": "60-90mg"
            }
        },
        "formatted_duration": {
            "Insufflated": "2-5",
            "Oral": "4-6",
            "_unit": "hours"
        },
        "formatted_effects": [
            "Euphoria",
            "increased energy/alertness",
            "decreased need for sleep",
            "increased sociability",
            "mood lift",
            "increased sexuality",
            "excessive talking",
            "decreased appetite",
            "weight loss",
            "sweating",
            "disturbed sleep patterns",
            "bruxism",
            "visual and auditory hallucinations",
            "itchiness",
            "aggressiveness",
            "moodiness",
            ""
        ],
        "formatted_onset": {
            "Insufflated": "5-20",
            "Oral": "15-35",
            "_unit": "minutes"
        },
        "name": "4-methylmethylphenidate",
        "pretty_name": "4-Methylmethylphenidate",
        "properties": {
            "aliases": [
                "4-mmph",
                "4-me-tmp",
                "4-metmp"
            ],
            "categories": [
                "stimulant",
                "research-chemical",
                "habit-forming",
                "tentative"
            ],
            "dose": "Oral Light: 25-40mg Common: 40-60mg Strong: 60-90mg Heavy: 90-125mg+ | Insufflated Light: 10-20mg Common: 20-45mg Strong: 45-70mg Heavy: 70mg+",
            "duration": "Oral: 4-6 hours | Insufflated: 2-5 hours",
            "effects": "Euphoria, increased energy/alertness, decreased need for sleep, increased sociability, mood lift, increased sexuality, excessive talking, decreased appetite, weight loss, sweating, disturbed sleep patterns, bruxism, visual and auditory hallucinations, itchiness, aggressiveness, moodiness.",
            "onset": "Oral: 15-35 minutes. | Insufflated: 5-20 minutes.",
            "summary": "A stimulant drug related to methylphenidate and also known as 4-Me-TMP, it has demonstrated lower dopamine reuptake inhibition properties and is potentially less potent. Has been subjectively described as very similar in feel to MPH."
        }
    },
    "4-mpd": {
        "categories": [
            "tentative",
            "stimulant",
            "habit-forming"
        ],
        "name": "4-mpd",
        "pretty_name": "4-MPD",
        "properties": {
            "categories": [
                "tentative",
                "stimulant",
                "habit-forming"
            ],
            "summary": "Stimulant of the cathinone class. Higher homologue of Mephedrone, and the p-Methyl analogue of Pentedrone."
        }
    },
    "4-mta": {
        "aliases": [
            "4-methylthioamphetamine"
        ],
        "categories": [
            "research-chemical",
            "empathogen",
            "tentative"
        ],
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_4MTA.shtml"
        },
        "name": "4-mta",
        "pretty_name": "4-MTA",
        "properties": {
            "aliases": [
                "4-methylthioamphetamine"
            ],
            "categories": [
                "research-chemical",
                "empathogen",
                "tentative"
            ],
            "summary": "Empathogen with very low chronic toxicity but high risk of acute harm due to mixed serotonin release and MAOI action. Reported to lack euphoria and rarely sold since being scheduled."
        }
    },
    "4f-neb": {
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-12"
        },
        "formatted_dose": {
            "Insufflated": {
                "Common": "75-150mg",
                "Light": "50-75",
                "Strong": "150-250mg."
            },
            "Oral": {
                "Common": "100-150mg",
                "Light": "75-100mg",
                "Strong": "150-300mg"
            }
        },
        "formatted_duration": {
            "Insufflated": "50-100",
            "Oral": "90-180",
            "_unit": "minutes"
        },
        "formatted_onset": {
            "Insufflated": "5-10",
            "Oral": "15-30",
            "_unit": "minutes"
        },
        "name": "4f-neb",
        "pretty_name": "4F-NEB",
        "properties": {
            "after-effects": "1-12 hours.",
            "dose": "Oral Light: 75-100mg Common: 100-150mg Strong: 150-300mg | Insufflated Light: 50-75 Common: 75-150mg Strong: 150-250mg.",
            "duration": "Oral: 90-180 minutes. | Insufflated: 50-100 minutes.",
            "onset": "Oral: 15-30 minutes. | Insufflated: 5-10 minutes.",
            "summary": "The 4-Fluoro analogue of N-Ethylbuphedrone (NEB) is a part of the cathinone class."
        }
    },
    "4f-php": {
        "categories": [
            "stimulant",
            "research-chemical",
            "tentative",
            "habit-forming"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-24"
        },
        "formatted_dose": {
            "Insufflated": {
                "Common": "15-30mg",
                "Light": "5-15mg",
                "Strong": "30-50mg+"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "3-6"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "Insufflated"
        },
        "name": "4f-php",
        "pretty_name": "4F-PHP",
        "properties": {
            "after-effects": "1-24 hours.",
            "categories": [
                "stimulant",
                "research-chemical",
                "tentative",
                "habit-forming"
            ],
            "dose": "Insufflated Light: 5-15mg Common: 15-30mg Strong: 30-50mg+",
            "duration": "3-6 hours.",
            "onset": "Insufflated 5-10 minutes.",
            "summary": "4-Fluoro analogue of a-PHP, yet seems to have less mania attachted to it. Dose is near on par."
        }
    },
    "4f-pvp": {
        "aliases": [
            "4f-a-pvp",
            "pfpvp"
        ],
        "categories": [
            "tentative",
            "stimulant",
            "habit-forming"
        ],
        "formatted_dose": {
            "Insufflated": {
                "Common": "10-20mg",
                "Light": "5-10mg",
                "Strong": "20-25mg+"
            }
        },
        "formatted_duration": {
            "Insufflated": "2-4",
            "_unit": "hours"
        },
        "formatted_onset": {
            "Insufflated": "15-20",
            "_unit": "minutes"
        },
        "name": "4f-pvp",
        "pretty_name": "4F-PVP",
        "properties": {
            "aliases": [
                "4f-a-pvp",
                "pfpvp"
            ],
            "categories": [
                "tentative",
                "stimulant",
                "habit-forming"
            ],
            "dose": "Insufflated Light: 5-10mg Common: 10-20mg Strong: 20-25mg+",
            "duration": "Insufflated: 2-4 hours.",
            "onset": "Insufflated: 15-20 minutes.",
            "summary": "Fluornated analogue of a-PVP. Seems to be slightly less weaker than it's parent compound."
        }
    },
    "5-apb": {
        "aliases": [
            "5apb"
        ],
        "categories": [
            "psychedelic",
            "stimulant",
            "research-chemical",
            "empathogen",
            "habit-forming"
        ],
        "formatted_aftereffects": {
            "value": "smooth"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "70-100mg",
                "Light": "40-60mg",
                "Strong": "100mg+"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "7-8"
        },
        "formatted_effects": [
            "Users describe effects ranging from total incapacitation and paranoia to euphoria",
            "Largely",
            "effects reported were similar to that of the drug MDA",
            "with euphoria",
            "empathy",
            "sedative",
            "sometimes stimulating effects"
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "45"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_5APB.shtml"
        },
        "name": "5-apb",
        "pretty_name": "5-APB",
        "properties": {
            "after-effects": "smooth come down/afterglow",
            "aliases": [
                "5apb"
            ],
            "categories": [
                "psychedelic",
                "stimulant",
                "research-chemical",
                "empathogen",
                "habit-forming"
            ],
            "detection": "May cause false positives for MDA (1-5 days)",
            "dose": "Oral Light: 40-60mg Common: 70-100mg Strong: 100mg+",
            "duration": "7-8 hours",
            "effects": "Users describe effects ranging from total incapacitation and paranoia to euphoria. Largely, effects reported were similar to that of the drug MDA, with euphoria, empathy, sedative, sometimes stimulating effects",
            "onset": "45 -60 minutes",
            "summary": "A triple monoamine reuptake inhibitor. This agonism for 5-HT2B makes it likely that 5-APB would be cardiotoxic with long term use, as seen in other 5-HT2B agonists such as fenfluramine and MDMA.",
            "wiki": "http://wiki.tripsit.me/wiki/5apb"
        }
    },
    "5-apdb": {
        "categories": [
            "stimulant",
            "psychedelic",
            "research-chemical",
            "empathogen",
            "habit-forming"
        ],
        "formatted_dose": {
            "Oral": {
                "Common": "75-125mg",
                "Heavy": "125-200mg+",
                "Light": "50-75mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "4-8"
        },
        "formatted_effects": [
            "Euphoria",
            "increased energy/alertness",
            "Decreased need for sleep",
            "Increased sociability",
            "mood lift",
            "increase sexuality",
            "Excessive talking",
            "Decreased appetite",
            "Weight loss",
            "Sweating",
            "Distrubed sleep patterns",
            "Bruxia",
            "Visual and audiotory hallucinations itchiness",
            "agressiveness",
            "moodiness",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "20-60"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_5APDB.shtml"
        },
        "name": "5-apdb",
        "pretty_name": "5-APDB",
        "properties": {
            "categories": [
                "stimulant",
                "psychedelic",
                "research-chemical",
                "empathogen",
                "habit-forming"
            ],
            "dose": "Oral Light: 50-75mg Common: 75-125mg Heavy: 125-200mg+",
            "duration": "4-8 hours",
            "effects": "Euphoria, increased energy/alertness, Decreased need for sleep, Increased sociability, mood lift, increase sexuality, Excessive talking, Decreased appetite, Weight loss, Sweating, Distrubed sleep patterns, Bruxia, Visual and audiotory hallucinations itchiness, agressiveness, moodiness.",
            "onset": "20-60 minutes",
            "summary": "An entactogenic amphetamine stimulant with similar structure and effects to MDMA. An analogue of MDA, it is a highly selective serotonin releaser but inhibits reuptake of serotonin (weakly), dopamine and norepinephrine."
        }
    },
    "5-apdi": {
        "aliases": [
            "iap"
        ],
        "categories": [
            "empathogen",
            "research-chemical",
            "tentative"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-6"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "25-50mg",
                "Light": "15-25mg",
                "Strong": "50-75mg+"
            }
        },
        "formatted_duration": {
            "Oral": "8-14",
            "_unit": "hours"
        },
        "formatted_effects": [
            "Euphoria",
            "increased energy/alertness",
            "Decreased need for sleep",
            "Increased sociability",
            "mood lift",
            "increase sexuality",
            "Excessive talking",
            "Decreased appetite",
            "Weight loss",
            "Sweating",
            "Distrubed sleep patterns",
            "Bruxia",
            "Visual and audiotory hallucinations itchiness",
            "agressiveness",
            "moodiness",
            ""
        ],
        "formatted_onset": {
            "Oral": "30-90",
            "_unit": "minutes"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_IAP.shtml"
        },
        "name": "5-apdi",
        "pretty_name": "5-APDI",
        "properties": {
            "after-effects": "1-6 hours.",
            "aliases": [
                "iap"
            ],
            "categories": [
                "empathogen",
                "research-chemical",
                "tentative"
            ],
            "dose": "Oral Light: 15-25mg Common: 25-50mg Strong: 50-75mg+",
            "duration": "Oral: 8-14 hours.",
            "effects": "Euphoria, increased energy/alertness, Decreased need for sleep, Increased sociability, mood lift, increase sexuality, Excessive talking, Decreased appetite, Weight loss, Sweating, Distrubed sleep patterns, Bruxia, Visual and audiotory hallucinations itchiness, agressiveness, moodiness.",
            "onset": "Oral: 30-90 minutes.",
            "summary": "Also commonly known as IAP.  A selective serotonin releasing agent with psychedelic and empathogenic properties. Users have often reported issues with the drug causing overheating and unwelcome bowel movements."
        }
    },
    "5-bpdi": {
        "categories": [
            "habit-forming",
            "research-chemical",
            "stimulant",
            "tentative"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "3-8"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "10-25mg",
                "Heavy": "45+mg.",
                "Light": "7.5-10mg",
                "Strong": "25-45mg"
            }
        },
        "formatted_duration": {
            "Oral": "4-8",
            "_unit": "hours"
        },
        "formatted_onset": {
            "Oral": "15-30",
            "_unit": "minutes"
        },
        "name": "5-bpdi",
        "pretty_name": "5-BPDI",
        "properties": {
            "after-effects": "3-8 hours.",
            "categories": [
                "habit-forming",
                "research-chemical",
                "stimulant",
                "tentative"
            ],
            "dose": "Light: 7.5-10mg Common: 10-25mg Strong: 25-45mg Heavy: 45+mg.",
            "duration": "Oral: 4-8 hours. Insufflated: 2-5 hours.",
            "onset": "Oral: 15-30 minutes. Insufflated: 5-10 minutes.",
            "summary": "An analogue of a-PHP, which has been described as having an extremely similar effect profile, with some users noting that it may be slightly lighter and with less of an urge to redose. However, little record of the safety of human use exists."
        }
    },
    "5-br-dmt": {
        "categories": [
            "psychedelic",
            "tentative",
            "research-chemical"
        ],
        "formatted_dose": {
            "Vapourized": {
                "Common": "25-35mg.",
                "Light": "10-25mg.",
                "Strong": "35-65mg."
            }
        },
        "formatted_duration": {
            "_unit": "minutes",
            "value": "15-90"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "1-2"
        },
        "name": "5-br-dmt",
        "pretty_name": "5-Bromo-DMT",
        "properties": {
            "categories": [
                "psychedelic",
                "tentative",
                "research-chemical"
            ],
            "dose": "Vapourized Light: 10-25mg. Common: 25-35mg. Strong: 35-65mg.",
            "duration": "15-90 minutes.",
            "onset": "1-2 minutes.",
            "summary": "Psychedelic drug of the Trypyamine class, and is also found in two marine invertebrates. Animal studies have shown that this could be useful for sedative and/or antidepressant use."
        }
    },
    "5-dbfpv": {
        "categories": [
            "tentative",
            "stimulant",
            "habit-forming",
            "research-chemical"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "4-12"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "15-30mg",
                "Light": "5-15mg",
                "Strong": "30-60mg.",
                "Threshold": "2-5mg"
            }
        },
        "formatted_onset": {
            "Insufflated": "5-15",
            "Oral": "15-45",
            "_unit": "minutes"
        },
        "name": "5-dbfpv",
        "pretty_name": "5-DBFPV",
        "properties": {
            "after-effects": "4-12 hours.",
            "categories": [
                "tentative",
                "stimulant",
                "habit-forming",
                "research-chemical"
            ],
            "dose": "Oral Threshold: 2-5mg Light: 5-15mg Common: 15-30mg Strong: 30-60mg.",
            "onset": "Oral: 15-45 minutes. | Insufflated: 5-15 minutes.",
            "summary": "Stimulant of the cathinone class. Analogue of MDPV where the methylenedioxyphenyl group was replaced with a dihydrobenzofuran."
        }
    },
    "5-eapb": {
        "aliases": [
            "5eapb"
        ],
        "categories": [
            "stimulant",
            "psychedelic",
            "research-chemical",
            "empathogen",
            "habit-forming"
        ],
        "formatted_dose": {
            "Insufflated": {
                "Common": "40-60mg",
                "Light": "30-40mg",
                "Strong": "60-100+mg"
            },
            "Oral": {
                "Common": "60-100mg",
                "Light": "50-60mg",
                "Strong": "100-150+mg"
            }
        },
        "formatted_duration": {
            "Oral": "5-6",
            "_unit": "hours"
        },
        "formatted_effects": [
            "Euphoria",
            "increased energy/alertness",
            "Decreased need for sleep",
            "Increased sociability",
            "mood lift",
            "increase sexuality",
            "Excessive talking",
            "Decreased appetite",
            "Weight loss",
            "Sweating",
            "Distrubed sleep patterns",
            "Bruxia",
            "Visual and audiotory hallucinations itchiness",
            "agressiveness",
            "moodiness",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "Oral"
        },
        "name": "5-eapb",
        "pretty_name": "5-EAPB",
        "properties": {
            "aliases": [
                "5eapb"
            ],
            "categories": [
                "stimulant",
                "psychedelic",
                "research-chemical",
                "empathogen",
                "habit-forming"
            ],
            "dose": "Oral Light: 50-60mg Common: 60-100mg Strong: 100-150+mg | Insufflated Light: 30-40mg Common: 40-60mg Strong: 60-100+mg",
            "duration": "Oral: 5-6 hours Insufflated: 3-4 hours.",
            "effects": "Euphoria, increased energy/alertness, Decreased need for sleep, Increased sociability, mood lift, increase sexuality, Excessive talking, Decreased appetite, Weight loss, Sweating, Distrubed sleep patterns, Bruxia, Visual and audiotory hallucinations itchiness, agressiveness, moodiness.",
            "onset": "Oral 30-60 minutes Insufflated 5-10 minutes.",
            "summary": "A empathogen sold as a replacement to 5-MAPB after it was banned in the UK, but said to be less enjoyable and never gained much popularity."
        }
    },
    "5-htp": {
        "aliases": [
            "5htp",
            "5-hydroxytryptophan",
            "tryptophan",
            "l-tryptophan",
            "oxitriptan"
        ],
        "categories": [
            "common",
            "supplement"
        ],
        "dose_note": " NOTE: Do not take this while on a serotonergic drug, only afterwards. Wait at least 12 hours following the last dose in the case of MDMA.",
        "formatted_dose": {
            "Recovery": {
                "Common": "200-300mg"
            },
            "Sleep": {
                "Common": "100-200mg"
            },
            "Therapeutic": {
                "Common": "50-100mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "4-6"
        },
        "formatted_effects": [
            "sleep aid",
            "antidepressant",
            "appetite suppressant",
            "nausea",
            "mood stabilising"
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "30-60"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_Tryptophan.shtml"
        },
        "name": "5-htp",
        "pretty_name": "5-HTP",
        "properties": {
            "aliases": [
                "5htp",
                "5-hydroxytryptophan",
                "tryptophan",
                "l-tryptophan",
                "oxitriptan"
            ],
            "avoid": "Anything which interacts with serotonin. Including SSRIs, MAOIs, DXm, MDMA (during or before)",
            "categories": [
                "common",
                "supplement"
            ],
            "dose": "Therapeutic Common: 50-100mg | Sleep Common: 100-200mg | Recovery Common: 200-300mg | NOTE: Do not take this while on a serotonergic drug, only afterwards. Wait at least 12 hours following the last dose in the case of MDMA.",
            "duration": "4-6 hours",
            "effects": "sleep aid, antidepressant, appetite suppressant, nausea, mood stabilising",
            "mdma": "5-HTP should only be taken at least 12 hours following an MDMA dose. Do not take it during or before MDMA - this can cause serotonin syndrome.",
            "onset": "30-60 minutes",
            "summary": "The precursor to serotonin. In some countries it is sold OTC as a supplement for mood stabilisation and insomnia. It is frequently used as a recovery supplement following the use of MDMA or any other drug that depletes serotonin. Do not mix this drug with anything serotonergic, as this can cause serotonin syndrome."
        }
    },
    "5-iai": {
        "aliases": [
            "5iai"
        ],
        "categories": [
            "stimulant",
            "psychedelic",
            "research-chemical",
            "habit-forming",
            "empathogen"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-24"
        },
        "formatted_effects": [
            "Euphoria",
            "increased energy/alertness",
            "Decreased need for sleep",
            "Increased sociability",
            "mood lift",
            "increase sexuality",
            "Excessive talking",
            "Decreased appetite",
            "Weight loss",
            "Sweating",
            "Distrubed sleep patterns",
            "Bruxia",
            "Visual and audiotory hallucinations itchiness",
            "agressiveness",
            "moodiness",
            ""
        ],
        "name": "5-iai",
        "pretty_name": "5-IAI",
        "properties": {
            "after-effects": "1-24 hours.",
            "aliases": [
                "5iai"
            ],
            "categories": [
                "stimulant",
                "psychedelic",
                "research-chemical",
                "habit-forming",
                "empathogen"
            ],
            "effects": "Euphoria, increased energy/alertness, Decreased need for sleep, Increased sociability, mood lift, increase sexuality, Excessive talking, Decreased appetite, Weight loss, Sweating, Distrubed sleep patterns, Bruxia, Visual and audiotory hallucinations itchiness, agressiveness, moodiness.",
            "summary": "A monoamine triple releaser first synthesised by David Nichols, possesses similar properties to MDMA. Probably neurotoxic in humans, however the extent of this is unclear.",
            "warning": "Note: It seems /most/ of the market for this drug is infact largely falsified."
        }
    },
    "5-it": {
        "aliases": [
            "5-api"
        ],
        "categories": [
            "stimulant",
            "psychedelic",
            "research-chemical",
            "habit-forming",
            "empathogen"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-48"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "50-100mg",
                "Light": "50mg",
                "Strong": "100-150mg+"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "8-12"
        },
        "formatted_effects": [
            "Euphoria",
            "increased energy/alertness",
            "Decreased need for sleep",
            "Increased sociability",
            "mood lift",
            "increase sexuality",
            "Excessive talking",
            "Decreased appetite",
            "Weight loss",
            "Sweating",
            "Distrubed sleep patterns",
            "Bruxia",
            "Visual and audiotory hallucinations itchiness",
            "agressiveness",
            "moodiness",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "90-120"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_5IT.shtml"
        },
        "name": "5-it",
        "pretty_name": "5-IT",
        "properties": {
            "after-effects": "1-48 hours.",
            "aliases": [
                "5-api"
            ],
            "categories": [
                "stimulant",
                "psychedelic",
                "research-chemical",
                "habit-forming",
                "empathogen"
            ],
            "dose": "Oral Light: 50mg Common: 50-100mg Strong: 100-150mg+",
            "duration": "8-12 hours.",
            "effects": "Euphoria, increased energy/alertness, Decreased need for sleep, Increased sociability, mood lift, increase sexuality, Excessive talking, Decreased appetite, Weight loss, Sweating, Distrubed sleep patterns, Bruxia, Visual and audiotory hallucinations itchiness, agressiveness, moodiness.",
            "onset": "90-120 minutes.",
            "summary": "An empathogenic stimulant with a very long duration, prone to cause overheating and potentially quite dangerous. Related to \u03b1MT, though described as being less psychedelic and with much stronger stimulating effects."
        }
    },
    "5-mapb": {
        "aliases": [
            "5mapb"
        ],
        "categories": [
            "psychedelic",
            "stimulant",
            "research-chemical",
            "empathogen",
            "habit-forming"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "2-4"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "60-80mg",
                "Heavy": "80-100mg+",
                "Light": "40-60mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "5-8"
        },
        "formatted_effects": [
            "Euphoria",
            "increased energy/alertness",
            "Decreased need for sleep",
            "Increased sociability",
            "mood lift",
            "increase sexuality",
            "Excessive talking",
            "Decreased appetite",
            "Weight loss",
            "Sweating",
            "Distrubed sleep patterns",
            "Bruxia",
            "Visual and audiotory hallucinations itchiness",
            "agressiveness",
            "moodiness",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "45-60"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_5MAPB.shtml"
        },
        "name": "5-mapb",
        "pretty_name": "5-MAPB",
        "properties": {
            "after-effects": "2-4 hours",
            "aliases": [
                "5mapb"
            ],
            "categories": [
                "psychedelic",
                "stimulant",
                "research-chemical",
                "empathogen",
                "habit-forming"
            ],
            "dose": "Oral Light: 40-60mg Common: 60-80mg Heavy: 80-100mg+",
            "duration": "5-8 hours",
            "effects": "Euphoria, increased energy/alertness, Decreased need for sleep, Increased sociability, mood lift, increase sexuality, Excessive talking, Decreased appetite, Weight loss, Sweating, Distrubed sleep patterns, Bruxia, Visual and audiotory hallucinations itchiness, agressiveness, moodiness.",
            "onset": "45-60 minutes",
            "summary": "An empathogen structurally similar to MDMA. Typically more visual than MDMA. Often reported to be much less stimulating and more relaxing than most other stimulating empathogens. Less psychedelic than 6-APB. Much longer lasting than MDMA."
        }
    },
    "5-mapdb": {
        "aliases": [
            "5mapdb"
        ],
        "categories": [
            "stimulant",
            "psychedelic",
            "research-chemical",
            "empathogen"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "2-4"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "75-120mg",
                "Light": "50-75mg",
                "Strong": "120-150mg+"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "5-8"
        },
        "formatted_effects": [
            "Euphoria",
            "increased energy/alertness",
            "Decreased need for sleep",
            "Increased sociability",
            "mood lift",
            "increase sexuality",
            "Excessive talking",
            "Decreased appetite",
            "Weight loss",
            "Sweating",
            "Distrubed sleep patterns",
            "Bruxia",
            "Visual and audiotory hallucinations itchiness",
            "agressiveness",
            "moodiness",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "45-70"
        },
        "name": "5-mapdb",
        "pretty_name": "5-MAPDB",
        "properties": {
            "after-effects": "2-4 hours. (dependant on dose)",
            "aliases": [
                "5mapdb"
            ],
            "categories": [
                "stimulant",
                "psychedelic",
                "research-chemical",
                "empathogen"
            ],
            "dose": "Oral Light: 50-75mg Common: 75-120mg Strong: 120-150mg+",
            "duration": "5-8 hours.",
            "effects": "Euphoria, increased energy/alertness, Decreased need for sleep, Increased sociability, mood lift, increase sexuality, Excessive talking, Decreased appetite, Weight loss, Sweating, Distrubed sleep patterns, Bruxia, Visual and audiotory hallucinations itchiness, agressiveness, moodiness.",
            "onset": "45-70 minutes.",
            "summary": "An entactogenic drug with similar effects to MDMA, it is related to 5-MAPB. Likely to release serotonin and show neurotoxicity in the same way as MDMA"
        }
    },
    "5-meo-amt": {
        "aliases": [
            "5meoamt"
        ],
        "categories": [
            "stimulant",
            "psychedelic",
            "research-chemical",
            "empathogen"
        ],
        "dose_note": " NOTE: Hospitalizations have occured with as doses as low as 8mg",
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "4-24+"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "2-4mg",
                "Light": "1-2mg",
                "Strong": "4-6mg",
                "Threshold": "0.5-1mg"
            }
        },
        "formatted_duration": {
            "Insufflated": "8-12",
            "Oral": "12-18",
            "_unit": "hours"
        },
        "formatted_effects": [
            "Euphoria",
            "empathy",
            "insight",
            "brightened colour",
            "Closed/Open eye visuals",
            "enhanced tactile sensation",
            "mental/physical stimulation",
            "decreased appetite",
            "pupil dilation",
            "restlessness",
            "change in perception",
            "ego softening",
            "sweating/chills",
            "muscle tension",
            "confusion",
            "insomnia",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "30-120"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_5MeOAMT.shtml"
        },
        "name": "5-meo-amt",
        "pretty_name": "5-MeO-\u03b1MT",
        "properties": {
            "after-effects": "4-24+ hours.",
            "aliases": [
                "5meoamt"
            ],
            "categories": [
                "stimulant",
                "psychedelic",
                "research-chemical",
                "empathogen"
            ],
            "dose": "Oral Threshold: 0.5-1mg Light: 1-2mg Common: 2-4mg Strong: 4-6mg | NOTE: Hospitalizations have occured with as doses as low as 8mg",
            "duration": "Oral: 12-18 hours. | Insufflated: 8-12 hours.",
            "effects": "Euphoria, empathy, insight, brightened colour, Closed/Open eye visuals, enhanced tactile sensation, mental/physical stimulation, decreased appetite, pupil dilation, restlessness, change in perception, ego softening, sweating/chills, muscle tension, confusion, insomnia.",
            "onset": "30-120 minutes.",
            "summary": "A long-acting psychedelic and entactogenic tryptamine, related to aMT. Very potent and may be sold on blotters. Possibly has been missold as LSD in the past, however this is uncommon. Possibly an MAOI."
        }
    },
    "5-meo-dalt": {
        "aliases": [
            "5meodalt"
        ],
        "categories": [
            "psychedelic",
            "research-chemical"
        ],
        "formatted_aftereffects": {
            "Oral": "1-2",
            "_unit": "hours"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "12-20mg",
                "Light": "5-12mg",
                "Strong": "20+mg",
                "Threshold": "4-5mg"
            },
            "Vaporized": {
                "Common": "5-15mg",
                "Light": "2-5mg",
                "Strong": "15+mg"
            }
        },
        "formatted_duration": {
            "Oral": "2-4",
            "_unit": "hours"
        },
        "formatted_effects": [
            "Euphoria",
            "empathy",
            "insight",
            "brightened colour",
            "Closed/Open eye visuals",
            "enhanced tactile sensation",
            "mental/physical stimulation",
            "decreased appetite",
            "pupil dilation",
            "restlessness",
            "change in perception",
            "ego softening",
            "sweating/chills",
            "muscle tension",
            "confusion",
            "insomnia",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "oral": "15-30"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_5MeODALT.shtml"
        },
        "name": "5-meo-dalt",
        "pretty_name": "5-MeO-DALT",
        "properties": {
            "after-effects": "Oral: 1-2 hours. Smoked: 5-10 minutes.",
            "aliases": [
                "5meodalt"
            ],
            "avoid": "MAOI's.",
            "categories": [
                "psychedelic",
                "research-chemical"
            ],
            "dose": "Oral Threshold: 4-5mg Light: 5-12mg Common: 12-20mg Strong: 20+mg | Vaporized Light: 2-5mg Common: 5-15mg Strong: 15+mg",
            "duration": "Oral: 2-4 hours. Smoked: 20-30 minutes.",
            "effects": "Euphoria, empathy, insight, brightened colour, Closed/Open eye visuals, enhanced tactile sensation, mental/physical stimulation, decreased appetite, pupil dilation, restlessness, change in perception, ego softening, sweating/chills, muscle tension, confusion, insomnia.",
            "onset": "oral: 15-30 minutes. Smoked: 1-2 minutes.",
            "summary": "A strange drug with an unknown mechanism of action. Some psychedelic effects alongside some effects non-characteristic of psychedelics like appetite enhancement. Reported as having rapid, intense and short acting entheogenic effects."
        },
        "pweffects": {
            "Acuity enhancement": "https://psychonautwiki.org/wiki/Acuity_enhancement",
            "Analysis enhancement": "https://psychonautwiki.org/wiki/Analysis_enhancement",
            "Auditory distortion": "https://psychonautwiki.org/wiki/Auditory_distortion",
            "Auditory enhancement": "https://psychonautwiki.org/wiki/Auditory_enhancement",
            "Auditory hallucinations": "https://psychonautwiki.org/wiki/Auditory_hallucinations",
            "Colour enhancement": "https://psychonautwiki.org/wiki/Colour_enhancement",
            "Colour shifting": "https://psychonautwiki.org/wiki/Colour_shifting",
            "Conceptual thinking": "https://psychonautwiki.org/wiki/Conceptual_thinking",
            "Drifting": "https://psychonautwiki.org/wiki/Drifting",
            "Emotion enhancement": "https://psychonautwiki.org/wiki/Emotion_enhancement",
            "Geometry": "https://psychonautwiki.org/wiki/Geometry",
            "Increased heart rate": "https://psychonautwiki.org/wiki/Increased_heart_rate",
            "Increased libido": "https://psychonautwiki.org/wiki/Increased_libido",
            "Memory suppression": "https://psychonautwiki.org/wiki/Memory_suppression",
            "Novelty enhancement": "https://psychonautwiki.org/wiki/Novelty_enhancement",
            "Pattern recognition enhancement": "https://psychonautwiki.org/wiki/Pattern_recognition_enhancement",
            "Personal bias suppression": "https://psychonautwiki.org/wiki/Personal_bias_suppression",
            "Pupil dilation": "https://psychonautwiki.org/wiki/Pupil_dilation",
            "Spontaneous tactile sensations": "https://psychonautwiki.org/wiki/Spontaneous_tactile_sensations",
            "Stimulation": "https://psychonautwiki.org/wiki/Stimulation",
            "Symmetrical texture repetition": "https://psychonautwiki.org/wiki/Symmetrical_texture_repetition",
            "Tactile enhancement": "https://psychonautwiki.org/wiki/Tactile_enhancement",
            "Temperature regulation suppression": "https://psychonautwiki.org/wiki/Temperature_regulation_suppression",
            "Thought acceleration": "https://psychonautwiki.org/wiki/Thought_acceleration",
            "Thought connectivity": "https://psychonautwiki.org/wiki/Thought_connectivity",
            "Time distortion": "https://psychonautwiki.org/wiki/Time_distortion",
            "Tracers": "https://psychonautwiki.org/wiki/Tracers",
            "Wakefulness": "https://psychonautwiki.org/wiki/Wakefulness"
        }
    },
    "5-meo-dibf": {
        "categories": [
            "empathogen",
            "research-chemical",
            "tentative"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-12"
        },
        "formatted_dose": {
            "Insufflated": {
                "Common": "10-15mg",
                "Light": "5-10mg",
                "Strong": "15-20mg+"
            },
            "Oral": {
                "Common": "20-40mg",
                "Light": "10-20mg",
                "Strong": "40-60mg+"
            }
        },
        "formatted_duration": {
            "Insufflated": "6-8",
            "Oral": "8-12",
            "_unit": "hours"
        },
        "formatted_onset": {
            "Insufflated": "5-45",
            "Oral": "20-90",
            "_unit": "minutes"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_5MeODiBF.shtml"
        },
        "name": "5-meo-dibf",
        "pretty_name": "5-MeO-DIBF",
        "properties": {
            "after-effects": "1-12 hours.",
            "categories": [
                "empathogen",
                "research-chemical",
                "tentative"
            ],
            "dose": "Oral Light: 10-20mg Common: 20-40mg Strong: 40-60mg+ | Insufflated Light: 5-10mg Common: 10-15mg Strong: 15-20mg+",
            "duration": "Oral 8-12 hours. | Insufflated 6-8 hours.",
            "onset": "Oral: 20-90 minutes. | Insufflated: 5-45 minutes.",
            "summary": "An uncommon and new psychedelic drug related to tryptamine; the Benzofuran analogue of 5-MeO-DiPT. Probably a serotonin receptor partial agonist. Little history of human use."
        }
    },
    "5-meo-dipt": {
        "aliases": [
            "foxy",
            "foxy-methoxy",
            "5meodipt"
        ],
        "categories": [
            "psychedelic",
            "research-chemical",
            "empathogen"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "2-3"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "8-15mg",
                "Light": "5-10mg",
                "Strong": "15-25mg+",
                "Threshold": "3mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "4-8"
        },
        "formatted_effects": [
            "Euphoria",
            "empathy",
            "insight",
            "brightened colour",
            "Closed/Open eye visuals",
            "enhanced tactile sensation",
            "mental/physical stimulation",
            "decreased appetite",
            "pupil dilation",
            "restlessness",
            "change in perception",
            "ego softening",
            "sweating/chills",
            "muscle tension",
            "confusion",
            "insomnia",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "20-40"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_5MeODiPT.shtml",
            "tihkal": "https://www.erowid.org/library/books_online/tihkal/tihkal37.shtml"
        },
        "name": "5-meo-dipt",
        "pretty_name": "5-MeO-DiPT",
        "properties": {
            "after-effects": "2-3 hours",
            "aliases": [
                "foxy",
                "foxy-methoxy",
                "5meodipt"
            ],
            "categories": [
                "psychedelic",
                "research-chemical",
                "empathogen"
            ],
            "dose": "Oral Threshold: 3mg Light: 5-10mg Common: 8-15mg Strong: 15-25mg+",
            "duration": "4-8 hours",
            "effects": "Euphoria, empathy, insight, brightened colour, Closed/Open eye visuals, enhanced tactile sensation, mental/physical stimulation, decreased appetite, pupil dilation, restlessness, change in perception, ego softening, sweating/chills, muscle tension, confusion, insomnia.",
            "onset": "20-40 minutes",
            "summary": "5-methoxy-di isopropyl tryptamine, also known as 'foxy', a psychedelic tryptamine related to DMT, which distorts visual and audio perception. Reported to have a heavy body load at high doses, it behaves similarly to other drugs of its class."
        }
    },
    "5-meo-dmt": {
        "aliases": [
            "5meodmt",
            "toads",
            "5-meo",
            "5meo",
            "5-medmt"
        ],
        "categories": [
            "psychedelic",
            "research-chemical"
        ],
        "formatted_aftereffects": {
            "Insufflated": "1-3",
            "Smoked": "1-2",
            "_unit": "hours"
        },
        "formatted_dose": {
            "Insufflated": {
                "Common": "5-10mg",
                "Light": "3-5mg",
                "Strong": "8-15mg"
            },
            "Smoked": {
                "Light": "2-5mg",
                "Strong": "10-20mg"
            }
        },
        "formatted_duration": {
            "Insufflated": "15-45",
            "Smoked": "5-15",
            "_unit": "minutes"
        },
        "formatted_effects": [
            "Smoked: short duration",
            "powerful rushing of sensation",
            "overwhelming fear",
            "panic",
            "experience of \"the void\"",
            "ego death"
        ],
        "formatted_onset": {
            "Insufflated": "1-5",
            "Smoked": "0-1",
            "_unit": "minutes"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_5MeODMT.shtml",
            "tihkal": "https://www.erowid.org/library/books_online/tihkal/tihkal38.shtml"
        },
        "name": "5-meo-dmt",
        "pretty_name": "5-MeO-DMT",
        "properties": {
            "after-effects": "Smoked: 1-2 hours | Insufflated: 1-3 hours",
            "aliases": [
                "5meodmt",
                "toads",
                "5-meo",
                "5meo",
                "5-medmt"
            ],
            "categories": [
                "psychedelic",
                "research-chemical"
            ],
            "dose": "Smoked Light: 2-5mg Common 5-10mg Strong: 10-20mg | Insufflated Light: 3-5mg Common: 5-10mg Strong: 8-15mg",
            "duration": "Smoked: 5-15 minutes | Insufflated: 15-45 minutes",
            "effects": "Smoked: short duration, powerful rushing of sensation, overwhelming fear, panic, experience of \"the void\", ego death",
            "onset": "Smoked: 0-1 minutes | Insufflated: 1-5 minutes",
            "summary": "A powerful psychedelic tryptamine found in many species of plants and some toad venom, with a history of use by native South Americans spanning thousands of years. Has similar qualities to DMT and related tryptamines. Very potent. Orally active in combination with an MAOI."
        },
        "pweffects": {
            "Amnesia": "https://psychonautwiki.org/wiki/Amnesia",
            "Analysis enhancement": "https://psychonautwiki.org/wiki/Analysis_enhancement",
            "Anxiety": "https://psychonautwiki.org/wiki/Anxiety",
            "Auditory distortion": "https://psychonautwiki.org/wiki/Auditory_distortion",
            "Auditory enhancement": "https://psychonautwiki.org/wiki/Auditory_enhancement",
            "Auditory hallucinations": "https://psychonautwiki.org/wiki/Auditory_hallucinations",
            "Bodily control enhancement": "https://psychonautwiki.org/wiki/Bodily_control_enhancement",
            "Bodily pressures": "https://psychonautwiki.org/wiki/Bodily_pressures",
            "Changes in gravity": "https://psychonautwiki.org/wiki/Changes_in_gravity",
            "Colour enhancement": "https://psychonautwiki.org/wiki/Colour_enhancement",
            "Colour shifting": "https://psychonautwiki.org/wiki/Colour_shifting",
            "Conceptual thinking": "https://psychonautwiki.org/wiki/Conceptual_thinking",
            "Delusions": "https://psychonautwiki.org/wiki/Delusions",
            "Drifting": "https://psychonautwiki.org/wiki/Drifting",
            "Emotion enhancement": "https://psychonautwiki.org/wiki/Emotion_enhancement",
            "Environmental orbism": "https://psychonautwiki.org/wiki/Environmental_orbism",
            "Geometry": "https://psychonautwiki.org/wiki/Geometry",
            "Memory suppression": "https://psychonautwiki.org/wiki/Memory_suppression",
            "Mindfulness": "https://psychonautwiki.org/wiki/Mindfulness",
            "Motor control loss": "https://psychonautwiki.org/wiki/Motor_control_loss",
            "Nausea": "https://psychonautwiki.org/wiki/Nausea",
            "Perception of increased weight": "https://psychonautwiki.org/wiki/Perception_of_increased_weight",
            "Physical euphoria": "https://psychonautwiki.org/wiki/Physical_euphoria",
            "Pupil dilation": "https://psychonautwiki.org/wiki/Pupil_dilation",
            "Recursion": "https://psychonautwiki.org/wiki/Recursion",
            "Skin flushing": "https://psychonautwiki.org/wiki/Skin_flushing",
            "Subconscious communication": "https://psychonautwiki.org/wiki/Subconscious_communication",
            "Tactile enhancement": "https://psychonautwiki.org/wiki/Tactile_enhancement",
            "Temperature regulation suppression": "https://psychonautwiki.org/wiki/Temperature_regulation_suppression",
            "Thought connectivity": "https://psychonautwiki.org/wiki/Thought_connectivity",
            "Time distortion": "https://psychonautwiki.org/wiki/Time_distortion",
            "Unity and interconnectedness": "https://psychonautwiki.org/wiki/Unity_and_interconnectedness",
            "Wakefulness": "https://psychonautwiki.org/wiki/Wakefulness"
        }
    },
    "5-meo-dpt": {
        "aliases": [
            "5meodpt"
        ],
        "categories": [
            "psychedelic",
            "research-chemical"
        ],
        "dose_note": " NOTE: These doses are tentative and may need further research.",
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-2"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "3-5mg",
                "Light": "3mg",
                "Strong": "5-10mg+"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "2-5"
        },
        "formatted_effects": [
            "Euphoria",
            "empathy",
            "insight",
            "brightened colour",
            "Closed/Open eye visuals",
            "enhanced tactile sensation",
            "mental/physical stimulation",
            "decreased appetite",
            "pupil dilation",
            "restlessness",
            "change in perception",
            "ego softening",
            "sweating/chills",
            "muscle tension",
            "confusion",
            "insomnia",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "30-60"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_5MeODPT.shtml"
        },
        "name": "5-meo-dpt",
        "pretty_name": "5-MeO-DPT",
        "properties": {
            "after-effects": "1-2 hours.",
            "aliases": [
                "5meodpt"
            ],
            "categories": [
                "psychedelic",
                "research-chemical"
            ],
            "dose": "Oral Light: 3mg Common: 3-5mg Strong: 5-10mg+ | NOTE: These doses are tentative and may need further research.",
            "duration": "2-5 hours",
            "effects": "Euphoria, empathy, insight, brightened colour, Closed/Open eye visuals, enhanced tactile sensation, mental/physical stimulation, decreased appetite, pupil dilation, restlessness, change in perception, ego softening, sweating/chills, muscle tension, confusion, insomnia.",
            "onset": "30-60 minutes.",
            "summary": "A rare tryptamine psychedelic and analogue of DPT. Little is known about this compound but it is likely to have effects similar to DPT, DMT and others related compounds."
        }
    },
    "5-meo-eipt": {
        "aliases": [
            "5meoeipt"
        ],
        "categories": [
            "psychedelic",
            "research-chemical",
            "tentative"
        ],
        "dose_note": " NOTE: These doses are tentative and may need further research.",
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-12"
        },
        "formatted_dose": {
            "Insufflated": {
                "Common": "7-15mg",
                "Light": "3-7mg",
                "Strong": "15-20mg+",
                "Threshold": "1-3mg"
            },
            "Oral": {
                "Common": "10-20mg",
                "Light": "5-10mg",
                "Strong": "20-25mg+",
                "Threshold": "2-5mg"
            }
        },
        "formatted_duration": {
            "Insufflated": "3-6",
            "Oral": "5-10",
            "_unit": "hours"
        },
        "formatted_effects": [
            "Euphoria",
            "empathy",
            "insight",
            "brightened colour",
            "Closed/Open eye visuals",
            "enhanced tactile sensation",
            "mental/physical stimulation",
            "decreased appetite",
            "pupil dilation",
            "restlessness",
            "change in perception",
            "ego softening",
            "sweating/chills",
            "muscle tension",
            "confusion",
            "insomnia",
            ""
        ],
        "formatted_onset": {
            "Insufflated": "1-10",
            "Oral": "15-45",
            "_unit": "minutes"
        },
        "name": "5-meo-eipt",
        "pretty_name": "5-MeO-EiPT",
        "properties": {
            "after-effects": "1-12 hours.",
            "aliases": [
                "5meoeipt"
            ],
            "categories": [
                "psychedelic",
                "research-chemical",
                "tentative"
            ],
            "dose": "Oral Threshold: 2-5mg Light: 5-10mg Common: 10-20mg Strong: 20-25mg+ | Insufflated Threshold: 1-3mg Light: 3-7mg Common: 7-15mg Strong: 15-20mg+",
            "duration": "Oral: 5-10 hours. | Insufflated: 3-6 hours.",
            "effects": "Euphoria, empathy, insight, brightened colour, Closed/Open eye visuals, enhanced tactile sensation, mental/physical stimulation, decreased appetite, pupil dilation, restlessness, change in perception, ego softening, sweating/chills, muscle tension, confusion, insomnia.",
            "onset": "Oral: 15-45 minutes. | Insufflated: 1-10 minutes.",
            "summary": "A little known and little studied tryptamine and analogue of EiPT, also related to DiPT and DET. Probably a psychedelic. Few reports of effects."
        }
    },
    "5-meo-malt": {
        "categories": [
            "psychedelic",
            "research-chemical"
        ],
        "dose_note": " Note: Due to the massive amount of reports not correlating to the others please start very low and titrate up.",
        "formatted_dose": {
            "Insufflated": {
                "Common": "10-20mg",
                "Light": "5-10mg",
                "Strong": "20mg+"
            },
            "Oral": {
                "Common": "25-50mg",
                "Light": "15-25mg",
                "Strong": "50mg+"
            },
            "Vapourized": {
                "Common": "10-15mg",
                "Light": "5-10mg",
                "Strong": "15-20mg"
            }
        },
        "formatted_duration": {
            "Insufflated": "1-3",
            "Oral": "2-4",
            "Vapourized": "0.5-1.5",
            "_unit": "hours"
        },
        "formatted_effects": [
            "Euphoria",
            "empathy",
            "insight",
            "brightened colour",
            "Closed/Open eye visuals",
            "enhanced tactile sensation",
            "mental/physical stimulation",
            "decreased appetite",
            "pupil dilation",
            "restlessness",
            "change in perception",
            "ego softening",
            "sweating/chills",
            "muscle tension",
            "confusion",
            "insomnia",
            ""
        ],
        "formatted_onset": {
            "Insufflated": "5-15",
            "Oral": "5-30",
            "Vapourized": "1-5",
            "_unit": "minutes"
        },
        "name": "5-meo-malt",
        "pretty_name": "5-MeO-MALT",
        "properties": {
            "categories": [
                "psychedelic",
                "research-chemical"
            ],
            "dose": "Oral Light: 15-25mg Common: 25-50mg Strong: 50mg+ | Insufflated Light: 5-10mg Common: 10-20mg Strong: 20mg+ | Vapourized Light: 5-10mg Common: 10-15mg Strong: 15-20mg | Note: Due to the massive amount of reports not correlating to the others please start very low and titrate up.",
            "duration": "Oral: 2-4 hours. | Insufflated: 1-3 hours. | Vapourized: 0.5-1.5 hours.",
            "effects": "Euphoria, empathy, insight, brightened colour, Closed/Open eye visuals, enhanced tactile sensation, mental/physical stimulation, decreased appetite, pupil dilation, restlessness, change in perception, ego softening, sweating/chills, muscle tension, confusion, insomnia.",
            "onset": "Oral: 5-30 minutes. | Insufflated: 5-15 minutes. | Vapourized: 1-5 minutes.",
            "summary": "A new and uncommon psychedelic tryptamine related to 5-MeO-DALT. Little is known about it, but its effects are probably similar to other psychedelic tryptamines."
        }
    },
    "5-meo-met": {
        "categories": [
            "psychedelic",
            "research-chemical"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-2"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "15-25mg",
                "Light": "13-15mg",
                "Strong": "25mg+"
            },
            "Vapourized": {
                "Common": "5-8mg",
                "Light": "1-5mg",
                "Strong": "8-12mg+"
            }
        },
        "formatted_duration": {
            "Oral": "2-3",
            "_unit": "hours"
        },
        "formatted_effects": [
            "Euphoria",
            "empathy",
            "insight",
            "brightened colour",
            "Closed/Open eye visuals",
            "enhanced tactile sensation",
            "mental/physical stimulation",
            "decreased appetite",
            "pupil dilation",
            "restlessness",
            "change in perception",
            "ego softening",
            "sweating/chills",
            "muscle tension",
            "confusion",
            "insomnia",
            ""
        ],
        "formatted_onset": {
            "Oral": "10-45",
            "Vapourized": "1-5",
            "_unit": "minutes"
        },
        "name": "5-meo-met",
        "pretty_name": "5-MeO-MET",
        "properties": {
            "after-effects": "1-2 hours.",
            "categories": [
                "psychedelic",
                "research-chemical"
            ],
            "dose": "Oral Threshold 5-7mg Light: 13-15mg Common: 15-25mg Strong: 25mg+ | Vapourized Threshold: ~1mg Light: 1-5mg Common: 5-8mg Strong: 8-12mg+",
            "duration": "Oral: 2-3 hours. Vapourized 60-90 minutes.",
            "effects": "Euphoria, empathy, insight, brightened colour, Closed/Open eye visuals, enhanced tactile sensation, mental/physical stimulation, decreased appetite, pupil dilation, restlessness, change in perception, ego softening, sweating/chills, muscle tension, confusion, insomnia.",
            "onset": "Oral: 10-45 minutes. | Vapourized: 1-5 minutes.",
            "summary": "An obscure psychedelic drug similar in structure to 5-MeO-DMT. Possibly first synthesised by Alexander Shulgin. Likely to have similar effects to other tryptamine psychedelics."
        }
    },
    "5-meo-mipt": {
        "aliases": [
            "5meomipt",
            "moxy",
            "5meo-mipt"
        ],
        "categories": [
            "psychedelic",
            "research-chemical",
            "empathogen",
            "common"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "2-10"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "4-8mg",
                "Light": "1-3mg",
                "Strong": "8-12mg+.",
                "Threshold": "0.5mg-1mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "3-7"
        },
        "formatted_effects": [
            "Euphoria",
            "empathy",
            "insight",
            "brightened colour",
            "Closed/Open eye visuals",
            "enhanced tactile sensation",
            "mental/physical stimulation",
            "decreased appetite",
            "pupil dilation",
            "restlessness",
            "change in perception",
            "ego softening",
            "sweating/chills",
            "muscle tension",
            "confusion",
            "insomnia",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "30"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_5MeOMIPT.shtml",
            "tihkal": "https://www.erowid.org/library/books_online/tihkal/tihkal40.shtml"
        },
        "name": "5-meo-mipt",
        "pretty_name": "5-MeO-MiPT",
        "properties": {
            "after-effects": "2-10 hours",
            "aliases": [
                "5meomipt",
                "moxy",
                "5meo-mipt"
            ],
            "categories": [
                "psychedelic",
                "research-chemical",
                "empathogen",
                "common"
            ],
            "dose": "Threshold: 0.5mg-1mg Light: 1-3mg Common: 4-8mg Strong: 8-12mg+.",
            "duration": "3-7 hours.",
            "effects": "Euphoria, empathy, insight, brightened colour, Closed/Open eye visuals, enhanced tactile sensation, mental/physical stimulation, decreased appetite, pupil dilation, restlessness, change in perception, ego softening, sweating/chills, muscle tension, confusion, insomnia.",
            "onset": "<30 minutes.",
            "summary": "A potent, stimulating psychedelic tryptamine, sometimes compared to 5-MeO-DiPT.  Has an unusually strong body component and weak visual effects. Often said to be very empathogenic."
        },
        "pweffects": {
            "8B Geometry - Exposure to inner mechanics of consciousness": "https://psychonautwiki.org/wiki/8B_Geometry_-_Exposure_to_inner_mechanics_of_consciousness",
            "Acuity enhancement": "https://psychonautwiki.org/wiki/Acuity_enhancement",
            "After images": "https://psychonautwiki.org/wiki/After_images",
            "Analysis enhancement": "https://psychonautwiki.org/wiki/Analysis_enhancement",
            "Auditory distortion": "https://psychonautwiki.org/wiki/Auditory_distortion",
            "Auditory enhancement": "https://psychonautwiki.org/wiki/Auditory_enhancement",
            "Auditory hallucinations": "https://psychonautwiki.org/wiki/Auditory_hallucinations",
            "Autonomous entities": "https://psychonautwiki.org/wiki/Autonomous_entities",
            "Colour enhancement": "https://psychonautwiki.org/wiki/Colour_enhancement",
            "Colour shifting": "https://psychonautwiki.org/wiki/Colour_shifting",
            "Conceptual thinking": "https://psychonautwiki.org/wiki/Conceptual_thinking",
            "Depersonalization": "https://psychonautwiki.org/wiki/Depersonalization",
            "Drifting": "https://psychonautwiki.org/wiki/Drifting",
            "Emotion enhancement": "https://psychonautwiki.org/wiki/Emotion_enhancement",
            "Empathy, love, and sociability enhancement": "https://psychonautwiki.org/wiki/Empathy,_love,_and_sociability_enhancement",
            "Geometry": "https://psychonautwiki.org/wiki/Geometry",
            "Headaches": "https://psychonautwiki.org/wiki/Headaches",
            "Increased heart rate": "https://psychonautwiki.org/wiki/Increased_heart_rate",
            "Increased libido": "https://psychonautwiki.org/wiki/Increased_libido",
            "Internal hallucinations": "https://psychonautwiki.org/wiki/Internal_hallucinations",
            "Memory suppression": "https://psychonautwiki.org/wiki/Memory_suppression",
            "Nausea": "https://psychonautwiki.org/wiki/Nausea",
            "Novelty enhancement": "https://psychonautwiki.org/wiki/Novelty_enhancement",
            "Pattern recognition enhancement": "https://psychonautwiki.org/wiki/Pattern_recognition_enhancement",
            "Personal bias suppression": "https://psychonautwiki.org/wiki/Personal_bias_suppression",
            "Perspective alterations": "https://psychonautwiki.org/wiki/Perspective_alterations",
            "Pupil dilation": "https://psychonautwiki.org/wiki/Pupil_dilation",
            "Scenarios and plots": "https://psychonautwiki.org/wiki/Scenarios_and_plots",
            "Scenery slicing": "https://psychonautwiki.org/wiki/Scenery_slicing",
            "Sedation": "https://psychonautwiki.org/wiki/Sedation",
            "Settings, sceneries, and landscapes": "https://psychonautwiki.org/wiki/Settings,_sceneries,_and_landscapes",
            "Spontaneous tactile sensations": "https://psychonautwiki.org/wiki/Spontaneous_tactile_sensations",
            "Stimulation": "https://psychonautwiki.org/wiki/Stimulation",
            "Stomach bloating": "https://psychonautwiki.org/wiki/Stomach_bloating",
            "Symmetrical texture repetition": "https://psychonautwiki.org/wiki/Symmetrical_texture_repetition",
            "Thought acceleration": "https://psychonautwiki.org/wiki/Thought_acceleration",
            "Thought connectivity": "https://psychonautwiki.org/wiki/Thought_connectivity",
            "Time distortion": "https://psychonautwiki.org/wiki/Time_distortion",
            "Tracers": "https://psychonautwiki.org/wiki/Tracers",
            "Transformations": "https://psychonautwiki.org/wiki/Transformations",
            "Vasoconstriction": "https://psychonautwiki.org/wiki/Vasoconstriction",
            "Wakefulness": "https://psychonautwiki.org/wiki/Wakefulness"
        }
    },
    "5-meo-nipt": {
        "aliases": [
            "5meonipt"
        ],
        "categories": [
            "psychedelic",
            "tentative",
            "research-chemical"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-16"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "8-15mg",
                "Strong": "15-25mg",
                "Threshold": "2-4mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "4-6"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "30-60"
        },
        "name": "5-meo-nipt",
        "pretty_name": "5-MeO-NIPT",
        "properties": {
            "after-effects": "1-16 hours.",
            "aliases": [
                "5meonipt"
            ],
            "categories": [
                "psychedelic",
                "tentative",
                "research-chemical"
            ],
            "dose": "Threshold: 2-4mg Common: 4-8mg Common: 8-15mg Strong: 15-25mg",
            "duration": "4-6 hours.",
            "onset": "30-60 minutes.",
            "summary": "A little known and little studied tryptamine and analogue of NiPT, also related to DiPT and DET. Psychedelic, that is generally regarded as not worth the time."
        }
    },
    "5-meo-pyr-t": {
        "categories": [
            "tentative",
            "research-chemical",
            "psychedelic"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-36"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "1-1.5mg",
                "Light": "0.5-1mg",
                "Strong": "1.5-2mg"
            },
            "Vapourised": {
                "Common": "1.5-2mg",
                "Light": "0.5-1.5mg",
                "Strong": "2-3mg"
            }
        },
        "formatted_duration": {
            "Oral": "2-6",
            "Vapourised": "1-5",
            "_unit": "hours"
        },
        "formatted_onset": {
            "Oral": "5-20",
            "Vapourised": "1-2",
            "_unit": "minutes"
        },
        "name": "5-meo-pyr-t",
        "pretty_name": "5-MeO-PYR-T",
        "properties": {
            "after-effects": "1-36 hours.",
            "categories": [
                "tentative",
                "research-chemical",
                "psychedelic"
            ],
            "dose": "Oral Light: 0.5-1mg Common: 1-1.5mg Strong: 1.5-2mg's. | Vapourised Light: 0.5-1.5mg Common: 1.5-2mg Strong: 2-3mg's.",
            "duration": "Oral: 2-6 hours. | Vapourised: 1-5 hours.",
            "note": "Please have a tripsitter with you in person if you do indeed to consume this substance. Some may feel better the next morning and feel fine, and in some accounts, week plus until all the residual effects wore off. Be extremely cautious with this substance.",
            "onset": "Oral: 5-20 minutes. | Vapourised: 1-2 minutes.",
            "summary": "A very odd acting tryptamine, that is very potent. With doses as low as 3mg vapourised causing complete blocks of memory loss."
        }
    },
    "5-methyl-bk-mdea": {
        "aliases": [
            "5-methyl-ethylone",
            "5-me"
        ],
        "categories": [
            "stimulant",
            "research-chemical"
        ],
        "formatted_dose": {
            "Insufflated": {
                "Common": "60-150mg",
                "Light": "30-60mg",
                "Strong": "150-300mg+"
            },
            "Oral": {
                "Common": "100-250mg",
                "Light": "50-100mg",
                "Strong": "250-400mg+"
            }
        },
        "formatted_duration": {
            "Insufflated": "2-3",
            "Oral": "2-4",
            "_unit": "hours"
        },
        "formatted_effects": [
            "Euphoria",
            "increased energy/alertness",
            "Decreased need for sleep",
            "Increased sociability",
            "mood lift",
            "increase sexuality",
            "Excessive talking",
            "Decreased appetite",
            "Weight loss",
            "Sweating",
            "Distrubed sleep patterns",
            "Bruxia",
            "Visual and audiotory hallucinations itchiness",
            "agressiveness",
            "moodiness",
            ""
        ],
        "formatted_onset": {
            "Oral": "20-40",
            "_unit": "minutes"
        },
        "name": "5-methyl-bk-mdea",
        "pretty_name": "5-Methylethylone",
        "properties": {
            "aliases": [
                "5-methyl-ethylone",
                "5-me"
            ],
            "categories": [
                "stimulant",
                "research-chemical"
            ],
            "dose": "Oral Light: 50-100mg Common: 100-250mg Strong: 250-400mg+ | Insufflated Light: 30-60mg Common: 60-150mg Strong: 150-300mg+",
            "duration": "Oral: 2-4 hours. | Insufflated: 2-3 hours.",
            "effects": "Euphoria, increased energy/alertness, Decreased need for sleep, Increased sociability, mood lift, increase sexuality, Excessive talking, Decreased appetite, Weight loss, Sweating, Distrubed sleep patterns, Bruxia, Visual and audiotory hallucinations itchiness, agressiveness, moodiness.",
            "onset": "Oral: 20-40 minutes.",
            "summary": "Also known as 5-methyl ethylone or 5-ME, this is a cathinone drug and analogue of ethylone. Little is known about this obscure compound but it is reasonable to assume it has an effect profile similar to other stimulants of the cathionone class, with a slightly higher potency than ethylone. Potentially entactogenic and a monoamine releasing agent."
        }
    },
    "5-ppdi": {
        "categories": [
            "stimulant",
            "research-chemical",
            "habit-forming",
            "tentative"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "3-6"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "30-50mg",
                "Heavy": "70+mg.",
                "Light": "15-30mg",
                "Strong": "50-70mg"
            }
        },
        "formatted_duration": {
            "Oral": "3-6",
            "_unit": "hours"
        },
        "formatted_effects": [
            "Euphoria",
            "increased energy/alertness",
            "Decreased need for sleep",
            "Increased sociability",
            "mood lift",
            "increase sexuality",
            "Excessive talking",
            "Decreased appetite",
            "Weight loss",
            "Sweating",
            "Distrubed sleep patterns",
            "Bruxia",
            "Visual and audiotory hallucinations itchiness",
            "agressiveness",
            "moodiness",
            ""
        ],
        "formatted_onset": {
            "Oral": "10-30",
            "_unit": "minutes"
        },
        "name": "5-ppdi",
        "pretty_name": "5-PPDI",
        "properties": {
            "after-effects": "3-6 hours.",
            "categories": [
                "stimulant",
                "research-chemical",
                "habit-forming",
                "tentative"
            ],
            "dose": "Light: 15-30mg Common: 30-50mg Strong: 50-70mg Heavy: 70+mg.",
            "duration": "Oral: 3-6 hours. Insufflated 1-4 hours.",
            "onset": "Oral: 10-30 minutes. Insufflated 5-10 minutes.",
            "summary": "An obscure analogue of \u03b1-PBP, which is itself an analogue of \u03b1-PVP. This rare compound has little history of human usage. Some trip reports suggest it is inactive. If it is active it likely has a similar effect profile to other pyrovalerone stimulants."
        }
    },
    "5f-akb48": {
        "aliases": [
            "5f-apinaca",
            "5fapinaca",
            "5fakb48"
        ],
        "categories": [
            "research-chemical",
            "tentative",
            "habit-forming"
        ],
        "formatted_aftereffects": {
            "Vapourized": "15-45",
            "_unit": "minutes"
        },
        "formatted_dose": {
            "Vapourized": {
                "Light": "500-1000ug",
                "Strong": "1000-2500ug.",
                "Threshold": "500ug"
            }
        },
        "formatted_duration": {
            "Vapourized": "30-60",
            "_unit": "minutes"
        },
        "formatted_onset": {
            "Vapourized": "5-30"
        },
        "name": "5f-akb48",
        "pretty_name": "5F-AKB48",
        "properties": {
            "after-effects": "Vapourized: 15-45 minutes.",
            "aliases": [
                "5f-apinaca",
                "5fapinaca",
                "5fakb48"
            ],
            "categories": [
                "research-chemical",
                "tentative",
                "habit-forming"
            ],
            "dose": "Vapourized Threshold: 500ug Light: 500-1000ug Strong: 1000-2500ug.",
            "duration": "Vapourized: 30-60 minutes.",
            "onset": "Vapourized: 5-30 seconds.",
            "summary": "A synthetic cannabanoid that is a Indazole. Produces subjective effects somehwat similar to that of Cannabis, yet with a very short duration. Analogue of STS-135, in which the core indole structure is subbed with an indazole base."
        }
    },
    "5f-pb-22": {
        "categories": [
            "tentative",
            "research-chemical",
            "habit-forming"
        ],
        "dose_note": " Note: As with all research chemicals, start with a low dose, and work your way up.",
        "formatted_aftereffects": {
            "_unit": "minutes",
            "value": "30-60"
        },
        "formatted_dose": {
            "Threshold:": {
                "Common": "3-5mg",
                "Light": "1-3mg",
                "Strong": "5-8mg.",
                "Threshold": "1mg"
            }
        },
        "formatted_duration": {
            "_unit": "minutes",
            "value": "60-90"
        },
        "formatted_onset": {
            "value": "5-10"
        },
        "name": "5f-pb-22",
        "pretty_name": "5F-PB-22",
        "properties": {
            "after-effects": "30-60 minutes.",
            "categories": [
                "tentative",
                "research-chemical",
                "habit-forming"
            ],
            "dose": "Threshold: 1mg Light: 1-3mg Common: 3-5mg Strong: 5-8mg. | Note: As with all research chemicals, start with a low dose, and work your way up.",
            "duration": "60-90 minutes.",
            "onset": "5-10 seconds.",
            "summary": "Synthetic cannabinoid, agonist of the cannabinoid receptors which has a strong sedating aspect. Being a synthetic cannabinoid it has a very fast onset."
        }
    },
    "6-apb": {
        "aliases": [
            "6apb"
        ],
        "categories": [
            "stimulant",
            "psychedelic",
            "research-chemical",
            "empathogen",
            "habit-forming"
        ],
        "dose_note": " NOTE: Do not exceed 200mg in a night",
        "formatted_aftereffects": {
            "value": "6-apb"
        },
        "formatted_dose": {
            "Light:": {
                "Common": "75-125mg",
                "Heavy": "125mg+",
                "Light": "50-75mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "8-14"
        },
        "formatted_effects": [
            "Feelings of empathy",
            "euphoria",
            "and a general sense of well being",
            "Light to moderate visuals are also reported with most users",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "45-90"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_6APB.shtml"
        },
        "name": "6-apb",
        "pretty_name": "6-APB",
        "properties": {
            "after-effects": "6-apb is reported to have a 'hangover' similar to MDMA.",
            "aliases": [
                "6apb"
            ],
            "categories": [
                "stimulant",
                "psychedelic",
                "research-chemical",
                "empathogen",
                "habit-forming"
            ],
            "dose": "Light: 50-75mg Common: 75-125mg Heavy: 125mg+ | NOTE: Do not exceed 200mg in a night",
            "duration": "8-14 hours",
            "effects": "Feelings of empathy, euphoria, and a general sense of well being. Light to moderate visuals are also reported with most users.",
            "onset": "45-90 minutes.",
            "summary": "A stimulant, empathogen and analog of MDA. Typically more visual than MDMA or MDA, as well as having a much longer onset and duration. Users often report a slightly more psychedelic headspace as well. Commonly sold as an alternative to MDMA and MDA."
        }
    },
    "6-apdb": {
        "aliases": [
            "4-desoxy-mda"
        ],
        "categories": [
            "stimulant",
            "psychedelic",
            "research-chemical",
            "empathogen",
            "habit-forming"
        ],
        "formatted_aftereffects": {
            "value": "Some"
        },
        "formatted_dose": {
            "Oral": {
                "Heavy": "75-100+mg",
                "Low": "30-40mg",
                "Medium": "40-75mg",
                "Threshold": "25-30mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "7-9"
        },
        "formatted_effects": [
            "Euphoria",
            "increased energy/alertness",
            "Decreased need for sleep",
            "Increased sociability",
            "mood lift",
            "increase sexuality",
            "Excessive talking",
            "Decreased appetite",
            "Weight loss",
            "Sweating",
            "Distrubed sleep patterns",
            "Bruxia",
            "Visual and audiotory hallucinations itchiness",
            "agressiveness",
            "moodiness",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "60-90"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_6APDB.shtml"
        },
        "name": "6-apdb",
        "pretty_name": "6-APDB",
        "properties": {
            "after-effects": "Some users report feeling drained the next day lasting a few days. Varies person to person.",
            "aliases": [
                "4-desoxy-mda"
            ],
            "categories": [
                "stimulant",
                "psychedelic",
                "research-chemical",
                "empathogen",
                "habit-forming"
            ],
            "dose": "Oral Threshold: 25-30mg Low: 30-40mg Medium: 40-75mg Heavy: 75-100+mg",
            "duration": "7-9 hours, up to 12 reported",
            "effects": "Euphoria, increased energy/alertness, Decreased need for sleep, Increased sociability, mood lift, increase sexuality, Excessive talking, Decreased appetite, Weight loss, Sweating, Distrubed sleep patterns, Bruxia, Visual and audiotory hallucinations itchiness, agressiveness, moodiness.",
            "onset": "60-90 minutes.",
            "summary": "A stimulant and entactogen related to MDMA and an analogue of MDA. Reported as being fairly psychedlic at higher doses. It is a triple monoamine reuptake inhibitor. Potent full agonist of serotonin 2B receptors."
        }
    },
    "6-eapb": {
        "categories": [
            "stimulant",
            "psychedelic",
            "research-chemical",
            "empathogen",
            "habit-forming"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-10"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "75-100mg",
                "Light": "50-75mg",
                "Strong": "100-150mg+"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "4-7"
        },
        "formatted_effects": [
            "Euphoria",
            "increased energy/alertness",
            "Decreased need for sleep",
            "Increased sociability",
            "mood lift",
            "increase sexuality",
            "Excessive talking",
            "Decreased appetite",
            "Weight loss",
            "Sweating",
            "Distrubed sleep patterns",
            "Bruxia",
            "Visual and audiotory hallucinations itchiness",
            "agressiveness",
            "moodiness",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "20-40"
        },
        "name": "6-eapb",
        "pretty_name": "6-EAPB",
        "properties": {
            "after-effects": "1-10 hours.",
            "categories": [
                "stimulant",
                "psychedelic",
                "research-chemical",
                "empathogen",
                "habit-forming"
            ],
            "dose": "Light: 50-75mg Common: 75-100mg Strong: 100-150mg+",
            "duration": "4-7~ hours.",
            "effects": "Euphoria, increased energy/alertness, Decreased need for sleep, Increased sociability, mood lift, increase sexuality, Excessive talking, Decreased appetite, Weight loss, Sweating, Distrubed sleep patterns, Bruxia, Visual and audiotory hallucinations itchiness, agressiveness, moodiness.",
            "onset": "20-40 minutes.",
            "summary": "A rare entactogen benzofuran structurally related to MDMA and 6-APB, though weaker in effects. the pharmacology of this compound is unclear. Likely to be a monoamine releaser, monoamine reuptake inhibitor or both."
        }
    },
    "6-mapb": {
        "categories": [
            "stimulant",
            "psychedelic",
            "research-chemical",
            "empathogen",
            "habit-forming"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "2-4"
        },
        "formatted_dose": {
            "Insufflated": {
                "Common": "20-40mg",
                "Light": "10-20mg",
                "Strong": "40-100mg+"
            },
            "Oral": {
                "Common": "40-80mg",
                "Light": "20-40mg",
                "Strong": "80-100mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "5-10"
        },
        "formatted_effects": [
            "Euphoria",
            "increased energy/alertness",
            "Decreased need for sleep",
            "Increased sociability",
            "mood lift",
            "increase sexuality",
            "Excessive talking",
            "Decreased appetite",
            "Weight loss",
            "Sweating",
            "Distrubed sleep patterns",
            "Bruxia",
            "Visual and audiotory hallucinations itchiness",
            "agressiveness",
            "moodiness",
            ""
        ],
        "formatted_onset": {
            "Insufflated": "Within",
            "Orally": "Within",
            "_unit": "minutes"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_6MAPB.shtml"
        },
        "name": "6-mapb",
        "pretty_name": "6-MAPB",
        "properties": {
            "after-effects": "2-4 hours.",
            "categories": [
                "stimulant",
                "psychedelic",
                "research-chemical",
                "empathogen",
                "habit-forming"
            ],
            "dose": "Oral Light: 20-40mg Common: 40-80mg Strong: 80-100mg | Insufflated Light: 10-20mg Common: 20-40mg Strong: 40-100mg+",
            "duration": "5-10 hours. Dependant on dose.",
            "effects": "Euphoria, increased energy/alertness, Decreased need for sleep, Increased sociability, mood lift, increase sexuality, Excessive talking, Decreased appetite, Weight loss, Sweating, Distrubed sleep patterns, Bruxia, Visual and audiotory hallucinations itchiness, agressiveness, moodiness.",
            "onset": "Orally: Within an hour. | Insufflated: Within 15 minutes.",
            "summary": "Empathogen drug that is structurally related to 6-APB and MDMA."
        }
    },
    "6-mddm": {
        "aliases": [
            "6-methylenedihydrodesoxymorphine"
        ],
        "categories": [
            "opioid",
            "habit-forming",
            "tentative",
            "depressant"
        ],
        "dose_note": " NOTE: These dosages are based off the potency and converted to what we have with Morphine's dose. Further research is required.",
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-10"
        },
        "formatted_dose": {
            "Light:": {
                "Common": "187-250ug",
                "Light": "125ug",
                "Strong": "375ug+"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "4-6"
        },
        "formatted_effects": [
            "Euphoria",
            "Dry Mouth",
            "Mood lift",
            "Itchiness",
            "Relaxant",
            "Constipation",
            "Pupil constriction",
            "Analgesia",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "1-15"
        },
        "name": "6-mddm",
        "pretty_name": "6-MDDM",
        "properties": {
            "after-effects": "1-10 hours.",
            "aliases": [
                "6-methylenedihydrodesoxymorphine"
            ],
            "avoid": "All other CNS depressants.",
            "categories": [
                "opioid",
                "habit-forming",
                "tentative",
                "depressant"
            ],
            "dose": "Light: 125ug Common: 187-250ug Strong: 375ug+ | NOTE: These dosages are based off the potency and converted to what we have with Morphine's dose. Further research is required.",
            "duration": "4-6 hours.",
            "effects": "Euphoria, Dry Mouth, Mood lift, Itchiness, Relaxant, Constipation, Pupil constriction, Analgesia.",
            "onset": "1-15 minutes.",
            "summary": "Semisynthetic opioid that is a derivative of Hydromorphone with little history of human use. Roughly around ~80x the potency of Morphine. Structurally related to Desomorphine."
        }
    },
    "a-pihp": {
        "aliases": [
            "pihp"
        ],
        "categories": [
            "stimulant",
            "empathogen",
            "habit-forming",
            "research-chemical",
            "tentative"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "6-12"
        },
        "formatted_dose": {
            "Insufflated": {
                "Common": "10-25mg",
                "Light": "3-10mg",
                "Strong": "25-40mg",
                "Threshold": "1-3mg"
            },
            "Oral": {
                "Common": "15-30mg",
                "Light": "5-15mg",
                "Strong": "30-50mg",
                "Threshold": "3-5mg"
            },
            "Vapourized": {
                "Common": "10-20mg",
                "Light": "2-10mg",
                "Strong": "20-30mg.",
                "Threshold": "1-2mg"
            }
        },
        "formatted_duration": {
            "Insufflated": "2-4",
            "Oral": "2-5",
            "Vapourized": "1-3",
            "_unit": "hours"
        },
        "formatted_onset": {
            "Insufflated": "1-2",
            "Oral": "30-60",
            "Vapourized": "1",
            "_unit": "minutes"
        },
        "name": "a-pihp",
        "pretty_name": "A-PIHP",
        "properties": {
            "after-effects": "6-12 hours.",
            "aliases": [
                "pihp"
            ],
            "avoid": "Other stimulants, pretty much everything that can raise your blood pressure.",
            "categories": [
                "stimulant",
                "empathogen",
                "habit-forming",
                "research-chemical",
                "tentative"
            ],
            "dose": "Oral Threshold: 3-5mg Light: 5-15mg Common: 15-30mg Strong: 30-50mg | Insufflated Threshold: 1-3mg Light: 3-10mg Common: 10-25mg Strong: 25-40mg | Vapourized Threshold: 1-2mg Light: 2-10mg Common: 10-20mg Strong: 20-30mg.",
            "duration": "Oral: 2-5 hours | Insufflated: 2-4 hours. | Vapourized: 1-3 hours.",
            "onset": "Oral: 30-60 minutes. | Insufflated: 1-2 minutes. | Vapourized: 1 minute.",
            "summary": "Quite new Pyrrolidine based stimulant of the cathinone class. Not very many reports. Probably has a very fast tolerance raise, and lack of effects over time."
        }
    },
    "a-pvp": {
        "aliases": [
            "alpha-pvp",
            "apvp",
            "alpha-Pyrrolidinopentiophenone",
            "flocka",
            "flakka",
            "\u03b1-pvp",
            "\u03b1pvp"
        ],
        "categories": [
            "stimulant",
            "research-chemical",
            "habit-forming"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-48"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "10-25mg",
                "Heavy": "25-50mg+",
                "Light": "5-10mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "2-5"
        },
        "formatted_effects": [
            "Euphoria",
            "increased energy/alertness",
            "Decreased need for sleep",
            "Increased sociability",
            "mood lift",
            "increase sexuality",
            "Excessive talking",
            "Decreased appetite",
            "Weight loss",
            "Sweating",
            "Distrubed sleep patterns",
            "Bruxia",
            "Visual and audiotory hallucinations itchiness",
            "agressiveness",
            "moodiness",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "5-15"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_aPVP.shtml"
        },
        "name": "a-pvp",
        "pretty_name": "\u03b1-PVP",
        "properties": {
            "after-effects": "1-48 hours.",
            "aliases": [
                "alpha-pvp",
                "apvp",
                "alpha-Pyrrolidinopentiophenone",
                "flocka",
                "flakka",
                "\u03b1-pvp",
                "\u03b1pvp"
            ],
            "categories": [
                "stimulant",
                "research-chemical",
                "habit-forming"
            ],
            "dose": "Light: 5-10mg Common: 10-25mg Heavy: 25-50mg+",
            "duration": "2-5 hours.",
            "effects": "Euphoria, increased energy/alertness, Decreased need for sleep, Increased sociability, mood lift, increase sexuality, Excessive talking, Decreased appetite, Weight loss, Sweating, Distrubed sleep patterns, Bruxia, Visual and audiotory hallucinations itchiness, agressiveness, moodiness.",
            "onset": "5-15 minutes.",
            "summary": "A potent, short-lasting pyrovalerone-type stimulant which became popular despite often being said to not be particularly euphoric, perhaps due to its propensity to cause compulsive redosing. Effects should be similar to MDPV."
        },
        "pweffects": {
            "Acuity suppression": "https://psychonautwiki.org/wiki/Acuity_suppression",
            "Analysis enhancement": "https://psychonautwiki.org/wiki/Analysis_enhancement",
            "Anxiety": "https://psychonautwiki.org/wiki/Anxiety",
            "Appetite suppression": "https://psychonautwiki.org/wiki/Appetite_suppression",
            "Cognitive euphoria": "https://psychonautwiki.org/wiki/Cognitive_euphoria",
            "Cognitive fatigue": "https://psychonautwiki.org/wiki/Cognitive_fatigue",
            "Compulsive redosing": "https://psychonautwiki.org/wiki/Compulsive_redosing",
            "Dehydration": "https://psychonautwiki.org/wiki/Dehydration",
            "Depression": "https://psychonautwiki.org/wiki/Depression",
            "Difficulty urinating": "https://psychonautwiki.org/wiki/Difficulty_urinating",
            "Disinhibition": "https://psychonautwiki.org/wiki/Disinhibition",
            "Ego inflation": "https://psychonautwiki.org/wiki/Ego_inflation",
            "Focus enhancement": "https://psychonautwiki.org/wiki/Focus_enhancement",
            "Immersion enhancement": "https://psychonautwiki.org/wiki/Immersion_enhancement",
            "Increased heart rate": "https://psychonautwiki.org/wiki/Increased_heart_rate",
            "Increased libido": "https://psychonautwiki.org/wiki/Increased_libido",
            "Increased perspiration": "https://psychonautwiki.org/wiki/Increased_perspiration",
            "Irritability": "https://psychonautwiki.org/wiki/Irritability",
            "Motivation enhancement": "https://psychonautwiki.org/wiki/Motivation_enhancement",
            "Spontaneous tactile sensations": "https://psychonautwiki.org/wiki/Spontaneous_tactile_sensations",
            "Stimulation": "https://psychonautwiki.org/wiki/Stimulation",
            "Tactile enhancement": "https://psychonautwiki.org/wiki/Tactile_enhancement",
            "Teeth grinding": "https://psychonautwiki.org/wiki/Teeth_grinding",
            "Thought acceleration": "https://psychonautwiki.org/wiki/Thought_acceleration",
            "Thought deceleration": "https://psychonautwiki.org/wiki/Thought_deceleration",
            "Time distortion": "https://psychonautwiki.org/wiki/Time_distortion",
            "Vasoconstriction": "https://psychonautwiki.org/wiki/Vasoconstriction",
            "Vibrating vision": "https://psychonautwiki.org/wiki/Vibrating_vision",
            "Wakefulness": "https://psychonautwiki.org/wiki/Wakefulness"
        }
    },
    "a-pvt": {
        "aliases": [
            "apvt"
        ],
        "categories": [
            "stimulant",
            "research-chemical",
            "habit-forming",
            "tentative"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-4"
        },
        "formatted_duration": {
            "Insufflated": "2-4",
            "Oral": "2-4",
            "Vapourized": "1-2",
            "_unit": "hours"
        },
        "formatted_onset": {
            "Insufflated": "1-10",
            "Oral": "10-30",
            "Vapourized": "1-2",
            "_unit": "minutes"
        },
        "name": "a-pvt",
        "pretty_name": "\u03b1-PVT",
        "properties": {
            "after-effects": "1-4 hours.",
            "aliases": [
                "apvt"
            ],
            "categories": [
                "stimulant",
                "research-chemical",
                "habit-forming",
                "tentative"
            ],
            "duration": "Oral 2-4 hours. | Insufflated 2-4 hours. | Vapourized 1-2 hours.",
            "onset": "Oral 10-30 minutes. | Insufflated 1-10 minutes. | Vapourized 1-2 minutes.",
            "summary": "A rare stimulant drug related to a-PVP, very uncommon. Probably less potent than a-PVP, however little data exists on this compound or its effects on humans."
        }
    },
    "ab-chminaca": {
        "categories": [
            "research-chemical",
            "habit-forming",
            "tentative"
        ],
        "formatted_aftereffects": {
            "Oral": "5-12",
            "Vapourized": "2-4",
            "_unit": "hours"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "100-250\u00b5g",
                "Heavy": "400\u00b5g+",
                "Light": "50-100\u00b5g",
                "Strong": "250-400\u00b5g"
            }
        },
        "formatted_duration": {
            "Oral": "5-12",
            "Vaporized": "1-2",
            "_unit": "hours"
        },
        "formatted_onset": {
            "Oral": "20-80",
            "Vaporized": "1-5",
            "_unit": "minutes"
        },
        "name": "ab-chminaca",
        "pretty_name": "AB-CHMINACA",
        "properties": {
            "after-effects": "Vapourized: 2-4 hours. | Oral: 5-12 hours.",
            "categories": [
                "research-chemical",
                "habit-forming",
                "tentative"
            ],
            "dose": "Light: 50-100\u00b5g Common: 100-250\u00b5g Strong: 250-400\u00b5g Heavy: 400\u00b5g+",
            "duration": "Vaporized: 1-2 hours | Oral: 5-12 hours",
            "onset": "Vaporized: 1-5 minutes | Oral: 20-80 minutes",
            "summary": "A synthetic cannabinoid related to AB-FUBINACA which has had some mild popularity. There have been reports of death in overdose, similar to AB-FUBINACA and it has a low threshold dose. Exercise caution."
        }
    },
    "ab-fubinaca": {
        "aliases": [
            "ab-fub"
        ],
        "categories": [
            "research-chemical",
            "habit-forming",
            "tentative",
            "common"
        ],
        "formatted_aftereffects": {
            "Oral": "2-10",
            "Vaporized": "1-2",
            "_unit": "hours"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "0.5-1.5mg",
                "Heavy": "3+mg",
                "Light": "0.25-0.5mg",
                "Strong": "1.5-3mg"
            },
            "Vaporized": {
                "Common": "0.5-1.5mg",
                "Heavy": "3+mg",
                "Light": "0.25-0.5mg",
                "Strong": "1.5-3mg"
            }
        },
        "formatted_duration": {
            "Oral": "5-15",
            "Vaporized": "1-2",
            "_unit": "hours"
        },
        "formatted_effects": [
            "Euphoric",
            "stimulating high",
            "increases creativity and appetite",
            "also short term memory deficits",
            "similar to Cannabis"
        ],
        "formatted_onset": {
            "Oral": "30-240",
            "Vaporized": "1-5",
            "_unit": "minutes"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_ABFUBINACA.shtml"
        },
        "name": "ab-fubinaca",
        "pretty_name": "AB-FUBINACA",
        "properties": {
            "after-effects": "Vaporized: 1-2 hours | Oral: 2-10 hours",
            "aliases": [
                "ab-fub"
            ],
            "categories": [
                "research-chemical",
                "habit-forming",
                "tentative",
                "common"
            ],
            "dose": "Vaporized Light: 0.25-0.5mg  Common: 0.5-1.5mg  Strong: 1.5-3mg  Heavy: 3+mg | Oral Light: 0.25-0.5mg  Common: 0.5-1.5mg  Strong: 1.5-3mg  Heavy: 3+mg",
            "duration": "Vaporized: 1-2 hours | Oral: 5-15 hours",
            "effects": "Euphoric, stimulating high, increases creativity and appetite, also short term memory deficits, similar to Cannabis",
            "onset": "Vaporized: 1-5 minutes | Oral: 30-240 minutes",
            "summary": "Arguably the most common synthetic cannabinoid, AB-FUBINACA was originally developed by Pfizer as an analgesic, but has since abandoned for medical use. It has since found a following in the RC community, however it's extremely high potency and inclusion in synthetic blends makes it dangerous, and it has killed in overdose. Exercise caution."
        }
    },
    "acetildenafil": {
        "categories": [
            "research-chemical"
        ],
        "formatted_dose": {
            "Oral": {
                "Common": "15-30mg",
                "Light": "5-15mg",
                "Strong": "30-40mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "3-7"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "10-45"
        },
        "name": "acetildenafil",
        "pretty_name": "Acetildenafil",
        "properties": {
            "categories": [
                "research-chemical"
            ],
            "dose": "Oral Light: 5-15mg's Common: 15-30mg's Strong: 30-40mg's.",
            "duration": "3-7 hours.",
            "onset": "10-45 minutes.",
            "summary": "An RC analogue of sildenafil (viagra) often missold as a hidden ingredient in many 'natural' sexual potency blends and supplements."
        }
    },
    "acetylfentanyl": {
        "aliases": [
            "acetyl-fentanyl",
            "a-f"
        ],
        "categories": [
            "opioid",
            "research-chemical",
            "habit-forming",
            "depressant"
        ],
        "dose_note": " NOTE: ~3.75mg Freebase = ~125ug Fentanyl IV = ~10mg Morphine IV'd.",
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-8"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "3-5mg",
                "Light": "1-3mg",
                "Strong": "5-7mg+"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "1-4"
        },
        "formatted_effects": [
            "Euphoria",
            "Dry Mouth",
            "Mood lift",
            "Itchiness",
            "Relaxant",
            "Constipation",
            "Pupil constriction",
            "Analgesia",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "5-20"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_Acetylfentanyl.shtml"
        },
        "name": "acetylfentanyl",
        "pretty_name": "Acetylfentanyl",
        "properties": {
            "after-effects": "1-8 hours.",
            "aliases": [
                "acetyl-fentanyl",
                "a-f"
            ],
            "categories": [
                "opioid",
                "research-chemical",
                "habit-forming",
                "depressant"
            ],
            "dose": "Oral Light: 2-4mg Common: 4-6mg Strong: 6-10mg+ Insufflated Light: 1-3mg Common: 3-5mg Strong: 5-7mg+ NOTE: ~3.75mg Freebase = ~125ug Fentanyl IV = ~10mg Morphine IV'd.",
            "duration": "1-4 hours.",
            "effects": "Euphoria, Dry Mouth, Mood lift, Itchiness, Relaxant, Constipation, Pupil constriction, Analgesia.",
            "onset": "5-20 minutes.",
            "summary": "Acetyl-Fentanyl is an opioid analgesic substance that is an analogue of Fentanyl. It's potency is roughly ~6.67 times that of Morphine. Making it ~15 times less potent than its parent compound Fentanyl."
        },
        "pweffects": {
            "Anxiety suppression": "https://psychonautwiki.org/wiki/Anxiety_suppression",
            "Cognitive euphoria": "https://psychonautwiki.org/wiki/Cognitive_euphoria",
            "Compulsive redosing": "https://psychonautwiki.org/wiki/Compulsive_redosing",
            "Constipation": "https://psychonautwiki.org/wiki/Constipation",
            "Cough suppression": "https://psychonautwiki.org/wiki/Cough_suppression",
            "Difficulty urinating": "https://psychonautwiki.org/wiki/Difficulty_urinating",
            "Itchiness": "https://psychonautwiki.org/wiki/Itchiness",
            "Pain relief": "https://psychonautwiki.org/wiki/Pain_relief",
            "Physical euphoria": "https://psychonautwiki.org/wiki/Physical_euphoria",
            "Pupil constriction": "https://psychonautwiki.org/wiki/Pupil_constriction",
            "Respiratory depression": "https://psychonautwiki.org/wiki/Respiratory_depression",
            "Sedation": "https://psychonautwiki.org/wiki/Sedation"
        },
        "sources": {
            "_general": [
                "Acetylfentanyl in extreme toxicity has caused Cerebral hemorrhage - http://www.tandfonline.com/doi/abs/10.3109/15563650.2016.1139715"
            ]
        }
    },
    "acryl-fentanyl": {
        "categories": [
            "opioid",
            "research-chemical",
            "habit-forming",
            "tentative",
            "depressant"
        ],
        "dose_note": " Note: Please exercise extreme caution with this substance.",
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-16"
        },
        "formatted_dose": {
            "Light:": {
                "Common": "12.5-25ug",
                "Light": "5-12.5ug",
                "Strong": "25.47.5ug+"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "3-5"
        },
        "formatted_effects": [
            "Euphoria",
            "Dry Mouth",
            "Mood lift",
            "Itchiness",
            "Relaxant",
            "Constipation",
            "Pupil constriction",
            "Analgesia",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "10-45"
        },
        "name": "acryl-fentanyl",
        "pretty_name": "Acrylfentanyl",
        "properties": {
            "after-effects": "1-16 hours.",
            "categories": [
                "opioid",
                "research-chemical",
                "habit-forming",
                "tentative",
                "depressant"
            ],
            "dose": "Light: 5-12.5ug Common: 12.5-25ug Strong: 25.47.5ug+ | Note: Please exercise extreme caution with this substance.",
            "duration": "3-5 hours.",
            "effects": "Euphoria, Dry Mouth, Mood lift, Itchiness, Relaxant, Constipation, Pupil constriction, Analgesia.",
            "onset": "10-45 minutes.",
            "summary": "A rare opioid and fentanyl analogue (not to be confused with acetyl-fentanyl), this drug is a powerful and potent analgesic. Little reliable information exists, even for basic usage such as dosage. Exercise extreme caution. Overdose may result in respiratory depression. Do not mix with depressants or stimulants. Potentially neurotoxic and carcinogenic."
        }
    },
    "adderall": {
        "aliases": [
            "aderal",
            "aderall",
            "adderal",
            "d-amphetamine",
            "d-amph"
        ],
        "categories": [
            "stimulant",
            "habit-forming",
            "common"
        ],
        "dose_note": " NOTE: Adderall XR is extended release. Effects take a while to begin, and last much longer",
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-24"
        },
        "formatted_dose": {
            "Insufflated": {
                "Common": "10-30mg",
                "Heavy": "50-80mg+",
                "Light": "5-10mg",
                "Strong": "30-50mg"
            },
            "Oral": {
                "Common": "15-40mg",
                "Heavy": "75-125mg+",
                "Light": "5-15mg",
                "Strong": "40-75mg"
            }
        },
        "formatted_duration": {
            "Insufflated": "2-5",
            "Oral-IR": "4-6",
            "Oral-XR": "6-12",
            "_unit": "hours"
        },
        "formatted_effects": [
            "Increased alertness",
            "Euphoria",
            "Increased motivation",
            "Reduced appetite",
            "Flushing of the face",
            "Increased body temperature",
            "Tachycardia (Incrased heart rate) Paranoia",
            "Insomnia",
            ""
        ],
        "formatted_onset": {
            "Insufflated-IR": "0-10",
            "Insufflated-XR": "10-45",
            "Oral-IR": "10-30",
            "Oral-XR": "20-60",
            "_unit": "minutes"
        },
        "name": "adderall",
        "pretty_name": "Adderall",
        "properties": {
            "after-effects": "1-24 hours.",
            "aliases": [
                "aderal",
                "aderall",
                "adderal",
                "d-amphetamine",
                "d-amph"
            ],
            "categories": [
                "stimulant",
                "habit-forming",
                "common"
            ],
            "dose": "Oral Light: 5-15mg Common: 15-40mg Strong: 40-75mg Heavy: 75-125mg+ | Insufflated Light: 5-10mg Common: 10-30mg Strong: 30-50mg Heavy: 50-80mg+ | NOTE: Adderall XR is extended release. Effects take a while to begin, and last much longer",
            "duration": "Oral-IR: 4-6 hours. | Oral-XR: 6-12 hours. | Insufflated: 2-5 hours. | Note: Highly dependant on dose.",
            "effects": "Increased alertness, Euphoria, Increased motivation, Reduced appetite, Flushing of the face, Increased body temperature, Tachycardia (Incrased heart rate) Paranoia, Insomnia.",
            "onset": "Oral-IR: 10-30 minutes | Oral-XR: 20-60 minutes | Insufflated-XR: 10-45 minutes | Insufflated-IR: 0-10 minutes",
            "summary": "A mixture of 75% dextroamphetamine and 25% levoamphetamine. Commonly used to treat obesity, narcolepsy and ADHD. It is also used widely either as a recreational stimulant or study-aid, particularly in the USA where it is frequently prescribed."
        },
        "pweffects": {
            "Abnormal heartbeat": "https://psychonautwiki.org/wiki/Abnormal_heartbeat",
            "Analysis enhancement": "https://psychonautwiki.org/wiki/Analysis_enhancement",
            "Anxiety": "https://psychonautwiki.org/wiki/Anxiety",
            "Appetite suppression": "https://psychonautwiki.org/wiki/Appetite_suppression",
            "Bronchodilation": "https://psychonautwiki.org/wiki/Bronchodilation",
            "Cognitive euphoria": "https://psychonautwiki.org/wiki/Cognitive_euphoria",
            "Cognitive fatigue": "https://psychonautwiki.org/wiki/Cognitive_fatigue",
            "Compulsive redosing": "https://psychonautwiki.org/wiki/Compulsive_redosing",
            "Dehydration": "https://psychonautwiki.org/wiki/Dehydration",
            "Depression": "https://psychonautwiki.org/wiki/Depression",
            "Focus enhancement": "https://psychonautwiki.org/wiki/Focus_enhancement",
            "Frequent urination": "https://psychonautwiki.org/wiki/Frequent_urination",
            "Increased blood pressure": "https://psychonautwiki.org/wiki/Increased_blood_pressure",
            "Increased heart rate": "https://psychonautwiki.org/wiki/Increased_heart_rate",
            "Increased libido": "https://psychonautwiki.org/wiki/Increased_libido",
            "Increased perspiration": "https://psychonautwiki.org/wiki/Increased_perspiration",
            "Irritability": "https://psychonautwiki.org/wiki/Irritability",
            "Memory enhancement": "https://psychonautwiki.org/wiki/Memory_enhancement",
            "Motivation enhancement": "https://psychonautwiki.org/wiki/Motivation_enhancement",
            "Nausea": "https://psychonautwiki.org/wiki/Nausea",
            "Stimulation": "https://psychonautwiki.org/wiki/Stimulation",
            "Teeth grinding": "https://psychonautwiki.org/wiki/Teeth_grinding",
            "Temporary erectile dysfunction": "https://psychonautwiki.org/wiki/Temporary_erectile_dysfunction",
            "Thought acceleration": "https://psychonautwiki.org/wiki/Thought_acceleration",
            "Thought deceleration": "https://psychonautwiki.org/wiki/Thought_deceleration",
            "Thought organization": "https://psychonautwiki.org/wiki/Thought_organization",
            "Vasoconstriction": "https://psychonautwiki.org/wiki/Vasoconstriction",
            "Wakefulness": "https://psychonautwiki.org/wiki/Wakefulness"
        },
        "sources": {
            "_general": [
                "Use of naltrexone has been found to successfully aid in recovery from amphetamine addiction - http://ajp.psychiatryonline.org/doi/abs/10.1176/appi.ajp.2008.08020304"
            ]
        }
    },
    "adinazolam": {
        "aliases": [
            "deracyn"
        ],
        "categories": [
            "depressant",
            "habit-forming",
            "tentative"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-16"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "15-30mg",
                "Light": "5-15mg",
                "Strong": "30-50mg+"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "2-5"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "10-25"
        },
        "name": "adinazolam",
        "pretty_name": "Adinazolam",
        "properties": {
            "after-effects": "1-16 hours.",
            "aliases": [
                "deracyn"
            ],
            "avoid": "All other CNS depressants.",
            "categories": [
                "depressant",
                "habit-forming",
                "tentative"
            ],
            "dose": "Light: 5-15mg Common: 15-30mg Strong: 30-50mg+",
            "duration": "2-5 hours.",
            "onset": "10-25 minutes.",
            "summary": "Benzodiazepine derivative that has some antidepressant properties. Never FDA approved, yet however has been sold as a research chemical."
        }
    },
    "adrafinil": {
        "categories": [
            "stimulant",
            "research-chemical",
            "habit-forming",
            "nootropic"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-12"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "250-400mg",
                "Heavy": "600mg+",
                "Light": "150-250mg",
                "Threshold": "100-150mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "8-12"
        },
        "formatted_effects": [
            "Stimulation",
            "Dehydration",
            "Headaches",
            "Photophobia",
            "Appetite suppression",
            "Increased heart rate",
            "Dizziness",
            "Nausea",
            "Body odor alteration",
            "Wakefulness",
            "Irritability",
            "Focus enhancement",
            "Thought acceleration",
            "Memory enhancement",
            "Motivation enhancement",
            "Emotion enhancement",
            "Anxiety",
            "Time distortion",
            "Increased music appreciation"
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "45-120"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_Adrafinil.shtml"
        },
        "name": "adrafinil",
        "pretty_name": "Adrafinil",
        "properties": {
            "after-effects": "1-12 hours.",
            "bioavailability": "Oral: 75-80%.",
            "categories": [
                "stimulant",
                "research-chemical",
                "habit-forming",
                "nootropic"
            ],
            "dose": "Threshold: 100-150mg Light: 150-250mg Common: 250-400mg Strong:400-600mg Heavy: 600mg+",
            "duration": "8-12 hours.",
            "effects": "Stimulation, Dehydration, Headaches, Photophobia, Appetite suppression, Increased heart rate, Dizziness, Nausea, Body odor alteration, Wakefulness, Irritability, Focus enhancement, Thought acceleration, Memory enhancement, Motivation enhancement, Emotion enhancement, Anxiety, Time distortion, Increased music appreciation",
            "onset": "45-120 minutes depending on stomach contents/ect.",
            "summary": "A prodrug to modafinil, this compound is often used to increase wakefulness and alertness. Due to hepatic metabolism it has a slower onset than modafinil and may cause liver damage in excess. Some users have reported acne as an adverse effect. Unregulated in the US."
        }
    },
    "aet": {
        "aliases": [
            "alpha-ethyl-tryptamine",
            "a-et",
            "a-ethyltryptamine"
        ],
        "categories": [
            "psychedelic",
            "stimulant",
            "research-chemical",
            "tentative",
            "empathogen"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-24"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "100-125mg",
                "Light": "80-100mg",
                "Strong": "125-150mg+"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "5-10"
        },
        "formatted_effects": [
            "Euphoria",
            "empathy",
            "insight",
            "brightened colour",
            "Closed/Open eye visuals",
            "enhanced tactile sensation",
            "mental/physical stimulation",
            "decreased appetite",
            "pupil dilation",
            "restlessness",
            "change in perception",
            "ego softening",
            "sweating/chills",
            "muscle tension",
            "confusion",
            "insomnia",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "60-120"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_AET.shtml"
        },
        "name": "aet",
        "pretty_name": "\u03b1ET",
        "properties": {
            "after-efects": "1-6 hours.",
            "after-effects": "1-24 hours.",
            "aliases": [
                "alpha-ethyl-tryptamine",
                "a-et",
                "a-ethyltryptamine"
            ],
            "avoid": "It can induce serotonergic neurotoxicity similar to the likes of MDMA. Do not combine this drug if you take an MAOi.",
            "categories": [
                "psychedelic",
                "stimulant",
                "research-chemical",
                "tentative",
                "empathogen"
            ],
            "dose": "Light: 80-100mg Common: 100-125mg Strong: 125-150mg+",
            "duration": "5-10 hours.",
            "effects": "Euphoria, empathy, insight, brightened colour, Closed/Open eye visuals, enhanced tactile sensation, mental/physical stimulation, decreased appetite, pupil dilation, restlessness, change in perception, ego softening, sweating/chills, muscle tension, confusion, insomnia.",
            "onset": "60-120 minutes.",
            "summary": "A quite rare substance of the tryptamine class, was first made by Upjohn as an antidepressant. Please use extreme caution if you get the pleasure of trying this drug."
        }
    },
    "afloqualone": {
        "categories": [
            "depressant",
            "habit-forming",
            "tentative"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-3"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "75-100mg",
                "Low": "50-75mg",
                "Strong": "100-200mg+"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "3-5"
        },
        "formatted_effects": [
            "Anxiolytic",
            "Sedative",
            "Muscle Relaxant",
            "Amnesia",
            "Dystaxia",
            "Hypnotic",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "60"
        },
        "name": "afloqualone",
        "pretty_name": "Afloqualone",
        "properties": {
            "after-effects": "1-3 hours.",
            "categories": [
                "depressant",
                "habit-forming",
                "tentative"
            ],
            "dose": "Low: 50-75mg Common: 75-100mg Strong: 100-200mg+",
            "duration": "3-5 hours.",
            "effects": "Anxiolytic, Sedative, Muscle Relaxant, Amnesia, Dystaxia, Hypnotic.",
            "onset": "<60 minutes.",
            "summary": "A rare analogue of methaqualone, a sedative, intoxicating drug. Similar effects to benzodiazepines, barbiturates and alcohol. Never widely used due to photosensitivity and skin irritation issues, though it has seem some popularity in Japan."
        }
    },
    "ah-7921": {
        "aliases": [
            "ah7921"
        ],
        "categories": [
            "opioid",
            "research-chemical",
            "habit-forming",
            "depressant"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-6"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "10-25mg",
                "Light": "5-10mg",
                "Strong": "25mg+"
            }
        },
        "formatted_duration": {
            "Oral": "6-8",
            "Vaporized": "3-4",
            "_unit": "hours"
        },
        "formatted_effects": [
            "Euphoria",
            "Dry Mouth",
            "Mood lift",
            "Itchiness",
            "Relaxant",
            "Constipation",
            "Pupil constriction",
            "Analgesia",
            ""
        ],
        "formatted_onset": {
            "Oral": "15-45",
            "Vaporized": "2-10",
            "_unit": "minutes"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_AH7921.shtml"
        },
        "name": "ah-7921",
        "pretty_name": "AH-7921",
        "properties": {
            "after-effects": "1-6 hours.",
            "aliases": [
                "ah7921"
            ],
            "categories": [
                "opioid",
                "research-chemical",
                "habit-forming",
                "depressant"
            ],
            "dose": "Oral Light: 10-20mg Common: 20-40mg Strong: 40mg+ Vapourized Light: 5-10mg Common: 10-25mg Strong: 25mg+",
            "duration": "Oral: 6-8 hours | Vaporized 3-4 hours.",
            "effects": "Euphoria, Dry Mouth, Mood lift, Itchiness, Relaxant, Constipation, Pupil constriction, Analgesia.",
            "onset": "Oral: 15-45 minutes. | Vaporized: 2-10 minutes.",
            "summary": "Opioid analgesic that is selective for the \u03bc-opioid receptor. It has around 80% the potency of Morphine when taken orally."
        }
    },
    "al-lad": {
        "aliases": [
            "allad"
        ],
        "categories": [
            "psychedelic",
            "research-chemical"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-24"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "75-175ug",
                "Heavy": "250ug+",
                "Light": "40-75ug",
                "Strong": "175-250ug"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "4-6"
        },
        "formatted_effects": [
            "Similar in effect to LSD",
            "open and closed eye visuals are common",
            "Auditory hallucinations are reported as common",
            "A sense of connectedness with people and the environment around you",
            "A strong sense of wellbeing",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "45-120"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_ALLAD.shtml",
            "tihkal": "https://www.erowid.org/library/books_online/tihkal/tihkal01.shtml"
        },
        "name": "al-lad",
        "pretty_name": "AL-LAD",
        "properties": {
            "after-effects": "1-24 hours.",
            "aliases": [
                "allad"
            ],
            "categories": [
                "psychedelic",
                "research-chemical"
            ],
            "dose": "Light: 40-75ug Common: 75-175ug Strong: 175-250ug Heavy: 250ug+",
            "duration": "4-6 hours",
            "effects": "Similar in effect to LSD, open and closed eye visuals are common. Auditory hallucinations are reported as common. A sense of connectedness with people and the environment around you. A strong sense of wellbeing.",
            "onset": "45-120 minutes.",
            "summary": "AL-LAD is a hallucinogenic drug, lysergamide and an analogue of LSD. It is reported as having some subtle experiential differences to LSD (such as increased visuals), and also appears to be slightly shorter lasting. AL-LAD doses are similar to those of LSD, depending on purity. Its availability on the Internet since 2013 has lead to strong popularity among the drug community."
        },
        "pweffects": {
            "8A Geometry - Exposure to semantic concept network": "https://psychonautwiki.org/wiki/8A_Geometry_-_Exposure_to_semantic_concept_network",
            "Acuity enhancement": "https://psychonautwiki.org/wiki/Acuity_enhancement",
            "After images": "https://psychonautwiki.org/wiki/After_images",
            "Analysis enhancement": "https://psychonautwiki.org/wiki/Analysis_enhancement",
            "Auditory distortion": "https://psychonautwiki.org/wiki/Auditory_distortion",
            "Auditory enhancement": "https://psychonautwiki.org/wiki/Auditory_enhancement",
            "Auditory hallucinations": "https://psychonautwiki.org/wiki/Auditory_hallucinations",
            "Autonomous entities": "https://psychonautwiki.org/wiki/Autonomous_entities",
            "Bodily control enhancement": "https://psychonautwiki.org/wiki/Bodily_control_enhancement",
            "Colour enhancement": "https://psychonautwiki.org/wiki/Colour_enhancement",
            "Colour shifting": "https://psychonautwiki.org/wiki/Colour_shifting",
            "Conceptual thinking": "https://psychonautwiki.org/wiki/Conceptual_thinking",
            "Delusions": "https://psychonautwiki.org/wiki/Delusions",
            "Depth perception distortions": "https://psychonautwiki.org/wiki/Depth_perception_distortions",
            "Diffraction": "https://psychonautwiki.org/wiki/Diffraction",
            "Drifting": "https://psychonautwiki.org/wiki/Drifting",
            "D\u00e9j\u00e0 vu": "https://psychonautwiki.org/wiki/D%C3%A9j%C3%A0_vu",
            "Emotion enhancement": "https://psychonautwiki.org/wiki/Emotion_enhancement",
            "Feelings of interdependent opposites": "https://psychonautwiki.org/wiki/Feelings_of_interdependent_opposites",
            "Geometry": "https://psychonautwiki.org/wiki/Geometry",
            "Immersion enhancement": "https://psychonautwiki.org/wiki/Immersion_enhancement",
            "Increased heart rate": "https://psychonautwiki.org/wiki/Increased_heart_rate",
            "Internal hallucinations": "https://psychonautwiki.org/wiki/Internal_hallucinations",
            "Memory suppression": "https://psychonautwiki.org/wiki/Memory_suppression",
            "Multiple thought streams": "https://psychonautwiki.org/wiki/Multiple_thought_streams",
            "Nausea": "https://psychonautwiki.org/wiki/Nausea",
            "Novelty enhancement": "https://psychonautwiki.org/wiki/Novelty_enhancement",
            "Pattern recognition enhancement": "https://psychonautwiki.org/wiki/Pattern_recognition_enhancement",
            "Personal bias suppression": "https://psychonautwiki.org/wiki/Personal_bias_suppression",
            "Perspective alterations": "https://psychonautwiki.org/wiki/Perspective_alterations",
            "Pupil dilation": "https://psychonautwiki.org/wiki/Pupil_dilation",
            "Scenarios and plots": "https://psychonautwiki.org/wiki/Scenarios_and_plots",
            "Scenery slicing": "https://psychonautwiki.org/wiki/Scenery_slicing",
            "Settings, sceneries, and landscapes": "https://psychonautwiki.org/wiki/Settings,_sceneries,_and_landscapes",
            "Spontaneous tactile sensations": "https://psychonautwiki.org/wiki/Spontaneous_tactile_sensations",
            "Stimulation": "https://psychonautwiki.org/wiki/Stimulation",
            "Symmetrical texture repetition": "https://psychonautwiki.org/wiki/Symmetrical_texture_repetition",
            "Tactile enhancement": "https://psychonautwiki.org/wiki/Tactile_enhancement",
            "Thought acceleration": "https://psychonautwiki.org/wiki/Thought_acceleration",
            "Thought loops": "https://psychonautwiki.org/wiki/Thought_loops",
            "Time distortion": "https://psychonautwiki.org/wiki/Time_distortion",
            "Tracers": "https://psychonautwiki.org/wiki/Tracers",
            "Transformations": "https://psychonautwiki.org/wiki/Transformations",
            "Unity and interconnectedness": "https://psychonautwiki.org/wiki/Unity_and_interconnectedness",
            "Wakefulness": "https://psychonautwiki.org/wiki/Wakefulness"
        }
    },
    "alcohol": {
        "aliases": [
            "etoh",
            "beer",
            "ethanol",
            "booze",
            "hooch"
        ],
        "categories": [
            "depressant",
            "habit-forming",
            "common"
        ],
        "combos": {
            "2c-t-x": {
                "note": "Both these classes of compound can interact unpredictably. Caution should be exercised.",
                "status": "Low Risk & Decrease"
            },
            "2c-x": {
                "status": "Low Risk & Decrease"
            },
            "5-meo-xxt": {
                "status": "Low Risk & Decrease"
            },
            "amphetamines": {
                "note": "Drinking on stimulants is risky because the sedative effects of the alcohol are reduced, and these are what the body uses to gauge drunkenness. This typically leads to excessive drinking with greatly reduced inhibitions, high risk of liver damage and increased dehydration. They will also allow you to drink past a point where you might normally pass out, increasing the risk. If you do decide to do this then you should set a limit of how much you will drink each hour and stick to it, bearing in mind that you will feel the alcohol and the stimulant less. Extended release formulations may severely impede sleep, further worsening the hangover.",
                "status": "Caution"
            },
            "amt": {
                "note": "aMT has a broad mechanism of action in the brain and so does alcohol so the combination can be unpredictable",
                "status": "Caution"
            },
            "benzodiazepines": {
                "note": "Ethanol ingestion may potentiate the CNS effects of many benzodiazepines. The two substances potentiate each other strongly and unpredictably, very rapidly leading to unconsciousness. While unconscious, vomit aspiration is a risk if not placed in the recovery position. Blacking out and memory loss is almost certain.",
                "status": "Dangerous"
            },
            "benzos": {
                "note": "Ethanol ingestion may potentiate the CNS effects of many benzodiazepines. The two substances potentiate each other strongly and unpredictably, very rapidly leading to unconsciousness. While unconscious, vomit aspiration is a risk if not placed in the recovery position. Blacking out and memory loss is almost certain.",
                "status": "Dangerous"
            },
            "caffeine": {
                "status": "Low Risk & No Synergy"
            },
            "cannabis": {
                "note": "In excess, this combination can cause nausea.",
                "status": "Low Risk & Synergy"
            },
            "cocaine": {
                "note": "Drinking on stimulants is risky because the sedative effects of the alcohol are reduced, and these are what the body uses to gauge drunkenness. This typically leads to excessive drinking with greatly reduced inhibitions, high risk of liver damage and increased dehydration. They will also allow you to drink past a point where you might normally pass out, increasing the risk. If you do decide to do this then you should set a limit of how much you will drink each hour and stick to it, bearing in mind that you will feel the alcohol less. Cocaine is potentiated somewhat by alcohol because of the formation of cocaethylene.",
                "status": "Unsafe"
            },
            "dmt": {
                "status": "Low Risk & Decrease"
            },
            "dox": {
                "note": "Drinking on stimulants is risky because the sedative effects of the alcohol are  reduced, and these are what the body uses to gauge drunkenness. This typically leads to excessive drinking with greatly reduced inhibitions, high risk of liver damage and increased dehydration. They will also  allow you to drink past a point where you might normally pass out, increasing the risk.",
                "status": "Low Risk & Decrease"
            },
            "dxm": {
                "note": "Both substances potentiate the ataxia and sedation caused by the other and can lead to unexpected loss of consciousness at high doses. Place affected patients in the recovery position to prevent vomit aspiration from excess. Additionally CNS depression can lead to difficulty breathing. Avoid on anything higher than 1st plateau.",
                "status": "Dangerous"
            },
            "ghb/gbl": {
                "note": "Even in very low doses this combination rapidly leads to memory loss, severe ataxia and unconsciousness. There is a high risk of vomit aspiration while unconscious.",
                "status": "Dangerous"
            },
            "ketamine": {
                "note": "Both substances cause ataxia and bring a very high risk of vomiting and unconsciousness. If the user falls unconscious while under the influence there is a severe risk of vomit aspiration if they are not placed in the recovery position.",
                "status": "Dangerous"
            },
            "lsd": {
                "status": "Low Risk & Decrease"
            },
            "maois": {
                "note": "Tyramine found in many alcoholic beverages can have dangerous reactions with MAOIs, causing an increase in blood pressure.",
                "status": "Unsafe"
            },
            "mdma": {
                "note": "Both MDMA and alcohol cause dehydration. Approach this combination with caution, moderation and sufficient hydration. More than a small amount of alcohol will dull the euphoria of MDMA",
                "status": "Caution"
            },
            "mescaline": {
                "status": "Low Risk & Decrease"
            },
            "mushrooms": {
                "status": "Low Risk & Decrease"
            },
            "mxe": {
                "note": "There is a high risk of memory loss, vomiting and severe ataxia from this combination.",
                "status": "Dangerous"
            },
            "nbomes": {
                "status": "Low Risk & Decrease"
            },
            "nitrous": {
                "note": "Both substances potentiate the ataxia and sedation caused by the other and can lead to unexpected loss of consciousness at high doses. While unconscious, vomit aspiration is a risk if not placed in the recovery position. Memory blackouts are likely.",
                "status": "Caution"
            },
            "opioids": {
                "note": "Both substances potentiate the ataxia and sedation caused by the other and can lead to unexpected loss of consciousness at high doses. Place affected patients in the recovery position to prevent vomit aspiration from excess. Memory blackouts are likely",
                "status": "Dangerous"
            },
            "pcp": {
                "note": "Details of this combination are not well understood but PCP generally interacts in an unpredictable manner.",
                "status": "Unsafe"
            },
            "ssris": {
                "note": "Alcohol may potentiate some of the pharmacologic effects of CNS-active agents. Use in combination may result in additive central nervous system depression and/or impairment of judgment, thinking, and  psychomotor skills.",
                "status": "Caution"
            },
            "tramadol": {
                "note": "Heavy CNS depressants, risk of seizures. Both substances potentiate the ataxia and sedation caused by the other and can lead to unexpected loss of consciousness at high doses. Place affected patients in the recovery position to prevent vomit aspiration from excess. Memory blackouts are likely.",
                "status": "Dangerous"
            }
        },
        "dose_note": " NOTE: Alcohol consumption should be spread out over a few hours and ideally separated by water breaks. Check the label on alcohol for unit content",
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "6-48"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "2-4units",
                "Heavy": "5-6units",
                "Light": "1-2units"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "1.5-3"
        },
        "formatted_effects": [
            "relaxation",
            "mood lift",
            "happiness",
            "sociability",
            "lowered inhibitions",
            "analgesia",
            "slurred speech",
            "flushed skin",
            "drowsiness",
            "tolerance",
            "euphoria",
            "amnesia"
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "15-30"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_Alcohol.shtml"
        },
        "name": "alcohol",
        "pretty_name": "Alcohol",
        "properties": {
            "after-effects": "6-48 hours",
            "aliases": [
                "etoh",
                "beer",
                "ethanol",
                "booze",
                "hooch"
            ],
            "categories": [
                "depressant",
                "habit-forming",
                "common"
            ],
            "detection": "12 hrs blood, 6-12 hrs saliva, 6-24 hrs urine",
            "dose": "Oral Light: 1-2units Common: 2-4units Heavy: 5-6units | NOTE: Alcohol consumption should be spread out over a few hours and ideally separated by water breaks. Check the label on alcohol for unit content",
            "duration": "1.5-3 hours",
            "effects": "relaxation, mood lift, happiness, sociability, lowered inhibitions, analgesia, slurred speech, flushed skin, drowsiness, tolerance, euphoria, amnesia",
            "onset": "15-30 minutes",
            "summary": "Alcohol is a CNS depressant that acts through the GABA\u2090 receptor, and is one of the most common strong psychoactives used by humans. It has a long history of use and its intoxicating effects are well-studied and documented. It remains legal in most parts of the world."
        },
        "pweffects": {
            "Acuity suppression": "https://psychonautwiki.org/wiki/Acuity_suppression",
            "Amnesia": "https://psychonautwiki.org/wiki/Amnesia",
            "Analysis suppression": "https://psychonautwiki.org/wiki/Analysis_suppression",
            "Anxiety suppression": "https://psychonautwiki.org/wiki/Anxiety_suppression",
            "Auditory suppression": "https://psychonautwiki.org/wiki/Auditory_suppression",
            "Cognitive euphoria": "https://psychonautwiki.org/wiki/Cognitive_euphoria",
            "Compulsive redosing": "https://psychonautwiki.org/wiki/Compulsive_redosing",
            "Creativity suppression": "https://psychonautwiki.org/wiki/Creativity_suppression",
            "Dehydration": "https://psychonautwiki.org/wiki/Dehydration",
            "Delusions": "https://psychonautwiki.org/wiki/Delusions",
            "Depression": "https://psychonautwiki.org/wiki/Depression",
            "Difficulty urinating": "https://psychonautwiki.org/wiki/Difficulty_urinating",
            "Disinhibition": "https://psychonautwiki.org/wiki/Disinhibition",
            "Dizziness": "https://psychonautwiki.org/wiki/Dizziness",
            "Double vision": "https://psychonautwiki.org/wiki/Double_vision",
            "Ego inflation": "https://psychonautwiki.org/wiki/Ego_inflation",
            "Empathy, love, and sociability enhancement": "https://psychonautwiki.org/wiki/Empathy,_love,_and_sociability_enhancement",
            "Frequent urination": "https://psychonautwiki.org/wiki/Frequent_urination",
            "Headaches": "https://psychonautwiki.org/wiki/Headaches",
            "Increased blood pressure": "https://psychonautwiki.org/wiki/Increased_blood_pressure",
            "Information processing suppression": "https://psychonautwiki.org/wiki/Information_processing_suppression",
            "Language suppression": "https://psychonautwiki.org/wiki/Language_suppression",
            "Motor control loss": "https://psychonautwiki.org/wiki/Motor_control_loss",
            "Muscle relaxation": "https://psychonautwiki.org/wiki/Muscle_relaxation",
            "Nausea": "https://psychonautwiki.org/wiki/Nausea",
            "Pain relief": "https://psychonautwiki.org/wiki/Pain_relief",
            "Pattern recognition suppression": "https://psychonautwiki.org/wiki/Pattern_recognition_suppression",
            "Physical euphoria": "https://psychonautwiki.org/wiki/Physical_euphoria",
            "Respiratory depression": "https://psychonautwiki.org/wiki/Respiratory_depression",
            "Sedation": "https://psychonautwiki.org/wiki/Sedation",
            "Tactile suppression": "https://psychonautwiki.org/wiki/Tactile_suppression",
            "Temporary erectile dysfunction": "https://psychonautwiki.org/wiki/Temporary_erectile_dysfunction",
            "Thought deceleration": "https://psychonautwiki.org/wiki/Thought_deceleration",
            "Thought disorganization": "https://psychonautwiki.org/wiki/Thought_disorganization"
        },
        "sources": {
            "_general": [
                "Alcohol and benzodiazepines in fatal poisonings. - https://www.ncbi.nlm.nih.gov/pubmed/12170103",
                "Drinking while pregnant creates and strengthens many risks associated with childbirth. It will also increase the chances of premature labour, which can be incredibly dangerous for both the baby and mother. -"
            ]
        }
    },
    "ald-52": {
        "aliases": [
            "ald52",
            "1alsd",
            "1a-lsd"
        ],
        "categories": [
            "psychedelic",
            "research-chemical",
            "tentative"
        ],
        "formatted_aftereffects": {
            "value": "12-24h"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "75-150ug",
                "Light": "25-75ug",
                "Strong": "150-300ug."
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "9-14"
        },
        "formatted_effects": [
            "visual distortions",
            "a sense of childlike wonder",
            "brightening of colors",
            "racing thoughts",
            "hue shifts",
            "euphoria",
            "anxiety",
            "confusion"
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "45-90"
        },
        "name": "ald-52",
        "pretty_name": "ALD-52",
        "properties": {
            "after-effects": "12-24h",
            "aliases": [
                "ald52",
                "1alsd",
                "1a-lsd"
            ],
            "avoid": "marijuana (can potentiate effects)",
            "categories": [
                "psychedelic",
                "research-chemical",
                "tentative"
            ],
            "dose": "Light: 25-75ug Common: 75-150ug Strong: 150-300ug.",
            "duration": "9-14 hours, varying with dosage (heavy doses can lead to much longer trips)",
            "effects": "visual distortions, a sense of childlike wonder, brightening of colors,racing thoughts, hue shifts, euphoria, anxiety, confusion",
            "onset": "45-90 minutes depending on ROA and stomach contents",
            "summary": "ALD-52, or N-acetyl-LSD is a less common chemical analogue of LSD, first synthesised by Albert Hoffman. It was famously implicated in the 'Orange Sunshine' trial. A psychedelic lysergamide, this compound exhibits similar properties to LSD, and is thought to be a pro-drug for LSD."
        }
    },
    "aleph": {
        "aliases": [
            "dot",
            "para-dot"
        ],
        "categories": [
            "psychedelic",
            "empathogen",
            "research-chemical",
            "tentative"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-24"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "4-6mg",
                "Light": "2-4mg",
                "Strong": "6-12mg."
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "5-10"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "30-90"
        },
        "name": "aleph",
        "pretty_name": "Aleph",
        "properties": {
            "after-effects": "1-24 hours.",
            "aliases": [
                "dot",
                "para-dot"
            ],
            "avoid": "All other drugs as this is a one of kind.",
            "categories": [
                "psychedelic",
                "empathogen",
                "research-chemical",
                "tentative"
            ],
            "dose": "Oral Light: 2-4mg Common: 4-6mg Strong: 6-12mg.",
            "duration": "5-10 hours.",
            "onset": "30-90 minutes.",
            "summary": "The first sulphur-containing Phenethylamine to have been evaluated for CNS activity for Stimulant or Psychedelic purposes."
        }
    },
    "aleph-2": {
        "aliases": [
            "dot-2",
            "dot2",
            "aleph2"
        ],
        "categories": [
            "psychedelic",
            "research-chemical",
            "tentative"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "12-24"
        },
        "formatted_dose": {
            "none": {
                "NOTE": "Varies"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "6-18"
        },
        "formatted_effects": [
            "Euphoria",
            "empathy",
            "insight",
            "brightened colour",
            "Closed/Open eye visuals",
            "enhanced tactile sensation",
            "mental/physical stimulation",
            "decreased appetite",
            "pupil dilation",
            "restlessness",
            "change in perception",
            "ego softening",
            "sweating/chills",
            "muscle tension",
            "confusion",
            "insomnia",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "40-120"
        },
        "name": "aleph-2",
        "pretty_name": "ALEPH-2",
        "properties": {
            "after-effects": "12-24 hours",
            "aliases": [
                "dot-2",
                "dot2",
                "aleph2"
            ],
            "categories": [
                "psychedelic",
                "research-chemical",
                "tentative"
            ],
            "duration": "6-18 hours.",
            "effects": "Euphoria, empathy, insight, brightened colour, Closed/Open eye visuals, enhanced tactile sensation, mental/physical stimulation, decreased appetite, pupil dilation, restlessness, change in perception, ego softening, sweating/chills, muscle tension, confusion, insomnia.",
            "onset": "40-120 minutes",
            "summary": "A very rare Phenethylamine, also known as DOT-2, it is the DOx analogue of 2C-T-2. Very little human use recorded. Described as being quite long and highly visual. Likely to be potent, with a reported threshold dose of 3mg."
        }
    },
    "allobarbital": {
        "categories": [
            "barbiturate",
            "tentative",
            "depressant",
            "habit-forming"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-12"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "1000-1500mg",
                "Light": "500-1000mg",
                "Strong": "1500-2000mg+"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "6-10"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "15-30"
        },
        "name": "allobarbital",
        "pretty_name": "Allobarbital",
        "properties": {
            "after-effects": "1-12 hours",
            "avoid": "All other CNS depressants.",
            "categories": [
                "barbiturate",
                "tentative",
                "depressant",
                "habit-forming"
            ],
            "dose": "Light: 500-1000mg Common: 1000-1500mg Strong: 1500-2000mg+",
            "duration": "6-10 hours.",
            "onset": "15-30 minutes.",
            "summary": "Is a barbiturate that was first made in 1912. It was primilary used as an anticonvulsant. Yet it has pretty much been outclassed by a newer generation of safer ones. Still in use in Poland."
        }
    },
    "allylescaline": {
        "aliases": [
            "al"
        ],
        "categories": [
            "psychedelic",
            "research-chemical"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-16"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "30-40mg",
                "Light": "20-30mg",
                "Strong": "40-60mg+",
                "Threshold": "15-20mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "8-12"
        },
        "formatted_effects": [
            "Euphoria",
            "empathy",
            "insight",
            "brightened colour",
            "Closed/Open eye visuals",
            "enhanced tactile sensation",
            "mental/physical stimulation",
            "decreased appetite",
            "pupil dilation",
            "restlessness",
            "change in perception",
            "ego softening",
            "sweating/chills",
            "muscle tension",
            "confusion",
            "insomnia",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "45-240"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_Allylescaline.shtml",
            "pihkal": "https://www.erowid.org/library/books_online/pihkal/pihkal002.shtml"
        },
        "name": "allylescaline",
        "pretty_name": "Allylescaline",
        "properties": {
            "after-effects": "1-16 hours.",
            "aliases": [
                "al"
            ],
            "categories": [
                "psychedelic",
                "research-chemical"
            ],
            "dose": "Oral Threshold: 15-20mg Light: 20-30mg Common: 30-40mg Strong: 40-60mg+",
            "duration": "8-12 hours. Varies greatly on dose.",
            "effects": "Euphoria, empathy, insight, brightened colour, Closed/Open eye visuals, enhanced tactile sensation, mental/physical stimulation, decreased appetite, pupil dilation, restlessness, change in perception, ego softening, sweating/chills, muscle tension, confusion, insomnia.",
            "onset": "45-240 minutes",
            "summary": "Mescaline analogue with a much lower dose, that seems to rely heavily on colours."
        },
        "pweffects": {
            "Acuity enhancement": "https://psychonautwiki.org/wiki/Acuity_enhancement",
            "After images": "https://psychonautwiki.org/wiki/After_images",
            "Analysis enhancement": "https://psychonautwiki.org/wiki/Analysis_enhancement",
            "Auditory distortion": "https://psychonautwiki.org/wiki/Auditory_distortion",
            "Auditory enhancement": "https://psychonautwiki.org/wiki/Auditory_enhancement",
            "Auditory hallucinations": "https://psychonautwiki.org/wiki/Auditory_hallucinations",
            "Bodily control enhancement": "https://psychonautwiki.org/wiki/Bodily_control_enhancement",
            "Colour enhancement": "https://psychonautwiki.org/wiki/Colour_enhancement",
            "Colour shifting": "https://psychonautwiki.org/wiki/Colour_shifting",
            "Conceptual thinking": "https://psychonautwiki.org/wiki/Conceptual_thinking",
            "Drifting": "https://psychonautwiki.org/wiki/Drifting",
            "Emotion enhancement": "https://psychonautwiki.org/wiki/Emotion_enhancement",
            "Geometry": "https://psychonautwiki.org/wiki/Geometry",
            "Immersion enhancement": "https://psychonautwiki.org/wiki/Immersion_enhancement",
            "Memory suppression": "https://psychonautwiki.org/wiki/Memory_suppression",
            "Nausea": "https://psychonautwiki.org/wiki/Nausea",
            "Novelty enhancement": "https://psychonautwiki.org/wiki/Novelty_enhancement",
            "Pattern recognition enhancement": "https://psychonautwiki.org/wiki/Pattern_recognition_enhancement",
            "Personal bias suppression": "https://psychonautwiki.org/wiki/Personal_bias_suppression",
            "Physical euphoria": "https://psychonautwiki.org/wiki/Physical_euphoria",
            "Pupil dilation": "https://psychonautwiki.org/wiki/Pupil_dilation",
            "Spontaneous tactile sensations": "https://psychonautwiki.org/wiki/Spontaneous_tactile_sensations",
            "Stimulation": "https://psychonautwiki.org/wiki/Stimulation",
            "Symmetrical texture repetition": "https://psychonautwiki.org/wiki/Symmetrical_texture_repetition",
            "Tactile enhancement": "https://psychonautwiki.org/wiki/Tactile_enhancement",
            "Thought acceleration": "https://psychonautwiki.org/wiki/Thought_acceleration",
            "Thought disorganization": "https://psychonautwiki.org/wiki/Thought_disorganization",
            "Thought loops": "https://psychonautwiki.org/wiki/Thought_loops",
            "Time distortion": "https://psychonautwiki.org/wiki/Time_distortion",
            "Tracers": "https://psychonautwiki.org/wiki/Tracers",
            "Transformations": "https://psychonautwiki.org/wiki/Transformations",
            "Unity and interconnectedness": "https://psychonautwiki.org/wiki/Unity_and_interconnectedness",
            "Wakefulness": "https://psychonautwiki.org/wiki/Wakefulness"
        }
    },
    "alpha-php": {
        "aliases": [
            "pv-7",
            "a-php",
            "aphp",
            "\u03b1-php",
            "\u03b1php"
        ],
        "categories": [
            "stimulant",
            "research-chemical",
            "habit-forming",
            "tentative"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-48"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "10-20mg",
                "Light": "5-10mg",
                "Strong": "20-40mg+"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "2-8"
        },
        "formatted_effects": [
            "Euphoria",
            "increased energy/alertness",
            "Decreased need for sleep",
            "Increased sociability",
            "mood lift",
            "increase sexuality",
            "Excessive talking",
            "Decreased appetite",
            "Weight loss",
            "Sweating",
            "Distrubed sleep patterns",
            "Bruxia",
            "Visual and audiotory hallucinations itchiness",
            "agressiveness",
            "moodiness",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "1-10"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_alphaPHP.shtml"
        },
        "name": "alpha-php",
        "pretty_name": "\u03b1-PHP",
        "properties": {
            "after-effects": "1-48 hours.",
            "aliases": [
                "pv-7",
                "a-php",
                "aphp",
                "\u03b1-php",
                "\u03b1php"
            ],
            "categories": [
                "stimulant",
                "research-chemical",
                "habit-forming",
                "tentative"
            ],
            "dose": "Light: 5-10mg Common: 10-20mg Strong: 20-40mg+",
            "duration": "2-8 hours dependant on ROA.",
            "effects": "Euphoria, increased energy/alertness, Decreased need for sleep, Increased sociability, mood lift, increase sexuality, Excessive talking, Decreased appetite, Weight loss, Sweating, Distrubed sleep patterns, Bruxia, Visual and audiotory hallucinations itchiness, agressiveness, moodiness.",
            "onset": "1-10 minutes.",
            "summary": "A powerful stimulant cathinone, analogue of alpha-PVP and related to pyrovalerone. Said to have high addictive potential, compulsive redosing and relatively short duration. Often insufflated or vapourised."
        }
    },
    "alprazolam": {
        "aliases": [
            "xanax",
            "prazolam",
            "ksalol",
            "niravam"
        ],
        "categories": [
            "benzodiazepine",
            "habit-forming",
            "depressant",
            "common"
        ],
        "dose_note": " NOTE: Warning - higher doses increase the chances of blacking out",
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "6-24"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "0.5-1.5mg",
                "Heavy": "2mg",
                "Light": "0.25-0.5mg",
                "Strong": "1.5-2mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "5-8"
        },
        "formatted_effects": [
            "Anxiolytic",
            "Sedative",
            "Muscle Relaxant",
            "Amnesia",
            "Dystaxia",
            "Hiccups",
            "Loss of time",
            "Loss of motor skills",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "15-40"
        },
        "name": "alprazolam",
        "pretty_name": "Alprazolam",
        "properties": {
            "after-effects": "6-24 hours",
            "aliases": [
                "xanax",
                "prazolam",
                "ksalol",
                "niravam"
            ],
            "avoid": "When taken for a long period of time, abrupt discontinuation is highly unadvised. Avoid combining other depressants such as Alcohol.",
            "bioavailability": "Oral 80-90%",
            "categories": [
                "benzodiazepine",
                "habit-forming",
                "depressant",
                "common"
            ],
            "dose": "Oral Light: 0.25-0.5mg Common: 0.5-1.5mg Strong: 1.5-2mg Heavy: 2mg + | NOTE: Warning - higher doses increase the chances of blacking out",
            "dose_to_diazepam": "Alprazolam - 0.5mg ~=10mg Diazepam.",
            "duration": "5-8 hours",
            "effects": "Anxiolytic, Sedative, Muscle Relaxant, Amnesia, Dystaxia, Hiccups, Loss of time, Loss of motor skills.",
            "onset": "15-40 minutes",
            "summary": "An extremely common benzodiazepine better known as Xanax, frequently prescribed for the treatment of anxiety and panic disorders. Alprazolam is short-lasting and primarily anxiolytic, though also possesses hypnotic properties. At high doses amnesia and loss of inhibition are common. Do not mix with other depressants."
        },
        "pweffects": {
            "Amnesia": "https://psychonautwiki.org/wiki/Amnesia",
            "Analysis suppression": "https://psychonautwiki.org/wiki/Analysis_suppression",
            "Anxiety suppression": "https://psychonautwiki.org/wiki/Anxiety_suppression",
            "Compulsive redosing": "https://psychonautwiki.org/wiki/Compulsive_redosing",
            "Delusions": "https://psychonautwiki.org/wiki/Delusions",
            "Disinhibition": "https://psychonautwiki.org/wiki/Disinhibition",
            "Dizziness": "https://psychonautwiki.org/wiki/Dizziness",
            "Emotion suppression": "https://psychonautwiki.org/wiki/Emotion_suppression",
            "Information processing suppression": "https://psychonautwiki.org/wiki/Information_processing_suppression",
            "Motor control loss": "https://psychonautwiki.org/wiki/Motor_control_loss",
            "Muscle relaxation": "https://psychonautwiki.org/wiki/Muscle_relaxation",
            "Respiratory depression": "https://psychonautwiki.org/wiki/Respiratory_depression",
            "Sedation": "https://psychonautwiki.org/wiki/Sedation",
            "Seizure suppression": "https://psychonautwiki.org/wiki/Seizure_suppression",
            "Thought deceleration": "https://psychonautwiki.org/wiki/Thought_deceleration"
        },
        "sources": {
            "_general": [
                "Role of dopaminergic and serotonergic systems on behavioral stimulatory effects of low-dose alprazolam and lorazepam. - https://www.ncbi.nlm.nih.gov/pubmed/11226811",
                "tability of alprazolam, chloroquine phosphate, cisapride, enalapril maleate, and hydralazine hydrochloride in extemporaneously compounded oral liquids. - http://www.ncbi.nlm.nih.gov/pubmed/9784772",
                "Alprazolam-related deaths in Palm Beach County. -http://www.ncbi.nlm.nih.gov/pubmed/15725773",
                "Alprazolam kinetics following sublingual and oral administration. - http://www.ncbi.nlm.nih.gov/pubmed/3680603",
                "A fatal case of Benzodiazepine withdrawal. - https://www.ncbi.nlm.nih.gov/pubmed/19465812",
                "Pregnancy category D according to the FDA with potential to do genetic damage. - http://www.accessdata.fda.gov/drugsatfda_docs/label/2011/018276s044,021434s006lbl.pdf"
            ]
        }
    },
    "am-2201": {
        "aliases": [
            "am2201"
        ],
        "categories": [
            "research-chemical",
            "tentative",
            "habit-forming"
        ],
        "formatted_aftereffects": {
            "_unit": "minutes",
            "value": "15-60"
        },
        "formatted_dose": {
            "Vapourized": {
                "Common": "500-1000ug",
                "Light": "250-500ug",
                "Strong": "1000-2000ug"
            }
        },
        "formatted_duration": {
            "Oral": "60-180",
            "Vapourized": "30-90",
            "_unit": "minutes"
        },
        "formatted_onset": {
            "Oral": "15-30",
            "Vapourized": "1-3",
            "_unit": "minutes"
        },
        "name": "am-2201",
        "pretty_name": "AM-2201",
        "properties": {
            "after-effects": "15-60 minutes.",
            "aliases": [
                "am2201"
            ],
            "categories": [
                "research-chemical",
                "tentative",
                "habit-forming"
            ],
            "dose": "Vapourized Light: 250-500ug Common: 500-1000ug Strong: 1000-2000ug",
            "duration": "Vapourized: 30-90 minutes. | Oral: 60-180 minutes.",
            "onset": "Vapourized: 1-3 minutes. | Oral: 15-30 minutes.",
            "summary": "A synthetic cannabanoid that is very potent. Active doses start at around 250ug's. Please be cautious with this substance. It has also been noted that it can cause convulsions."
        }
    },
    "amfecloral": {
        "categories": [
            "stimulant",
            "depressant"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-12"
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "5-8"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "10-30"
        },
        "name": "amfecloral",
        "pretty_name": "Amfecloral",
        "properties": {
            "after-effects": "1-12 hours.",
            "categories": [
                "stimulant",
                "depressant"
            ],
            "duration": "5-8 hours.",
            "onset": "10-30 minutes.",
            "summary": "Is a stimulant drug of the Phenethylamine and Amphetamine class. It was used as an appetite suppressant, yet is no longer marketed. It's also interesting that it acts as a prodrug to both Amphetamine and Chloral Hydrate."
        }
    },
    "amfonelicacid": {
        "aliases": [
            "aa",
            "afa",
            "win25978"
        ],
        "categories": [
            "stimulant",
            "research-chemical",
            "habit-forming",
            "nootropic"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-24"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "4-10mg",
                "Strong": "10mg+",
                "Threshold": "2-4mg"
            }
        },
        "formatted_duration": {
            "Insufflated": "6-10",
            "Oral": "8-12",
            "_unit": "hours"
        },
        "formatted_effects": [
            "Euphoria",
            "increased energy/alertness",
            "Decreased need for sleep",
            "Increased sociability",
            "mood lift",
            "increase sexuality",
            "Excessive talking",
            "Decreased appetite",
            "Weight loss",
            "Sweating",
            "Distrubed sleep patterns",
            "Bruxia",
            "Visual and audiotory hallucinations itchiness",
            "agressiveness",
            "moodiness",
            ""
        ],
        "formatted_onset": {
            "Insufflated": "5-15",
            "Oral": "30-45",
            "_unit": "minutes"
        },
        "name": "amfonelicacid",
        "pretty_name": "Amfonelic acid",
        "properties": {
            "after-effects": "1-24 hours.",
            "aliases": [
                "aa",
                "afa",
                "win25978"
            ],
            "categories": [
                "stimulant",
                "research-chemical",
                "habit-forming",
                "nootropic"
            ],
            "dose": "Threshold: 2-4mg Common: 4-10mg Strong: 10mg+",
            "duration": "Oral: 8-12 hours. | Insufflated: 6-10 hours.",
            "effects": "Euphoria, increased energy/alertness, Decreased need for sleep, Increased sociability, mood lift, increase sexuality, Excessive talking, Decreased appetite, Weight loss, Sweating, Distrubed sleep patterns, Bruxia, Visual and audiotory hallucinations itchiness, agressiveness, moodiness.",
            "onset": "Oral: 30-45 minutes. | Insufflated: 5-15 minutes.",
            "summary": "A dopaminergic stimulant discovered by Sterling-Winthrop accidentally while developing antibiotics. Discontinued due to undesirable stimulant effects, it has had some popularity as a recreational drug."
        }
    },
    "aminorex": {
        "categories": [
            "stimulant",
            "habit-forming",
            "tentative"
        ],
        "formatted_dose": {
            "none": {
                "Common": "3-10mg",
                "Light": "1-3mg",
                "Strong": "10-25mg."
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "4-8"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "10-30"
        },
        "name": "aminorex",
        "pretty_name": "Aminorex",
        "properties": {
            "categories": [
                "stimulant",
                "habit-forming",
                "tentative"
            ],
            "duration": "4-8 hours.",
            "onset": "10-30 minutes.",
            "summary": "Is an anorectic stimulant drug that was taken of the market after it was found to cause pulmonary hypertension. Potency wise it has been found to be roughly 2.5 times more potent than dextroamphetamine."
        }
    },
    "aminotadalafil": {
        "formatted_dose": {
            "Oral": {
                "Common": "10-20mg",
                "Light": "5-10mg",
                "Strong": "20-30mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "4-8"
        },
        "name": "aminotadalafil",
        "pretty_name": "Aminotadalafil",
        "properties": {
            "dose": "Light: 5-10mg Common: 10-20mg Strong: 20-30mg",
            "duration": "4-8 hours.",
            "summary": "An analogue of tadafinil, better known as Cialis (Viagra). Infamous for being missold in the 'Alpha Male' sexual enhancement supplement."
        }
    },
    "amobarbital": {
        "categories": [
            "depressant",
            "habit-forming",
            "barbiturate"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "2-12"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "50-75mg",
                "Low": "50mg",
                "Strong": "75-150mg+"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "5-9"
        },
        "formatted_effects": [
            "Anxiolytic",
            "Sedative",
            "Muscle Relaxant",
            "Amnesia",
            "Dystaxia",
            "Hypnotic",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "10-30"
        },
        "name": "amobarbital",
        "pretty_name": "Amobarbital",
        "properties": {
            "after-effects": "2-12 hours.",
            "avoid": "All other CNS depressants.",
            "bioavaiability": "Oral: Roughly 95%.",
            "categories": [
                "depressant",
                "habit-forming",
                "barbiturate"
            ],
            "dose": "Low: 50mg Common: 50-75mg Strong: 75-150mg+",
            "duration": "5-9 hours",
            "effects": "Anxiolytic, Sedative, Muscle Relaxant, Amnesia, Dystaxia, Hypnotic.",
            "onset": "10-30 minutes.",
            "summary": "A sedative and hypnotic barbiturate first discovered in 1923. Formerly widely used recreationally and medically, barbiturates have declined in popularity with the appearance of benzodiazepines and other drugs with less serious consequences in overdose."
        }
    },
    "amphetamine": {
        "aliases": [
            "speed",
            "pepp",
            "amphetamines",
            "amphetamin",
            "amfetamine",
            "amph",
            "hearts",
            "pep"
        ],
        "categories": [
            "stimulant",
            "habit-forming",
            "common"
        ],
        "dose_note": " NOTE: Street amphetamine is generally very impure, if you're working with a more pure chemical, lower doses will have greater effects.",
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-12"
        },
        "formatted_dose": {
            "Insufflated": {
                "Common": "25-40mg",
                "Heavy": "75-100mg",
                "Light": "15-25mg",
                "Strong": "40-75mg"
            },
            "Oral": {
                "Common": "20-50mg",
                "Heavy": "70-90mg",
                "Light": "10-20mg",
                "Strong": "50-70mg"
            }
        },
        "formatted_duration": {
            "Insufflated": "3-6",
            "Oral": "4-8",
            "_unit": "hours"
        },
        "formatted_effects": [
            "Increased focus",
            "abundance of energy",
            "racing thoughts",
            "elevated heartrate",
            ""
        ],
        "formatted_onset": {
            "Insufflated": "5-10",
            "Oral": "15-30",
            "_unit": "minutes"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_Amphetamines.shtml"
        },
        "name": "amphetamine",
        "pretty_name": "Amphetamine",
        "properties": {
            "after-effects": "1-12 hours.",
            "aliases": [
                "speed",
                "pepp",
                "amphetamines",
                "amphetamin",
                "amfetamine",
                "amph",
                "hearts",
                "pep"
            ],
            "avoid": "other stimulants, and depressants. Mixing depressants and stimulants is very rough on the heart. MXE is also to be avoided (possibility of serotonin syndrome).",
            "categories": [
                "stimulant",
                "habit-forming",
                "common"
            ],
            "detection": "Blood: 12 hours. Saliva: ~3 days. Urine: 1-4 days. Hair: Up to 90 days.",
            "dose": "Insufflated Light: 15-25mg Common: 25-40mg Strong: 40-75mg Heavy: 75-100mg | Oral Light: 10-20mg Common: 20-50mg Strong: 50-70mg Heavy: 70-90mg | NOTE: Street amphetamine is generally very impure, if you're working with a more pure chemical, lower doses will have greater effects.",
            "duration": "Oral: 4-8 hours | Insufflated: 3-6 hours",
            "effects": "Increased focus, abundance of energy, racing thoughts, elevated heartrate.",
            "marquis": "Strong reddish orange - Dark reddish brown",
            "onset": "Oral: 15-30 minutes. | Insufflated: 5-10 minutes.",
            "pubchemcid": "92939",
            "summary": "A very popular CNS stimulant available on prescription and black markets. Recreational in high doses, producing mild euphoria and an abundance of energy. Popular in eastern europe and the US."
        },
        "pweffects": {
            "Abnormal heartbeat": "https://psychonautwiki.org/wiki/Abnormal_heartbeat",
            "Analysis enhancement": "https://psychonautwiki.org/wiki/Analysis_enhancement",
            "Anxiety": "https://psychonautwiki.org/wiki/Anxiety",
            "Appetite suppression": "https://psychonautwiki.org/wiki/Appetite_suppression",
            "Bronchodilation": "https://psychonautwiki.org/wiki/Bronchodilation",
            "Cognitive euphoria": "https://psychonautwiki.org/wiki/Cognitive_euphoria",
            "Cognitive fatigue": "https://psychonautwiki.org/wiki/Cognitive_fatigue",
            "Compulsive redosing": "https://psychonautwiki.org/wiki/Compulsive_redosing",
            "Dehydration": "https://psychonautwiki.org/wiki/Dehydration",
            "Depression": "https://psychonautwiki.org/wiki/Depression",
            "Focus enhancement": "https://psychonautwiki.org/wiki/Focus_enhancement",
            "Frequent urination": "https://psychonautwiki.org/wiki/Frequent_urination",
            "Increased blood pressure": "https://psychonautwiki.org/wiki/Increased_blood_pressure",
            "Increased heart rate": "https://psychonautwiki.org/wiki/Increased_heart_rate",
            "Increased libido": "https://psychonautwiki.org/wiki/Increased_libido",
            "Increased perspiration": "https://psychonautwiki.org/wiki/Increased_perspiration",
            "Irritability": "https://psychonautwiki.org/wiki/Irritability",
            "Memory enhancement": "https://psychonautwiki.org/wiki/Memory_enhancement",
            "Motivation enhancement": "https://psychonautwiki.org/wiki/Motivation_enhancement",
            "Nausea": "https://psychonautwiki.org/wiki/Nausea",
            "Stimulation": "https://psychonautwiki.org/wiki/Stimulation",
            "Teeth grinding": "https://psychonautwiki.org/wiki/Teeth_grinding",
            "Temporary erectile dysfunction": "https://psychonautwiki.org/wiki/Temporary_erectile_dysfunction",
            "Thought acceleration": "https://psychonautwiki.org/wiki/Thought_acceleration",
            "Thought deceleration": "https://psychonautwiki.org/wiki/Thought_deceleration",
            "Thought organization": "https://psychonautwiki.org/wiki/Thought_organization",
            "Vasoconstriction": "https://psychonautwiki.org/wiki/Vasoconstriction",
            "Wakefulness": "https://psychonautwiki.org/wiki/Wakefulness"
        },
        "sources": {
            "_general": [
                "Treatment for amphetamine dependence and abuse. - http://www.ncbi.nlm.nih.gov/pubmed/11687171",
                "Comparative and interactive human psychopharmacologic effects of ketamine and amphetamine: implications for glutamatergic and dopaminergic models - https://www.ncbi.nlm.nih.gov/pubmed/16143730",
                "Treatment for amphetamine dependence and abuse. - https://www.ncbi.nlm.nih.gov/pubmed/11687171",
                "Comparative and interactive human psychopharmacologic effects of ketamine and amphetamine: implications for glutamatergic and dopaminergic model ps... - https://www.ncbi.nlm.nih.gov/pubmed/16143730",
                "The beta-lactam antibiotic ceftriaxone inhibits physical dependence and abstinence-induced withdrawal from cocaine, amphetamine, methamphetamine, a... - https://www.ncbi.nlm.nih.gov/pubmed/18342307",
                "A comparison of methylphenidate-, amphetamine-, and methamphetamine-induced hyperthermia and neurotoxicity in male Sprague-Dawley rats during the w... - https://www.ncbi.nlm.nih.gov/pubmed/22289608",
                "Enduring changes in brain and behavior produced by chronic amphetamine administration: a review and evaluation of animal models of amphetamine psyc... - https://www.ncbi.nlm.nih.gov/pubmed/3527341",
                "L-DOPA exacerbates amphetamine-induced dopamine depletion. - https://www.ncbi.nlm.nih.gov/pubmed/9565967",
                "Amphetamines in the treatment of Parkinson's disease. - http://www.ncbi.nlm.nih.gov/pubmed/1097600",
                "Effect of dopamine D2/D3 receptor antagonist sulpiride on amphetamine-induced changes in striatal extracellular dopamine. - http://www.ncbi.nlm.nih.gov/pubmed/11343690",
                "Behavioral and neuropharmacological analysis of amphetamine and 2,5-dimethoxy-4-methylamphetamine in rats. - http://www.ncbi.nlm.nih.gov/pubmed/1208759",
                "Identification of di(beta-phenylisopropyl)amine as the main ingredient in illicit amphetamine tablets. - http://www.ncbi.nlm.nih.gov/pubmed/12645186",
                "Long-term opiate effects on amphetamine-induced dopamine release in the nucleus accumbens core and conditioned place preference. - http://www.ncbi.nlm.nih.gov/pubmed/14751461",
                "Microglial activation is a pharmacologically specific marker for the neurotoxic amphetamines. - http://www.ncbi.nlm.nih.gov/pubmed/15337264",
                "Caffeine induces differential cross tolerance to the amphetamine-like discriminative stimulus effects of dopaminergic agonists. - http://www.ncbi.nlm.nih.gov/pubmed/15833596",
                "Christmas gingerbread (Lebkuchen) and Christmas cheer--review of the potential role of mood elevating amphetamine-like compounds formed in vivo and... - http://www.ncbi.nlm.nih.gov/pubmed/16007907",
                "Dual intoxication with diazepam and amphetamine: this drug interaction probably potentiates myocardial ischemia. - http://www.ncbi.nlm.nih.gov/pubmed/17320309",
                "Update on amphetamine neurotoxicity and its relevance to the treatment of ADHD. - http://www.ncbi.nlm.nih.gov/pubmed/17606768",
                "Mephedrone, compared with MDMA (ecstasy) and amphetamine, rapidly increases both dopamine and 5-HT levels in nucleus accumbens of awake rats. - http://www.ncbi.nlm.nih.gov/pubmed/21615721",
                "Aminorex, a metabolite of the cocaine adulterant levamisole, exerts amphetamine like actions at monoamine transporters. - http://www.ncbi.nlm.nih.gov/pubmed/24296074",
                "Long-lasting effects of escalating doses of d-amphetamine on brain monoamines, amphetamine-induced stereotyped behavior and spontaneous nocturnal l... - http://www.ncbi.nlm.nih.gov/pubmed/2440058",
                "Amphetamine modulates excitatory neurotransmission through endocytosis of the glutamate transporter EAAT3 in dopamine neurons. - http://www.ncbi.nlm.nih.gov/pubmed/25033183",
                "Acute methoxetamine and amphetamine poisoning with fatal outcome: a case report. - http://www.ncbi.nlm.nih.gov/pubmed/25060403",
                "[Antitussive effect of amphetamine]. - http://www.ncbi.nlm.nih.gov/pubmed/552131",
                "Amphetamine-clonidine interaction on neurotransmission in the vas deferens of the rat. - http://www.ncbi.nlm.nih.gov/pubmed/6098834",
                "Self-injection of amphetamine directly into the brain. - http://www.ncbi.nlm.nih.gov/pubmed/6415748",
                "Amphetamine-induced analgesia does not involve brain opioids. - http://www.ncbi.nlm.nih.gov/pubmed/6468501",
                "Amphetamine-metabolites of deprenyl involved in protection against neurotoxicity induced by MPTP and 2'-methyl-MPTP. - http://www.ncbi.nlm.nih.gov/pubmed/7931228",
                "L-DOPA exacerbates amphetamine-induced dopamine depletion. - http://www.ncbi.nlm.nih.gov/pubmed/9565967",
                "Long-lasting psychotomimetic consequences of repeated low-dose amphetamine exposure in rhesus monkeys. - http://www.ncbi.nlm.nih.gov/pubmed/9885781",
                "Use of naltrexone has been found to successfully aid in recovery from amphetamine addiction - http://ajp.psychiatryonline.org/doi/abs/10.1176/appi.ajp.2008.08020304",
                "According to drugs.com 's interaction checker, there is a potential for serotonin syndrome when mixing amphetamines and ssri's. The threshold dose for danger however is unknown. https://www.drugs.com/interactions-check.php?drug_list=2543-0,679-0",
                "Amphetamine has a half life of 7-31 hours: Mosby's Dental Drug Reference Ninth Edition 2010",
                "Pregnancy category C according to the FDA. Evidence has shown usage during pregnancy can cause premature birth, low birthweight, and withdrawal syndrome in the baby. This occurs more often in abuse of adderall. Recommendation is to consult with a physician if you are pregnant.",
                "Pregnancy category C according to the FDA. - https://www.accessdata.fda.gov/drugsatfda_docs/label/2007/011522s040lbl.pdf"
            ]
        }
    },
    "amt": {
        "aliases": [
            "Alpha-methyltryptamine",
            "alpha-methyltryptamine",
            "alphamethyltryptamine",
            "indopan",
            "monase"
        ],
        "categories": [
            "psychedelic",
            "stimulant",
            "research-chemical"
        ],
        "combos": {
            "2c-t-x": {
                "status": "Dangerous"
            },
            "2c-x": {
                "status": "Dangerous"
            },
            "5-meo-xxt": {
                "status": "Dangerous"
            },
            "alcohol": {
                "note": "aMT has a broad mechanism of action in the brain and so does alcohol so the combination can be unpredictable",
                "status": "Caution"
            },
            "amphetamines": {
                "status": "Dangerous"
            },
            "benzodiazepines": {
                "status": "Low Risk & Decrease"
            },
            "benzos": {
                "status": "Low Risk & Decrease"
            },
            "caffeine": {
                "note": "High doses of caffeine may cause anxiety which is less manageable when tripping, and since both are stimulating the combination may cause some physical discomfort.",
                "status": "Caution"
            },
            "cannabis": {
                "note": "Cannabis has an unexpectedly strong and somewhat unpredictable synergy with psychedelics. Small amounts can reduce nausea with aMT but take care.",
                "status": "Caution"
            },
            "cocaine": {
                "status": "Dangerous"
            },
            "dmt": {
                "status": "Low Risk & Synergy"
            },
            "dox": {
                "status": "Dangerous"
            },
            "dxm": {
                "status": "Dangerous"
            },
            "ghb/gbl": {
                "status": "Low Risk & Decrease"
            },
            "ketamine": {
                "status": "Low Risk & Synergy"
            },
            "lsd": {
                "status": "Low Risk & Synergy"
            },
            "maois": {
                "note": "aMT is an MAOI on its own. Using enzyme inhibitors can greatly reduce predictability of effects.",
                "status": "Dangerous"
            },
            "mdma": {
                "status": "Dangerous"
            },
            "mescaline": {
                "status": "Dangerous"
            },
            "mushrooms": {
                "status": "Low Risk & Synergy"
            },
            "mxe": {
                "status": "Dangerous"
            },
            "nbomes": {
                "status": "Dangerous"
            },
            "nitrous": {
                "status": "Low Risk & Synergy"
            },
            "opioids": {
                "note": "No unexpected interactions",
                "status": "Low Risk & No Synergy"
            },
            "pcp": {
                "status": "Dangerous"
            },
            "ssris": {
                "status": "Dangerous"
            },
            "tramadol": {
                "status": "Dangerous"
            }
        },
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "6-12"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "25-40mg",
                "Heavy": "60mg+",
                "Light": "15-25mg",
                "Strong": "40-60mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "10-16"
        },
        "formatted_effects": [
            "Euphoria",
            "empathy",
            "insight",
            "brightened colour",
            "Closed/Open eye visuals",
            "enhanced tactile sensation",
            "mental/physical stimulation",
            "decreased appetite",
            "pupil dilation",
            "restlessness",
            "change in perception",
            "ego softening",
            "sweating/chills",
            "muscle tension",
            "confusion",
            "insomnia",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "30-90"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_AMT.shtml"
        },
        "name": "amt",
        "pretty_name": "\u03b1MT",
        "properties": {
            "after-effects": "6-12 hours",
            "aliases": [
                "Alpha-methyltryptamine",
                "alpha-methyltryptamine",
                "alphamethyltryptamine",
                "indopan",
                "monase"
            ],
            "avoid": "Other MAOIs http://www.erowid.org/chemicals/maois/maois_info3.shtml",
            "categories": [
                "psychedelic",
                "stimulant",
                "research-chemical"
            ],
            "detection": "Not tested for in standard drug tests.",
            "dose": "Oral Light: 15-25mg Common: 25-40mg Strong: 40-60mg Heavy: 60mg+",
            "duration": "10-16 hours",
            "effects": "Euphoria, empathy, insight, brightened colour, Closed/Open eye visuals, enhanced tactile sensation, mental/physical stimulation, decreased appetite, pupil dilation, restlessness, change in perception, ego softening, sweating/chills, muscle tension, confusion, insomnia.",
            "onset": "30-90 minutes",
            "summary": "A long-acting psychedelic-empathogen with a broad method of action in the brain. Not suitable for combination with many other substances. Used as an anti-depressant in the Soviet Union, but later found popularity in the RC scene, mainly in the UK."
        }
    },
    "aniracetam": {
        "categories": [
            "research-chemical",
            "nootropic"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-4"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "1500mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "2-4"
        },
        "formatted_onset": {
            "value": "Rapid"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_Aniracetam.shtml"
        },
        "name": "aniracetam",
        "pretty_name": "Aniracetam",
        "properties": {
            "after-effects": "1-4 hours.",
            "bioavaiability": "Oral: 8.6-11.4% (This is due to the extensive first pass hepatic metabolism) Presumably higher when taken with fatty acids.",
            "categories": [
                "research-chemical",
                "nootropic"
            ],
            "dose": "Oral Common: 1500mg",
            "duration": "2-4 hours.",
            "onset": "Rapid",
            "summary": "An anxiolytic nootropic which modulates the AMPA receptor. Significantly more potent than racetam. May have positive effects on memory and cognition. Little recreational value. Sold in Europe as a prescription drug, but not approved by the FDA in the US."
        }
    },
    "apap": {
        "aliases": [
            "acetaminophen",
            "paracetamol",
            "tylenol"
        ],
        "categories": [
            "common"
        ],
        "dose_note": " NOTE: Maximum daily dose is 4g",
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-2"
        },
        "formatted_dose": {
            "Fever": {
                "Common": "300-500mg"
            },
            "Pain-relief": {
                "Common": "200-400mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "4-6"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "60-60"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_Acetaminophen.shtml"
        },
        "name": "apap",
        "pretty_name": "Paracetamol",
        "properties": {
            "after-effects": "1-2 hours.",
            "aliases": [
                "acetaminophen",
                "paracetamol",
                "tylenol"
            ],
            "bioavailabity": "Oral: 70-90% | Rectal: 30-70%",
            "categories": [
                "common"
            ],
            "dose": "Pain-relief Common: 200-400mg | Fever Common: 300-500mg | NOTE: Maximum daily dose is 4g",
            "duration": "4-6 hours",
            "onset": "60-60 minutes",
            "summary": "A common, over the counter, fever reducer and painkiller. It is mixed with many common opiates. Can cause liver damage and failure in higher doses. No recreational value."
        },
        "sources": {
            "_general": [],
            "dose": [
                "http://ceaccp.oxfordjournals.org/content/early/2013/10/10/bjaceaccp.mkt049.full"
            ],
            "duration": [
                "http://ceaccp.oxfordjournals.org/content/early/2013/10/10/bjaceaccp.mkt049.full"
            ]
        }
    },
    "armodafinil": {
        "aliases": [
            "nuvigil"
        ],
        "categories": [
            "stimulant",
            "nootropic",
            "habit-forming"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-12"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "50-150mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "12-16"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "30-45"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_Armodafinil.shtml"
        },
        "name": "armodafinil",
        "pretty_name": "Armodafinil",
        "properties": {
            "after-effects": "1-12 hours.",
            "aliases": [
                "nuvigil"
            ],
            "bioavailability": "Oral 97.78%.",
            "categories": [
                "stimulant",
                "nootropic",
                "habit-forming"
            ],
            "dose": "Common: 50-150mg's",
            "duration": "12-16 hours.",
            "onset": "30-45 minutes.",
            "summary": "The more potent of the two modafinil isomers, said to have a longer duration and lesser side effects. Sometimes prescribed for ADHD and daytime sleepiness."
        },
        "pweffects": {
            "Anxiety": "https://psychonautwiki.org/wiki/Anxiety",
            "Appetite suppression": "https://psychonautwiki.org/wiki/Appetite_suppression",
            "Body odor alteration": "https://psychonautwiki.org/wiki/Body_odor_alteration",
            "Dehydration": "https://psychonautwiki.org/wiki/Dehydration",
            "Diarrhea": "https://psychonautwiki.org/wiki/Diarrhea",
            "Dizziness": "https://psychonautwiki.org/wiki/Dizziness",
            "Emotion enhancement": "https://psychonautwiki.org/wiki/Emotion_enhancement",
            "Focus enhancement": "https://psychonautwiki.org/wiki/Focus_enhancement",
            "Headaches": "https://psychonautwiki.org/wiki/Headaches",
            "Increased heart rate": "https://psychonautwiki.org/wiki/Increased_heart_rate",
            "Increased libido": "https://psychonautwiki.org/wiki/Increased_libido",
            "Memory enhancement": "https://psychonautwiki.org/wiki/Memory_enhancement",
            "Motivation enhancement": "https://psychonautwiki.org/wiki/Motivation_enhancement",
            "Nausea": "https://psychonautwiki.org/wiki/Nausea",
            "Photophobia": "https://psychonautwiki.org/wiki/Photophobia",
            "Stimulation": "https://psychonautwiki.org/wiki/Stimulation",
            "Thought acceleration": "https://psychonautwiki.org/wiki/Thought_acceleration",
            "Wakefulness": "https://psychonautwiki.org/wiki/Wakefulness"
        }
    },
    "ashwagandha": {
        "categories": [
            "depressant",
            "supplement",
            "common"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-8"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "500-1000",
                "Light": "300-500",
                "Strong": "1000-2000"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "6-12"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "15-60"
        },
        "name": "ashwagandha",
        "pretty_name": "Ashwagandha",
        "properties": {
            "after-effects": "1-8 hours.",
            "categories": [
                "depressant",
                "supplement",
                "common"
            ],
            "dose": "Light: 300-500 Common: 500-1000 Strong: 1000-2000",
            "duration": "6-12 hours.",
            "onset": "15-60 minutes.",
            "summary": "Is an Adaptogen. It is commonly used for its ability to prevent anxiety. It also is helpful in relieving insomnia. It's name means \"Smell of Horse\" due to its smell and the traditional belief that ingesting the this herb will give you the strength and virility of a horse."
        }
    },
    "aspirin": {
        "aliases": [
            "acetylsalicylate"
        ],
        "categories": [
            "common"
        ],
        "dose_note": " NOTE: Aspirin is known to be dangerous in dosages of 4g and above",
        "formatted_dose": {
            "Oral": {
                "Common": "325mg-650mg",
                "Heavy": "1.6g",
                "Light": "75mg-81mg",
                "Threshold": "50mg"
            }
        },
        "formatted_duration": {
            "value": "Dose-Dependent"
        },
        "formatted_effects": [
            "Analgesia",
            "Antipyresis",
            "Anti-inflammation",
            "Antiaggregation"
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "30-90"
        },
        "name": "aspirin",
        "pretty_name": "Aspirin",
        "properties": {
            "aliases": [
                "acetylsalicylate"
            ],
            "avoid": "Acetazolamide, Ammonium Chloride, Alcohol, Tolbutamide, Chlorpropamide, Warfarin, Methotrexate, Phenytoin, Probenecid, Valproic Acid, Other NSAIDs, Corticosteroids, Spironolactone, Penicillin G, Vitamin C",
            "bioavailability": "Oral: 55.8-74%.",
            "categories": [
                "common"
            ],
            "dose": "Oral Threshold: 50mg Light: 75mg-81mg Common: 325mg-650mg Heavy: 1.6g | NOTE: Aspirin is known to be dangerous in dosages of 4g and above",
            "duration": "(Dose-Dependent) 2-3h (for low doses), 15-30h (for large doses)",
            "effects": "Analgesia, Antipyresis, Anti-inflammation, Antiaggregation",
            "onset": "30-90 minutes.",
            "summary": "A widely used anti-inflammatory and blood-thinner produced by acetylation of the naturally occurring salicyclic acid. Part of the nonsteroidal antiinflammatory class of drugs, a cyclooxygenase inhibitor. Very common over-the-counter pain reliever and fever reducer. Also used in smaller doses to lower risk of heart attack."
        }
    },
    "atomoxetine": {
        "aliases": [
            "strattera"
        ],
        "categories": [
            "tentative"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "2-24"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "18-40mg",
                "Light": "10-18mg",
                "Strong": "40-80mg+"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "8-12"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "15-45"
        },
        "name": "atomoxetine",
        "pretty_name": "Atomoxetine",
        "properties": {
            "after-effects": "2-24 hours.",
            "aliases": [
                "strattera"
            ],
            "bioavailability": "Oral: 63-94%.",
            "categories": [
                "tentative"
            ],
            "dose": "Oral Light: 10-18mg Common: 18-40mg Strong: 40-80mg+",
            "duration": "8-12 hours.",
            "onset": "15-45 minutes.",
            "summary": "A NRI that is used for ADHD. With a quite odd pharmacological background."
        }
    },
    "ayahuasca": {
        "aliases": [
            "pharmahuasca",
            "yage"
        ],
        "categories": [
            "psychedelic",
            "empathogen"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-8"
        },
        "formatted_dose": {
            "none": {
                "NOTE": "Dosage"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "4-8"
        },
        "formatted_effects": [
            "Euphoria",
            "empathy",
            "insight",
            "brightened colour",
            "Closed/Open eye visuals",
            "enhanced tactile sensation",
            "mental/physical stimulation",
            "decreased appetite",
            "pupil dilation",
            "restlessness",
            "change in perception",
            "ego softening",
            "sweating/chills",
            "muscle tension",
            "confusion",
            "insomnia",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "20-60"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_Ayahuasca.shtml"
        },
        "name": "ayahuasca",
        "pretty_name": "Ayahuasca",
        "properties": {
            "after-effects": "1-8 hours",
            "aliases": [
                "pharmahuasca",
                "yage"
            ],
            "avoid": "combining with any medications or substance contraindicated with MAOI's particuarly ssri's, mdxx compounds and amphetamines. Refer to http://wiki.tripsit.me/images/d/d6/TripSitDrugComboChart.gif for more info.",
            "categories": [
                "psychedelic",
                "empathogen"
            ],
            "duration": "4-8 hours",
            "effects": "Euphoria, empathy, insight, brightened colour, Closed/Open eye visuals, enhanced tactile sensation, mental/physical stimulation, decreased appetite, pupil dilation, restlessness, change in perception, ego softening, sweating/chills, muscle tension, confusion, insomnia.",
            "onset": "20-60 minutes",
            "summary": "A concoction made of two or more plants that contain at least an MAOI and DMT, the combination of which allows the DMT to work orally. Typically associated to south american cultures. Also, sometimes approximated synthetically by taking an external MAOI with extracted DMT. Causes intense, spiritually orientated hallucinogenic experiences."
        },
        "pweffects": {
            "8B Geometry - Exposure to inner mechanics of consciousness": "https://psychonautwiki.org/wiki/8B_Geometry_-_Exposure_to_inner_mechanics_of_consciousness",
            "Acuity enhancement": "https://psychonautwiki.org/wiki/Acuity_enhancement",
            "After images": "https://psychonautwiki.org/wiki/After_images",
            "Analysis enhancement": "https://psychonautwiki.org/wiki/Analysis_enhancement",
            "Auditory distortion": "https://psychonautwiki.org/wiki/Auditory_distortion",
            "Auditory enhancement": "https://psychonautwiki.org/wiki/Auditory_enhancement",
            "Auditory hallucinations": "https://psychonautwiki.org/wiki/Auditory_hallucinations",
            "Autonomous entities": "https://psychonautwiki.org/wiki/Autonomous_entities",
            "Colour enhancement": "https://psychonautwiki.org/wiki/Colour_enhancement",
            "Colour shifting": "https://psychonautwiki.org/wiki/Colour_shifting",
            "Conceptual thinking": "https://psychonautwiki.org/wiki/Conceptual_thinking",
            "Creativity enhancement": "https://psychonautwiki.org/wiki/Creativity_enhancement",
            "Delusions": "https://psychonautwiki.org/wiki/Delusions",
            "Diarrhea": "https://psychonautwiki.org/wiki/Diarrhea",
            "Drifting": "https://psychonautwiki.org/wiki/Drifting",
            "D\u00e9j\u00e0 vu": "https://psychonautwiki.org/wiki/D%C3%A9j%C3%A0_vu",
            "Emotion enhancement": "https://psychonautwiki.org/wiki/Emotion_enhancement",
            "Exposure to inner mechanics of consciousness": "https://psychonautwiki.org/wiki/Exposure_to_inner_mechanics_of_consciousness",
            "Feelings of eternalism": "https://psychonautwiki.org/wiki/Feelings_of_eternalism",
            "Feelings of interdependent opposites": "https://psychonautwiki.org/wiki/Feelings_of_interdependent_opposites",
            "Feelings of self-design": "https://psychonautwiki.org/wiki/Feelings_of_self-design",
            "Geometry": "https://psychonautwiki.org/wiki/Geometry",
            "Immersion enhancement": "https://psychonautwiki.org/wiki/Immersion_enhancement",
            "Internal hallucinations": "https://psychonautwiki.org/wiki/Internal_hallucinations",
            "Language suppression": "https://psychonautwiki.org/wiki/Language_suppression",
            "Magnification": "https://psychonautwiki.org/wiki/Magnification",
            "Memory suppression": "https://psychonautwiki.org/wiki/Memory_suppression",
            "Mindfulness": "https://psychonautwiki.org/wiki/Mindfulness",
            "Nausea": "https://psychonautwiki.org/wiki/Nausea",
            "Novelty enhancement": "https://psychonautwiki.org/wiki/Novelty_enhancement",
            "Pattern recognition enhancement": "https://psychonautwiki.org/wiki/Pattern_recognition_enhancement",
            "Personal bias suppression": "https://psychonautwiki.org/wiki/Personal_bias_suppression",
            "Personal meaning enhancement": "https://psychonautwiki.org/wiki/Personal_meaning_enhancement",
            "Personality regression": "https://psychonautwiki.org/wiki/Personality_regression",
            "Perspective alterations": "https://psychonautwiki.org/wiki/Perspective_alterations",
            "Pupil dilation": "https://psychonautwiki.org/wiki/Pupil_dilation",
            "Rejuvenation": "https://psychonautwiki.org/wiki/Rejuvenation",
            "Scenarios and plots": "https://psychonautwiki.org/wiki/Scenarios_and_plots",
            "Scenery slicing": "https://psychonautwiki.org/wiki/Scenery_slicing",
            "Sedation": "https://psychonautwiki.org/wiki/Sedation",
            "Settings, sceneries, and landscapes": "https://psychonautwiki.org/wiki/Settings,_sceneries,_and_landscapes",
            "Spirituality enhancement": "https://psychonautwiki.org/wiki/Spirituality_enhancement",
            "Spontaneous tactile sensations": "https://psychonautwiki.org/wiki/Spontaneous_tactile_sensations",
            "Stimulation": "https://psychonautwiki.org/wiki/Stimulation",
            "Subconscious communication": "https://psychonautwiki.org/wiki/Subconscious_communication",
            "Symmetrical texture repetition": "https://psychonautwiki.org/wiki/Symmetrical_texture_repetition",
            "Synaesthesia": "https://psychonautwiki.org/wiki/Synaesthesia",
            "Thought acceleration": "https://psychonautwiki.org/wiki/Thought_acceleration",
            "Thought connectivity": "https://psychonautwiki.org/wiki/Thought_connectivity",
            "Thought organization": "https://psychonautwiki.org/wiki/Thought_organization"
        }
    },
    "baclofen": {
        "aliases": [
            "gablofen"
        ],
        "categories": [
            "depressant",
            "habit-forming"
        ],
        "dose_note": " NOTE: Past 125mg's you may run into the issue of blacking out.",
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-6"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "20-50",
                "Heavy": "75-125mg",
                "Light": "10-20mg",
                "Strong": "50-75"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "3-6"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "15-45"
        },
        "name": "baclofen",
        "pretty_name": "Baclofen",
        "properties": {
            "after-effects": "1-6 hours.",
            "aliases": [
                "gablofen"
            ],
            "avoid": "All other CNS depressants.",
            "bioavailability": "Oral: 74%.",
            "categories": [
                "depressant",
                "habit-forming"
            ],
            "dose": "Oral Light: 10-20mg Common: 20-50 Strong: 50-75 Heavy: 75-125mg | NOTE: Past 125mg's you may run into the issue of blacking out.",
            "duration": "3-6 hours.",
            "onset": "15-45 minutes.",
            "summary": "Also known as Lioresal, Baclofen is a GABAb receptor agonist and central nervous system depressant used to treat spasticity, and holds promise as a treatment for alcoholism. It exhibits mild intoxicating effects similar to phenibut or pregabalin."
        },
        "sources": {
            "_general": [
                "A pilot study assessing pharmacokinectics and tolerability of Oral and intravenous Baclofen in healthy adult volunteers. http://www.ncbi.nlm.nih.gov/pubmed/25028414"
            ]
        }
    },
    "barbital": {
        "categories": [
            "barbiturate",
            "habit-forming",
            "depressant"
        ],
        "formatted_dose": {
            "Oral": {
                "Common": "650-970mg."
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "6-12"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "15-30"
        },
        "name": "barbital",
        "pretty_name": "Barbital",
        "properties": {
            "avoid": "All other CNS depressants.",
            "categories": [
                "barbiturate",
                "habit-forming",
                "depressant"
            ],
            "dose": "Common: 650-970mg.",
            "duration": "6-12 hours.",
            "onset": "15-30 minutes.",
            "summary": "The first commercially available barbiturate. Was used commonly as a sleeping aid until the 1950s."
        }
    },
    "bentazepam": {
        "aliases": [
            "thiadipone",
            "tiadipona"
        ],
        "categories": [
            "benzodiazepine",
            "depressant",
            "habit-forming"
        ],
        "dose_note": " NOTE: Liver damage has been reported a fair amount, so get your livers checked out regularly if using this substance over a prolonged amount of time.",
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-8"
        },
        "formatted_dose": {
            "Light:": {
                "Common": "30-50mg",
                "Light": "15-30mg",
                "Strong": "50-75mg+"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "3-6"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "15-45"
        },
        "name": "bentazepam",
        "pretty_name": "Bentazepam",
        "properties": {
            "2-6": "hours.",
            "after-effects": "1-8 hours.",
            "aliases": [
                "thiadipone",
                "tiadipona"
            ],
            "avoid": "All other CNS depressants.",
            "categories": [
                "benzodiazepine",
                "depressant",
                "habit-forming"
            ],
            "dose": "Light: 15-30mg Common: 30-50mg Strong: 50-75mg+ | NOTE: Liver damage has been reported a fair amount, so get your livers checked out regularly if using this substance over a prolonged amount of time.",
            "duration": "3-6 hours.",
            "onset": "15-45 minutes.",
            "summary": "Thienodiazepine that is an effective anxiolyric. Liver damage among other nasty things have been reported."
        },
        "sources": {
            "_general": [
                "Bentazepam versus Clorazepate in the treatment of anxiety disorders. http://www.sciencedirect.com/science/article/pii/S0011393X05804357"
            ]
        }
    },
    "benzodioxole-fentanyl": {
        "categories": [
            "opioid",
            "depressant",
            "research-chemical",
            "tentative"
        ],
        "name": "benzodioxole-fentanyl",
        "pretty_name": "BENZODIOXOLE-FENTANYL",
        "properties": {
            "categories": [
                "opioid",
                "depressant",
                "research-chemical",
                "tentative"
            ],
            "summary": "An analogue of Fentanyl that is not found in literature."
        }
    },
    "benzydamine": {
        "aliases": [
            "tantum"
        ],
        "categories": [
            "deliriant",
            "tentative",
            "stimulant"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "2-48"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "500-1000mg",
                "Light": "250-500mg",
                "Strong": "1000-1500mg+"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "4-8"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "15-60"
        },
        "name": "benzydamine",
        "pretty_name": "Benzydamine",
        "properties": {
            "after-effects": "2-48 hours.",
            "aliases": [
                "tantum"
            ],
            "categories": [
                "deliriant",
                "tentative",
                "stimulant"
            ],
            "dose": "Light: 250-500mg Common: 500-1000mg Strong: 1000-1500mg+",
            "duration": "4-8 hours.",
            "onset": "15-60 minutes.",
            "summary": "NSAID with local anesthetic and analgesic properties, similar to ibuprofen or naproxen. Sometimes abused in overdose with reported delirant and stimulant effects."
        },
        "pweffects": {
            "Abnormal heartbeat": "https://psychonautwiki.org/wiki/Abnormal_heartbeat",
            "Acuity suppression": "https://psychonautwiki.org/wiki/Acuity_suppression",
            "Anxiety": "https://psychonautwiki.org/wiki/Anxiety",
            "Auditory distortion": "https://psychonautwiki.org/wiki/Auditory_distortion",
            "Auditory hallucinations": "https://psychonautwiki.org/wiki/Auditory_hallucinations",
            "Autonomous entities": "https://psychonautwiki.org/wiki/Autonomous_entities",
            "Cognitive euphoria": "https://psychonautwiki.org/wiki/Cognitive_euphoria",
            "Delusions": "https://psychonautwiki.org/wiki/Delusions",
            "Depression": "https://psychonautwiki.org/wiki/Depression",
            "Drifting": "https://psychonautwiki.org/wiki/Drifting",
            "External hallucinations": "https://psychonautwiki.org/wiki/External_hallucinations",
            "Geometry": "https://psychonautwiki.org/wiki/Geometry",
            "Increased heart rate": "https://psychonautwiki.org/wiki/Increased_heart_rate",
            "Perspective alterations": "https://psychonautwiki.org/wiki/Perspective_alterations",
            "Scenarios and plots": "https://psychonautwiki.org/wiki/Scenarios_and_plots",
            "Settings, sceneries, and landscapes": "https://psychonautwiki.org/wiki/Settings,_sceneries,_and_landscapes",
            "Stimulation": "https://psychonautwiki.org/wiki/Stimulation",
            "Tactile suppression": "https://psychonautwiki.org/wiki/Tactile_suppression",
            "Thought acceleration": "https://psychonautwiki.org/wiki/Thought_acceleration",
            "Time distortion": "https://psychonautwiki.org/wiki/Time_distortion",
            "Visual haze": "https://psychonautwiki.org/wiki/Visual_haze"
        },
        "sources": {
            "_general": [
                "Recreational abuse with benzydamine hydrochloride (tantum rosa). http://www.ncbi.nlm.nih.gov/pubmed/17364645",
                "Recreational use of benzydamine as a hallucinogen among street youth in Brazil. http://www.ncbi.nlm.nih.gov/pubmed/19784487"
            ]
        }
    },
    "bk-2c-b": {
        "aliases": [
            "bk-2cb",
            "bk-2-cb",
            "b-k-2cb",
            "b-k2cb",
            "b-k2-cb",
            "b-k2-c-b",
            "b-k-2-c-b",
            "bk2cb"
        ],
        "categories": [
            "psychedelic",
            "research-chemical",
            "common"
        ],
        "dose_note": " NOTE: These doses are tentative and may need further research.",
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-12"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "80-100mg",
                "Heavy": "150mg+",
                "Strong": "100-150mg",
                "Threshold": "50-60mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "8-12"
        },
        "formatted_effects": [
            "Euphoria",
            "empathy",
            "insight",
            "brightened colour",
            "Closed/Open eye visuals",
            "enhanced tactile sensation",
            "mental/physical stimulation",
            "decreased appetite",
            "pupil dilation",
            "restlessness",
            "change in perception",
            "ego softening",
            "sweating/chills",
            "muscle tension",
            "confusion",
            "insomnia",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "20-70"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_BK2CB.shtml"
        },
        "name": "bk-2c-b",
        "pretty_name": "\u03b2k-2C-B",
        "properties": {
            "after-effects": "1-12 hours.",
            "aliases": [
                "bk-2cb",
                "bk-2-cb",
                "b-k-2cb",
                "b-k2cb",
                "b-k2-cb",
                "b-k2-c-b",
                "b-k-2-c-b",
                "bk2cb"
            ],
            "categories": [
                "psychedelic",
                "research-chemical",
                "common"
            ],
            "dose": "Oral Threshold: 50-60mg Common: 80-100mg Strong: 100-150mg Heavy: 150mg+",
            "duration": "8-12 hours.",
            "effects": "Euphoria, empathy, insight, brightened colour, Closed/Open eye visuals, enhanced tactile sensation, mental/physical stimulation, decreased appetite, pupil dilation, restlessness, change in perception, ego softening, sweating/chills, muscle tension, confusion, insomnia.",
            "onset": "20-70 minutes.",
            "summary": "A long-acting psychedelic and empathogen with unpredictable effectiveness. Roughly double the duration of 2c-b. Inactivated by high pH."
        }
    },
    "bk-2c-i": {
        "categories": [
            "psychedelic",
            "research-chemical",
            "tentative"
        ],
        "formatted_dose": {
            "Oral": {
                "Common": "120-180mg",
                "Heavy": "250mg+",
                "Light": "100-120mg",
                "Strong": "180-250mg"
            }
        },
        "formatted_effects": [
            "Euphoria",
            "empathy",
            "insight",
            "brightened colour",
            "Closed/Open eye visuals",
            "enhanced tactile sensation",
            "mental/physical stimulation",
            "decreased appetite",
            "pupil dilation",
            "restlessness",
            "change in perception",
            "ego softening",
            "sweating/chills",
            "muscle tension",
            "confusion",
            "insomnia",
            ""
        ],
        "name": "bk-2c-i",
        "pretty_name": "\u03b2k-2C-I",
        "properties": {
            "Duration": "4-6 hours.",
            "Onset": "20-40 minutes.",
            "categories": [
                "psychedelic",
                "research-chemical",
                "tentative"
            ],
            "dose": "Oral Light: 100-120mg Common: 120-180mg Strong: 180-250mg Heavy: 250mg+",
            "effects": "Euphoria, empathy, insight, brightened colour, Closed/Open eye visuals, enhanced tactile sensation, mental/physical stimulation, decreased appetite, pupil dilation, restlessness, change in perception, ego softening, sweating/chills, muscle tension, confusion, insomnia.",
            "summary": "Novel psychedelic that is the Beta-Ketone derivative of 2C-I.",
            "warn": "If you have thyroid problems, do not take this substance."
        }
    },
    "bk-ivp": {
        "categories": [
            "stimulant",
            "research-chemical",
            "tentative"
        ],
        "formatted_dose": {
            "Oral": {
                "Common": "100-150mg",
                "Light": "60-100mg",
                "Strong": "150-200mg+"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "1-3"
        },
        "formatted_onset": {
            "value": "Rapid."
        },
        "name": "bk-ivp",
        "pretty_name": "\u03b2k-IVP",
        "properties": {
            "categories": [
                "stimulant",
                "research-chemical",
                "tentative"
            ],
            "dose": "Light: 60-100mg Common: 100-150mg Strong: 150-200mg+",
            "duration": "1-3 hours.",
            "onset": "Rapid.",
            "summary": "The beta-ketone analogue of IVP, this is a rare RC stimulant in the same family as MDPV. Little is known but effects are probably similar to MDPV or more generally amphetamine or high dose caffeine."
        }
    },
    "bod": {
        "categories": [
            "psychedelic",
            "research-chemical",
            "tentative"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "3-6"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "20-30mg",
                "Heavy": "30-40mg+",
                "Light": "15-20mg",
                "Threshold": "12-15mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "8-14"
        },
        "formatted_effects": [
            "Euphoria",
            "empathy",
            "insight",
            "brightened colour",
            "Closed/Open eye visuals",
            "enhanced tactile sensation",
            "mental/physical stimulation",
            "decreased appetite",
            "pupil dilation",
            "restlessness",
            "change in perception",
            "ego softening",
            "sweating/chills",
            "muscle tension",
            "confusion",
            "insomnia",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "60-120"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_BOD.shtml",
            "pihkal": "https://www.erowid.org/library/books_online/pihkal/pihkal014.shtml"
        },
        "name": "bod",
        "pretty_name": "BOD",
        "properties": {
            "after-effects": "3-6 hours.",
            "categories": [
                "psychedelic",
                "research-chemical",
                "tentative"
            ],
            "dose": "Threshold: 12-15mg's Light: 15-20mg Common: 20-30mg Heavy: 30-40mg+",
            "duration": "8-14~ hours.",
            "effects": "Euphoria, empathy, insight, brightened colour, Closed/Open eye visuals, enhanced tactile sensation, mental/physical stimulation, decreased appetite, pupil dilation, restlessness, change in perception, ego softening, sweating/chills, muscle tension, confusion, insomnia.",
            "onset": "60-120 minutes",
            "summary": "Beta-methoxy analogue of 2C-D, seems to be more \"mild\" than the likes of 2C-X and DOX compounds. Is 50/50 whether the body load is barely there, or overpowering the experience."
        }
    },
    "bromadol": {
        "aliases": [
            "bdpc"
        ],
        "categories": [
            "opioid",
            "depressant",
            "habit-forming",
            "tentative"
        ],
        "formatted_duration": {
            "Insufflated": "3-6",
            "Intramuscular": "2-4",
            "Intravenous": "1-3",
            "_unit": "hours"
        },
        "formatted_onset": {
            "Insufflated": "5-15",
            "Intramuscular": "1-5",
            "Intravenous": "1-2",
            "_unit": "minutes"
        },
        "name": "bromadol",
        "pretty_name": "Bromadol",
        "properties": {
            "aliases": [
                "bdpc"
            ],
            "avoid": "All other CNS depressants.",
            "categories": [
                "opioid",
                "depressant",
                "habit-forming",
                "tentative"
            ],
            "duration": "Insufflated: 3-6 hours. | Intramuscular: 2-4 hours. | Intravenous: 1-3 hours.",
            "onset": "Insufflated: 5-15 minutes. | Intramuscular: 1-5 minutes. | Intravenous: 1-2 minutes.",
            "summary": "A very potent opioid that has an arylcyclohexylamine structure. Intial studies estimated that it was ~10,000x Morphine in animal studies. However that value has since decreased to ~504 times the potency of morphine for the trans-isomer."
        }
    },
    "bromantane": {
        "categories": [
            "depressant",
            "stimulant",
            "research-chemical",
            "nootropic"
        ],
        "dose_note": " NOTE: Anticholinergic effects at high doses (around 500mg)",
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-10"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "100-200mg",
                "Light": "50-100mg",
                "Strong": "200-400mg+"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "4-8"
        },
        "formatted_onset": {
            "Oral": "10-30",
            "_unit": "minutes"
        },
        "name": "bromantane",
        "pretty_name": "Bromantane",
        "properties": {
            "after-effects": "1-10 hours.",
            "bioavailabity": "Oral: 42%.",
            "categories": [
                "depressant",
                "stimulant",
                "research-chemical",
                "nootropic"
            ],
            "dose": "Oral Light: 50-100mg Common: 100-200mg Strong: 200-400mg+ | NOTE: Anticholinergic effects at high doses (around 500mg)",
            "duration": "4-8 hours.",
            "onset": "Oral: 10-30 minutes.",
            "summary": "An unusual stimulant and anxiolytic drug with dopamine and serotonin reuptake inhibition properties. Infamously used as a doping agent in the 1996 Olympics. There are some concerns it may exacerbate the underlying causes of Alzheimer's disease."
        },
        "pweffects": {
            "Analysis enhancement": "https://psychonautwiki.org/wiki/Analysis_enhancement",
            "Anxiety suppression": "https://psychonautwiki.org/wiki/Anxiety_suppression",
            "Cognitive euphoria": "https://psychonautwiki.org/wiki/Cognitive_euphoria",
            "Dehydration": "https://psychonautwiki.org/wiki/Dehydration",
            "Focus enhancement": "https://psychonautwiki.org/wiki/Focus_enhancement",
            "Increased blood pressure": "https://psychonautwiki.org/wiki/Increased_blood_pressure",
            "Memory enhancement": "https://psychonautwiki.org/wiki/Memory_enhancement",
            "Motivation enhancement": "https://psychonautwiki.org/wiki/Motivation_enhancement",
            "Muscle relaxation": "https://psychonautwiki.org/wiki/Muscle_relaxation",
            "Stamina enhancement": "https://psychonautwiki.org/wiki/Stamina_enhancement",
            "Stimulation": "https://psychonautwiki.org/wiki/Stimulation",
            "Thought acceleration": "https://psychonautwiki.org/wiki/Thought_acceleration",
            "Vasoconstriction": "https://psychonautwiki.org/wiki/Vasoconstriction",
            "Wakefulness": "https://psychonautwiki.org/wiki/Wakefulness"
        }
    },
    "bromazepam": {
        "aliases": [
            "lectopam",
            "lexilium",
            "lexotan",
            "brazepam",
            "lexotanil"
        ],
        "categories": [
            "benzodiazepine",
            "habit-forming",
            "depressant"
        ],
        "dose_note": " NOTE: 6mg of Bromazepam is approximately equivelant to 10mg Diazepam",
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-16"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "5-10mg",
                "Heavy": "10-15mg+",
                "Light": "2.5-5mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "4-8"
        },
        "formatted_effects": [
            "Anxiolytic",
            "Sedative",
            "Muscle Relaxant",
            "Amnesia",
            "Dystaxia",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "10-20"
        },
        "name": "bromazepam",
        "pretty_name": "Bromazepam",
        "properties": {
            "after-effects": "1-16 hours.",
            "aliases": [
                "lectopam",
                "lexilium",
                "lexotan",
                "brazepam",
                "lexotanil"
            ],
            "avoid": "All other CNS depressants.",
            "bioavailability": "Oral: 84%.",
            "categories": [
                "benzodiazepine",
                "habit-forming",
                "depressant"
            ],
            "dose": "Oral Light: 2.5-5mg Common: 5-10mg Heavy: 10-15mg+ | NOTE: 6mg of Bromazepam is approximately equivelant to 10mg Diazepam",
            "dose_to_diazepam": "Bromazepam - 5-6mg's ~=10mg Diazepam.",
            "duration": "4-8 hours.",
            "effects": "Anxiolytic, Sedative, Muscle Relaxant, Amnesia, Dystaxia.",
            "onset": "10-20 minutes.",
            "summary": "A benzodiazepine drug with a medium-long duration, developed by Roche in the 1960s. Has primarily anxiolytic properties. May cause lowered inhibitions and amnesia in high doses."
        },
        "sources": {
            "_general": [
                "Bioavailability of bromazepam in man after single administration of an oral solution. http://www.ncbi.nlm.nih.gov/pubmed/6142717"
            ]
        }
    },
    "bromazolam": {
        "aliases": [
            "xli-268",
            "xli268"
        ],
        "categories": [
            "benzodiazepine",
            "research-chemical",
            "tentative",
            "habit-forming"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-12"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "1-2mg",
                "Light": "0.5-1mg",
                "Strong": "2-4mg+"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "5-8"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "15-45"
        },
        "name": "bromazolam",
        "pretty_name": "Bromazolam",
        "properties": {
            "after-effects": "1-12 hours.",
            "aliases": [
                "xli-268",
                "xli268"
            ],
            "avoid": "All other CNS depressants.",
            "categories": [
                "benzodiazepine",
                "research-chemical",
                "tentative",
                "habit-forming"
            ],
            "dose": "Oral Light: 0.5-1mg Common: 1-2mg Strong: 2-4mg+",
            "duration": "5-8 hours.",
            "onset": "15-45 minutes.",
            "summary": "A rather novel Benzodiazepine that is structurally quite close to Alprazolam."
        }
    },
    "bromo-dragonfly": {
        "aliases": [
            "bromo-d-fly",
            "bdfly",
            "bromo-dragon-fly",
            "dob-dragonfly"
        ],
        "categories": [
            "psychedelic",
            "research-chemical"
        ],
        "formatted_aftereffects": {
            "value": "Up"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "100-400ug",
                "Strong": "500-750ug+",
                "Threshold": "100ug"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "16-30"
        },
        "formatted_effects": [
            "Euphoria",
            "empathy",
            "insight",
            "brightened colour",
            "Closed/Open eye visuals",
            "enhanced tactile sensation",
            "mental/physical stimulation",
            "decreased appetite",
            "pupil dilation",
            "restlessness",
            "change in perception",
            "ego softening",
            "sweating/chills",
            "muscle tension",
            "confusion",
            "insomnia",
            ""
        ],
        "formatted_onset": {
            "_unit": "hours",
            "value": "Up"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_BromoDragonfly.shtml"
        },
        "name": "bromo-dragonfly",
        "pretty_name": "Bromo-DragonFLY",
        "properties": {
            "after-effects": "Up to many days.",
            "aliases": [
                "bromo-d-fly",
                "bdfly",
                "bromo-dragon-fly",
                "dob-dragonfly"
            ],
            "categories": [
                "psychedelic",
                "research-chemical"
            ],
            "dose": "Oral Threshold: 100ug Common: 100-400ug Strong: 500-750ug+",
            "duration": "16-30 hours.",
            "effects": "Euphoria, empathy, insight, brightened colour, Closed/Open eye visuals, enhanced tactile sensation, mental/physical stimulation, decreased appetite, pupil dilation, restlessness, change in perception, ego softening, sweating/chills, muscle tension, confusion, insomnia.",
            "onset": "Up to 6 hours.",
            "summary": "A psychedelic phenethylamine and benzofuran that is very potent and has a long duration. Was briefly sold as \"2C-B-FLY\" in 2005/6 and has lead to multiple deaths."
        }
    },
    "brotizolam": {
        "aliases": [
            "lendormin"
        ],
        "categories": [
            "depressant",
            "benzodiazepine",
            "habit-forming",
            "depressant"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-4"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "200-400ug",
                "Light": "100ug-200ug",
                "Strong": "400ug-600ug+",
                "Threshold": "80ug"
            }
        },
        "formatted_duration": {
            "Oral": "4-8",
            "_unit": "hours"
        },
        "formatted_effects": [
            "Anxiolytic",
            "Sedative",
            "Muscle Relaxant",
            "Amnesia",
            "Dystaxia",
            ""
        ],
        "formatted_onset": {
            "Oral": "10-30",
            "_unit": "minutes"
        },
        "name": "brotizolam",
        "pretty_name": "Brotizolam",
        "properties": {
            "after-effects": "1-4 hours.",
            "aliases": [
                "lendormin"
            ],
            "avoid": "All other CNS depressants.",
            "bioavailabity": "Oral 70% +/- 24%.",
            "categories": [
                "depressant",
                "benzodiazepine",
                "habit-forming",
                "depressant"
            ],
            "dose": "Oral Threshold: 80ug Light: 100ug-200ug Common: 200-400ug Strong: 400ug-600ug+",
            "dose_to_diazepam": "Brotizolam - 0.25mg ~=10mg Diazepam.",
            "duration": "Oral: 4-8 hours. Insufflated: 2-6 hours.",
            "effects": "Anxiolytic, Sedative, Muscle Relaxant, Amnesia, Dystaxia.",
            "onset": "Oral: 10-30 minutes. Insufflated: 2-10 minutes.",
            "summary": "Benzodiazepine analogue which is sedating, hypnotic and anxiolytic. It is available as prescription medicine in much of Europe, and is an extremely potent drug active at only 80ug. May cause amnesia and lowered inhibitions in overdose. Danger of respiratory depression when combined with other depressants. Short half life."
        },
        "sources": {
            "_general": [
                "Pharmacokinetics of brotizolam in healthy subjects following intravenous and oral administration. http://www.ncbi.nlm.nih.gov/pubmed/6661374"
            ]
        }
    },
    "buphedrone": {
        "categories": [
            "stimulant",
            "research-chemical",
            "habit-forming"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-8"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "30-50mg",
                "Heavy": "50-80mg",
                "Light": "10-30mg"
            }
        },
        "formatted_duration": {
            "Insufflated": "1-2",
            "Oral": "2-3",
            "_unit": "hours"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "10-20"
        },
        "name": "buphedrone",
        "pretty_name": "Buphedrone",
        "properties": {
            "after-effects": "1-8 hours.",
            "categories": [
                "stimulant",
                "research-chemical",
                "habit-forming"
            ],
            "dose": "Oral Light: 10-30mg Common: 30-50mg Heavy: 50-80mg",
            "duration": "Oral: 2-3 hours | Insufflated: 1-2 hours",
            "onset": "10-20 minutes",
            "summary": "A cathinone stimulant first discovered in 1928, has gained some modest popularity as a mephedrone replacement. Said to be to be around 2-3x more potent than methcathinone."
        }
    },
    "buprenorphine": {
        "aliases": [
            "suboxone",
            "subs",
            "bupe"
        ],
        "categories": [
            "opioid",
            "habit-forming",
            "depressant"
        ],
        "dose_note": " NOTE: The ceiling dose for Buprenorphine is usually between 16mg and 32mg, anything above this will not produce any increase in effects. Also, after dosing 4mg your opioid receptors are completely covered.",
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-16"
        },
        "formatted_dose": {
            "\u0002WARNING\u0003:": {},
            "\u000303Light\u0003:": {}
        },
        "formatted_duration": {
            "Low": "Dose",
            "_unit": "hours"
        },
        "formatted_effects": [
            "Euphoria",
            "Dry Mouth",
            "Mood lift",
            "Itchiness",
            "Relaxant",
            "Constipation",
            "Pupil constriction",
            "Analgesia",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "60-90"
        },
        "name": "buprenorphine",
        "pretty_name": "Buprenorphine",
        "properties": {
            "after-effects": "1-16 hours.",
            "aliases": [
                "suboxone",
                "subs",
                "bupe"
            ],
            "bioavailability": "Oral 22% | Sublingual 30% | Intramuscular 90-100%",
            "categories": [
                "opioid",
                "habit-forming",
                "depressant"
            ],
            "dose": "\u000303Light\u0003: 1-2mg \u000308Common\u0003: 3-6mg \u000304Strong\u0003: 6-8mg \u000305Heavy\u0003: 8mg+ | \u0002WARNING\u0003: These doses are for tolerant users, new users can require as little as 0.1mg.",
            "duration": "Low Dose: 8-12 hours High Dose: 24-72 hours",
            "effects": "Euphoria, Dry Mouth, Mood lift, Itchiness, Relaxant, Constipation, Pupil constriction, Analgesia.",
            "onset": "60-90 minutes",
            "summary": "A semi-synthetic opioid analgesic also known as subutex. Often administered as Butrans patches, or in combination with Naloxone as Suboxone, a heroin replacement therapy drug. Will cause withdrawals if you have an opioid tolerance and don't wait long enough (typically around 48 hours) before taking this."
        },
        "sources": {
            "_general": [
                "https://www.ncbi.nlm.nih.gov/pubmed/10928310-Effects of buprenorphine versus buprenorphine/naloxone tablets in non-dependent opioid abusers."
            ]
        }
    },
    "bupropion": {
        "aliases": [
            "wellbutrin",
            "zyban",
            "amfebutamone"
        ],
        "categories": [
            "stimulant",
            "habit-forming"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-6"
        },
        "formatted_dose": {
            "none": {
                "NOTE": "Highly"
            }
        },
        "formatted_duration": {
            "Metabolites": "20-37",
            "Parent": "11-21",
            "_unit": "hours"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "15-90"
        },
        "name": "bupropion",
        "pretty_name": "Bupropion",
        "properties": {
            "adverse-effects": "Agitation, dry mouth, insomnia, headache/migraine, nausea/vomiting, constipation, tremor, dizziness, excessive sweating, blurred vision, tachycardia, confusion, rash, hostility, cardiac arrhythmia, and auditory disturbance",
            "after-effects": "1-6 hours.",
            "aliases": [
                "wellbutrin",
                "zyban",
                "amfebutamone"
            ],
            "categories": [
                "stimulant",
                "habit-forming"
            ],
            "chemistry": "IUPAC: (\u00b1)-2-(tert-Butylamino)-1-(3-chlorophenyl)propan-1-one | Formula: C13H18ClNO | Molecular Mass: 239.74 g/mol",
            "contradictions": "Seizure disorder, current or prior diagnosis of bulimia or anorexia nervosa, abrupt discontinuation of alcohol, benzodiazepines, barbiturates, and anti-epileptic drugs, and MAOIs,",
            "duration": "Parent: 11-21 hours | Metabolites: 20-37 hours",
            "general-effects": "Mild - moderate increase in motor activity and agitation/excitement",
            "legal": "Australia: Prescription Only (S4) | Canada: \u211e-only | United Kingdom: POM | United States: \u211e-only",
            "onset": "15-90 minutes.",
            "overdose-symptoms": "Seizure, hallucinations, loss of consciousness, sinus tachycardia, ECG changes, bradycardia, cardiac failure, cardiac arrest, and death",
            "pharmacokinetics": "Protein Binding: 84% (bupropion), 77% [hydroxybupropion (active metabolite)], 42% [threohydrobupropion (active metabolite)] | Metabolism: hepatic, primarily CYP2B6-mediated hydroxylation; both bupropion and hydroxybupropion (active metabolite) are CYP2D6 inhibitors | Excretion: renal (87%; 0.5% unchanged) and faecal (10%)",
            "pharmacology": "NDRI (Norepinephrine-Dopamine Reuptake Inhibitor); NDRA (Norepinephrine-Dopamine Releasing Agent); \u03b13\u03b22, \u03b13\u03b24, \u03b14\u03b22, and \u03b17 nACh receptor antagonist",
            "summary": "A frequently prescribed atypical antidepressant. Occasionally prescribed as an aid to smoking cessation. May lower seizure threshold in predisposed individuals. Poorly understood mechanism of action, probably an NDRI. Avoid combination with other drugs.",
            "warning": "Bupropion lowers the seizure threshold and can induce seizures when excessive doses are used and/or when combined with CNS stimulants or other drugs that also lower the threshold, such as theophylline, steroids, some tricyclic antidepressants, and alcohol"
        },
        "sources": {
            "_general": [
                "Evaluation of a Potential Metabolism-Mediated Drug-Drug Interaction Between Atomoxetine and Bupropion in Healthy Volunteers. http://www.ncbi.nlm.nih.gov/pubmed/27518170"
            ]
        }
    },
    "butylone": {
        "aliases": [
            "bk-mbdb",
            "b1",
            "bk-methyl-j"
        ],
        "categories": [
            "psychedelic",
            "stimulant",
            "research-chemical",
            "habit-forming",
            "empathogen"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "2-12"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "70-100mg",
                "Heavy": "200mg+",
                "Light": "40-70mg",
                "Strong": "150-200mg",
                "Threshold": "20-40mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "3-5"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "25-45"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_bkMBDB.shtml"
        },
        "name": "butylone",
        "pretty_name": "Butylone",
        "properties": {
            "after-effects": "2-12 hours.",
            "aliases": [
                "bk-mbdb",
                "b1",
                "bk-methyl-j"
            ],
            "categories": [
                "psychedelic",
                "stimulant",
                "research-chemical",
                "habit-forming",
                "empathogen"
            ],
            "dose": "Oral Threshold: 20-40mg Light: 40-70mg Common: 70-100mg Strong: 150-200mg Heavy: 200mg+",
            "duration": "3-5 hours.",
            "onset": "25-45 minutes",
            "summary": "Empathogen and stimulant of the cathinone class."
        }
    },
    "butyrfentanyl": {
        "aliases": [
            "bf",
            "b-f"
        ],
        "categories": [
            "opioid",
            "research-chemical",
            "habit-forming",
            "tentative",
            "depressant"
        ],
        "dose_note": " Note: It's a potent drug, be careful.",
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-4"
        },
        "formatted_dose": {
            "": {},
            "Oral": {
                "Common": "800-1500ug",
                "Light": "400-800ug",
                "Strong": "1.5-3mg"
            }
        },
        "formatted_duration": {
            "Oral": "3-4",
            "_unit": "hours"
        },
        "formatted_onset": {
            "Oral": "15-30",
            "_unit": "minutes"
        },
        "name": "butyrfentanyl",
        "pretty_name": "Butyrfentanyl",
        "properties": {
            "after-effects": "1-4 hours.",
            "alias": "b-f",
            "aliases": [
                "bf",
                "b-f"
            ],
            "avoid": "All other CNS depressants.",
            "categories": [
                "opioid",
                "research-chemical",
                "habit-forming",
                "tentative",
                "depressant"
            ],
            "dose": "Oral Light: 400-800ug Common: 800-1500ug Strong: 1.5-3mg || Note: It's a potent drug, be careful.",
            "duration": "Oral: 3-4 hours. Insufflated: 2-3 hours.",
            "onset": "Oral: 15-30 minutes. Insufflated: 5-10 minutes.",
            "summary": "Potent short-acting opioid and fentanyl analogue. Often dispensed in a nasal spray. This is an highly potent drug - exercise extreme caution. May cause respiratory depression and death in overdose."
        }
    },
    "bzp": {
        "categories": [
            "stimulant",
            "research-chemical",
            "habit-forming"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "2-4"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "70-100mg",
                "Heavy": "130mg+",
                "Light": "40-70mg",
                "Strong": "100-130mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "4-6"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "30-45"
        },
        "name": "bzp",
        "pretty_name": "BZP",
        "properties": {
            "after-effects": "2-4 hours.",
            "categories": [
                "stimulant",
                "research-chemical",
                "habit-forming"
            ],
            "dose": "Oral Light: 40-70mg Common: 70-100mg Strong: 100-130mg Heavy: 130mg+",
            "duration": "4-6 hours.",
            "onset": "30-45 minutes.",
            "summary": "A stimulant that was sold as \"legal ecstasy\" in the late 2000s, and was one of the first drugs widely marketed as a \"research chemical.\" It has a much less favourable effect profile and has fallen out of popularity greatly since it was banned in many countries."
        }
    },
    "c30-nbome": {
        "categories": [
            "research-chemical",
            "inactive"
        ],
        "name": "c30-nbome",
        "pretty_name": "C30-NBOMe",
        "properties": {
            "categories": [
                "research-chemical",
                "inactive"
            ],
            "summary": "Inactive, if you do feel effects from \"C30-NBOMe\" you're either having the placebo effect of the world, or are being sold something else, and I recommend you send it in for testing somewhere."
        }
    },
    "caffeine": {
        "aliases": [
            "coffee"
        ],
        "categories": [
            "stimulant",
            "habit-forming",
            "nootropic",
            "common"
        ],
        "combos": {
            "2c-t-x": {
                "note": "High doses of caffeine may cause anxiety which is less manageable when tripping, and since both are stimulating the combination may cause some physical discomfort.",
                "status": "Low Risk & No Synergy"
            },
            "2c-x": {
                "note": "High doses of caffeine may cause anxiety which is less manageable when tripping, and since both are stimulating the combination may cause some physical discomfort.",
                "status": "Low Risk & No Synergy"
            },
            "5-meo-xxt": {
                "note": "High doses of caffeine may cause anxiety which is less manageable when tripping, and since both are stimulating the combination may cause some physical discomfort.",
                "status": "Low Risk & No Synergy"
            },
            "alcohol": {
                "status": "Low Risk & No Synergy"
            },
            "amphetamines": {
                "note": "This combination of stimulants is not generally necessary and may increase strain on the heart, as well as potentially causing anxiety and greater physical discomfort.",
                "status": "Caution"
            },
            "amt": {
                "note": "High doses of caffeine may cause anxiety which is less manageable when tripping, and since both are stimulating the combination may cause some physical discomfort.",
                "status": "Caution"
            },
            "benzodiazepines": {
                "status": "Low Risk & Decrease"
            },
            "benzos": {
                "status": "Low Risk & Decrease"
            },
            "cannabis": {
                "status": "Low Risk & No Synergy"
            },
            "cocaine": {
                "note": "Both stimulants, risk of tachycardia, hypertension, and in extreme cases heart failure.",
                "status": "Caution"
            },
            "dmt": {
                "status": "Low Risk & No Synergy"
            },
            "dox": {
                "note": "High doses of caffeine may cause anxiety which is less manageable when tripping, and since both are stimulating it may cause some physical discomfort.",
                "status": "Caution"
            },
            "dxm": {
                "note": "High doses of caffeine may cause anxiety which is less manageable when tripping, and since both are stimulating the combination may cause some physical discomfort.",
                "status": "Low Risk & No Synergy"
            },
            "ghb/gbl": {
                "status": "Low Risk & No Synergy"
            },
            "ketamine": {
                "note": "No unexpected interactions.",
                "status": "Low Risk & No Synergy"
            },
            "lsd": {
                "status": "Low Risk & No Synergy"
            },
            "maois": {
                "status": "Low Risk & No Synergy"
            },
            "mdma": {
                "note": "Caffiene is not really necessary with MDMA and increases any neurotoxic effects from MDMA",
                "status": "Caution"
            },
            "mescaline": {
                "note": "High doses of caffeine are uncomfortable and this will be magnified by psychedelics",
                "status": "Low Risk & No Synergy"
            },
            "mushrooms": {
                "status": "Low Risk & No Synergy"
            },
            "mxe": {
                "note": "No likely interactions",
                "status": "Low Risk & No Synergy"
            },
            "nbomes": {
                "note": "Caffiene can bring out the natural stimulation from psychedelic drugs to make it uncomfortable. High doses can cause anxiety which is hard to handle while tripping",
                "status": "Caution"
            },
            "nitrous": {
                "status": "Low Risk & No Synergy"
            },
            "opioids": {
                "status": "Low Risk & No Synergy"
            },
            "pcp": {
                "note": "Details of this combination are not well understood but PCP generally interacts in an unpredictable manner.",
                "status": "Caution"
            },
            "ssris": {
                "status": "Low Risk & No Synergy"
            },
            "tramadol": {
                "status": "Low Risk & No Synergy"
            }
        },
        "dose_note": " NOTE: The lethal dose for caffeine starts at approximately 3g. The average cup of coffee contains roughly 75-150mg of caffeine.",
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "3-4"
        },
        "formatted_dose": {
            "Threshold:": {
                "Common": "75mg-250mg",
                "Heavy": "400mg+",
                "Light": "20-75mg",
                "Strong": "250-400mg",
                "Threshold": "10-20mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "1.5-5"
        },
        "formatted_effects": [
            "elevated heartrate",
            "increase in cognitive abilities",
            "physical agitation",
            "panicked thinking",
            "racing thoughts",
            "uncomfortable bodyload"
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "5-10"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_Caffeine.shtml"
        },
        "name": "caffeine",
        "pretty_name": "Caffeine",
        "properties": {
            "after-effects": "3-4 hours",
            "aliases": [
                "coffee"
            ],
            "bioavailability": "Orally it varies from around 77%-99%",
            "categories": [
                "stimulant",
                "habit-forming",
                "nootropic",
                "common"
            ],
            "dose": "Threshold: 10-20mg Light: 20-75mg Common: 75mg-250mg Strong: 250-400mg Heavy: 400mg+ | NOTE: The lethal dose for caffeine starts at approximately 3g. The average cup of coffee contains roughly 75-150mg of caffeine.",
            "duration": "1.5-5 hours",
            "effects": "elevated heartrate, increase in cognitive abilities, physical agitation, panicked thinking, racing thoughts, uncomfortable bodyload",
            "onset": "5-10 minutes",
            "summary": "Caffeine is a a CNS stimulant, and also the most widely used psychoactive substance in the world. It is legal and unregulated in most parts of the world, and is found in many commonly sold products. It has a good safety profile, though regular heavy use can cause physical dependence and contribute to certain medical conditions."
        },
        "pweffects": {
            "Analysis enhancement": "https://psychonautwiki.org/wiki/Analysis_enhancement",
            "Anxiety": "https://psychonautwiki.org/wiki/Anxiety",
            "Appetite suppression": "https://psychonautwiki.org/wiki/Appetite_suppression",
            "Bronchodilation": "https://psychonautwiki.org/wiki/Bronchodilation",
            "Cognitive euphoria": "https://psychonautwiki.org/wiki/Cognitive_euphoria",
            "Cognitive fatigue": "https://psychonautwiki.org/wiki/Cognitive_fatigue",
            "Depression": "https://psychonautwiki.org/wiki/Depression",
            "Focus enhancement": "https://psychonautwiki.org/wiki/Focus_enhancement",
            "Frequent urination": "https://psychonautwiki.org/wiki/Frequent_urination",
            "Increased blood pressure": "https://psychonautwiki.org/wiki/Increased_blood_pressure",
            "Increased heart rate": "https://psychonautwiki.org/wiki/Increased_heart_rate",
            "Increased libido": "https://psychonautwiki.org/wiki/Increased_libido",
            "Irritability": "https://psychonautwiki.org/wiki/Irritability",
            "Memory enhancement": "https://psychonautwiki.org/wiki/Memory_enhancement",
            "Motivation enhancement": "https://psychonautwiki.org/wiki/Motivation_enhancement",
            "Stimulation": "https://psychonautwiki.org/wiki/Stimulation",
            "Tactile enhancement": "https://psychonautwiki.org/wiki/Tactile_enhancement",
            "Thought acceleration": "https://psychonautwiki.org/wiki/Thought_acceleration",
            "Thought deceleration": "https://psychonautwiki.org/wiki/Thought_deceleration",
            "Vasoconstriction": "https://psychonautwiki.org/wiki/Vasoconstriction",
            "Wakefulness": "https://psychonautwiki.org/wiki/Wakefulness"
        }
    },
    "camazepam": {
        "aliases": [
            "albego",
            "limpidon",
            "paxor"
        ],
        "categories": [
            "benzodiazepine",
            "habit-forming",
            "tentative",
            "depressant"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-12"
        },
        "formatted_dose": {
            "Oral": {
                "Heavy": "40+",
                "Light": "10-20mg",
                "Moderate": "20-40mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "8-12"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "45-90"
        },
        "name": "camazepam",
        "pretty_name": "Camazepam",
        "properties": {
            "after-effects": "1-12 hours.",
            "aliases": [
                "albego",
                "limpidon",
                "paxor"
            ],
            "avoid": "Avoid all other CNS depressants.",
            "categories": [
                "benzodiazepine",
                "habit-forming",
                "tentative",
                "depressant"
            ],
            "dose": "Light: 10-20mg Moderate: 20-40mg Heavy: 40+ mg",
            "duration": "8-12 hours. Dose and tolerance dependent.",
            "onset": "45-90 minutes.",
            "summary": "A benzodiazepine drug that is stronger in terms of anxiety relief than it is in terms of how hypnotic it is. It is a metabolite of diazepam and has limited anticonvulsant properties."
        }
    },
    "cannabis": {
        "aliases": [
            "weed",
            "thc",
            "marijuana",
            "dagga",
            "hash"
        ],
        "categories": [
            "depressant",
            "stimulant",
            "psychedelic",
            "habit-forming",
            "common"
        ],
        "combos": {
            "2c-t-x": {
                "note": "Cannabis has an unexpectedly strong and somewhat unpredictable synergy with psychedelics.",
                "status": "Caution"
            },
            "2c-x": {
                "note": "Cannabis has an unexpectedly strong and somewhat unpredictable synergy with psychedelics.",
                "status": "Caution"
            },
            "5-meo-xxt": {
                "note": "Cannabis has an unexpectedly strong and somewhat unpredictable synergy with psychedelics.",
                "status": "Caution"
            },
            "alcohol": {
                "note": "In excess, this combination can cause nausea.",
                "status": "Low Risk & Synergy"
            },
            "amphetamines": {
                "note": "Stimulants increase anxiety levels and the risk of thought loops which can lead to negative experiences",
                "status": "Caution"
            },
            "amt": {
                "note": "Cannabis has an unexpectedly strong and somewhat unpredictable synergy with psychedelics. Small amounts can reduce nausea with aMT but take care.",
                "status": "Caution"
            },
            "benzodiazepines": {
                "status": "Low Risk & Decrease"
            },
            "benzos": {
                "status": "Low Risk & Decrease"
            },
            "caffeine": {
                "status": "Low Risk & No Synergy"
            },
            "cocaine": {
                "note": "Stimulants increase anxiety levels and the risk of thought loops which can lead to negative experiences",
                "status": "Caution"
            },
            "dmt": {
                "note": "Cannabis has an unexpectedly strong and somewhat unpredictable synergy with psychedelics.",
                "status": "Caution"
            },
            "dox": {
                "note": "Cannabis has an unexpectedly strong and somewhat unpredictable synergy with psychedelics.",
                "status": "Caution"
            },
            "dxm": {
                "status": "Low Risk & Synergy"
            },
            "ghb/gbl": {
                "status": "Low Risk & Synergy"
            },
            "ketamine": {
                "status": "Low Risk & Synergy"
            },
            "lsd": {
                "note": "Cannabis has an unexpectedly strong and somewhat unpredictable synergy with psychedelics.",
                "status": "Caution"
            },
            "maois": {
                "status": "Low Risk & Synergy"
            },
            "mdma": {
                "note": "Large amounts of cannabis may cause strong and somewhat unpredictable experiences in combination with MDMA. Cannabis should be saved for towards the end of the experience if possible.",
                "status": "Low Risk & Synergy"
            },
            "mescaline": {
                "note": "Cannabis has an unexpectedly strong and somewhat unpredictable synergy with psychedelics.",
                "status": "Caution"
            },
            "mushrooms": {
                "note": "Cannabis has an unexpectedly strong and somewhat unpredictable synergy with psychedelics.",
                "status": "Caution"
            },
            "mxe": {
                "status": "Low Risk & Synergy"
            },
            "nbomes": {
                "note": "Cannabis has an unexpectedly strong and somewhat unpredictable synergy with psychedelics.",
                "status": "Caution"
            },
            "nitrous": {
                "status": "Low Risk & Synergy"
            },
            "opioids": {
                "status": "Low Risk & Synergy"
            },
            "pcp": {
                "status": "Low Risk & Synergy"
            },
            "ssris": {
                "status": "Low Risk & No Synergy"
            },
            "tramadol": {
                "status": "Low Risk & Synergy"
            }
        },
        "formatted_aftereffects": {
            "Oral": "6-24",
            "Smoked": "2-24",
            "_unit": "hours"
        },
        "formatted_dose": {
            "Smoked": {
                "Common": "20-60mg",
                "Light": "10-20mg",
                "Strong": "60-100mg+"
            }
        },
        "formatted_duration": {
            "Oral": "4-10",
            "Smoked": "1-4",
            "_unit": "hours"
        },
        "formatted_effects": [
            "Sedation",
            "Appetite enhancement",
            "Muscle relaxation",
            "Muscle spasms",
            "Nausea",
            "Pain relief",
            "Vasodilation",
            "Creativity Enhancement",
            "Anxiety suppression",
            "Anxiety",
            "Dream suppression",
            "Emotion enhancement",
            "Mindfulness",
            "Paranoia",
            "Sleepiness",
            ""
        ],
        "formatted_onset": {
            "Oral": "30-120",
            "Smoked": "1-10",
            "_unit": "minutes"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_Cannabis.shtml"
        },
        "name": "cannabis",
        "pretty_name": "Cannabis",
        "properties": {
            "after-effects": "Smoked: 2-24 hours | Oral: 6-24 hours",
            "aliases": [
                "weed",
                "thc",
                "marijuana",
                "dagga",
                "hash"
            ],
            "categories": [
                "depressant",
                "stimulant",
                "psychedelic",
                "habit-forming",
                "common"
            ],
            "detection": "Single Use: blood 1-3 days, saliva 12-24 hrs, urine 1-3 days, hair 0 to 90 days. Regular use: blood 1-2 weeks, saliva 15-50 days, urine 15-50 days, hair 0 to 90 days. Oral single use: blood: 2-7 days",
            "dose": "Smoked Light: 33mg Common: 66mg Strong: 100mg. Oral Light: 10-20mg Common: 20-60mg Strong: 60-100mg+",
            "duration": "Smoked: 1-4 hours | Oral: 4-10 hours",
            "effects": "Sedation, Appetite enhancement, Muscle relaxation, Muscle spasms, Nausea, Pain relief, Vasodilation, Creativity Enhancement, Anxiety suppression, Anxiety, Dream suppression, Emotion enhancement, Mindfulness, Paranoia, Sleepiness.",
            "onset": "Smoked: 1-10 minutes | Oral: 30-120 minutes",
            "summary": "A common and widely used psychoactive plant, which is beginning to enjoy legal status for medical and even recreational use in some parts of the world. Usually smoked or eaten, primary effects are relaxation and an affinity towards food - a state described as being 'stoned.'"
        },
        "pweffects": {
            "Acuity enhancement": "https://psychonautwiki.org/wiki/Acuity_enhancement",
            "Acuity suppression": "https://psychonautwiki.org/wiki/Acuity_suppression",
            "Anxiety": "https://psychonautwiki.org/wiki/Anxiety",
            "Anxiety suppression": "https://psychonautwiki.org/wiki/Anxiety_suppression",
            "Appetite enhancement": "https://psychonautwiki.org/wiki/Appetite_enhancement",
            "Auditory enhancement": "https://psychonautwiki.org/wiki/Auditory_enhancement",
            "Brightness alteration": "https://psychonautwiki.org/wiki/Brightness_alteration",
            "Changes in gravity": "https://psychonautwiki.org/wiki/Changes_in_gravity",
            "Colour enhancement": "https://psychonautwiki.org/wiki/Colour_enhancement",
            "Conceptual thinking": "https://psychonautwiki.org/wiki/Conceptual_thinking",
            "Creativity enhancement": "https://psychonautwiki.org/wiki/Creativity_enhancement",
            "Dehydration": "https://psychonautwiki.org/wiki/Dehydration",
            "Depersonalization": "https://psychonautwiki.org/wiki/Depersonalization",
            "Derealization": "https://psychonautwiki.org/wiki/Derealization",
            "Dream suppression": "https://psychonautwiki.org/wiki/Dream_suppression",
            "Emotion enhancement": "https://psychonautwiki.org/wiki/Emotion_enhancement",
            "Feelings of impending doom": "https://psychonautwiki.org/wiki/Feelings_of_impending_doom",
            "Geometry": "https://psychonautwiki.org/wiki/Geometry",
            "Immersion enhancement": "https://psychonautwiki.org/wiki/Immersion_enhancement",
            "Information processing suppression": "https://psychonautwiki.org/wiki/Information_processing_suppression",
            "Laughter": "https://psychonautwiki.org/wiki/Laughter",
            "Memory suppression": "https://psychonautwiki.org/wiki/Memory_suppression",
            "Mindfulness": "https://psychonautwiki.org/wiki/Mindfulness",
            "Motor control loss": "https://psychonautwiki.org/wiki/Motor_control_loss",
            "Nausea suppression": "https://psychonautwiki.org/wiki/Nausea_suppression",
            "Novelty enhancement": "https://psychonautwiki.org/wiki/Novelty_enhancement",
            "Pain relief": "https://psychonautwiki.org/wiki/Pain_relief",
            "Paranoia": "https://psychonautwiki.org/wiki/Paranoia",
            "Perception of increased weight": "https://psychonautwiki.org/wiki/Perception_of_increased_weight",
            "Personal meaning enhancement": "https://psychonautwiki.org/wiki/Personal_meaning_enhancement",
            "Psychosis": "https://psychonautwiki.org/wiki/Psychosis",
            "Sedation": "https://psychonautwiki.org/wiki/Sedation",
            "Seizure suppression": "https://psychonautwiki.org/wiki/Seizure_suppression",
            "Spontaneous tactile sensations": "https://psychonautwiki.org/wiki/Spontaneous_tactile_sensations",
            "Suggestibility enhancement": "https://psychonautwiki.org/wiki/Suggestibility_enhancement",
            "Synaesthesia": "https://psychonautwiki.org/wiki/Synaesthesia",
            "Thought connectivity": "https://psychonautwiki.org/wiki/Thought_connectivity",
            "Thought deceleration": "https://psychonautwiki.org/wiki/Thought_deceleration",
            "Time distortion": "https://psychonautwiki.org/wiki/Time_distortion",
            "Vasodilation": "https://psychonautwiki.org/wiki/Vasodilation"
        },
        "sources": {
            "_general": [
                "Cannabis use and risk of lung cancer: a case-control study. - http://www.ncbi.nlm.nih.gov/pubmed/18238947",
                "Cannabis smoking and risk of lung cancer in men: a pooled analysis of three studies in Maghreb. - http://www.ncbi.nlm.nih.gov/pubmed/19057263",
                "Cannabis induces a clinical response in patients with Crohn's disease: a prospective placebo-controlled study. - http://www.ncbi.nlm.nih.gov/pubmed/23648372",
                "Effects of cannabis on the adolescent brain. - http://www.ncbi.nlm.nih.gov/pubmed/23829363",
                "Is cannabis neurotoxic for the healthy brain? A meta-analytical review of structural brain alterations in non-psychotic users. - http://www.ncbi.nlm.nih.gov/pubmed/24118193",
                "A controlled family study of cannabis users with and without psychosis. - http://www.ncbi.nlm.nih.gov/pubmed/24309013",
                "How cannabis causes paranoia: using the intravenous administration of \u22069-tetrahydrocannabinol (THC) to identify key cognitive mechanisms leading to... - http://www.ncbi.nlm.nih.gov/pubmed/25031222",
                "The impact of marijuana use on glucose, insulin, and insulin resistance among US adults. - https://www.ncbi.nlm.nih.gov/pubmed/23684393",
                "Marijuana and lung diseases. - https://www.ncbi.nlm.nih.gov/pubmed/24384575",
                "Neuroprotective antioxidants from marijuana. - http://www.ncbi.nlm.nih.gov/pubmed/10863546",
                "Decreased depression in marijuana users. - http://www.ncbi.nlm.nih.gov/pubmed/15964704",
                "Self-reported anal sex practice and sexual risk-taking after marijuana use among a sample of Georgia inmates. - http://www.ncbi.nlm.nih.gov/pubmed/16820076",
                "Effects of marijuana extract and tetrahydrocannabinol on electroencephalographic sleep patterns. - http://www.ncbi.nlm.nih.gov/pubmed/178475",
                "Association of marijuana use and the incidence of testicular germ cell tumors. - http://www.ncbi.nlm.nih.gov/pubmed/19204904",
                "The effects of combinations of intranasal cocaine, smoked marijuana, and task performance on heart rate and blood pressure. - http://www.ncbi.nlm.nih.gov/pubmed/2162543",
                "Ischemic stroke after use of the synthetic marijuana \"spice\". - http://www.ncbi.nlm.nih.gov/pubmed/24212384",
                "Marijuana's effects on human cognitive functions, psychomotor functions, and personality. - http://www.ncbi.nlm.nih.gov/pubmed/3009708",
                "Effects of marijuana on human reaction time and motor control. - http://www.ncbi.nlm.nih.gov/pubmed/600655",
                "Effects of marijuana on testosterone in male subjects. - http://www.ncbi.nlm.nih.gov/pubmed/6316036",
                "Detection times of marijuana metabolites in urine by immunoassay and GC-MS. - http://www.ncbi.nlm.nih.gov/pubmed/8926739",
                "Medical/therapeutic value of cannabis literature review - http://bjp.rcpsych.org/content/178/2/107.short"
            ]
        }
    },
    "carisoprodol": {
        "aliases": [
            "soma"
        ],
        "categories": [
            "depressant",
            "habit-forming"
        ],
        "dose_note": " NOTE: Tolerance raises very fast",
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-3"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "325-500mg",
                "Light": "100-325mg",
                "Strong": "500-750mg",
                "Threshold": "100mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "2-4"
        },
        "formatted_effects": [
            "Anxiolytic",
            "Sedative",
            "Muscle Relaxant",
            "Amnesia",
            "Dystaxia",
            "Hypnotic",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "15-30"
        },
        "name": "carisoprodol",
        "pretty_name": "Carisoprodol",
        "properties": {
            "after-effects": "1-3 hours.",
            "aliases": [
                "soma"
            ],
            "categories": [
                "depressant",
                "habit-forming"
            ],
            "dose": "Oral Threshold: 100mg's Light: 100-325mg's Common: 325-500mg's Strong: 500-750mg's | NOTE: Tolerance raises very fast",
            "duration": "2-4 hours",
            "effects": "Anxiolytic, Sedative, Muscle Relaxant, Amnesia, Dystaxia, Hypnotic.",
            "onset": "15-30 minutes",
            "summary": "A skeletal muscle relaxant drug also known as Soma, carisoprodol has limited recreational value, however its main metabolite meprobamate has some moderate tranquilising properties. Sometimes found in concoctions with codeine or caffeine."
        }
    },
    "carphedon": {
        "aliases": [
            "phenylpiracetam",
            "phenotropil"
        ],
        "categories": [
            "stimulant",
            "research-chemical",
            "nootropic"
        ],
        "dose_note": " NOTE: Typically taken up to three times a day.",
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-4"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "100-200mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "4-6"
        },
        "formatted_onset": {
            "value": "Rapid."
        },
        "name": "carphedon",
        "pretty_name": "Phenylpiracetam",
        "properties": {
            "after-effects": "1-4 hours.",
            "aliases": [
                "phenylpiracetam",
                "phenotropil"
            ],
            "categories": [
                "stimulant",
                "research-chemical",
                "nootropic"
            ],
            "dose": "Oral Common: 100-200mg | NOTE: Typically taken up to three times a day.",
            "duration": "4-6 hours.",
            "onset": "Rapid.",
            "summary": "A nootropic and piracetam analogue also known as fonturacetam, this drug has been shown to have potential memory enhancing, anxiolytic, anti-amnesia and anti-depressive effects, however has little recreational value. Around 45x more potent than Piracetam."
        }
    },
    "centrophenoxine": {
        "aliases": [
            "lucidril",
            "meclofenoxate"
        ],
        "categories": [
            "nootropic",
            "tentative",
            "stimulant"
        ],
        "formatted_dose": {
            "250mg": {}
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "4-8"
        },
        "name": "centrophenoxine",
        "pretty_name": "Centrophenoxine",
        "properties": {
            "aliases": [
                "lucidril",
                "meclofenoxate"
            ],
            "categories": [
                "nootropic",
                "tentative",
                "stimulant"
            ],
            "dose": "250mg 1-6x a day.",
            "duration": "4-8 hours.",
            "summary": "Cholinergic compound with a DMAE compotent. Is thought to help in reversing some signs of aging. Naturally found substance, most notably in fish."
        }
    },
    "changa": {
        "categories": [
            "psychedelic",
            "tentative"
        ],
        "dose_note": " NOTE: These are tentative estimates as Changa potency and dosing will vary per batch/source.",
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-36"
        },
        "formatted_dose": {
            "Light:": {
                "Common": "15-30mg",
                "Heavy": "50+mg",
                "Light": "5-15mg",
                "Strong": "30-50mg"
            }
        },
        "formatted_duration": {
            "_unit": "minutes",
            "value": "6-12"
        },
        "formatted_effects": [
            "immersive experience",
            "open eye visuals",
            "radical perspective shifting",
            "profound life-changing spiritual experiences",
            "powerful rushing of sensation",
            "change in perception of time",
            "auditory hallucinations",
            "color shifting",
            "hard on lungs when smoking",
            "stomach discomfort",
            "difficulty integrating experiences",
            "overwhelming fear"
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "0-2"
        },
        "name": "changa",
        "pretty_name": "Changa",
        "properties": {
            "after-effects": "1-36 hours",
            "avoid": "combining with any medications or substance contraindicated with MAOI's particuarly ssri's, mdxx compounds and amphetamines. Refer to http://wiki.tripsit.me/wiki/Drug_combinations for more info.",
            "categories": [
                "psychedelic",
                "tentative"
            ],
            "dose": "Light: 5-15mg Common: 15-30mg Strong: 30-50mg Heavy: 50+mg | NOTE: These are tentative estimates as Changa potency and dosing will vary per batch/source.",
            "duration": "6-12 minutes",
            "effects": "immersive experience, open eye visuals, radical perspective shifting, profound life-changing spiritual experiences, powerful rushing of sensation, change in perception of time, auditory hallucinations, color shifting, hard on lungs when smoking, stomach discomfort, difficulty integrating experiences, overwhelming fear",
            "onset": "0-2 minutes",
            "summary": "Changa is the name given to a smoking blend of caapi or other MAOI containing plants with an infusion of extracted DMT. Changa often contains other milder psychoactive herbs as well. The maoi action results in a longer and more intense trip (see Ayahuasca) NOTE: There is no standardized recipe or concentration of infused DMT, therefor dosage and potency will vary per batch."
        }
    },
    "chloral-betaine": {
        "categories": [
            "depressant",
            "habit-forming"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "2-8"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "250-500mg.",
                "Light": "125-250mg",
                "Strong": "500-1000mg."
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "3-7"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "15-30"
        },
        "name": "chloral-betaine",
        "pretty_name": "Chloral betaine",
        "properties": {
            "after-effects": "2-8 hours.",
            "categories": [
                "depressant",
                "habit-forming"
            ],
            "dose": "Oral Light: 125-250mg Common: 250-500mg. Strong: 500-1000mg.",
            "duration": "3-7 hours.",
            "onset": "15-30 minutes.",
            "summary": "Sedative-hypnotic drug that was introduced into the United States in the 60's. Betaine complex with Chloral hydrate, thus makes it act as an extended version of Chloral hydrate then to Trichloroethanol, which is responsible for most of its effects."
        }
    },
    "chloroform": {
        "categories": [
            "depressant",
            "habit-forming",
            "tentative"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-6"
        },
        "formatted_duration": {
            "value": "Short."
        },
        "formatted_onset": {
            "value": "Rapid."
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_Chloroform.shtml"
        },
        "name": "chloroform",
        "pretty_name": "Chloroform",
        "properties": {
            "after-effects": "1-6 hours.",
            "avoid": "Avoid CNS depressants and smoking if you do decide to take this chemical.",
            "categories": [
                "depressant",
                "habit-forming",
                "tentative"
            ],
            "duration": "Short.",
            "obtain": "Air.",
            "onset": "Rapid.",
            "summary": "A naturally occurring organic compound once used as an anaesthetic. Has practically disappeared in this usage due to numerous harmful effects including danger of sudden death through cardiac arrhythmia. Has been implicated in numerous murders. Highly unsafe."
        }
    },
    "cialis": {
        "formatted_dose": {
            "Oral": {
                "Common": "5-10mg",
                "Light": "2.5-5mg",
                "Strong": "10-20mg."
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "4-6"
        },
        "name": "cialis",
        "pretty_name": "Tadalafil",
        "properties": {
            "dose": "Light: 2.5-5mg Common: 5-10mg Strong: 10-20mg.",
            "duration": "4-6 hours.",
            "summary": "Tadalafil, a PDE5 inhibitor used to combat erectile disfunction. Dangerous in combination with other drugs which lower blood pressure."
        }
    },
    "cinolazepam": {
        "aliases": [
            "geroderm"
        ],
        "categories": [
            "depressant",
            "habit-forming"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "12-20"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "30-60mg",
                "Light": "10-30mg",
                "Strong": "60-120mg+"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "8-12"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "30-90"
        },
        "name": "cinolazepam",
        "pretty_name": "Cinolazepam",
        "properties": {
            "after-effects": "12-20 hours",
            "aliases": [
                "geroderm"
            ],
            "avoid": "Caution: Do not mix with alcohol or opioids/opiates, ambien or any CNS depressants in general. The combination can prove to be fatal and also increases likelihood of blacking out if you survive",
            "bioavailability": "Oral 90-100%",
            "categories": [
                "depressant",
                "habit-forming"
            ],
            "dose": "Light: 10-30mg Common: 30-60mg Strong: 60-120mg+",
            "duration": "8-12 hours",
            "onset": "30-90 minutes.",
            "summary": "A benzodiazepine derivative drug with anxiolytic effects but mainly hypnotic effects. It is extremely effective for sleep aid but has mild euphoria compared to other benzos"
        }
    },
    "citalopram": {
        "aliases": [
            "celexa",
            "cipramil"
        ],
        "categories": [
            "common",
            "ssri"
        ],
        "formatted_dose": {
            "20-40mg": {}
        },
        "name": "citalopram",
        "pretty_name": "Citalopram",
        "properties": {
            "aliases": [
                "celexa",
                "cipramil"
            ],
            "categories": [
                "common",
                "ssri"
            ],
            "dose": "20-40mg Once a day.",
            "summary": "Citalopram is an SSRI that is used to treat depression. It does not lead to a high and causes a wide range of negative psychological and physical effects when people attempt to abuse it and can lead to serotonin syndrome and cause suicidal ideation. Those with bipolar disorder tend to go into a mixed state or manic states when trying SSRI's."
        }
    },
    "clobazam": {
        "aliases": [
            "frisium"
        ],
        "categories": [
            "benzodiazepine",
            "habit-forming",
            "depressant"
        ],
        "dose_note": " NOTE: 20mg of Clobazam is approximately equal to 10mg of Diazepam",
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-12"
        },
        "formatted_dose": {
            "Light:": {
                "Common": "10-15mg",
                "Heavy": "15-30mg+",
                "Light": "5-10mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "6-12"
        },
        "formatted_effects": [
            "Anxiolytic",
            "Sedative",
            "Muscle Relaxant",
            "Amnesia",
            "Dystaxia",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "20-40"
        },
        "name": "clobazam",
        "pretty_name": "Clobazam",
        "properties": {
            "Summary": "A long acting half life benzo that focues on Anxiolytic and/or Anticonvulsant.",
            "after-effects": "1-12 hours.",
            "aliases": [
                "frisium"
            ],
            "avoid": "All other CNS depressants",
            "bioavailability": "Oral 85-90%",
            "categories": [
                "benzodiazepine",
                "habit-forming",
                "depressant"
            ],
            "dose": "Light: 5-10mg Common: 10-15mg Heavy: 15-30mg+ | NOTE: 20mg of Clobazam is approximately equal to 10mg of Diazepam",
            "dose_to_diazepam": "Clobazam - 20mg ~=10mg Diazepam.",
            "duration": "6-12 hours.",
            "effects": "Anxiolytic, Sedative, Muscle Relaxant, Amnesia, Dystaxia.",
            "onset": "20-40 minutes",
            "summary": "A long acting benzodiazepine which focuses primarily on anxiolytic and anticonvulsant properties. It is used medically to treat epilepsy, and this along with its relatively many negative side-effects and contraindications in comparison with other benzodiazepines means it isn't frequently used recreationally."
        },
        "sources": {
            "_general": [
                "clobazam dosage equivalence to diazepam being 2:1 - The royal society of medicine International Congress and Symposium Series number 43: Clobazam ( Z. subhan study)",
                "Clobazam at doses under 40mg is found to not significantly alter memory or learning tasks compared to placebo as opposed to diazepam which had strong negative effects on memory and learning tasks in a comparitive study done by Z. Subhan found in: The royal society of medicine International Congress and Symposium Series no. 43"
            ]
        }
    },
    "clomethiazole": {
        "categories": [
            "depressant",
            "research-chemical",
            "habit-forming",
            "tentative"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-16"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "150-200mg",
                "Heavy": "200mg+",
                "Light": "100-150mg",
                "Threshold": "100mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "5-8"
        },
        "formatted_effects": [
            "Anxiolytic",
            "Sedative",
            "Muscle Relaxant",
            "Amnesia",
            "Dystaxia",
            "Hypnotic",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "15-40"
        },
        "name": "clomethiazole",
        "pretty_name": "Clomethiazole",
        "properties": {
            "after-effects": "1-16 hours.",
            "an": "",
            "categories": [
                "depressant",
                "research-chemical",
                "habit-forming",
                "tentative"
            ],
            "dose": "Oral Threshold: 100mg Light: 100-150mg Common: 150-200mg Heavy: 200mg+",
            "duration": "5-8 hours. ",
            "effects": "Anxiolytic, Sedative, Muscle Relaxant, Amnesia, Dystaxia, Hypnotic.",
            "onset": "15-40 minutes. ",
            "summary": "Structurally related to Thiamine (vitamin B1), but with binding potential at the GABAa site, which causes it to produce effects most like those of a barbiturate: an effective sedative and hypnotic. Originally developed by Hoffman-LaRoche in the 1930s, it has seen use as a treatment for acute alcohol withdrawal.",
            "warning": "The normal amount in capsules is 192mg's. Treat this more as a barbiturate than a benzodiazepine, as the toxicology for this substance is rather lacking."
        }
    },
    "clonazepam": {
        "aliases": [
            "klonopin",
            "kpin"
        ],
        "categories": [
            "benzodiazepine",
            "habit-forming",
            "depressant",
            "common"
        ],
        "dose_note": " NOTE: 0.5mg of Clonazepam is approximately equal to 10mg Diazepam.",
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "8-48"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "0.5-1mg",
                "Light": "0.25-0.5mg",
                "Strong": "1-2mg+"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "8-12"
        },
        "formatted_effects": [
            "Anxiolytic",
            "Sedative",
            "Muscle Relaxant",
            "Amnesia",
            "Dystaxia",
            "Hypnotic",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "20-45"
        },
        "name": "clonazepam",
        "pretty_name": "Clonazepam",
        "properties": {
            "after-effects": "8-48 hours.",
            "aliases": [
                "klonopin",
                "kpin"
            ],
            "avoid": "All other CNS depressants",
            "bioavailability": "Oral 90%",
            "categories": [
                "benzodiazepine",
                "habit-forming",
                "depressant",
                "common"
            ],
            "dose": "Oral Light: 0.25-0.5mg Common: 0.5-1mg Strong: 1-2mg+ | NOTE: 0.5mg of Clonazepam is approximately equal to 10mg Diazepam.",
            "dose_to_diazepam": "Clonazepam - 0.5mg ~=10mg Diazepam.",
            "duration": "8-12 hours.",
            "effects": "Anxiolytic, Sedative, Muscle Relaxant, Amnesia, Dystaxia, Hypnotic.",
            "onset": "20-45 minutes",
            "onset:": "20-45 minutes.",
            "summary": "A medium-length common prescription benzodiazepine, often used to treat panic attacks because of its relatively fast sublingual onset. Primarily anxiolytic, but also possessing of other benzo traits."
        },
        "pweffects": {
            "Amnesia": "https://psychonautwiki.org/wiki/Amnesia",
            "Analysis suppression": "https://psychonautwiki.org/wiki/Analysis_suppression",
            "Anxiety suppression": "https://psychonautwiki.org/wiki/Anxiety_suppression",
            "Compulsive redosing": "https://psychonautwiki.org/wiki/Compulsive_redosing",
            "Delusions": "https://psychonautwiki.org/wiki/Delusions",
            "Disinhibition": "https://psychonautwiki.org/wiki/Disinhibition",
            "Dizziness": "https://psychonautwiki.org/wiki/Dizziness",
            "Emotion suppression": "https://psychonautwiki.org/wiki/Emotion_suppression",
            "Information processing suppression": "https://psychonautwiki.org/wiki/Information_processing_suppression",
            "Motor control loss": "https://psychonautwiki.org/wiki/Motor_control_loss",
            "Muscle relaxation": "https://psychonautwiki.org/wiki/Muscle_relaxation",
            "Respiratory depression": "https://psychonautwiki.org/wiki/Respiratory_depression",
            "Sedation": "https://psychonautwiki.org/wiki/Sedation",
            "Seizure suppression": "https://psychonautwiki.org/wiki/Seizure_suppression",
            "Thought deceleration": "https://psychonautwiki.org/wiki/Thought_deceleration"
        },
        "sources": {
            "_general": [
                "Mechanism of action of clonazepam in myoclonus in relation to effects on GABA and 5-HT. - https://www.ncbi.nlm.nih.gov/pubmed/2418652",
                "Central effects in man of the novel schistosomicidal benzodiazepine meclonazepam. - https://www.ncbi.nlm.nih.gov/pubmed/4054198",
                "Serum clonazepam concentrations in children with absence seizures. - http://www.ncbi.nlm.nih.gov/pubmed/1089913",
                "Tapering clonazepam in patients with panic disorder after at least 3 years of treatment. - http://www.ncbi.nlm.nih.gov/pubmed/20473065"
            ]
        }
    },
    "clonazolam": {
        "aliases": [
            "c-lam",
            "clam"
        ],
        "categories": [
            "benzodiazepine",
            "research-chemical",
            "habit-forming",
            "depressant",
            "common"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-12"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "200-400ug",
                "Heavy": "500-1000ug",
                "Light": "75-200ug",
                "Threshold": "50-75ug"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "6-10"
        },
        "formatted_effects": [
            "Anxiolytic",
            "Sedative",
            "Muscle Relaxant",
            "Amnesia",
            "Dystaxia",
            "Hypnotic",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "10-30"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_Clonazolam.shtml"
        },
        "name": "clonazolam",
        "pretty_name": "Clonazolam",
        "properties": {
            "after-effects": "1-12 hours.",
            "aliases": [
                "c-lam",
                "clam"
            ],
            "avoid": "All other CNS depressants.",
            "categories": [
                "benzodiazepine",
                "research-chemical",
                "habit-forming",
                "depressant",
                "common"
            ],
            "dose": "Threshold: 50-75ug Light: 75-200ug Common: 200-400ug Heavy: 500-1000ug",
            "duration": "6-10 hours.",
            "effects": "Anxiolytic, Sedative, Muscle Relaxant, Amnesia, Dystaxia, Hypnotic.",
            "onset": "10-30 minutes",
            "summary": "A long lasting benzodiazepine with heavily hypnotic effects. The safety profile is not well established, and there have been reports that people taking it three days in a row have had a seizure. Most comparable to Triazolam, but with a much longer half-life."
        },
        "pweffects": {
            "Amnesia": "https://psychonautwiki.org/wiki/Amnesia",
            "Analysis suppression": "https://psychonautwiki.org/wiki/Analysis_suppression",
            "Anxiety suppression": "https://psychonautwiki.org/wiki/Anxiety_suppression",
            "Compulsive redosing": "https://psychonautwiki.org/wiki/Compulsive_redosing",
            "Delusions": "https://psychonautwiki.org/wiki/Delusions",
            "Disinhibition": "https://psychonautwiki.org/wiki/Disinhibition",
            "Dizziness": "https://psychonautwiki.org/wiki/Dizziness",
            "Emotion suppression": "https://psychonautwiki.org/wiki/Emotion_suppression",
            "Information processing suppression": "https://psychonautwiki.org/wiki/Information_processing_suppression",
            "Motor control loss": "https://psychonautwiki.org/wiki/Motor_control_loss",
            "Muscle relaxation": "https://psychonautwiki.org/wiki/Muscle_relaxation",
            "Respiratory depression": "https://psychonautwiki.org/wiki/Respiratory_depression",
            "Sedation": "https://psychonautwiki.org/wiki/Sedation",
            "Thought deceleration": "https://psychonautwiki.org/wiki/Thought_deceleration"
        }
    },
    "clonidine": {
        "aliases": [
            "catapres",
            "kapvay",
            "duraclon"
        ],
        "categories": [
            "depressant",
            "common"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-4"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "50-100ug",
                "Light": "25-50ug",
                "Strong": "100-250ug."
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "8-16"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "15-45"
        },
        "name": "clonidine",
        "pretty_name": "Clonidine",
        "properties": {
            "after-effects": "1-4 hours.",
            "aliases": [
                "catapres",
                "kapvay",
                "duraclon"
            ],
            "avoid": "All CNS depressants.",
            "categories": [
                "depressant",
                "common"
            ],
            "dose": "Oral Light: 25-50ug Common: 50-100ug Strong: 100-250ug.",
            "duration": "8-16 hours.",
            "onset": "15-45 minutes.",
            "summary": "Is a medication that is used to treat high blood pressure, anxiety, withdrawal (Typically from Alcohol, Opioids, Smoking) and many other uses."
        },
        "sources": {
            "_general": [
                "Effect of magnesium chloride on psychomotor activity, emotional status, and acute behavioural responses to clonidine, d-amphetamine, arecoline, nic.. - https://www.ncbi.nlm.nih.gov/pubmed/21535917"
            ]
        }
    },
    "cloniprazepam": {
        "categories": [
            "benzodiazepine",
            "depressant",
            "habit-forming",
            "tentative"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-8"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "1-2mg",
                "Light": ".5-1mg",
                "Strong": "2-4mg+"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "6-9"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "15-45"
        },
        "name": "cloniprazepam",
        "pretty_name": "Cloniprazepam",
        "properties": {
            "after-effects": "1-8 hours.",
            "avoid": "All other CNS depressants.",
            "categories": [
                "benzodiazepine",
                "depressant",
                "habit-forming",
                "tentative"
            ],
            "dose": "Oral Light: .5-1mg Common: 1-2mg Strong: 2-4mg+",
            "duration": "6-9 hours.",
            "onset": "15-45 minutes.",
            "summary": "Prodrug for Clonazepam."
        }
    },
    "clonitazene": {
        "categories": [
            "opioid",
            "habit-forming",
            "depressant",
            "research-chemical"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-8"
        },
        "formatted_dose": {
            "Oral": {
                "Commong": "5-10mg",
                "Light": "2.5-5mg",
                "Strong": "10-15mg+"
            }
        },
        "formatted_duration": {
            "Oral": "4-8",
            "_unit": "hours"
        },
        "formatted_onset": {
            "Oral": "10-30",
            "_unit": "minutes"
        },
        "name": "clonitazene",
        "pretty_name": "Clonitazene",
        "properties": {
            "after-effects": "1-8 hours.",
            "categories": [
                "opioid",
                "habit-forming",
                "depressant",
                "research-chemical"
            ],
            "dose": "Oral Light: 2.5-5mg Commong: 5-10mg Strong: 10-15mg+",
            "duration": "Oral: 4-8 hours.",
            "onset": "Oral: 10-30 minutes.",
            "summary": "An opioid that is roughly three times as potent as Morphine. Is related to Etonitazene, which is about 1000-1500x the potency of Morphine."
        }
    },
    "clorazepate": {
        "aliases": [
            "tranxene",
            "novo-clopate",
            "tranzene"
        ],
        "categories": [
            "depressant",
            "benzodiazepine",
            "habit-forming",
            "depressant"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-8"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "10-20mg",
                "Low": "5-10mg",
                "Strong": "20-40mg+"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "8-12"
        },
        "formatted_effects": [
            "Anxiolytic",
            "Sedative",
            "Muscle Relaxant",
            "Amnesia",
            "Dystaxia",
            "Hypnotic",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "20-80"
        },
        "name": "clorazepate",
        "pretty_name": "Clorazepate",
        "properties": {
            "after-effects": "1-8 hours.",
            "aliases": [
                "tranxene",
                "novo-clopate",
                "tranzene"
            ],
            "avoid": "All other CNS depressants.",
            "bioavailability": "Oral: 91%.",
            "categories": [
                "depressant",
                "benzodiazepine",
                "habit-forming",
                "depressant"
            ],
            "dose": "Low: 5-10mg Common: 10-20mg Strong: 20-40mg+",
            "dose_to_diazepam": "Clorazepate - 15mg ~=10mg Diazepam.",
            "duration": "8-12 hours.",
            "effects": "Anxiolytic, Sedative, Muscle Relaxant, Amnesia, Dystaxia, Hypnotic.",
            "onset": "20-80 minutes.",
            "summary": "Is a prodrug for Desmethyldiazepam which is responsible for most of the therapeutic effects. Has a long half life, with the addition of Desmethyldiazepam as the main metabolite, which makes it much longer."
        },
        "sources": {
            "_general": [
                "Bentazepam versus Clorazepate in the treatment of anxiety disorders. http://www.sciencedirect.com/science/article/pii/S0011393X05804357"
            ]
        }
    },
    "clotiazepam": {
        "aliases": [
            "clozan",
            "distensan",
            "trecalmo",
            "rize",
            "rizen",
            "veratran"
        ],
        "categories": [
            "benzodiazepine",
            "habit-forming",
            "tentative",
            "depressant"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "4-8"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "5-10mg",
                "Light": "2.5-5mg",
                "Strong": "10-15mg+"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "4-8"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "10-30"
        },
        "name": "clotiazepam",
        "pretty_name": "Clotiazepam",
        "properties": {
            "after-effects": "4-8 hours.",
            "aliases": [
                "clozan",
                "distensan",
                "trecalmo",
                "rize",
                "rizen",
                "veratran"
            ],
            "categories": [
                "benzodiazepine",
                "habit-forming",
                "tentative",
                "depressant"
            ],
            "dose": "Oral Light: 2.5-5mg Common: 5-10mg Strong: 10-15mg+",
            "duration": "4-8 hours.",
            "onset": "10-30 minutes.",
            "summary": "Is a thienodiazepine substance. It differs from most other benzodiazepines in which the benzene ring has been replaced by a thiophene ring."
        }
    },
    "cloxazolam": {
        "categories": [
            "depressant",
            "habit-forming"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "4-12"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "3-6mg",
                "Light": "1.5-3mg",
                "Strong": "6-12mg+"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "7-12"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "15-45"
        },
        "name": "cloxazolam",
        "pretty_name": "Cloxazolam",
        "properties": {
            "after-effects": "4-12 hours.",
            "categories": [
                "depressant",
                "habit-forming"
            ],
            "dose": "Light: 1.5-3mg Common: 3-6mg Strong: 6-12mg+",
            "duration": "7-12 hours.",
            "onset": "15-45 minutes.",
            "summary": "Benzodiazepine derivate that is metabolised into Delorazepam. Which is where most of its effects come from."
        }
    },
    "cocaine": {
        "aliases": [
            "coke"
        ],
        "categories": [
            "stimulant",
            "habit-forming",
            "common"
        ],
        "combos": {
            "2c-t-x": {
                "note": "Cocaine and 2c-t-x both provide considerable stimulation. When combined they can result in severe vasoconstriction, tachycardia, hypertension, and in extreme cases heart failure.",
                "status": "Unsafe"
            },
            "2c-x": {
                "note": "The anxiogenic and focusing effects of stimulants increase the chance of unpleasant thought loops. The combination is generally unnecessary because of the stimulating effects of psychedelics. Combination of the stimulating effects may be uncomfortable.",
                "status": "Caution"
            },
            "5-meo-xxt": {
                "note": "The anxiogenic and focusing effects of stimulants increase the chance of unpleasant thought loops. The combination is generally unnecessary because of the stimulating effects of psychedelics. ",
                "status": "Unsafe"
            },
            "alcohol": {
                "note": "Drinking on stimulants is risky because the sedative effects of the alcohol are reduced, and these are what the body uses to gauge drunkenness. This typically leads to excessive drinking with greatly reduced inhibitions, high risk of liver damage and increased dehydration. They will also allow you to drink past a point where you might normally pass out, increasing the risk. If you do decide to do this then you should set a limit of how much you will drink each hour and stick to it, bearing in mind that you will feel the alcohol less. Cocaine is potentiated somewhat by alcohol because of the formation of cocaethylene.",
                "status": "Unsafe"
            },
            "amphetamines": {
                "note": "This combination of stimulants will increase strain on the heart. It is not generally worth it as cocaine has a mild blocking effect on dopamine releasers like amphetamine",
                "status": "Caution"
            },
            "amt": {
                "status": "Dangerous"
            },
            "benzodiazepines": {
                "status": "Low Risk & Decrease"
            },
            "benzos": {
                "status": "Low Risk & Decrease"
            },
            "caffeine": {
                "note": "Both stimulants, risk of tachycardia, hypertension, and in extreme cases heart failure.",
                "status": "Caution"
            },
            "cannabis": {
                "note": "Stimulants increase anxiety levels and the risk of thought loops which can lead to negative experiences",
                "status": "Caution"
            },
            "dmt": {
                "note": "Stimulants increase anxiety levels and the risk of thought loops which can lead to negative experiences",
                "status": "Caution"
            },
            "dox": {
                "note": "The combined stimulating effects of the two can lead to an uncomfortable body-load, while the focusing effects of cocaine can easily lead to thought loops. Coming down from cocaine while the DOx is still active can be quite anxiogenic",
                "status": "Unsafe"
            },
            "dxm": {
                "note": "Both substances raise heart rate, in extreme cases, panic attacks caused by these drugs have led to more serious heart issues",
                "status": "Unsafe"
            },
            "ghb/gbl": {
                "note": "Stimulants increase respiration rate allowing a higher dose of sedatives. If the stimulant wears off first then the opiate may overcome the patient and cause respiratory arrest. Likewise the G can wear off and leave a dangerous concentration of cocaine behind",
                "status": "Caution"
            },
            "ketamine": {
                "note": "No unexpected interactions, though likely to increase blood pressure but not an issue with sensible doses. Moving around on high doses of this combination may be ill advised due to risk of physical injury.",
                "status": "Caution"
            },
            "lsd": {
                "note": "Stimulants increase anxiety levels and the risk of thought loops which can lead to negative experiences",
                "status": "Caution"
            },
            "maois": {
                "note": "This combination is poorly explored",
                "status": "Dangerous"
            },
            "mdma": {
                "note": "Cocaine blocks some of the desirable effects of MDMA while increasing the risk of heart attack.",
                "status": "Caution"
            },
            "mescaline": {
                "note": "The focus and anxiety caused by stimulants is magnified by psychedelics and results in an increased risk of thought loops",
                "status": "Caution"
            },
            "mushrooms": {
                "note": "Stimulants increase anxiety levels and the risk of thought loops which can lead to negative experiences",
                "status": "Caution"
            },
            "mxe": {
                "note": "Stimulants taken with MXE can lead to hypermanic states much more easily, especially if sleep is avoided.",
                "status": "Caution"
            },
            "nbomes": {
                "note": "Cocaine and NBOMes both provide considerable stimulation. When combined they can result in severe vasoconstriction, tachycardia, hypertension, and in extreme cases heart failure.",
                "status": "Unsafe"
            },
            "nitrous": {
                "status": "Low Risk & Synergy"
            },
            "opioids": {
                "note": "Stimulants increase respiration rate allowing a higher dose of opiates. If the stimulant wears off first then the opiate may overcome the patient and cause respiratory arrest.",
                "status": "Dangerous"
            },
            "pcp": {
                "note": "This combination can easily lead to hypermanic states",
                "status": "Unsafe"
            },
            "ssris": {
                "note": "May reduce each others' effectiveness. Cocaine can reduce mental stability and therefore exacerbate conditions which SSRIs are used to treat.",
                "status": "Low Risk & No Synergy"
            },
            "tramadol": {
                "note": "Tramadol and stimulants both increase the risk of seizures.",
                "status": "Dangerous"
            }
        },
        "dose_note": " NOTE: Depending on purity, dosage will vary",
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-4"
        },
        "formatted_dose": {
            "Insufflated": {
                "Common": "50-100mg",
                "Heavy": "150mg+",
                "Light": "20-50mg",
                "Strong": "100-150mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "1-1.5"
        },
        "formatted_effects": [
            "Elevated mood",
            "Increase in irritability",
            "hyper-inflated ego",
            "euphoria",
            "stimulation",
            "raised heartrate",
            "numbing effects depending on ROA",
            "nausea (particularly at high doses)"
        ],
        "formatted_onset": {
            "value": "Rapid."
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_Cocaine.shtml"
        },
        "name": "cocaine",
        "pretty_name": "Cocaine",
        "properties": {
            "after-effects": "1-4 hours.",
            "aliases": [
                "coke"
            ],
            "bioavailability": "Cocaine Oral 25-35% | Insufflated 40-60%. NOTE: This is for Cocaine HCl.",
            "categories": [
                "stimulant",
                "habit-forming",
                "common"
            ],
            "detection": "Saliva: 1 day, Urine: 4-5 days, Hair: up to 90 days",
            "dose": "Insufflated Light: 20-50mg Common: 50-100mg Strong: 100-150mg Heavy: 150mg+ | NOTE: Depending on purity, dosage will vary",
            "duration": "1-1.5 hours",
            "effects": "Elevated mood. Increase in irritability, hyper-inflated ego, euphoria, stimulation, raised heartrate, numbing effects depending on ROA, nausea (particularly at high doses)",
            "marquis": "Clear (No change)",
            "onset": "Rapid.",
            "summary": "A highly popular, short acting CNS stimulant that works by blocking the reuptake of dopamine, serotonin, and norepinephrine. It is known to increase euphoria, confidence, sex-drive, focus, body temperature, and heart rate. Cocaine can cause severe vasoconstriction and is known to be cardiotoxic and have a high potential for compulsive redosing and addiction."
        },
        "pweffects": {
            "Abnormal heartbeat": "https://psychonautwiki.org/wiki/Abnormal_heartbeat",
            "Anxiety": "https://psychonautwiki.org/wiki/Anxiety",
            "Appetite suppression": "https://psychonautwiki.org/wiki/Appetite_suppression",
            "Bronchodilation": "https://psychonautwiki.org/wiki/Bronchodilation",
            "Cognitive euphoria": "https://psychonautwiki.org/wiki/Cognitive_euphoria",
            "Cognitive fatigue": "https://psychonautwiki.org/wiki/Cognitive_fatigue",
            "Compulsive redosing": "https://psychonautwiki.org/wiki/Compulsive_redosing",
            "Dehydration": "https://psychonautwiki.org/wiki/Dehydration",
            "Depression": "https://psychonautwiki.org/wiki/Depression",
            "Disinhibition": "https://psychonautwiki.org/wiki/Disinhibition",
            "Ego inflation": "https://psychonautwiki.org/wiki/Ego_inflation",
            "Focus enhancement": "https://psychonautwiki.org/wiki/Focus_enhancement",
            "Increased blood pressure": "https://psychonautwiki.org/wiki/Increased_blood_pressure",
            "Increased heart rate": "https://psychonautwiki.org/wiki/Increased_heart_rate",
            "Increased libido": "https://psychonautwiki.org/wiki/Increased_libido",
            "Increased perspiration": "https://psychonautwiki.org/wiki/Increased_perspiration",
            "Irritability": "https://psychonautwiki.org/wiki/Irritability",
            "Motivation enhancement": "https://psychonautwiki.org/wiki/Motivation_enhancement",
            "Pain relief": "https://psychonautwiki.org/wiki/Pain_relief",
            "Stimulation": "https://psychonautwiki.org/wiki/Stimulation",
            "Teeth grinding": "https://psychonautwiki.org/wiki/Teeth_grinding",
            "Temporary erectile dysfunction": "https://psychonautwiki.org/wiki/Temporary_erectile_dysfunction",
            "Thought acceleration": "https://psychonautwiki.org/wiki/Thought_acceleration",
            "Thought deceleration": "https://psychonautwiki.org/wiki/Thought_deceleration",
            "Thought organization": "https://psychonautwiki.org/wiki/Thought_organization",
            "Vasoconstriction": "https://psychonautwiki.org/wiki/Vasoconstriction",
            "Wakefulness": "https://psychonautwiki.org/wiki/Wakefulness"
        },
        "sources": {
            "_general": [
                "Rhabdomyolysis associated with cocaine abuse. -https://www.ncbi.nlm.nih.gov/pubmed/1743698",
                "Rhabdomyolysis associated with cocaine abuse. - https://www.ncbi.nlm.nih.gov/pubmed/1743698",
                "The beta-lactam antibiotic ceftriaxone inhibits physical dependence and abstinence-induced withdrawal from cocaine, amphetamine, methamphetamine, a... - https://www.ncbi.nlm.nih.gov/pubmed/18342307",
                "Effects of concurrent use of alcohol and cocaine. - http://www.ncbi.nlm.nih.gov/pubmed/12133112",
                "Cocaine-like neurochemical effects of antihistaminic medications. - http://www.ncbi.nlm.nih.gov/pubmed/18363822",
                "Cocaine cardiotoxicity: a review of the pathophysiology, pathology, and treatment options. - http://www.ncbi.nlm.nih.gov/pubmed/19463023",
                "Citalopram enhances cocaine's subjective effects in rats. - http://www.ncbi.nlm.nih.gov/pubmed/20195220",
                "Role of voltage-gated sodium, potassium and calcium channels in the development of cocaine-associated cardiac arrhythmias. - http://www.ncbi.nlm.nih.gov/pubmed/20573078",
                "High cocaine dosage decreases neurogenesis in the hippocampus and impairs working memory. - http://www.ncbi.nlm.nih.gov/pubmed/20731634",
                "The effects of combinations of intranasal cocaine, smoked marijuana, and task performance on heart rate and blood pressure. - http://www.ncbi.nlm.nih.gov/pubmed/2162543",
                "Lack of cocaine-like discriminative-stimulus effects of \u03c3-receptor agonists in rats. - http://www.ncbi.nlm.nih.gov/pubmed/21808192",
                "Pregabalin reduces cocaine self-administration and relapse to cocaine seeking in the rat. - http://www.ncbi.nlm.nih.gov/pubmed/22734646",
                "Cocaine potentiates MDMA-induced oxidative stress but not dopaminergic neurotoxicity in mice: implications for the pathogenesis of free radical-ind... - http://www.ncbi.nlm.nih.gov/pubmed/23681166",
                "Effects of escitalopram on attentional bias to cocaine-related stimuli and inhibitory control in cocaine-dependent subjects. - http://www.ncbi.nlm.nih.gov/pubmed/23761390",
                "Aminorex, a metabolite of the cocaine adulterant levamisole, exerts amphetamine like actions at monoamine transporters. - http://www.ncbi.nlm.nih.gov/pubmed/24296074",
                "Long Withdrawal of Methylphenidate Induces a Differential Response of the Dopaminergic System and Increases Sensitivity to Cocaine in the Prefronta... - http://www.ncbi.nlm.nih.gov/pubmed/26509840",
                "Cocaine tolerance and cross-tolerance. - http://www.ncbi.nlm.nih.gov/pubmed/8093724",
                "Cocaethylene is as cardiotoxic as cocaine but is less toxic than cocaine plus ethanol. - http://www.ncbi.nlm.nih.gov/pubmed/8761012",
                "Differential potentiation of L-tryptophan-induced head-twitch response in mice by cocaine and sertraline. - http://www.ncbi.nlm.nih.gov/pubmed/8831798",
                "Cocaine contamination of United States paper currency. - http://www.ncbi.nlm.nih.gov/pubmed/8835657",
                "A study suggests that having a history of cocaine and poly drug abuse can lead to acute open-angle glaucoma - http://journals.lww.com/glaucomajournal/Abstract/2011/09000/Substance_Use_Disorder_and_the_Risk_of_Open_angle.9.aspx",
                "using cocaine while pregnant is dangerous for the fetus's health - https://www.drugabuse.gov/publications/research-reports/cocaine/what-are-effects-maternal-cocaine-use"
            ]
        }
    },
    "codeine": {
        "categories": [
            "opioid",
            "habit-forming",
            "depressant",
            "common"
        ],
        "dose_note": " NOTE: The ceiling effect differs from person to person, but it seems to fall between 400-600mg",
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-12"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "100-150mg",
                "Heavy": "150-200mg",
                "Light": "50-100mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "3-6"
        },
        "formatted_effects": [
            "Euphoria",
            "Dry Mouth",
            "Mood lift",
            "Itchiness",
            "Relaxant",
            "Constipation",
            "Pupil constriction",
            "Analgesia",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "30-45"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_Codeine.shtml"
        },
        "name": "codeine",
        "pretty_name": "Codeine",
        "properties": {
            "after-effects": "1-12 hours.",
            "avoid": "People seeking codeine experiences from medications that contain acetaminophen (paracetamol) may be putting themselves at risk for acetaminophen-related complications such as liver damage.",
            "bioavailability": "Oral 90% | Rectal 90%",
            "categories": [
                "opioid",
                "habit-forming",
                "depressant",
                "common"
            ],
            "dose": "Oral Light: 50-100mg Common: 100-150mg Heavy: 150-200mg | NOTE: The ceiling effect differs from person to person, but it seems to fall between 400-600mg",
            "duration": "3-6 hours",
            "effects": "Euphoria, Dry Mouth, Mood lift, Itchiness, Relaxant, Constipation, Pupil constriction, Analgesia.",
            "marquis": "Very dark purple",
            "onset": "30-45 minutes",
            "summary": "Codeine is a weaker opioid used to treat mild to moderate pain and to relieve cough. In many countries it is available over the counter in combination with paracetamol, which can easily be extracted to retrieve near-pure codeine. For this reason, it is used widely as a recreational opioid. It is metabolised into morphine in the body at a rate of 5% mg for mg.",
            "warning": "You must only use this drug orally due to the risk of severe immune system responses. It needs to pass through the liver to be activated anyway so IV, nasal, plugging etc do not offer an advantage"
        },
        "pweffects": {
            "Anxiety suppression": "https://psychonautwiki.org/wiki/Anxiety_suppression",
            "Cognitive euphoria": "https://psychonautwiki.org/wiki/Cognitive_euphoria",
            "Compulsive redosing": "https://psychonautwiki.org/wiki/Compulsive_redosing",
            "Constipation": "https://psychonautwiki.org/wiki/Constipation",
            "Cough suppression": "https://psychonautwiki.org/wiki/Cough_suppression",
            "Difficulty urinating": "https://psychonautwiki.org/wiki/Difficulty_urinating",
            "Itchiness": "https://psychonautwiki.org/wiki/Itchiness",
            "Pain relief": "https://psychonautwiki.org/wiki/Pain_relief",
            "Physical euphoria": "https://psychonautwiki.org/wiki/Physical_euphoria",
            "Pupil constriction": "https://psychonautwiki.org/wiki/Pupil_constriction",
            "Respiratory depression": "https://psychonautwiki.org/wiki/Respiratory_depression",
            "Sedation": "https://psychonautwiki.org/wiki/Sedation"
        },
        "sources": {
            "_general": [
                "Codeine analgesia is due to codeine-6-glucuronide, not morphine. - https://www.ncbi.nlm.nih.gov/pubmed/11092114",
                "Nod and wave: an Internet study of the codeine intoxication phenomenon. - https://www.ncbi.nlm.nih.gov/pubmed/25052240",
                "Trends and characteristics of accidental and intentional codeine overdose deaths in Australia. - http://www.ncbi.nlm.nih.gov/pubmed/26424067",
                "Rectal versus oral absorption of codeine phosphate in man. - http://www.ncbi.nlm.nih.gov/pubmed/6683976",
                "Endogenous codeine and morphine in poor and extensive metabolisers of the CYP2D6 (debrisoquine/sparteine) polymorphism. - http://www.ncbi.nlm.nih.gov/pubmed/8113966"
            ]
        }
    },
    "coluracetam": {
        "categories": [
            "research-chemical",
            "nootropic"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-4"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "5-10mg",
                "Light": "3-5mg",
                "Strong": "10-20mg+"
            },
            "Sublingual/Insufflated": {
                "Common": "5-10mg",
                "Light": "2-5mg",
                "Strong": "10mg+"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "3-6"
        },
        "formatted_onset": {
            "Intranasal": "1-5",
            "Oral": "15-30",
            "Sublingual": "5-10",
            "_unit": "minutes"
        },
        "name": "coluracetam",
        "pretty_name": "Coluracetam",
        "properties": {
            "after-effects": "1-4 hours.",
            "categories": [
                "research-chemical",
                "nootropic"
            ],
            "dose": "Oral Light: 3-5mg Common: 5-10mg Strong: 10-20mg+ | Sublingual/Insufflated Light: 2-5mg Common: 5-10mg Strong: 10mg+",
            "duration": "3-6 hours depending on stomach contents/ROA/ect.",
            "onset": "Oral: 15-30 minutes. | Sublingual: 5-10 minutes. | Intranasal: 1-5 minutes",
            "summary": "A nootropic drug of the racetam class, originally developed to treat Alzheimer's disease, it is currently being investigated as a treatment for major depressive disorder and generalised anxiety disorder. May be a modulator of the AMPA receptor. Limited recreational value."
        },
        "pweffects": {
            "Acuity enhancement": "https://psychonautwiki.org/wiki/Acuity_enhancement",
            "Anxiety suppression": "https://psychonautwiki.org/wiki/Anxiety_suppression",
            "Auditory enhancement": "https://psychonautwiki.org/wiki/Auditory_enhancement",
            "Colour enhancement": "https://psychonautwiki.org/wiki/Colour_enhancement",
            "Dream potentiation": "https://psychonautwiki.org/wiki/Dream_potentiation",
            "Focus enhancement": "https://psychonautwiki.org/wiki/Focus_enhancement",
            "Memory enhancement": "https://psychonautwiki.org/wiki/Memory_enhancement",
            "Mindfulness": "https://psychonautwiki.org/wiki/Mindfulness",
            "Motivation enhancement": "https://psychonautwiki.org/wiki/Motivation_enhancement",
            "Stimulation": "https://psychonautwiki.org/wiki/Stimulation",
            "Tactile enhancement": "https://psychonautwiki.org/wiki/Tactile_enhancement",
            "Thought connectivity": "https://psychonautwiki.org/wiki/Thought_connectivity",
            "Wakefulness": "https://psychonautwiki.org/wiki/Wakefulness"
        }
    },
    "coronaridine": {
        "categories": [
            "psychedelic",
            "tentative"
        ],
        "name": "coronaridine",
        "pretty_name": "Coronaridine",
        "properties": {
            "categories": [
                "psychedelic",
                "tentative"
            ],
            "summary": "Alkaloid found in Tabernanthe iboga and related species. Persistently reduces the self-administration of Cocaine and Morphine in rats."
        },
        "sources": {
            "_general": [
                "Effects of iboga alkaloids on morphine and cocaine self-administration in rats: relationship to tremorigenic effects and to effects on dopamine release in nucleus accumbens and striatum. http://www.sciencedirect.com/science/article/pii/0006899394909482"
            ]
        }
    },
    "crl-40-940": {
        "aliases": [
            "flmodafinil",
            "lauflumide",
            "bisfluoromodafinil"
        ],
        "categories": [
            "stimulant",
            "tentative",
            "nootropic",
            "research-chemical"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-8"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "40-75mg",
                "Light": "20-40mg",
                "Strong": "75-150mg."
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "6-12"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "30-45"
        },
        "name": "crl-40-940",
        "pretty_name": "CRL-40-940",
        "properties": {
            "after-effects": "1-8 hours.",
            "aliases": [
                "flmodafinil",
                "lauflumide",
                "bisfluoromodafinil"
            ],
            "categories": [
                "stimulant",
                "tentative",
                "nootropic",
                "research-chemical"
            ],
            "dose": "Light: 20-40mg Common: 40-75mg Strong: 75-150mg.",
            "duration": "6-12 hours.",
            "onset": "30-45 minutes.",
            "summary": "Bisfluoro analogue Modafinil. Has been sold online as a research chemical. Was patented in 2013. Is slightly more potent than Armodafinil."
        }
    },
    "crl-40-941": {
        "aliases": [
            "fladrafinil",
            "fluoromodafinil"
        ],
        "categories": [
            "stimulant",
            "tentative",
            "nootropic",
            "research-chemical"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-10"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "100-250mg",
                "Light": "50-100mg",
                "Strong": "250-350mg+"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "6-14"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "30-90"
        },
        "name": "crl-40-941",
        "pretty_name": "CRL-40-941",
        "properties": {
            "after-effects": "1-10 hours.",
            "aliases": [
                "fladrafinil",
                "fluoromodafinil"
            ],
            "categories": [
                "stimulant",
                "tentative",
                "nootropic",
                "research-chemical"
            ],
            "dose": "Light: 50-100mg Common: 100-250mg Strong: 250-350mg+",
            "duration": "6-14 hours. Dependant on dose.",
            "onset": "30-90 minutes.",
            "summary": "A substance closely related to Adrafinil and Modafinil. It is the bis(p-fluoro) ring derivative of Adrafinil."
        }
    },
    "cyclizine": {
        "categories": [
            "depressant"
        ],
        "dose_note": " NOTE: The provided dosages are intended for therapeutic use.",
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "14"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "25-50mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "Oral"
        },
        "formatted_effects": [
            "Side-effects: drowsiness",
            "dry mouth",
            "headache",
            "psychomotor impairment",
            "urinary retention",
            "blurred vision",
            "dermatitis",
            "and gastrointestinal disturbances"
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "10-30"
        },
        "name": "cyclizine",
        "pretty_name": "Cyclizine",
        "properties": {
            "after-effects": "14 - 16 hours",
            "categories": [
                "depressant"
            ],
            "chemistry": "IUPAC: 1-benzhydryl-4-methyl-piperazine | Formula: C18H22N2 | Molecular Mass: 266.381 g/mol | Water Solubility: 1000 mg/L (25 \u00b0C)",
            "dose": "Common: 25-50mg's.",
            "duration": "Oral 4-8 hours.",
            "onset": "10-30 minutes.",
            "pharmacodynamics": "H1 receptor inverse agonist; mACh receptor antagonist",
            "side-effects": "drowsiness, dry mouth, headache, psychomotor impairment, urinary retention, blurred vision, dermatitis, and gastrointestinal disturbances",
            "summary": "First generation antihistamine and anticholinergic drug used to combat nausea and vomiting. Causes drowsiness. Like most antihistamines in high doses it induces delirium and vivid realistic hallucinations. Probably uncomfortable and not enjoyable."
        }
    },
    "cyclo-methiodrone": {
        "categories": [
            "empathogen",
            "stimulant",
            "habit-forming",
            "research-chemical",
            "tentative"
        ],
        "formatted_dose": {
            "Oral": {
                "Common": "45-65mg",
                "Heavy": "90+mg.",
                "Light": "30-45mg",
                "Strong": "65-90mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "3-5"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "25-45"
        },
        "name": "cyclo-methiodrone",
        "pretty_name": "Cyclo-Methiodrone",
        "properties": {
            "categories": [
                "empathogen",
                "stimulant",
                "habit-forming",
                "research-chemical",
                "tentative"
            ],
            "dose": "Oral Light: 30-45mg Common: 45-65mg Strong: 65-90mg Heavy: 90+mg.",
            "duration": "3-5 hours",
            "onset": "25-45 minutes",
            "summary": "Empathogen with strong stimulant effects, very loosely related to benzylpiperidine."
        }
    },
    "cyclobenzaprine": {
        "aliases": [
            "flexeril",
            "apo-cyclobenzaprin",
            "fexmid",
            "novo-cycloprine"
        ],
        "categories": [
            "depressant",
            "habit-forming",
            "common"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-6"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "5-10mg",
                "Heavy": "15mg+",
                "Light": "2-5mg",
                "Strong": "10-15mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "6-12"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "15-45"
        },
        "name": "cyclobenzaprine",
        "pretty_name": "Cyclobenzaprine",
        "properties": {
            "after-effects": "1-6 hours.",
            "aliases": [
                "flexeril",
                "apo-cyclobenzaprin",
                "fexmid",
                "novo-cycloprine"
            ],
            "categories": [
                "depressant",
                "habit-forming",
                "common"
            ],
            "dose": "Light: 2-5mg Common: 5-10mg Strong: 10-15mg Heavy: 15mg+",
            "duration": "6-12 hours",
            "onset": "15-45 minutes. ",
            "summary": "Muscle relaxant and CNS depressant used to relieve skeletal muscle spasms and associated pain in acute musculoskeletal conditions. Sometimes prescribed off-label for treatment of fibromyalgia or as a sleep aid. Has little recreational value alone, but may potentiate some opioids. May cause drowsiness, dry mouth and dizziness.",
            "warning": "Do not mix with other CNS depressants, or within two weeks of a MAOI. "
        }
    },
    "cyclopentyl-fentanyl": {
        "aliases": [
            "cp-f",
            "cpf"
        ],
        "categories": [
            "opioid",
            "tentative",
            "research-chemical",
            "depressant",
            "habit-forming"
        ],
        "name": "cyclopentyl-fentanyl",
        "pretty_name": "CYCLOPENTYL-FENTANYL",
        "properties": {
            "aliases": [
                "cp-f",
                "cpf"
            ],
            "categories": [
                "opioid",
                "tentative",
                "research-chemical",
                "depressant",
                "habit-forming"
            ],
            "summary": "An analogue of fentanyl that is unknown in literature, seems to be less potent than its former being Acetyl-Fentanyl. Yet reports have yet to surface. Be careful."
        }
    },
    "cyclopropylmescaline": {
        "aliases": [
            "cpm",
            "4-cyclopropylmethoxy-3"
        ],
        "categories": [
            "psychedelic",
            "tentative",
            "research-chemical"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "6-8"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "60-70mg",
                "Light": "50-60mg",
                "Strong": "70-80mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "12-18"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "10-30"
        },
        "name": "cyclopropylmescaline",
        "pretty_name": "Cyclopropylmescaline",
        "properties": {
            "after-effects": "6-8 hours.",
            "aliases": [
                "cpm",
                "4-cyclopropylmethoxy-3"
            ],
            "categories": [
                "psychedelic",
                "tentative",
                "research-chemical"
            ],
            "dose": "Light: 50-60mg Common: 60-70mg: Strong: 70-80mg",
            "duration": "12-18 hours",
            "onset": "10-30 minutes",
            "summary": "Cyclopropylmescaline, AKA CPM, is a psychedelic/hallucinogenic that was produced by Alexander Shulgin. It causes visual and auditory hallucinations and lasts quite a long time. Little is known about it so caution must be used when trying out this substance.",
            "warning": "Caution: not much is known about how CPM affects the body, be cautious with doses and how you use it."
        }
    },
    "d2pm": {
        "aliases": [
            "diphenylprolinol"
        ],
        "categories": [
            "stimulant",
            "habit-forming",
            "tentative"
        ],
        "dose_note": " NOTE: These doses are tentative and may need further research.",
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-6"
        },
        "formatted_dose": {
            "Light:": {
                "Common": "20-35mg",
                "Light": "15-20mg",
                "Strong": "35-50mg+"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "2-5"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "20-30"
        },
        "name": "d2pm",
        "pretty_name": "D2PM",
        "properties": {
            "after-effects": "1-6 hours.",
            "aliases": [
                "diphenylprolinol"
            ],
            "avoid": "Other stimulants.",
            "categories": [
                "stimulant",
                "habit-forming",
                "tentative"
            ],
            "dose": "Light: 15-20mg Common: 20-35mg Strong: 35-50mg+ | NOTE: These doses are tentative and may need further research.",
            "duration": "2-5 hours.",
            "onset": "20-30 minutes",
            "summary": "An NDRI, which is reported as being rather lackluster."
        }
    },
    "dalt": {
        "aliases": [
            "n,n-diallyltryptamine",
            "diallyltryptamine"
        ],
        "categories": [
            "psychedelic",
            "research-chemical",
            "tentative"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-4"
        },
        "formatted_dose": {
            "none": {
                "Common": "40-60mg",
                "Light": "20-40mg",
                "Strong": "60mg+"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "3-6"
        },
        "formatted_effects": [
            "Euphoria",
            "empathy",
            "insight",
            "brightened colour",
            "Closed/Open eye visuals",
            "enhanced tactile sensation",
            "mental/physical stimulation",
            "decreased appetite",
            "pupil dilation",
            "restlessness",
            "change in perception",
            "ego softening",
            "sweating/chills",
            "muscle tension",
            "confusion",
            "insomnia",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "15-45"
        },
        "name": "dalt",
        "pretty_name": "DALT",
        "properties": {
            "after-effects": "1-4 hours.",
            "aliases": [
                "n,n-diallyltryptamine",
                "diallyltryptamine"
            ],
            "categories": [
                "psychedelic",
                "research-chemical",
                "tentative"
            ],
            "duration": "3-6 hours.",
            "effects": "Euphoria, empathy, insight, brightened colour, Closed/Open eye visuals, enhanced tactile sensation, mental/physical stimulation, decreased appetite, pupil dilation, restlessness, change in perception, ego softening, sweating/chills, muscle tension, confusion, insomnia.",
            "onset": "15-45 minutes.",
            "summary": "Psychedelic drug of the tryptamine class."
        }
    },
    "datura": {
        "categories": [
            "depressant",
            "tentative",
            "deliriant"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "24-72"
        },
        "formatted_dose": {
            "none": {
                "NOTE": "There"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "12-72+"
        },
        "formatted_effects": [
            "surreal interactions with world",
            "hallucinations",
            "dry mouth",
            "nausea",
            "fear",
            "anxiety",
            "amnesia",
            "difficulty breathing",
            "confusion",
            "delirium"
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "60-120"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_Datura.shtml"
        },
        "name": "datura",
        "pretty_name": "Datura",
        "properties": {
            "after-effects": "24-72 hours",
            "avoid": "Yes. Just avoid it.",
            "categories": [
                "depressant",
                "tentative",
                "deliriant"
            ],
            "duration": "12-72+ hours.",
            "effects": "surreal interactions with world, hallucinations, dry mouth, nausea, fear, anxiety, amnesia, difficulty breathing, confusion, delirium",
            "onset": "60-120 minutes",
            "summary": "A family of plants containing various Tropane alkaloids. Produces long-lasting deliriant effects including very realistic and often unpleasant hallucinations along with short-term amnesia. Datura plants are toxic to humans, and potency varies greatly from plant-to-plant, making the drug extremely difficult to dose safely. Not typically regarded as recreational.",
            "warning": "Datura can be incredibly dangerous, dosing can be hard to determine and caution should be used. In general this drug should be avoided."
        },
        "pweffects": {
            "Abnormal heartbeat": "https://psychonautwiki.org/wiki/Abnormal_heartbeat",
            "Acuity suppression": "https://psychonautwiki.org/wiki/Acuity_suppression",
            "After images": "https://psychonautwiki.org/wiki/After_images",
            "Amnesia": "https://psychonautwiki.org/wiki/Amnesia",
            "Anxiety": "https://psychonautwiki.org/wiki/Anxiety",
            "Auditory enhancement": "https://psychonautwiki.org/wiki/Auditory_enhancement",
            "Auditory hallucinations": "https://psychonautwiki.org/wiki/Auditory_hallucinations",
            "Autonomous entities": "https://psychonautwiki.org/wiki/Autonomous_entities",
            "Cognitive dysphoria": "https://psychonautwiki.org/wiki/Cognitive_dysphoria",
            "Depression": "https://psychonautwiki.org/wiki/Depression",
            "Difficulty urinating": "https://psychonautwiki.org/wiki/Difficulty_urinating",
            "Dizziness": "https://psychonautwiki.org/wiki/Dizziness",
            "Dream potentiation": "https://psychonautwiki.org/wiki/Dream_potentiation",
            "Drifting": "https://psychonautwiki.org/wiki/Drifting",
            "Emotion suppression": "https://psychonautwiki.org/wiki/Emotion_suppression",
            "External hallucinations": "https://psychonautwiki.org/wiki/External_hallucinations",
            "Frequent urination": "https://psychonautwiki.org/wiki/Frequent_urination",
            "Increased heart rate": "https://psychonautwiki.org/wiki/Increased_heart_rate",
            "Information processing suppression": "https://psychonautwiki.org/wiki/Information_processing_suppression",
            "Internal hallucinations": "https://psychonautwiki.org/wiki/Internal_hallucinations",
            "Language suppression": "https://psychonautwiki.org/wiki/Language_suppression",
            "Muscle cramps": "https://psychonautwiki.org/wiki/Muscle_cramps",
            "Muscle spasms": "https://psychonautwiki.org/wiki/Muscle_spasms",
            "Nausea": "https://psychonautwiki.org/wiki/Nausea",
            "Paranoia": "https://psychonautwiki.org/wiki/Paranoia",
            "Pattern recognition suppression": "https://psychonautwiki.org/wiki/Pattern_recognition_suppression",
            "Perception of increased weight": "https://psychonautwiki.org/wiki/Perception_of_increased_weight",
            "Peripheral information misinterpretation": "https://psychonautwiki.org/wiki/Peripheral_information_misinterpretation",
            "Perspective alterations": "https://psychonautwiki.org/wiki/Perspective_alterations",
            "Photophobia": "https://psychonautwiki.org/wiki/Photophobia",
            "Psychosis": "https://psychonautwiki.org/wiki/Psychosis",
            "Pupil dilation": "https://psychonautwiki.org/wiki/Pupil_dilation",
            "Restless leg syndrome": "https://psychonautwiki.org/wiki/Restless_leg_syndrome",
            "Scenarios and plots": "https://psychonautwiki.org/wiki/Scenarios_and_plots",
            "Settings, sceneries, and landscapes": "https://psychonautwiki.org/wiki/Settings,_sceneries,_and_landscapes",
            "Shadow people": "https://psychonautwiki.org/wiki/Shadow_people",
            "Spontaneous tactile sensations": "https://psychonautwiki.org/wiki/Spontaneous_tactile_sensations",
            "Thought deceleration": "https://psychonautwiki.org/wiki/Thought_deceleration",
            "Thought disorganization": "https://psychonautwiki.org/wiki/Thought_disorganization",
            "Time distortion": "https://psychonautwiki.org/wiki/Time_distortion",
            "Unspeakable horrors": "https://psychonautwiki.org/wiki/Unspeakable_horrors",
            "Vibrating vision": "https://psychonautwiki.org/wiki/Vibrating_vision",
            "Visual haze": "https://psychonautwiki.org/wiki/Visual_haze"
        }
    },
    "db-mdbp": {
        "categories": [
            "inactive"
        ],
        "name": "db-mdbp",
        "pretty_name": "DB-MDBP",
        "properties": {
            "categories": [
                "inactive"
            ],
            "summary": "Inactive."
        }
    },
    "dehydroxyfluorafinil": {
        "aliases": [
            "modafiendz"
        ],
        "categories": [
            "stimulant",
            "nootropic",
            "research-chemical",
            "tentative"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "2-24"
        },
        "formatted_dose": {
            "Threshold": {
                "Common": "100-150mg",
                "Light": "50-100mg",
                "Strong": "150-200mg+"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "5-8"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "30-60"
        },
        "name": "dehydroxyfluorafinil",
        "pretty_name": "Dehydroxyfluorafinil",
        "properties": {
            "after-effects": "2-24 hours.",
            "aliases": [
                "modafiendz"
            ],
            "categories": [
                "stimulant",
                "nootropic",
                "research-chemical",
                "tentative"
            ],
            "dose": "Threshold 25-50mg Light: 50-100mg Common: 100-150mg Strong: 150-200mg+",
            "duration": "5-8 hours.",
            "onset": "30-60 minutes.",
            "summary": "Nootropic of the benzhydryl class. Closely related to Adrafinil and Modafinil. Was branded as \"Modafiendz\" through some research chemical vendors."
        }
    },
    "delorazepam": {
        "aliases": [
            "nordiclazepam"
        ],
        "categories": [
            "benzodiazepine",
            "habit-forming",
            "depressant"
        ],
        "dose_note": " NOTE: Higher doses increase the chances of blacking out. 1mg Delorazepam is approximately equal to 10mg Diazepam.",
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "72"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "0.5-1.5mg",
                "Heavy": "2-3mg",
                "Light": "0.25-0.5mg",
                "Strong": "1.5-2mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "12-16"
        },
        "formatted_effects": [
            "Anxiolytic",
            "Sedative",
            "Muscle Relaxant",
            "Amnesia",
            "Dystaxia",
            "Hypnotic",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "30-60"
        },
        "name": "delorazepam",
        "pretty_name": "Delorazepam",
        "properties": {
            "after-effects": "72 hours",
            "aliases": [
                "nordiclazepam"
            ],
            "avoid": "All other CNS depressants.",
            "categories": [
                "benzodiazepine",
                "habit-forming",
                "depressant"
            ],
            "dose": "Oral Light: 0.25-0.5mg Common: 0.5-1.5mg Strong: 1.5-2mg Heavy: 2-3mg | NOTE: Higher doses increase the chances of blacking out. 1mg Delorazepam is approximately equal to 10mg Diazepam.",
            "duration": "12-16 hours",
            "effects": "Anxiolytic, Sedative, Muscle Relaxant, Amnesia, Dystaxia, Hypnotic.",
            "onset": "30-60 minutes.",
            "summary": "Also known as chlordesmethyldiazepam, this uncommon benzodiazepine compound is primarily used for treatment of anxiety and alcohol withdrawal, due to its long half-life (60-140 hours). It is also the active metabolite of diclazepam and cloxazolam."
        }
    },
    "demerol": {
        "aliases": [
            "pethidine",
            "meperidine"
        ],
        "categories": [
            "opioid",
            "habit-forming",
            "depressant"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "2-10"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "100-200mg",
                "Light": "50-100mg",
                "Strong": "200-400mg+"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "4-6"
        },
        "formatted_effects": [
            "Euphoria",
            "Dry Mouth",
            "Mood lift",
            "Itchiness",
            "Relaxant",
            "Constipation",
            "Pupil constriction",
            "Analgesia",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "30-60"
        },
        "name": "demerol",
        "pretty_name": "Pethidine",
        "properties": {
            "after-effects": "2-10 hours.",
            "aliases": [
                "pethidine",
                "meperidine"
            ],
            "avoid": "All other CNS depressants.",
            "bioavailability": "Oral 50-60% | Rectal 55% | Intramuscular 80-85%",
            "categories": [
                "opioid",
                "habit-forming",
                "depressant"
            ],
            "dose": "Light: 50-100mg Common: 100-200mg Strong: 200-400mg+",
            "duration": "4-6 hours.",
            "effects": "Euphoria, Dry Mouth, Mood lift, Itchiness, Relaxant, Constipation, Pupil constriction, Analgesia.",
            "onset": "30-60 minutes",
            "summary": "A phenylpiperidine opioid first synthesised by Otto Eisleb in 1939, better known by the names meperidine and pethidine. An analgesic, once widely prescribed it has since declined in usage due to the discovery of a toxic metabolite - norpethidine. Also reacts dangerously with many drugs."
        }
    },
    "deschloroetizolam": {
        "aliases": [
            "etizolam-2"
        ],
        "categories": [
            "benzodiazepine",
            "research-chemical",
            "habit-forming",
            "tentative",
            "depressant"
        ],
        "dose_note": " NOTE: Non-oral ROAs are ineffective.",
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-8"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "4-6mg",
                "Light": "2-4mg",
                "Strong": "6-12mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "8-10"
        },
        "formatted_effects": [
            "Anxiolytic",
            "Sedative",
            "Muscle Relaxant",
            "Amnesia",
            "Dystaxia",
            "Hypnotic",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "1-5"
        },
        "name": "deschloroetizolam",
        "pretty_name": "Deschloroetizolam",
        "properties": {
            "after-effects": "1-8 hours.",
            "aliases": [
                "etizolam-2"
            ],
            "avoid": "All other CNS depressants.",
            "categories": [
                "benzodiazepine",
                "research-chemical",
                "habit-forming",
                "tentative",
                "depressant"
            ],
            "dose": "Oral Light: 2-4mg Common: 4-6mg Strong: 6-12mg | NOTE: Non-oral ROAs are ineffective.",
            "duration": "8-10 hours.",
            "effects": "Anxiolytic, Sedative, Muscle Relaxant, Amnesia, Dystaxia, Hypnotic.",
            "onset": "1-5 minutes",
            "summary": "A Thienodiazepine which is close to its parent compound, Etizolam, whilst being significantly weaker and longer lasting."
        },
        "pweffects": {
            "Amnesia": "https://psychonautwiki.org/wiki/Amnesia",
            "Analysis suppression": "https://psychonautwiki.org/wiki/Analysis_suppression",
            "Anxiety suppression": "https://psychonautwiki.org/wiki/Anxiety_suppression",
            "Cognitive euphoria": "https://psychonautwiki.org/wiki/Cognitive_euphoria",
            "Compulsive redosing": "https://psychonautwiki.org/wiki/Compulsive_redosing",
            "Delusions": "https://psychonautwiki.org/wiki/Delusions",
            "Disinhibition": "https://psychonautwiki.org/wiki/Disinhibition",
            "Dizziness": "https://psychonautwiki.org/wiki/Dizziness",
            "Emotion suppression": "https://psychonautwiki.org/wiki/Emotion_suppression",
            "Information processing suppression": "https://psychonautwiki.org/wiki/Information_processing_suppression",
            "Muscle relaxation": "https://psychonautwiki.org/wiki/Muscle_relaxation",
            "Respiratory depression": "https://psychonautwiki.org/wiki/Respiratory_depression",
            "Sedation": "https://psychonautwiki.org/wiki/Sedation",
            "Thought deceleration": "https://psychonautwiki.org/wiki/Thought_deceleration"
        }
    },
    "deschloroketamine": {
        "aliases": [
            "2'-oxo-pcm",
            "dxe",
            "dck",
            "o-pcm",
            "opcm",
            "2-oxo-pcm"
        ],
        "categories": [
            "dissociative",
            "research-chemical",
            "habit-forming",
            "tentative"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-8"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "15-25mg",
                "Heavy": "40+mg.",
                "Light": "5-15mg",
                "Strong": "25-40mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "3-6"
        },
        "formatted_onset": {
            "Insufflated": "2-20",
            "_unit": "minutes"
        },
        "name": "deschloroketamine",
        "pretty_name": "Deschloroketamine",
        "properties": {
            "after-effects": "1-8 hours.",
            "aliases": [
                "2'-oxo-pcm",
                "dxe",
                "dck",
                "o-pcm",
                "opcm",
                "2-oxo-pcm"
            ],
            "categories": [
                "dissociative",
                "research-chemical",
                "habit-forming",
                "tentative"
            ],
            "dose": "Light: 5-15mg Common: 15-25mg Strong: 25-40mg Heavy: 40+mg.",
            "duration": "3-6 hours",
            "onset": "Insufflated: 2-20 minutes.",
            "summary": "A novel analogue of Ketamine which is much more potent and has a longer duration."
        },
        "pweffects": {
            "Acuity suppression": "https://psychonautwiki.org/wiki/Acuity_suppression",
            "Amnesia": "https://psychonautwiki.org/wiki/Amnesia",
            "Analysis enhancement": "https://psychonautwiki.org/wiki/Analysis_enhancement",
            "Anxiety": "https://psychonautwiki.org/wiki/Anxiety",
            "Auditory distortion": "https://psychonautwiki.org/wiki/Auditory_distortion",
            "Auditory hallucinations": "https://psychonautwiki.org/wiki/Auditory_hallucinations",
            "Auditory suppression": "https://psychonautwiki.org/wiki/Auditory_suppression",
            "Autonomous entities": "https://psychonautwiki.org/wiki/Autonomous_entities",
            "Cognitive euphoria": "https://psychonautwiki.org/wiki/Cognitive_euphoria",
            "Compulsive redosing": "https://psychonautwiki.org/wiki/Compulsive_redosing",
            "Conceptual thinking": "https://psychonautwiki.org/wiki/Conceptual_thinking",
            "Consciousness disconnection": "https://psychonautwiki.org/wiki/Consciousness_disconnection",
            "Creativity enhancement": "https://psychonautwiki.org/wiki/Creativity_enhancement",
            "Depersonalization": "https://psychonautwiki.org/wiki/Depersonalization",
            "Derealization": "https://psychonautwiki.org/wiki/Derealization",
            "Disinhibition": "https://psychonautwiki.org/wiki/Disinhibition",
            "Dizziness": "https://psychonautwiki.org/wiki/Dizziness",
            "Double vision": "https://psychonautwiki.org/wiki/Double_vision",
            "D\u00e9j\u00e0 vu": "https://psychonautwiki.org/wiki/D%C3%A9j%C3%A0_vu",
            "Environmental cubism": "https://psychonautwiki.org/wiki/Environmental_cubism",
            "Environmental orbism": "https://psychonautwiki.org/wiki/Environmental_orbism",
            "Frame rate suppression": "https://psychonautwiki.org/wiki/Frame_rate_suppression",
            "Geometry": "https://psychonautwiki.org/wiki/Geometry",
            "Immersion enhancement": "https://psychonautwiki.org/wiki/Immersion_enhancement",
            "Information processing suppression": "https://psychonautwiki.org/wiki/Information_processing_suppression",
            "Internal hallucinations": "https://psychonautwiki.org/wiki/Internal_hallucinations",
            "Language suppression": "https://psychonautwiki.org/wiki/Language_suppression",
            "Memory suppression": "https://psychonautwiki.org/wiki/Memory_suppression",
            "Motor control loss": "https://psychonautwiki.org/wiki/Motor_control_loss",
            "Muscle relaxation": "https://psychonautwiki.org/wiki/Muscle_relaxation",
            "Nausea": "https://psychonautwiki.org/wiki/Nausea",
            "Pattern recognition suppression": "https://psychonautwiki.org/wiki/Pattern_recognition_suppression",
            "Perception of decreased weight": "https://psychonautwiki.org/wiki/Perception_of_decreased_weight",
            "Perspective alterations": "https://psychonautwiki.org/wiki/Perspective_alterations",
            "Perspective distortions": "https://psychonautwiki.org/wiki/Perspective_distortions",
            "Physical autonomy": "https://psychonautwiki.org/wiki/Physical_autonomy",
            "Physical euphoria": "https://psychonautwiki.org/wiki/Physical_euphoria",
            "Scenarios and plots": "https://psychonautwiki.org/wiki/Scenarios_and_plots",
            "Scenery slicing": "https://psychonautwiki.org/wiki/Scenery_slicing",
            "Settings, sceneries, and landscapes": "https://psychonautwiki.org/wiki/Settings,_sceneries,_and_landscapes",
            "Spontaneous tactile sensations": "https://psychonautwiki.org/wiki/Spontaneous_tactile_sensations",
            "Tactile disconnection": "https://psychonautwiki.org/wiki/Tactile_disconnection",
            "Tactile suppression": "https://psychonautwiki.org/wiki/Tactile_suppression",
            "Thought deceleration": "https://psychonautwiki.org/wiki/Thought_deceleration",
            "Time distortion": "https://psychonautwiki.org/wiki/Time_distortion",
            "Visual disconnection": "https://psychonautwiki.org/wiki/Visual_disconnection",
            "Visual sliding": "https://psychonautwiki.org/wiki/Visual_sliding"
        }
    },
    "desmethylflunitrazepam": {
        "aliases": [
            "fonazepam",
            "ro05-4435",
            "norflunitrazepam"
        ],
        "categories": [
            "depressant",
            "benzodiazepine",
            "habit-forming",
            "research-chemical"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "2-12"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "1-2mg",
                "Light": "0.5-1mg",
                "Strong": "2-4mg+"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "5-10"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "30-60"
        },
        "name": "desmethylflunitrazepam",
        "pretty_name": "Desmethylflunitrazepam",
        "properties": {
            "after-effects": "2-12 hours.",
            "aliases": [
                "fonazepam",
                "ro05-4435",
                "norflunitrazepam"
            ],
            "avoid": "All other CNS depressants.",
            "categories": [
                "depressant",
                "benzodiazepine",
                "habit-forming",
                "research-chemical"
            ],
            "dose": "Light: 0.5-1mg Common: 1-2mg Strong: 2-4mg+",
            "duration": "5-10 hours.",
            "onset": "30-60 minutes.",
            "summary": "Benzodiazepine that is a metabolite of Flunitrazepam, and has been sold as a research chemical."
        }
    },
    "det": {
        "aliases": [
            "diethyltryptamine"
        ],
        "categories": [
            "psychedelic",
            "research-chemical",
            "tentative"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-6"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "50-80mg",
                "Light": "20-40mg",
                "Strong": "80mg+"
            },
            "Vapourized": {
                "Common": "30-50mg",
                "Light": "15-25mg",
                "Strong": "50mg+"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "2-4"
        },
        "formatted_effects": [
            "Euphoria",
            "empathy",
            "insight",
            "brightened colour",
            "Closed/Open eye visuals",
            "enhanced tactile sensation",
            "mental/physical stimulation",
            "decreased appetite",
            "pupil dilation",
            "restlessness",
            "change in perception",
            "ego softening",
            "sweating/chills",
            "muscle tension",
            "confusion",
            "insomnia",
            ""
        ],
        "formatted_onset": {
            "Oral": "30-90",
            "Vaporized": "1-5",
            "_unit": "minutes"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_DET.shtml",
            "tihkal": "https://www.erowid.org/library/books_online/tihkal/tihkal03.shtml"
        },
        "name": "det",
        "pretty_name": "DET",
        "properties": {
            "after-effects": "1-6 hours.",
            "aliases": [
                "diethyltryptamine"
            ],
            "categories": [
                "psychedelic",
                "research-chemical",
                "tentative"
            ],
            "dosage": "Vaporized (using a 100% success method) Light: 15-25mg's Common: 30-50mg's Strong: 50mg+ Orally Light: 20-40mg's Common: 50-80mg's Strong: 80mg+",
            "dose": "Vapourized Light: 15-25mg Common: 30-50mg Strong: 50mg+ | Oral Light: 20-40mg Common: 50-80mg Strong: 80mg+",
            "duration": "2-4 hours.",
            "effects": "Euphoria, empathy, insight, brightened colour, Closed/Open eye visuals, enhanced tactile sensation, mental/physical stimulation, decreased appetite, pupil dilation, restlessness, change in perception, ego softening, sweating/chills, muscle tension, confusion, insomnia.",
            "onset": "Vaporized: 1-5 minutes. | Oral: 30-90 minutes.",
            "summary": "A surprisingly uncommon analogue of DMT with similar effects and reported oral activity without the aid of an MAOI."
        }
    },
    "dexedrine": {
        "aliases": [
            "dextroamphetamine",
            "dexamfetamine"
        ],
        "categories": [
            "stimulant",
            "habit-forming",
            "common"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "2-24"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "10-20mg",
                "Light": "5-10mg",
                "Strong": "20-30mg."
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "3-6"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "20-60"
        },
        "name": "dexedrine",
        "pretty_name": "Dexedrine",
        "properties": {
            "after-effects": "2-24 hours.",
            "aliases": [
                "dextroamphetamine",
                "dexamfetamine"
            ],
            "avoid": "Other stimulants.",
            "categories": [
                "stimulant",
                "habit-forming",
                "common"
            ],
            "dose": "Light: 5-10mg Common: 10-20mg Strong: 20-30mg.",
            "duration": "3-6 hours.",
            "onset": "20-60 minutes.",
            "summary": "A highly abusable stimulant. It is rarely prescribed in the US to treat ADHD, and is very similar in effects to Adderall, as its main ingredient is 75% of what adderall is."
        },
        "sources": {
            "_general": [
                "pregnancy category C according to the FDA - http://www.accessdata.fda.gov/drugsatfda_docs/label/2007/017078s042lbl.pdf"
            ]
        }
    },
    "dextropropoxyphene": {
        "aliases": [
            "darvocet",
            "co-proxamol",
            "coproxamol",
            "capadex",
            "di-gesic"
        ],
        "categories": [
            "opioid",
            "depressant",
            "habit-forming"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-6"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "65-100mg",
                "Light": "30-65mg",
                "NOTE": "It",
                "Strong": "100-200mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "1-3"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "20-30"
        },
        "name": "dextropropoxyphene",
        "pretty_name": "Dextropropoxyphene",
        "properties": {
            "after-effects": "1-6 hours.",
            "aliases": [
                "darvocet",
                "co-proxamol",
                "coproxamol",
                "capadex",
                "di-gesic"
            ],
            "avoid": "All CNS depressants. And all together if you have a history of issues with your Kidneys, Liver, Heart and any Respiratory Disorders.",
            "categories": [
                "opioid",
                "depressant",
                "habit-forming"
            ],
            "dose": "Light: 30-65mg Common: 65-100mg Strong: 100-200mg NOTE: It was taken off the market in some countries due to issues relating to the Kidney, Liver, Heart and Respiratory Disorders.",
            "duration": "1-3 hours.",
            "onset": "20-30 minutes.",
            "summary": "An opioid analgesic that is an optical isomer of levopropoxyphene. Used to treat mild pain and often used for its antitussive properties. It has been taken off the market in Europe and US due to concerns of health issues relating to the Kidney, Liver, Heart and Respiratory Disorders. Just a bit stronger than Tramadol."
        }
    },
    "diazepam": {
        "aliases": [
            "valium"
        ],
        "categories": [
            "benzodiazepine",
            "habit-forming",
            "depressant",
            "common"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-120"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "5-15mg",
                "Heavy": "15-30mg.",
                "Light": "2.5-5mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "10-24"
        },
        "formatted_effects": [
            "Memory loss",
            "Blackout potential",
            "Motor skill impairment",
            "Dizziness",
            "Depression",
            "Irritability",
            "Aggression",
            "Rage",
            "Personality changes",
            "Drowsiness",
            "Appetite fluctuation",
            "Euphoria",
            "Relaxation",
            "Anxiety suppression",
            "Muscle relaxation",
            "Emotional and social dissociation or de-realization (normally seen with long term use)",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "30-90"
        },
        "name": "diazepam",
        "pretty_name": "Diazepam",
        "properties": {
            "after-effects": "1-120 hours.",
            "aliases": [
                "valium"
            ],
            "avoid": "All other CNS depressants",
            "bioavailability": "Oral 85-100%",
            "categories": [
                "benzodiazepine",
                "habit-forming",
                "depressant",
                "common"
            ],
            "dose": "Light: 2.5-5mg Common: 5-15mg Heavy: 15-30mg.",
            "dose_to_diazepam": "Diazepam - 10mg ~=10mg Diazepam.",
            "duration": "10-24 hours.",
            "effects": "Memory loss, Blackout potential, Motor skill impairment, Dizziness, Depression, Irritability, Aggression, Rage, Personality changes, Drowsiness, Appetite fluctuation, Euphoria, Relaxation, Anxiety suppression, Muscle relaxation, Emotional and social dissociation or de-realization (normally seen with long term use).",
            "onset": "30-90 minutes.",
            "summary": "A very common and widely prescribed benzodiazepine with hypnotic and sedative qualities. The metre by which other benzodiazepines are compared. May cause amnesia and lowered inhibitions in excess. Has a relatively long half-life in comparison with other benzodiazepines."
        },
        "pweffects": {
            "Amnesia": "https://psychonautwiki.org/wiki/Amnesia",
            "Analysis suppression": "https://psychonautwiki.org/wiki/Analysis_suppression",
            "Anxiety suppression": "https://psychonautwiki.org/wiki/Anxiety_suppression",
            "Compulsive redosing": "https://psychonautwiki.org/wiki/Compulsive_redosing",
            "Delusions": "https://psychonautwiki.org/wiki/Delusions",
            "Disinhibition": "https://psychonautwiki.org/wiki/Disinhibition",
            "Dizziness": "https://psychonautwiki.org/wiki/Dizziness",
            "Emotion suppression": "https://psychonautwiki.org/wiki/Emotion_suppression",
            "Information processing suppression": "https://psychonautwiki.org/wiki/Information_processing_suppression",
            "Motor control loss": "https://psychonautwiki.org/wiki/Motor_control_loss",
            "Muscle relaxation": "https://psychonautwiki.org/wiki/Muscle_relaxation",
            "Respiratory depression": "https://psychonautwiki.org/wiki/Respiratory_depression",
            "Sedation": "https://psychonautwiki.org/wiki/Sedation",
            "Seizure suppression": "https://psychonautwiki.org/wiki/Seizure_suppression",
            "Thought deceleration": "https://psychonautwiki.org/wiki/Thought_deceleration"
        },
        "sources": {
            "_general": [
                "Alcohol and benzodiazepines in fatal poisonings. - https://www.ncbi.nlm.nih.gov/pubmed/12170103",
                "NMDA receptor antagonists potently suppress the spontaneous withdrawal signs induced by discontinuation of long-term diazepam treatment in Fischer ... - http://www.ncbi.nlm.nih.gov/pubmed/9593834",
                "Dual intoxication with diazepam and amphetamine: this drug interaction probably potentiates myocardial ischemia. - http://www.ncbi.nlm.nih.gov/pubmed/17320309",
                "Effect of omeprazole and cimetidine on plasma diazepam levels. - http://www.ncbi.nlm.nih.gov/pubmed/2276389",
                "Bioavailability of intranasal vs. rectal diazepam. - http://www.ncbi.nlm.nih.gov/pubmed/22981338",
                "Dosing feasibility and tolerability of intranasal diazepam in adults with epilepsy. - http://www.ncbi.nlm.nih.gov/pubmed/25154625"
            ]
        }
    },
    "dibutylone": {
        "categories": [
            "inactive"
        ],
        "name": "dibutylone",
        "pretty_name": "Dibutylone",
        "properties": {
            "categories": [
                "inactive"
            ],
            "summary": "Inactive."
        }
    },
    "diclazepam": {
        "categories": [
            "benzodiazepine",
            "habit-forming",
            "depressant"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-24"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "1-2mg",
                "Light": "0.25-1mg",
                "Strong": "2mg+"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "8-12"
        },
        "formatted_effects": [
            "Anxiolytic",
            "Sedative",
            "Muscle Relaxant",
            "Amnesia",
            "Dystaxia",
            "Hypnotic",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "15-90"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_Diclazepam.shtml"
        },
        "name": "diclazepam",
        "pretty_name": "Diclazepam",
        "properties": {
            "after-effects": "1-24 hours.",
            "categories": [
                "benzodiazepine",
                "habit-forming",
                "depressant"
            ],
            "dose": "Light: 0.25-1mg Common: 1-2mg's Strong: 2mg+",
            "dose_to_diazepam": "Diclazepam - 1mg ~=10mg Diazepam.",
            "duration": "8-12 hours (~42 hour half-life)",
            "effects": "Anxiolytic, Sedative, Muscle Relaxant, Amnesia, Dystaxia, Hypnotic.",
            "onset": "15-90 minutes.",
            "summary": "A benzodiazepine drug and analogue of diazepam first synthesised by Leo Sternbach at Hoffman-LaRoche in 1960, it has become prominent as an RC benzodiazepine on the grey market in recent years, particularly with the decline in etizolam availability. A sedative and hypnotic it is of intermediate to long half life with similar effects to diazepam, though 10x more potent."
        },
        "pweffects": {
            "Amnesia": "https://psychonautwiki.org/wiki/Amnesia",
            "Analysis suppression": "https://psychonautwiki.org/wiki/Analysis_suppression",
            "Anxiety suppression": "https://psychonautwiki.org/wiki/Anxiety_suppression",
            "Compulsive redosing": "https://psychonautwiki.org/wiki/Compulsive_redosing",
            "Delusions": "https://psychonautwiki.org/wiki/Delusions",
            "Disinhibition": "https://psychonautwiki.org/wiki/Disinhibition",
            "Dizziness": "https://psychonautwiki.org/wiki/Dizziness",
            "Emotion suppression": "https://psychonautwiki.org/wiki/Emotion_suppression",
            "Information processing suppression": "https://psychonautwiki.org/wiki/Information_processing_suppression",
            "Motor control loss": "https://psychonautwiki.org/wiki/Motor_control_loss",
            "Muscle relaxation": "https://psychonautwiki.org/wiki/Muscle_relaxation",
            "Respiratory depression": "https://psychonautwiki.org/wiki/Respiratory_depression",
            "Sedation": "https://psychonautwiki.org/wiki/Sedation",
            "Thought deceleration": "https://psychonautwiki.org/wiki/Thought_deceleration"
        }
    },
    "diclofensine": {
        "aliases": [
            "ro8-4650"
        ],
        "categories": [
            "stimulant",
            "research-chemical",
            "tentative",
            "habit-forming"
        ],
        "dose_note": " NOTE: These doses are tentative and may need further research.",
        "formatted_dose": {
            "Threshold:": {
                "Common": "40-60mg",
                "Heavy": "60-80mg",
                "Low": "30-40mg",
                "Threshold": "12-15mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "4-6"
        },
        "name": "diclofensine",
        "pretty_name": "Diclofensine",
        "properties": {
            "aliases": [
                "ro8-4650"
            ],
            "categories": [
                "stimulant",
                "research-chemical",
                "tentative",
                "habit-forming"
            ],
            "dose": "Threshold: 12-15mg Low: 30-40mg Common: 40-60mg Heavy: 60-80mg | NOTE: These doses are tentative and may need further research.",
            "duration": "4-6 hours",
            "summary": "A triple monoamine reuptake inhibitor developed by Hoffman-LaRoche in the 1970s as an antidepressant but discontinued, probably due to high abuse potential. Has not become popular as a recreational drug at this time. Acts as an SNDRI, mostly inhibits dopamine and noradrenaline."
        }
    },
    "diethyl-ether": {
        "aliases": [
            "ether"
        ],
        "categories": [
            "depressant",
            "habit-forming",
            "tentative"
        ],
        "formatted_aftereffects": {
            "6": "hours",
            "_unit": "hours"
        },
        "formatted_duration": {
            "value": "Short."
        },
        "formatted_onset": {
            "value": "Rapid"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_Ether.shtml"
        },
        "name": "diethyl-ether",
        "pretty_name": "Diethyl ether",
        "properties": {
            "after-effects": "1-6 hours | NOTE: The smell will linger for days afterwards.",
            "aliases": [
                "ether"
            ],
            "avoid": "Avoid CNS depressants and smoking.",
            "categories": [
                "depressant",
                "habit-forming",
                "tentative"
            ],
            "duration": "Short.",
            "obtain": "Air.",
            "onset": "Rapid",
            "summary": "An industrial solvent which is sometimes used recreationally as a dissociative anaesthetic, with a short length of action. Effects are similar to alcohol. Leaves one's breath tasting and smelling strongly of ether for much longer than the experience lasts."
        }
    },
    "dihydrocodeine": {
        "aliases": [
            "dhc"
        ],
        "categories": [
            "opioid",
            "habit-forming",
            "depressant"
        ],
        "dose_note": " NOTE: Cold Water Extract the DHC out if the pills are in combination with other substances",
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-8"
        },
        "formatted_dose": {
            "Light:": {
                "Common": "100-150mg",
                "Heavy": "150-200mg+",
                "Light": "50-100mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "3-4"
        },
        "formatted_effects": [
            "Euphoria",
            "Dry Mouth",
            "Mood lift",
            "Itchiness",
            "Relaxant",
            "Constipation",
            "Pupil constriction",
            "Analgesia",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "30-45"
        },
        "name": "dihydrocodeine",
        "pretty_name": "Dihydrocodeine",
        "properties": {
            "after-effects": "1-8 hours.",
            "aliases": [
                "dhc"
            ],
            "bioavailability": "Oral 20%",
            "categories": [
                "opioid",
                "habit-forming",
                "depressant"
            ],
            "dose": "Light: 50-100mg Common: 100-150mg Heavy: 150-200mg+ | NOTE: Cold Water Extract the DHC out if the pills are in combination with other substances",
            "duration": "3-4 hours.",
            "effects": "Euphoria, Dry Mouth, Mood lift, Itchiness, Relaxant, Constipation, Pupil constriction, Analgesia.",
            "onset": "30-45 minutes.",
            "summary": "A weak semi-synthetic opioid analgesic and antitussive (anti-cough) drug. Often sold as a syrup in combination with aspirin or paracetamol. Not to be confused with the slightly less potent codeine."
        },
        "pweffects": {
            "Anxiety suppression": "https://psychonautwiki.org/wiki/Anxiety_suppression",
            "Cognitive euphoria": "https://psychonautwiki.org/wiki/Cognitive_euphoria",
            "Compulsive redosing": "https://psychonautwiki.org/wiki/Compulsive_redosing",
            "Constipation": "https://psychonautwiki.org/wiki/Constipation",
            "Cough suppression": "https://psychonautwiki.org/wiki/Cough_suppression",
            "Difficulty urinating": "https://psychonautwiki.org/wiki/Difficulty_urinating",
            "Itchiness": "https://psychonautwiki.org/wiki/Itchiness",
            "Pain relief": "https://psychonautwiki.org/wiki/Pain_relief",
            "Physical euphoria": "https://psychonautwiki.org/wiki/Physical_euphoria",
            "Pupil constriction": "https://psychonautwiki.org/wiki/Pupil_constriction",
            "Respiratory depression": "https://psychonautwiki.org/wiki/Respiratory_depression",
            "Sedation": "https://psychonautwiki.org/wiki/Sedation"
        }
    },
    "dimemebfe": {
        "aliases": [
            "5-meo-bfe"
        ],
        "categories": [
            "research-chemical",
            "psychedelic",
            "empathogen",
            "tentative"
        ],
        "formatted_dose": {
            "Oral": {
                "Common": "50-75mg",
                "Light": "25-50mg",
                "Strong": "75-125mg."
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "4-6"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "10-40"
        },
        "name": "dimemebfe",
        "pretty_name": "Dimemebfe",
        "properties": {
            "aliases": [
                "5-meo-bfe"
            ],
            "categories": [
                "research-chemical",
                "psychedelic",
                "empathogen",
                "tentative"
            ],
            "dose": "Light: 25-50mg Common: 50-75mg Strong: 75-125mg.",
            "duration": "4-6 hours.",
            "onset": "10-40 minutes.",
            "summary": "Related in structure to 5-MeO-DMT, yet much less potent. Described as feeling somewhat similar to mushrooms, with some empathogenic effects."
        }
    },
    "dimethylone": {
        "categories": [
            "inactive"
        ],
        "name": "dimethylone",
        "pretty_name": "Dimethylone",
        "properties": {
            "categories": [
                "inactive"
            ],
            "summary": "Inactive."
        }
    },
    "diphenidine": {
        "aliases": [
            "dpd"
        ],
        "categories": [
            "dissociative",
            "research-chemical",
            "habit-forming",
            "tentative"
        ],
        "dose_note": " NOTE: Diphenidine is an extremely new substance with very little record of human use. Start low, work your way up.",
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "4-24"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "85-110mg",
                "Heavy": "110-150mg",
                "Light": "70-85mg",
                "Threshold": "50mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "4-6"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "15-30"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_Diphenidine.shtml"
        },
        "name": "diphenidine",
        "pretty_name": "Diphenidine",
        "properties": {
            "after-effects": "4-24 hours",
            "aliases": [
                "dpd"
            ],
            "categories": [
                "dissociative",
                "research-chemical",
                "habit-forming",
                "tentative"
            ],
            "dose": "Oral Threshold: 50mg Light: 70-85mg Common: 85-110mg Heavy: 110-150mg | NOTE: Diphenidine is an extremely new substance with very little record of human use. Start low, work your way up.",
            "duration": "4-6 hours",
            "onset": "15-30 minutes",
            "summary": "A dissociative anaesthetic related to ephenidine with similar qualities to PCP and ketamine. Has seen some popularity as a recreational RC. Dosage curve has been reported as particularly steep, so care should be taken."
        },
        "pweffects": {
            "Acuity suppression": "https://psychonautwiki.org/wiki/Acuity_suppression",
            "Amnesia": "https://psychonautwiki.org/wiki/Amnesia",
            "Analysis enhancement": "https://psychonautwiki.org/wiki/Analysis_enhancement",
            "Anxiety suppression": "https://psychonautwiki.org/wiki/Anxiety_suppression",
            "Auditory distortion": "https://psychonautwiki.org/wiki/Auditory_distortion",
            "Auditory enhancement": "https://psychonautwiki.org/wiki/Auditory_enhancement",
            "Auditory hallucinations": "https://psychonautwiki.org/wiki/Auditory_hallucinations",
            "Auditory suppression": "https://psychonautwiki.org/wiki/Auditory_suppression",
            "Autonomous entities": "https://psychonautwiki.org/wiki/Autonomous_entities",
            "Cognitive euphoria": "https://psychonautwiki.org/wiki/Cognitive_euphoria",
            "Compulsive redosing": "https://psychonautwiki.org/wiki/Compulsive_redosing",
            "Conceptual thinking": "https://psychonautwiki.org/wiki/Conceptual_thinking",
            "Consciousness disconnection": "https://psychonautwiki.org/wiki/Consciousness_disconnection",
            "Depersonalization": "https://psychonautwiki.org/wiki/Depersonalization",
            "Derealization": "https://psychonautwiki.org/wiki/Derealization",
            "Disinhibition": "https://psychonautwiki.org/wiki/Disinhibition",
            "Dizziness": "https://psychonautwiki.org/wiki/Dizziness",
            "Double vision": "https://psychonautwiki.org/wiki/Double_vision",
            "D\u00e9j\u00e0 vu": "https://psychonautwiki.org/wiki/D%C3%A9j%C3%A0_vu",
            "Environmental cubism": "https://psychonautwiki.org/wiki/Environmental_cubism",
            "Environmental orbism": "https://psychonautwiki.org/wiki/Environmental_orbism",
            "Frame rate suppression": "https://psychonautwiki.org/wiki/Frame_rate_suppression",
            "Geometry": "https://psychonautwiki.org/wiki/Geometry",
            "Increased heart rate": "https://psychonautwiki.org/wiki/Increased_heart_rate",
            "Information processing suppression": "https://psychonautwiki.org/wiki/Information_processing_suppression",
            "Internal hallucinations": "https://psychonautwiki.org/wiki/Internal_hallucinations",
            "Memory suppression": "https://psychonautwiki.org/wiki/Memory_suppression",
            "Motor control loss": "https://psychonautwiki.org/wiki/Motor_control_loss",
            "Nausea": "https://psychonautwiki.org/wiki/Nausea",
            "Pattern recognition suppression": "https://psychonautwiki.org/wiki/Pattern_recognition_suppression",
            "Perception of decreased weight": "https://psychonautwiki.org/wiki/Perception_of_decreased_weight",
            "Perspective alterations": "https://psychonautwiki.org/wiki/Perspective_alterations",
            "Perspective distortions": "https://psychonautwiki.org/wiki/Perspective_distortions",
            "Physical autonomy": "https://psychonautwiki.org/wiki/Physical_autonomy",
            "Physical euphoria": "https://psychonautwiki.org/wiki/Physical_euphoria",
            "Scenarios and plots": "https://psychonautwiki.org/wiki/Scenarios_and_plots",
            "Scenery slicing": "https://psychonautwiki.org/wiki/Scenery_slicing",
            "Settings, sceneries, and landscapes": "https://psychonautwiki.org/wiki/Settings,_sceneries,_and_landscapes",
            "Spontaneous tactile sensations": "https://psychonautwiki.org/wiki/Spontaneous_tactile_sensations",
            "Stimulation": "https://psychonautwiki.org/wiki/Stimulation",
            "Tactile disconnection": "https://psychonautwiki.org/wiki/Tactile_disconnection",
            "Tactile suppression": "https://psychonautwiki.org/wiki/Tactile_suppression",
            "Thought deceleration": "https://psychonautwiki.org/wiki/Thought_deceleration",
            "Time distortion": "https://psychonautwiki.org/wiki/Time_distortion",
            "Visual disconnection": "https://psychonautwiki.org/wiki/Visual_disconnection"
        }
    },
    "dipipanone": {
        "aliases": [
            "diconal"
        ],
        "categories": [
            "opioid",
            "depressant",
            "habit-forming",
            "depressant"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-12"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "5-10mg",
                "Light": "3-5mg",
                "Strong": "10-20mg+"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "3-6"
        },
        "formatted_effects": [
            "Euphoria",
            "Dry Mouth",
            "Mood lift",
            "Itchiness",
            "Relaxant",
            "Constipation",
            "Pupil constriction",
            "Analgesia",
            ""
        ],
        "formatted_onset": {
            "Insufflated": "5-15",
            "Intravenous": "0-1",
            "Oral": "15-30",
            "_unit": "minutes"
        },
        "name": "dipipanone",
        "pretty_name": "Dipipanone",
        "properties": {
            "after-effects": "1-12 hours.",
            "aliases": [
                "diconal"
            ],
            "avoid": "All other CNS depressants",
            "categories": [
                "opioid",
                "depressant",
                "habit-forming",
                "depressant"
            ],
            "dose": "Light: 3-5mg Common: 5-10mg Strong: 10-20mg+",
            "duration": "3-6 hours.",
            "effects": "Euphoria, Dry Mouth, Mood lift, Itchiness, Relaxant, Constipation, Pupil constriction, Analgesia.",
            "onset": "Oral: 15-30 minutes | Insufflated: 5-15 minutes. | Intravenous: 0-1 minutes",
            "summary": "A powerful opioid of equivalent strength to morphine, rarely seen outside of medical environments. Often used to treat severe pain where morphine is contraindicated. Usually found in combination with the antihistamine Cyclizine, which potentiates it.",
            "warning": "If you do come across these pills, and IV them, you will reach a point where the Cyclizine in the Diconal preparation will reach a very bad result, and missed shots can end up with amputations."
        }
    },
    "dipt": {
        "aliases": [
            "diisopropyltryptamine"
        ],
        "categories": [
            "psychedelic",
            "research-chemical"
        ],
        "dose_note": " NOTE: This is a very new substance with very little history of human use. Start low and work your way up, doses are not to be taken as reccomended values.",
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "12-24"
        },
        "formatted_dose": {
            "Threshold:": {
                "Common": "30-50mg",
                "Heavy": "50mg+",
                "Light": "15-25mg",
                "Threshold": "15mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "3-5"
        },
        "formatted_effects": [
            "Euphoria",
            "empathy",
            "insight",
            "brightened colour",
            "Closed/Open eye visuals",
            "enhanced tactile sensation",
            "mental/physical stimulation",
            "decreased appetite",
            "pupil dilation",
            "restlessness",
            "change in perception",
            "ego softening",
            "sweating/chills",
            "muscle tension",
            "confusion",
            "insomnia",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "30-60"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_DiPT.shtml",
            "tihkal": "https://www.erowid.org/library/books_online/tihkal/tihkal04.shtml"
        },
        "name": "dipt",
        "pretty_name": "DiPT",
        "properties": {
            "after-effects": "12-24 hours",
            "aliases": [
                "diisopropyltryptamine"
            ],
            "categories": [
                "psychedelic",
                "research-chemical"
            ],
            "dose": "Threshold: 15mg Light: 15-25mg Common: 30-50mg Heavy: 50mg+ | NOTE: This is a very new substance with very little history of human use. Start low and work your way up, doses are not to be taken as reccomended values.",
            "duration": "3-5 hours",
            "effects": "Euphoria, empathy, insight, brightened colour, Closed/Open eye visuals, enhanced tactile sensation, mental/physical stimulation, decreased appetite, pupil dilation, restlessness, change in perception, ego softening, sweating/chills, muscle tension, confusion, insomnia.",
            "onset": "30-60 minutes.",
            "summary": "A rare tryptamine psychedelic closely related to DMT, with the interesting property of having little visual hallucinations, but strong auditory effects."
        },
        "pweffects": {
            "Auditory distortion": "https://psychonautwiki.org/wiki/Auditory_distortion",
            "Auditory enhancement": "https://psychonautwiki.org/wiki/Auditory_enhancement",
            "Auditory hallucinations": "https://psychonautwiki.org/wiki/Auditory_hallucinations",
            "Depersonalization": "https://psychonautwiki.org/wiki/Depersonalization",
            "Drifting": "https://psychonautwiki.org/wiki/Drifting",
            "Inner ear pressure": "https://psychonautwiki.org/wiki/Inner_ear_pressure",
            "Motor control loss": "https://psychonautwiki.org/wiki/Motor_control_loss",
            "Stomach bloating": "https://psychonautwiki.org/wiki/Stomach_bloating",
            "Thought suppression": "https://psychonautwiki.org/wiki/Thought_suppression"
        }
    },
    "dmaa": {
        "categories": [
            "stimulant",
            "research-chemical",
            "habit-forming",
            "nootropic"
        ],
        "formatted_dose": {
            "Oral": {
                "Common": "20-50mg",
                "Low": "10-20mg",
                "Strong": "50-100mg",
                "Threshold": "5-10mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "2-4"
        },
        "formatted_onset": {
            "value": "Rapid."
        },
        "name": "dmaa",
        "pretty_name": "DMAA",
        "properties": {
            "avoid": "Other stimulants.",
            "categories": [
                "stimulant",
                "research-chemical",
                "habit-forming",
                "nootropic"
            ],
            "dose": "Threshold: 5-10mg Low: 10-20mg Common: 20-50mg Strong: 50-100mg",
            "duration": "2-4 hours.",
            "onset": "Rapid.",
            "summary": "Also known as methylhexanamine, this sympathetomimetic drug was developed as a nasal decongestant by Eli Lilly in the 1940s. It has been used as a weight loss aid and missold as a dietary supplement and component of some energy drinks. Carries a risk of heart attack, stroke and other life-threatening cardiovascular issues."
        }
    },
    "dmt": {
        "aliases": [
            "n,n-dmt",
            "dimethyltryptamine"
        ],
        "categories": [
            "psychedelic",
            "common"
        ],
        "combos": {
            "2c-t-x": {
                "status": "Low Risk & Synergy"
            },
            "2c-x": {
                "status": "Low Risk & Synergy"
            },
            "5-meo-xxt": {
                "status": "Low Risk & Synergy"
            },
            "alcohol": {
                "status": "Low Risk & Decrease"
            },
            "amphetamines": {
                "note": "Stimulants increase anxiety levels and the risk of thought loops which can lead to negative experiences",
                "status": "Caution"
            },
            "amt": {
                "status": "Low Risk & Synergy"
            },
            "benzodiazepines": {
                "status": "Low Risk & Decrease"
            },
            "benzos": {
                "status": "Low Risk & Decrease"
            },
            "caffeine": {
                "status": "Low Risk & No Synergy"
            },
            "cannabis": {
                "note": "Cannabis has an unexpectedly strong and somewhat unpredictable synergy with psychedelics.",
                "status": "Caution"
            },
            "cocaine": {
                "note": "Stimulants increase anxiety levels and the risk of thought loops which can lead to negative experiences",
                "status": "Caution"
            },
            "dox": {
                "status": "Low Risk & Synergy"
            },
            "dxm": {
                "status": "Low Risk & Synergy"
            },
            "ghb/gbl": {
                "status": "Low Risk & Decrease"
            },
            "ketamine": {
                "status": "Low Risk & Synergy"
            },
            "lsd": {
                "status": "Low Risk & Synergy"
            },
            "maois": {
                "status": "Low Risk & Synergy"
            },
            "mdma": {
                "status": "Low Risk & Synergy"
            },
            "mescaline": {
                "status": "Low Risk & Synergy"
            },
            "mushrooms": {
                "status": "Low Risk & Synergy"
            },
            "mxe": {
                "status": "Low Risk & Synergy"
            },
            "nbomes": {
                "status": "Low Risk & Synergy"
            },
            "nitrous": {
                "status": "Low Risk & Synergy"
            },
            "opioids": {
                "status": "Low Risk & No Synergy"
            },
            "pcp": {
                "status": "Low Risk & Synergy"
            },
            "ssris": {
                "status": "Low Risk & Decrease"
            },
            "tramadol": {
                "note": "Tramadol is well known to lower seizure threshold and psychedelics also cause occasional seizures.",
                "status": "Unsafe"
            }
        },
        "dose_note": " NOTE: These figures are for 100% effective vaporization methods. Most methods are not 100% effective. Likelyhood of having a \"breakthrough\" experience increases with dose.",
        "formatted_aftereffects": {
            "_unit": "minutes",
            "value": "15-60"
        },
        "formatted_dose": {
            "Insufflated": {
                "Common": "25-50mg",
                "Light": "10-25mg",
                "Strong": "50-125mg+"
            },
            "Intravenous": {
                "Common": "15-25mg",
                "Light": "10-15mg",
                "Strong": "25-40mg"
            },
            "Vapourised": {
                "Common": "15-25mg",
                "Heavy": "35mg+",
                "Light": "10-15mg",
                "Strong": "25-35mg",
                "Threshold": "5-10mg"
            }
        },
        "formatted_duration": {
            "Insufflated": "45-60",
            "Oral_MAOI": "180-420",
            "Vaporized/smoked": "3-10",
            "_unit": "minutes"
        },
        "formatted_effects": [
            "immersive experience",
            "open eye visuals",
            "radical perspective shifting",
            "profound life-changing spiritual experiences",
            "powerful rushing of sensation",
            "change in perception of time",
            "auditory hallucinations",
            "color shifting",
            "hard on lungs when smoking",
            "stomach discomfort",
            "difficulty integrating experiences",
            "overwhelming fear"
        ],
        "formatted_onset": {
            "Insufflated": "3-5",
            "Oral_MAOI": "20-45",
            "Vaporized/smoked": "0-2",
            "_unit": "minutes"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_DMT.shtml",
            "tihkal": "https://www.erowid.org/library/books_online/tihkal/tihkal06.shtml"
        },
        "name": "dmt",
        "pretty_name": "DMT",
        "properties": {
            "after-effects": "15-60 minutes",
            "aliases": [
                "n,n-dmt",
                "dimethyltryptamine"
            ],
            "categories": [
                "psychedelic",
                "common"
            ],
            "dose": "Vapourised Threshold: 5-10mg Light: 10-15mg Common: 15-25mg Strong: 25-35mg Heavy: 35mg+ | Insufflated Light: 10-25mg Common: 25-50mg Strong: 50-125mg+ | Intravenous Light: 10-15mg Common: 15-25mg Strong: 25-40mg",
            "duration": "Vaporized/smoked: 3-10 minutes | Oral_MAOI: 180-420 minutes | Insufflated: 45-60 minutes",
            "effects": "immersive experience, open eye visuals, radical perspective shifting, profound life-changing spiritual experiences, powerful rushing of sensation, change in perception of time, auditory hallucinations, color shifting, hard on lungs when smoking, stomach discomfort, difficulty integrating experiences, overwhelming fear",
            "half-life": "10-20 minutes",
            "marquis": "Orange",
            "molecule": "http://www.erowid.org/chemicals/dmt/images/archive/dmt_3d_mid.jpg",
            "onset": "Vaporized/smoked: 0-2 minutes | Oral_MAOI: 20-45 minutes | Insufflated: 3-5 minutes",
            "summary": "A popular and powerful psychedelic, typically used in two ways; either it is vapourised for a short 'breakthrough' experience, or it is taken in combination with an enzyme inhibitor for a long, intense trip (this is also known as ayahuasca or pharmahuasca).",
            "vaporization": "60-80C (140-176F)"
        },
        "pweffects": {
            "8B Geometry - Exposure to inner mechanics of consciousness": "https://psychonautwiki.org/wiki/8B_Geometry_-_Exposure_to_inner_mechanics_of_consciousness",
            "Acuity enhancement": "https://psychonautwiki.org/wiki/Acuity_enhancement",
            "After images": "https://psychonautwiki.org/wiki/After_images",
            "Analysis enhancement": "https://psychonautwiki.org/wiki/Analysis_enhancement",
            "Auditory distortion": "https://psychonautwiki.org/wiki/Auditory_distortion",
            "Auditory enhancement": "https://psychonautwiki.org/wiki/Auditory_enhancement",
            "Auditory hallucinations": "https://psychonautwiki.org/wiki/Auditory_hallucinations",
            "Autonomous entities": "https://psychonautwiki.org/wiki/Autonomous_entities",
            "Changes in gravity": "https://psychonautwiki.org/wiki/Changes_in_gravity",
            "Colour enhancement": "https://psychonautwiki.org/wiki/Colour_enhancement",
            "Colour replacement": "https://psychonautwiki.org/wiki/Colour_replacement",
            "Colour shifting": "https://psychonautwiki.org/wiki/Colour_shifting",
            "Drifting": "https://psychonautwiki.org/wiki/Drifting",
            "Emotion enhancement": "https://psychonautwiki.org/wiki/Emotion_enhancement",
            "Exposure to inner mechanics of consciousness": "https://psychonautwiki.org/wiki/Exposure_to_inner_mechanics_of_consciousness",
            "External hallucinations": "https://psychonautwiki.org/wiki/External_hallucinations",
            "Feelings of impending doom": "https://psychonautwiki.org/wiki/Feelings_of_impending_doom",
            "Geometry": "https://psychonautwiki.org/wiki/Geometry",
            "Internal hallucinations": "https://psychonautwiki.org/wiki/Internal_hallucinations",
            "Machinescapes": "https://psychonautwiki.org/wiki/Machinescapes",
            "Memory suppression": "https://psychonautwiki.org/wiki/Memory_suppression",
            "Mindfulness": "https://psychonautwiki.org/wiki/Mindfulness",
            "Novelty enhancement": "https://psychonautwiki.org/wiki/Novelty_enhancement",
            "Pattern recognition enhancement": "https://psychonautwiki.org/wiki/Pattern_recognition_enhancement",
            "Personal bias suppression": "https://psychonautwiki.org/wiki/Personal_bias_suppression",
            "Perspective alterations": "https://psychonautwiki.org/wiki/Perspective_alterations",
            "Physical euphoria": "https://psychonautwiki.org/wiki/Physical_euphoria",
            "Pupil dilation": "https://psychonautwiki.org/wiki/Pupil_dilation",
            "Recursion": "https://psychonautwiki.org/wiki/Recursion",
            "Rejuvenation": "https://psychonautwiki.org/wiki/Rejuvenation",
            "Scenarios and plots": "https://psychonautwiki.org/wiki/Scenarios_and_plots",
            "Scenery slicing": "https://psychonautwiki.org/wiki/Scenery_slicing",
            "Settings, sceneries, and landscapes": "https://psychonautwiki.org/wiki/Settings,_sceneries,_and_landscapes",
            "Spirituality enhancement": "https://psychonautwiki.org/wiki/Spirituality_enhancement",
            "Spontaneous tactile sensations": "https://psychonautwiki.org/wiki/Spontaneous_tactile_sensations",
            "Subconscious communication": "https://psychonautwiki.org/wiki/Subconscious_communication",
            "Symmetrical texture repetition": "https://psychonautwiki.org/wiki/Symmetrical_texture_repetition",
            "Temperature regulation suppression": "https://psychonautwiki.org/wiki/Temperature_regulation_suppression",
            "Tracers": "https://psychonautwiki.org/wiki/Tracers",
            "Transformations": "https://psychonautwiki.org/wiki/Transformations",
            "Unity and interconnectedness": "https://psychonautwiki.org/wiki/Unity_and_interconnectedness"
        }
    },
    "dob": {
        "categories": [
            "psychedelic",
            "stimulant",
            "research-chemical"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "2-12"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "750-1100ug",
                "Dangerous": "3000ug",
                "Heavy": "1100-1500ug",
                "Light": "750ug",
                "Threshold": "500ug"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "8-24"
        },
        "formatted_effects": [
            "Euphoria",
            "empathy",
            "insight",
            "brightened colour",
            "Closed/Open eye visuals",
            "enhanced tactile sensation",
            "mental/physical stimulation",
            "decreased appetite",
            "pupil dilation",
            "restlessness",
            "change in perception",
            "ego softening",
            "sweating/chills",
            "muscle tension",
            "confusion",
            "insomnia",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "30-120"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_DOB.shtml",
            "pihkal": "https://www.erowid.org/library/books_online/pihkal/pihkal062.shtml"
        },
        "name": "dob",
        "pretty_name": "DOB",
        "properties": {
            "after-effects": "2-12 hours",
            "categories": [
                "psychedelic",
                "stimulant",
                "research-chemical"
            ],
            "dose": "Oral Threshold: 500ug Light: 750ug Common: 750-1100ug Heavy: 1100-1500ug Dangerous: 3000ug",
            "duration": "8-24 hours.",
            "effects": "Euphoria, empathy, insight, brightened colour, Closed/Open eye visuals, enhanced tactile sensation, mental/physical stimulation, decreased appetite, pupil dilation, restlessness, change in perception, ego softening, sweating/chills, muscle tension, confusion, insomnia.",
            "marquis": "Olive Green - Yellow",
            "onset": "30-120 minutes.",
            "summary": "DOB is a relatively uncommon synthetic psychedelic. It is best known for its very low doses and long duration. Historically it has rarely been taken deliberately, but in place of LSD, however it has recently found its own place in the research chemical scene."
        }
    },
    "doc": {
        "categories": [
            "psychedelic",
            "stimulant",
            "research-chemical",
            "common"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "6-12"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "1.5-2mg",
                "Heavy": "4mg+",
                "Light": "1-1.5mg",
                "Strong": "2-4mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "10-20"
        },
        "formatted_effects": [
            "Euphoria",
            "empathy",
            "insight",
            "brightened colour",
            "Closed/Open eye visuals",
            "enhanced tactile sensation",
            "mental/physical stimulation",
            "decreased appetite",
            "pupil dilation",
            "restlessness",
            "change in perception",
            "ego softening",
            "sweating/chills",
            "muscle tension",
            "confusion",
            "insomnia",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "30-150"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_DOC.shtml",
            "pihkal": "https://www.erowid.org/library/books_online/pihkal/pihkal064.shtml"
        },
        "name": "doc",
        "pretty_name": "DOC",
        "properties": {
            "after-effects": "6-12 hours.",
            "categories": [
                "psychedelic",
                "stimulant",
                "research-chemical",
                "common"
            ],
            "dose": "Oral Light: 1-1.5mg Common: 1.5-2mg Strong: 2-4mg Heavy: 4mg+",
            "duration": "10-20 hours. (Dependant on dose)",
            "effects": "Euphoria, empathy, insight, brightened colour, Closed/Open eye visuals, enhanced tactile sensation, mental/physical stimulation, decreased appetite, pupil dilation, restlessness, change in perception, ego softening, sweating/chills, muscle tension, confusion, insomnia.",
            "onset": "30-150 minutes (Highly dependant on dose)",
            "summary": "A potent stimulating psychedelic with a long action, a phenethylamine and substituted amphetamine. Sometimes sold as LSD but also enjoyed on its own merits by many. Usually sold on blotters slightly larger than those LSD is found on, but can also be bought in powder form."
        }
    },
    "doet": {
        "aliases": [
            "doe"
        ],
        "categories": [
            "psychedelic",
            "research-chemical",
            "tentative"
        ],
        "dose_note": " NOTE: These doses are tentative and may need further research.",
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "12-72"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "4-6mg",
                "Light": "2-4mg",
                "Strong": "6-10mg",
                "Threshold": "1mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "12-30"
        },
        "formatted_effects": [
            "Euphoria",
            "empathy",
            "insight",
            "brightened colour",
            "Closed/Open eye visuals",
            "enhanced tactile sensation",
            "mental/physical stimulation",
            "decreased appetite",
            "pupil dilation",
            "restlessness",
            "change in perception",
            "ego softening",
            "sweating/chills",
            "muscle tension",
            "confusion",
            "insomnia",
            ""
        ],
        "formatted_onset": {
            "_unit": "hours",
            "value": "1-3"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_DOET.shtml",
            "pihkal": "https://www.erowid.org/library/books_online/pihkal/pihkal066.shtml"
        },
        "name": "doet",
        "pretty_name": "DOET",
        "properties": {
            "after-effects": "12-72 hours",
            "aliases": [
                "doe"
            ],
            "categories": [
                "psychedelic",
                "research-chemical",
                "tentative"
            ],
            "dose": "Oral Threshold: 1mg Light: 2-4mg Common: 4-6mg Strong: 6-10mg | NOTE: These doses are tentative and may need further research.",
            "duration": "12-30 hours (Dependant on dose)",
            "effects": "Euphoria, empathy, insight, brightened colour, Closed/Open eye visuals, enhanced tactile sensation, mental/physical stimulation, decreased appetite, pupil dilation, restlessness, change in perception, ego softening, sweating/chills, muscle tension, confusion, insomnia.",
            "onset": "1-3 hours.",
            "summary": "A potent and long acting psychedelic stimulant and substituted amphetamine, similar in effects to other DOx compounds. First synthesised by Alexander Shulgin."
        }
    },
    "doi": {
        "categories": [
            "psychedelic",
            "stimulant",
            "research-chemical"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-24"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "1mg-3mg.",
                "Heavy": "3mg+",
                "Light": "750ug-1mg.",
                "Threshold": "500-750ug."
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "12-18"
        },
        "formatted_effects": [
            "Euphoria",
            "empathy",
            "insight",
            "brightened colour",
            "Closed/Open eye visuals",
            "enhanced tactile sensation",
            "mental/physical stimulation",
            "decreased appetite",
            "pupil dilation",
            "restlessness",
            "change in perception",
            "ego softening",
            "sweating/chills",
            "muscle tension",
            "confusion",
            "insomnia",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "60-90"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_DOI.shtml",
            "pihkal": "https://www.erowid.org/library/books_online/pihkal/pihkal067.shtml"
        },
        "name": "doi",
        "pretty_name": "DOI",
        "properties": {
            "after-effects": "1-24 hours.",
            "categories": [
                "psychedelic",
                "stimulant",
                "research-chemical"
            ],
            "dose": "Oral Threshold: 500-750ug. Light: 750ug-1mg. Common: 1mg-3mg. Heavy: 3mg+",
            "duration": "12-18 hours (widely dependant on dose)",
            "effects": "Euphoria, empathy, insight, brightened colour, Closed/Open eye visuals, enhanced tactile sensation, mental/physical stimulation, decreased appetite, pupil dilation, restlessness, change in perception, ego softening, sweating/chills, muscle tension, confusion, insomnia.",
            "onset": "60-90 minutes",
            "summary": "A potent, long-acting psychedelic stimulant. Historically, it has rarely been consumed deliberately, but occasionally sold as LSD. However, it has recently found its own little nest in the research chemical community."
        }
    },
    "doip": {
        "categories": [
            "tentative",
            "psychedelic",
            "stimulant",
            "research-chemical"
        ],
        "dose_note": " Note: This is based on personal experience as no trip reports have surfaced in the three years it's been on the market, so take with caution.",
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-48"
        },
        "formatted_dose": {
            "": {},
            "Threshold:": {
                "Common": "1.5-3mg",
                "Light": "800-1500ug",
                "Strong": "3mg+",
                "Threshold": "800ug"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "18-30"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "45-120"
        },
        "name": "doip",
        "pretty_name": "DOIP",
        "properties": {
            "after-effects": "1-48 hours.",
            "avoid": "Double dosing as it has a fairly long onset. Also any stimulant that's stronger than caffeine, and even then it can get quite uncomfortable.",
            "categories": [
                "tentative",
                "psychedelic",
                "stimulant",
                "research-chemical"
            ],
            "dose": "Threshold: 800ug Light: 800-1500ug Common: 1.5-3mg Strong: 3mg+ || Note: This is based on personal experience as no trip reports have surfaced in the three years it's been on the market, so take with caution.",
            "duration": "18-30 hours.",
            "onset": "45-120 minutes.",
            "summary": "A rare psychedelic ampthetamine of the same class as the likes of DOM. Is a quite powerful and potent psychedelic that has very strong amphetamine effects. Not for the faint of heart."
        }
    },
    "dom": {
        "aliases": [
            "stp"
        ],
        "categories": [
            "psychedelic",
            "stimulant",
            "research-chemical",
            "common"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "12-24"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "2.5-5mg",
                "Heavy": "7.5mg+",
                "Light": "1-2.5mg",
                "Strong": "5-7.5mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "8-30"
        },
        "formatted_effects": [
            "visual distortions",
            "a 'stoned' feeling",
            "sense of well being",
            ""
        ],
        "formatted_onset": {
            "_unit": "hours",
            "value": "2-4"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_DOM.shtml"
        },
        "name": "dom",
        "pretty_name": "DOM",
        "properties": {
            "after-effects": "12-24 hours.",
            "aliases": [
                "stp"
            ],
            "avoid": "marijuana (Can potentiate effects)",
            "categories": [
                "psychedelic",
                "stimulant",
                "research-chemical",
                "common"
            ],
            "detection": "DOM is a substituted amphetamine, so it can cause you to test positive for amphetamines 3 to 7 days after dosing.",
            "dose": "Oral Light: 1-2.5mg  Common: 2.5-5mg  Strong: 5-7.5mg  Heavy: 7.5mg+",
            "duration": "8-30 hours.",
            "effects": "visual distortions, a 'stoned' feeling, sense of well being.",
            "onset": "2-4 hours",
            "summary": "The most popular psychedelic amphetamine due to its pleasant effects, lower potency and shorter duration. Effects have been described as 'sillier' than LSD and related DOX chemicals"
        }
    },
    "don": {
        "categories": [
            "psychedelic",
            "research-chemical",
            "tentative"
        ],
        "dose_note": " NOTE: These doses are tentative and may need further research.",
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "12-24"
        },
        "formatted_dose": {
            "Threshold:": {
                "Common": "3-5mg",
                "Heavy": "5mg+",
                "Light": "3mg",
                "Threshold": "2mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "14-22"
        },
        "formatted_effects": [
            "Euphoria",
            "empathy",
            "insight",
            "brightened colour",
            "Closed/Open eye visuals",
            "enhanced tactile sensation",
            "mental/physical stimulation",
            "decreased appetite",
            "pupil dilation",
            "restlessness",
            "change in perception",
            "ego softening",
            "sweating/chills",
            "muscle tension",
            "confusion",
            "insomnia",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "30-120"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_DON.shtml",
            "pihkal": "https://www.erowid.org/library/books_online/pihkal/pihkal070.shtml"
        },
        "name": "don",
        "pretty_name": "DON",
        "properties": {
            "after-effects": "12-24 hours",
            "categories": [
                "psychedelic",
                "research-chemical",
                "tentative"
            ],
            "dose": "Threshold: 2mg Light: 3mg Common: 3-5mg Heavy: 5mg+ | NOTE: These doses are tentative and may need further research.",
            "duration": "14-22 hours.",
            "effects": "Euphoria, empathy, insight, brightened colour, Closed/Open eye visuals, enhanced tactile sensation, mental/physical stimulation, decreased appetite, pupil dilation, restlessness, change in perception, ego softening, sweating/chills, muscle tension, confusion, insomnia.",
            "onset": "30-120 minutes.",
            "summary": "A very rare psychedelic Amphetamine. That is more rough on the body then other DOx compounds. Making it physically painful in some cases."
        }
    },
    "dopr": {
        "categories": [
            "psychedelic",
            "research-chemical",
            "tentative"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-24"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "2.5-3.5mg",
                "Heavy": "3.5-5mg.",
                "Light": "2.5mg",
                "Threshold": "1.25mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "18-30"
        },
        "formatted_effects": [
            "Euphoria",
            "empathy",
            "insight",
            "brightened colour",
            "Closed/Open eye visuals",
            "enhanced tactile sensation",
            "mental/physical stimulation",
            "decreased appetite",
            "pupil dilation",
            "restlessness",
            "change in perception",
            "ego softening",
            "sweating/chills",
            "muscle tension",
            "confusion",
            "insomnia",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "90-240"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_DOPR.shtml",
            "pihkal": "https://www.erowid.org/library/books_online/pihkal/pihkal071.shtml"
        },
        "name": "dopr",
        "pretty_name": "DOPR",
        "properties": {
            "after-effects": "1-24 hours.",
            "avoid": "Double dosing, as it is a DOx compound, and any other amphetamine related drug.",
            "categories": [
                "psychedelic",
                "research-chemical",
                "tentative"
            ],
            "dose": "Threshold: 1.25mg Light: 2.5mg Common: 2.5-3.5mg Heavy: 3.5-5mg. ",
            "duration": "18-30 hours",
            "effects": "Euphoria, empathy, insight, brightened colour, Closed/Open eye visuals, enhanced tactile sensation, mental/physical stimulation, decreased appetite, pupil dilation, restlessness, change in perception, ego softening, sweating/chills, muscle tension, confusion, insomnia.",
            "onset": "90-240 minutes",
            "summary": "A rare psychedelic amphetamine of the same class as DOM. This is a powerful and potent psychedelic with all the effects you would expect from an amphetamine. Described by Shulgin as a 'heavy duty psychedelic'. Analogue of 2C-P."
        }
    },
    "doxylamine": {
        "categories": [
            "depressant",
            "deliriant"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-6"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "200-350mg",
                "Heavy": "350mg+",
                "Light": "75-200mg",
                "Threshold": "10mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "6-8"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "20-30"
        },
        "name": "doxylamine",
        "pretty_name": "Doxylamine",
        "properties": {
            "after-effects": "1-6 hours.",
            "categories": [
                "depressant",
                "deliriant"
            ],
            "dose": "Threshold: 10mg Light: 75-200mg Common: 200-350mg Heavy: 350mg+",
            "duration": "6-8 hours",
            "onset": "20-30 minutes",
            "summary": "A first generation antihistamine and anticholinergic, originally used to treat nausea and itching, and later as a sleep aid. Causes drowsiness, and delirium in overdose. Sometimes used with opioids to combat nausea and potentiate effects.",
            "warning": "As with other first generation antihistamines, if you take too much you could have a delirant like experience."
        }
    },
    "dph": {
        "aliases": [
            "diphenhydramine",
            "benadryl"
        ],
        "categories": [
            "depressant",
            "deliriant",
            "common"
        ],
        "dose_note": " NOTE: The doses provided are for recreational usage. For use as a sleep aid the dose ranges from 25-100mg, or as specified on the product packaging.",
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-12"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "200-500mg",
                "Light": "100-250mg",
                "NOTE": "The",
                "Strong": "450-700mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "6-8"
        },
        "formatted_effects": [
            "Delirium",
            "dream-like experiences",
            "paranoia",
            "visual and audio distortions",
            "dry mouth",
            "muscle cramps",
            "nausea",
            "dysphoria",
            "tremors",
            "Often described as a pretty negative experience",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "60-120"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_Diphenhydramine.shtml"
        },
        "name": "dph",
        "pretty_name": "DPH",
        "properties": {
            "after-effects": "1-12 hours.",
            "aliases": [
                "diphenhydramine",
                "benadryl"
            ],
            "avoid": "Many oral diphenhydramine preparations contain analgesics such as acetaminophen/paracetamol or aspirin, which can be toxic to the liver in high doses.",
            "categories": [
                "depressant",
                "deliriant",
                "common"
            ],
            "dose": "Oral Light: 100-250mg Common: 200-500mg Strong: 450-700mg NOTE: The doses provided are for recreational usage. For use as a sleep aid the dose ranges from 25-75mg, or as specified on the product packaging. For medical allergy use doses tend to range from 25-50mg, or as specified on the product packaging.",
            "duration": "6-8 hours",
            "effects": "Delirium, dream-like experiences, paranoia, visual and audio distortions, dry mouth, muscle cramps, nausea, dysphoria, tremors. Often described as a pretty negative experience.",
            "onset": "60-120 minutes",
            "summary": "An antihistamine which, when taken in smaller doses relieves allergies and insomnia. In larger doses works as a deliriant and can actually keep the user awake. Generally the 'high' of this drug is reported as dysphoric, potentially causing hallucinations indistinguishable from reality."
        },
        "pweffects": {
            "Abnormal heartbeat": "https://psychonautwiki.org/wiki/Abnormal_heartbeat",
            "Acuity suppression": "https://psychonautwiki.org/wiki/Acuity_suppression",
            "After images": "https://psychonautwiki.org/wiki/After_images",
            "Amnesia": "https://psychonautwiki.org/wiki/Amnesia",
            "Anxiety": "https://psychonautwiki.org/wiki/Anxiety",
            "Auditory hallucinations": "https://psychonautwiki.org/wiki/Auditory_hallucinations",
            "Auditory suppression": "https://psychonautwiki.org/wiki/Auditory_suppression",
            "Autonomous entities": "https://psychonautwiki.org/wiki/Autonomous_entities",
            "Brightness alteration": "https://psychonautwiki.org/wiki/Brightness_alteration",
            "Cognitive dysphoria": "https://psychonautwiki.org/wiki/Cognitive_dysphoria",
            "Dehydration": "https://psychonautwiki.org/wiki/Dehydration",
            "Depression": "https://psychonautwiki.org/wiki/Depression",
            "Difficulty urinating": "https://psychonautwiki.org/wiki/Difficulty_urinating",
            "Dizziness": "https://psychonautwiki.org/wiki/Dizziness",
            "Double vision": "https://psychonautwiki.org/wiki/Double_vision",
            "Dream potentiation": "https://psychonautwiki.org/wiki/Dream_potentiation",
            "Drifting": "https://psychonautwiki.org/wiki/Drifting",
            "Emotion suppression": "https://psychonautwiki.org/wiki/Emotion_suppression",
            "External hallucinations": "https://psychonautwiki.org/wiki/External_hallucinations",
            "Feelings of impending doom": "https://psychonautwiki.org/wiki/Feelings_of_impending_doom",
            "Frequent urination": "https://psychonautwiki.org/wiki/Frequent_urination",
            "Increased heart rate": "https://psychonautwiki.org/wiki/Increased_heart_rate",
            "Information processing suppression": "https://psychonautwiki.org/wiki/Information_processing_suppression",
            "Internal hallucinations": "https://psychonautwiki.org/wiki/Internal_hallucinations",
            "Language suppression": "https://psychonautwiki.org/wiki/Language_suppression",
            "Memory suppression": "https://psychonautwiki.org/wiki/Memory_suppression",
            "Motor control loss": "https://psychonautwiki.org/wiki/Motor_control_loss",
            "Muscle cramps": "https://psychonautwiki.org/wiki/Muscle_cramps",
            "Muscle spasms": "https://psychonautwiki.org/wiki/Muscle_spasms",
            "Nausea": "https://psychonautwiki.org/wiki/Nausea",
            "Paranoia": "https://psychonautwiki.org/wiki/Paranoia",
            "Pattern recognition suppression": "https://psychonautwiki.org/wiki/Pattern_recognition_suppression",
            "Peripheral information misinterpretation": "https://psychonautwiki.org/wiki/Peripheral_information_misinterpretation",
            "Perspective alterations": "https://psychonautwiki.org/wiki/Perspective_alterations",
            "Photophobia": "https://psychonautwiki.org/wiki/Photophobia",
            "Physical fatigue": "https://psychonautwiki.org/wiki/Physical_fatigue",
            "Psychosis": "https://psychonautwiki.org/wiki/Psychosis",
            "Restless leg syndrome": "https://psychonautwiki.org/wiki/Restless_leg_syndrome",
            "Scenarios and plots": "https://psychonautwiki.org/wiki/Scenarios_and_plots",
            "Sedation": "https://psychonautwiki.org/wiki/Sedation",
            "Settings, sceneries, and landscapes": "https://psychonautwiki.org/wiki/Settings,_sceneries,_and_landscapes",
            "Shadow people": "https://psychonautwiki.org/wiki/Shadow_people",
            "Tactile hallucinations": "https://psychonautwiki.org/wiki/Tactile_hallucinations",
            "Thought deceleration": "https://psychonautwiki.org/wiki/Thought_deceleration",
            "Thought disorganization": "https://psychonautwiki.org/wiki/Thought_disorganization",
            "Time distortion": "https://psychonautwiki.org/wiki/Time_distortion",
            "Unspeakable horrors": "https://psychonautwiki.org/wiki/Unspeakable_horrors",
            "Vibrating vision": "https://psychonautwiki.org/wiki/Vibrating_vision",
            "Visual haze": "https://psychonautwiki.org/wiki/Visual_haze"
        },
        "sources": {
            "_general": [
                "Dose-dependent toxicity of diphenhydramine overdose - http://www.ncbi.nlm.nih.gov/pubmed/11204550"
            ]
        }
    },
    "dpt": {
        "aliases": [
            "dipropyltryptamine"
        ],
        "categories": [
            "psychedelic",
            "research-chemical"
        ],
        "formatted_aftereffects": {
            "IM": "2-4",
            "Insufflated": "3-4",
            "Oral": "2-3",
            "Smoked": "2-4",
            "_unit": "hours"
        },
        "formatted_dose": {
            "IM": {
                "Common": "35-60mg",
                "Light": "10-35mg",
                "Strong": "60-100mg",
                "Threshold": "5-10mg"
            },
            "Insufflated": {
                "Common": "50-100mg",
                "Light": "20-50",
                "Strong": "100-150mg"
            },
            "Oral": {
                "Common": "125-200mg",
                "Light": "75-125mg",
                "Strong": "200-250mg"
            },
            "Smoked": {
                "Common": "30-50mg",
                "Light": "15-30mg",
                "Strong": "50-100mg",
                "Threshold": "5-10mg"
            }
        },
        "formatted_duration": {
            "IM": "3-4",
            "Insufflated": "3-4",
            "Oral": "2-4",
            "Smoked": "0.5-1.5",
            "_unit": "hours"
        },
        "formatted_effects": [
            "A psychedelic tryptamine with \"a wide range of effects at any particular dose depending on the individual\""
        ],
        "formatted_onset": {
            "IM": "2-10",
            "Insufflated": "5-20",
            "Oral": "20-60",
            "Smoked": "0-1",
            "_unit": "minutes"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_DPT.shtml",
            "tihkal": "https://www.erowid.org/library/books_online/tihkal/tihkal09.shtml"
        },
        "name": "dpt",
        "pretty_name": "DPT",
        "properties": {
            "after-effects": "Oral: 2-3 hours | Insufflated: 3-4 hours | IM: 2-4 hours |  Smoked: 2-4 hours",
            "aliases": [
                "dipropyltryptamine"
            ],
            "categories": [
                "psychedelic",
                "research-chemical"
            ],
            "dose": "Oral Light: 75-125mg Common: 125-200mg Strong: 200-250mg | Insufflated Light: 20-50 Common: 50-100mg  Strong: 100-150mg | IM Threshold: 5-10mg Light: 10-35mg  Common: 35-60mg  Strong: 60-100mg | Smoked Threshold: 5-10mg Light: 15-30mg Common: 30-50mg  Strong: 50-100mg",
            "duration": "Oral: 2-4 hours | Insufflated: 3-4 hours. | IM: 3-4 hours. | Smoked: 0.5-1.5 hours.",
            "effects": "A psychedelic tryptamine with \"a wide range of effects at any particular dose depending on the individual\"",
            "onset": "Oral: 20-60 minutes | Insufflated: 5-20 minutes | IM: 2-10 minutes | Smoked: 0-1 minutes",
            "summary": "N,N-Dipropyltryptamine, a psychedelic tryptamine compound and lesser-known analogue of DMT, with similar psychedelic effects. Like DMT it is a partial serotonin receptor agonist."
        },
        "pweffects": {
            "Acuity enhancement": "https://psychonautwiki.org/wiki/Acuity_enhancement",
            "After images": "https://psychonautwiki.org/wiki/After_images",
            "Autonomous entities": "https://psychonautwiki.org/wiki/Autonomous_entities",
            "Changes in gravity": "https://psychonautwiki.org/wiki/Changes_in_gravity",
            "Colour enhancement": "https://psychonautwiki.org/wiki/Colour_enhancement",
            "Colour replacement": "https://psychonautwiki.org/wiki/Colour_replacement",
            "Colour shifting": "https://psychonautwiki.org/wiki/Colour_shifting",
            "Drifting": "https://psychonautwiki.org/wiki/Drifting",
            "Emotion enhancement": "https://psychonautwiki.org/wiki/Emotion_enhancement",
            "Geometry": "https://psychonautwiki.org/wiki/Geometry",
            "Headaches": "https://psychonautwiki.org/wiki/Headaches",
            "Internal hallucinations": "https://psychonautwiki.org/wiki/Internal_hallucinations",
            "Machinescapes": "https://psychonautwiki.org/wiki/Machinescapes",
            "Memory suppression": "https://psychonautwiki.org/wiki/Memory_suppression",
            "Motor control loss": "https://psychonautwiki.org/wiki/Motor_control_loss",
            "Muscle spasms": "https://psychonautwiki.org/wiki/Muscle_spasms",
            "Nausea": "https://psychonautwiki.org/wiki/Nausea",
            "Novelty enhancement": "https://psychonautwiki.org/wiki/Novelty_enhancement",
            "Pattern recognition enhancement": "https://psychonautwiki.org/wiki/Pattern_recognition_enhancement",
            "Personal bias suppression": "https://psychonautwiki.org/wiki/Personal_bias_suppression",
            "Perspective alterations": "https://psychonautwiki.org/wiki/Perspective_alterations",
            "Physical euphoria": "https://psychonautwiki.org/wiki/Physical_euphoria",
            "Recursion": "https://psychonautwiki.org/wiki/Recursion",
            "Rejuvenation": "https://psychonautwiki.org/wiki/Rejuvenation",
            "Scenarios and plots": "https://psychonautwiki.org/wiki/Scenarios_and_plots",
            "Scenery slicing": "https://psychonautwiki.org/wiki/Scenery_slicing",
            "Settings, sceneries, and landscapes": "https://psychonautwiki.org/wiki/Settings,_sceneries,_and_landscapes",
            "Spontaneous tactile sensations": "https://psychonautwiki.org/wiki/Spontaneous_tactile_sensations",
            "Subconscious communication": "https://psychonautwiki.org/wiki/Subconscious_communication",
            "Symmetrical texture repetition": "https://psychonautwiki.org/wiki/Symmetrical_texture_repetition",
            "Tracers": "https://psychonautwiki.org/wiki/Tracers",
            "Transformations": "https://psychonautwiki.org/wiki/Transformations",
            "Unity and interconnectedness": "https://psychonautwiki.org/wiki/Unity_and_interconnectedness",
            "Wakefulness": "https://psychonautwiki.org/wiki/Wakefulness"
        }
    },
    "dramamine": {
        "aliases": [
            "dimenhydrinate",
            "gravol"
        ],
        "categories": [
            "depressant",
            "deliriant",
            "common"
        ],
        "dose_note": " NOTE: since this is a delirant, we advise against taking it, yet we can't stop you from ingesting it.",
        "formatted_dose": {
            "Oral": {
                "Common": "250mg-400mg",
                "Light": "100-250mg",
                "Strong": "400mg-600mg+"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "5-8"
        },
        "formatted_effects": [
            "Delirium",
            "Dream-Like-Experiences",
            "Paranoia",
            "Visual and audio distortions",
            "dry mouth",
            "muscle cramps",
            "Nausea",
            "Dysphoria",
            "Tremors",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "30-90"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_Dimenhydrinate.shtml"
        },
        "name": "dramamine",
        "pretty_name": "Dimenhydrinate",
        "properties": {
            "aliases": [
                "dimenhydrinate",
                "gravol"
            ],
            "avoid": "A fair amount of oral dramamine preparations contain NSAID's Which can be toxic to your liver at high doses.",
            "categories": [
                "depressant",
                "deliriant",
                "common"
            ],
            "dose": "Oral Light: 100-250mg Common: 250mg-400mg Strong: 400mg-600mg+ | NOTE: since this is a delirant, we advise against taking it, yet we can't stop you from ingesting it.",
            "duration": "5-8 hours.",
            "effects": "Delirium, Dream-Like-Experiences, Paranoia, Visual and audio distortions, dry mouth, muscle cramps, Nausea, Dysphoria, Tremors.",
            "onset": "30-90 minutes",
            "summary": "A combination of diphenhydramine and a mild stimulant to counteract the drowsiness accompanied by typical medical use of diphenhydramine. Roughly half the potency of DPH. Small doses can relieve motion sickness, reduce body load from opioids or DXM. Becomes a deliriant in high doses, keeping the user awake and often causing dysphoric, realistic hallucinations."
        }
    },
    "dxm": {
        "aliases": [
            "dextromethorphan",
            "robo",
            "syrup",
            "robotussin",
            "dex",
            "robitussin"
        ],
        "categories": [
            "dissociative",
            "habit-forming",
            "common"
        ],
        "combos": {
            "2c-t-x": {
                "status": "Unsafe"
            },
            "2c-x": {
                "status": "Low Risk & Synergy"
            },
            "5-meo-xxt": {
                "note": "Little information exists about this combination.",
                "status": "Unsafe"
            },
            "alcohol": {
                "note": "Both substances potentiate the ataxia and sedation caused by the other and can lead to unexpected loss of consciousness at high doses. Place affected patients in the recovery position to prevent vomit aspiration from excess. Additionally CNS depression can lead to difficulty breathing. Avoid on anything higher than 1st plateau.",
                "status": "Dangerous"
            },
            "amphetamines": {
                "note": "Both substances raise heart rate, in extreme cases, panic attacks caused by these drugs have led to more serious heart issues.",
                "status": "Unsafe"
            },
            "amt": {
                "status": "Dangerous"
            },
            "benzodiazepines": {
                "note": "Small doses of benzos can end a bad trip, but both substances potentiate the ataxia and sedation caused by the other and this can lead to unexpected loss of consciousness at high doses. While unconscious, vomit aspiration is a risk if not placed in the recovery position.",
                "status": "Caution"
            },
            "benzos": {
                "note": "Small doses of benzos can end a bad trip, but both substances potentiate the ataxia and sedation caused by the other and this can lead to unexpected loss of consciousness at high doses. While unconscious, vomit aspiration is a risk if not placed in the recovery position.",
                "status": "Caution"
            },
            "caffeine": {
                "note": "High doses of caffeine may cause anxiety which is less manageable when tripping, and since both are stimulating the combination may cause some physical discomfort.",
                "status": "Low Risk & No Synergy"
            },
            "cannabis": {
                "status": "Low Risk & Synergy"
            },
            "cocaine": {
                "note": "Both substances raise heart rate, in extreme cases, panic attacks caused by these drugs have led to more serious heart issues",
                "status": "Unsafe"
            },
            "dmt": {
                "status": "Low Risk & Synergy"
            },
            "dox": {
                "note": "The DOx class as psychedelic stimulants have the potential to mask the effects of DXM and could lead to redosing to an unsafe level. DXM can also potentiate DOx resulting in an unpleasantly intense experience.",
                "status": "Unsafe"
            },
            "ghb/gbl": {
                "note": "Both substances cause ataxia and bring a risk of vomiting and unconsciousness. If the patient falls unconscious while under the influence there is a severe risk of vomit aspiration if they are not placed in the recovery position. This combination is hard to predict",
                "status": "Dangerous"
            },
            "ketamine": {
                "status": "Low Risk & No Synergy"
            },
            "lsd": {
                "status": "Low Risk & Synergy"
            },
            "maois": {
                "note": "High risk of serotonin syndrome",
                "status": "Dangerous"
            },
            "mdma": {
                "status": "Dangerous"
            },
            "mescaline": {
                "status": "Low Risk & Synergy"
            },
            "mushrooms": {
                "status": "Low Risk & Synergy"
            },
            "mxe": {
                "status": "Low Risk & No Synergy"
            },
            "nbomes": {
                "status": "Unsafe"
            },
            "nitrous": {
                "status": "Low Risk & Synergy"
            },
            "opioids": {
                "note": "CNS depression, difficult breathing, heart issues, hepatoxic, just very unsafe combination all around. Additionally if one takes dxm, their tolerance of opiates goes down slightly, thus causing additional synergistic effects.",
                "status": "Dangerous"
            },
            "pcp": {
                "status": "Dangerous"
            },
            "ssris": {
                "note": "High risk of serotonin syndrome.",
                "status": "Dangerous"
            },
            "tramadol": {
                "status": "Dangerous"
            }
        },
        "dose_note": " NOTE: See http://dxm.tripsit.me for mg/lb doses, among other things. Deaths have been reported at 25mg/kg",
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-12"
        },
        "formatted_dose": {
            "Oral": {
                "First-Plateau": "1.5-2.5mg/kg",
                "Fourth": "15-20mg/kg",
                "Second-Plateau": "2.5-7.5mg/kg",
                "Third-Plateau": "7.5-15mg/kg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "6-8"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "20-60"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_DXM.shtml"
        },
        "name": "dxm",
        "pretty_name": "DXM",
        "properties": {
            "after-effects": "1-12 hours.",
            "aliases": [
                "dextromethorphan",
                "robo",
                "syrup",
                "robotussin",
                "dex",
                "robitussin"
            ],
            "calculator": "http://dxm.tripsit.me",
            "categories": [
                "dissociative",
                "habit-forming",
                "common"
            ],
            "chart": "http://taimapedia.org/images/4/46/DXMDosingChart.png",
            "dose": "Oral First-Plateau: 1.5-2.5mg/kg Second-Plateau: 2.5-7.5mg/kg Third-Plateau: 7.5-15mg/kg Fourth: 15-20mg/kg | NOTE: See http://dxm.tripsit.me for mg/lb doses, among other things. Deaths have been reported at 25mg/kg",
            "duration": "6-8 hours",
            "onset": "20-60 minutes",
            "summary": "Commonly found in certain over the counter cough medicines. Has dissociative effects similar to ketamine or MXE, though also shares properties with opioids and alcohol. Make sure DXM is the only active ingredient in the preparation."
        },
        "pweffects": {
            "Acuity suppression": "https://psychonautwiki.org/wiki/Acuity_suppression",
            "Auditory distortion": "https://psychonautwiki.org/wiki/Auditory_distortion",
            "Auditory enhancement": "https://psychonautwiki.org/wiki/Auditory_enhancement",
            "Auditory hallucinations": "https://psychonautwiki.org/wiki/Auditory_hallucinations",
            "Auditory suppression": "https://psychonautwiki.org/wiki/Auditory_suppression",
            "Autonomous entities": "https://psychonautwiki.org/wiki/Autonomous_entities",
            "Cognitive euphoria": "https://psychonautwiki.org/wiki/Cognitive_euphoria",
            "Conceptual thinking": "https://psychonautwiki.org/wiki/Conceptual_thinking",
            "Consciousness disconnection": "https://psychonautwiki.org/wiki/Consciousness_disconnection",
            "Cough suppression": "https://psychonautwiki.org/wiki/Cough_suppression",
            "Creativity enhancement": "https://psychonautwiki.org/wiki/Creativity_enhancement",
            "Depersonalization": "https://psychonautwiki.org/wiki/Depersonalization",
            "Derealization": "https://psychonautwiki.org/wiki/Derealization",
            "Dizziness": "https://psychonautwiki.org/wiki/Dizziness",
            "Double vision": "https://psychonautwiki.org/wiki/Double_vision",
            "D\u00e9j\u00e0 vu": "https://psychonautwiki.org/wiki/D%C3%A9j%C3%A0_vu",
            "Environmental cubism": "https://psychonautwiki.org/wiki/Environmental_cubism",
            "Environmental orbism": "https://psychonautwiki.org/wiki/Environmental_orbism",
            "External hallucinations": "https://psychonautwiki.org/wiki/External_hallucinations",
            "Frame rate suppression": "https://psychonautwiki.org/wiki/Frame_rate_suppression",
            "Geometry": "https://psychonautwiki.org/wiki/Geometry",
            "Immersion enhancement": "https://psychonautwiki.org/wiki/Immersion_enhancement",
            "Information processing suppression": "https://psychonautwiki.org/wiki/Information_processing_suppression",
            "Internal hallucinations": "https://psychonautwiki.org/wiki/Internal_hallucinations",
            "Memory suppression": "https://psychonautwiki.org/wiki/Memory_suppression",
            "Nausea": "https://psychonautwiki.org/wiki/Nausea",
            "Pattern recognition suppression": "https://psychonautwiki.org/wiki/Pattern_recognition_suppression",
            "Perception of decreased weight": "https://psychonautwiki.org/wiki/Perception_of_decreased_weight",
            "Personal bias suppression": "https://psychonautwiki.org/wiki/Personal_bias_suppression",
            "Perspective alterations": "https://psychonautwiki.org/wiki/Perspective_alterations",
            "Perspective distortions": "https://psychonautwiki.org/wiki/Perspective_distortions",
            "Physical autonomy": "https://psychonautwiki.org/wiki/Physical_autonomy",
            "Physical euphoria": "https://psychonautwiki.org/wiki/Physical_euphoria",
            "Scenarios and plots": "https://psychonautwiki.org/wiki/Scenarios_and_plots",
            "Scenery slicing": "https://psychonautwiki.org/wiki/Scenery_slicing",
            "Settings, sceneries, and landscapes": "https://psychonautwiki.org/wiki/Settings,_sceneries,_and_landscapes",
            "Tactile disconnection": "https://psychonautwiki.org/wiki/Tactile_disconnection",
            "Tactile suppression": "https://psychonautwiki.org/wiki/Tactile_suppression",
            "Thought deceleration": "https://psychonautwiki.org/wiki/Thought_deceleration",
            "Time distortion": "https://psychonautwiki.org/wiki/Time_distortion",
            "Unity and interconnectedness": "https://psychonautwiki.org/wiki/Unity_and_interconnectedness",
            "Visual disconnection": "https://psychonautwiki.org/wiki/Visual_disconnection",
            "Visual sliding": "https://psychonautwiki.org/wiki/Visual_sliding"
        },
        "sources": {
            "_general": [
                "Dextromethorphan and its metabolite dextrorphan block alpha3beta4 neuronal nicotinic receptors. - http://www.ncbi.nlm.nih.gov/pubmed/10869398",
                "Dextromethorphan potentiates the antinociceptive effects of morphine and the delta-opioid agonist SNC80 in squirrel monkeys. - http://www.ncbi.nlm.nih.gov/pubmed/11805202",
                "Dextromethorphan psychosis, dependence and physical withdrawal. - http://www.ncbi.nlm.nih.gov/pubmed/16318953",
                "Evaluation the effects of dextromethorphan and midazolam on morphine induced tolerance and dependence in mice. - http://www.ncbi.nlm.nih.gov/pubmed/18819620",
                "Dextromethorphan as a potential rapid-acting antidepressant. - http://www.ncbi.nlm.nih.gov/pubmed/21367535",
                "The treatment of heroin addicts with dextromethorphan: a double-blind comparison of dextromethorphan with chlorpromazine. - http://www.ncbi.nlm.nih.gov/pubmed/2187002",
                "High doses of dextromethorphan, an NMDA antagonist, produce effects similar to classic hallucinogens. - http://www.ncbi.nlm.nih.gov/pubmed/22526529",
                "Lack of efficacy of dextromethorphan in managing alcohol withdrawal: a preliminary report of a randomized, double-blind, placebo-controlled trial. - http://www.ncbi.nlm.nih.gov/pubmed/24346753"
            ]
        }
    },
    "eflea": {
        "categories": [
            "stimulant",
            "research-chemical",
            "tentative",
            "inactive"
        ],
        "name": "eflea",
        "pretty_name": "EFLEA",
        "properties": {
            "categories": [
                "stimulant",
                "research-chemical",
                "tentative",
                "inactive"
            ],
            "summary": "Prodrug for EDMA. May be inactive."
        }
    },
    "ephedrine": {
        "categories": [
            "stimulant",
            "habit-forming"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-8"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "20-30mg",
                "Heavy": "50mg+",
                "Light": "10-20mg",
                "Strong": "30-50mg",
                "Threshold": "5-10mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "3"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "5-20"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_Ephedrine.shtml"
        },
        "name": "ephedrine",
        "pretty_name": "Ephedrine",
        "properties": {
            "adverse-effects": "Tachycardia, cardiac arrhythmias, angina pectoris, vasoconstriction with hypertension, flushing, sweating, acne vulgaris, nausea, decreased urination, difficulty urinating, restlessness, confusion, insomnia, mild euphoria, mania/hallucinations, delusions, formication, dyspnea, pulmonary edema, dizziness, headache, tremor, hyperglycemic reactions, and dry mouth",
            "after-effects": "1-8 hours.",
            "categories": [
                "stimulant",
                "habit-forming"
            ],
            "category": "Stimulant",
            "contraindictions": "Closed-angle glaucoma, phaeochromocytoma, asymmetric septal hypertrophy (idiopathic hypertrophic subaortic stenosis), concomitant or recent (previous 14 days) monoamine oxidase inhibitor (MAOI) therapy, general anaesthesia with halogenated hydrocarbons (particularly halothane), tachyarrhythmias or ventricular fibrillation, and hypersensitivity to ephedrine",
            "dose": "Oral Threshold: 5-10mg Light: 10-20mg Common: 20-30mg Strong: 30-50mg Heavy: 50mg+",
            "duration": "3 - 6 hours",
            "legal": "Australia: Prescription Only (S4) | Canada: Schedule VI | United Kingdom: P | United States: List I OTC",
            "onset": "5-20 minutes.",
            "pharmacokinetics": "Bioavailability: 85% | Metabolism: minimal hepatic | Excretion: 22 - 99% renal",
            "pharmacology": "NDRA (Norepinephrine-Dopamine Releasing Agent)",
            "summary": "Ephedrine is a sympathomimetic amine commonly used as a stimulant, concentration aid, decongestant, appetite suppressant, and to treat hypotension associated with anaesthesia. A methamphetamine analogue and commonly used in the production of methamphetamine."
        }
    },
    "ephenidine": {
        "categories": [
            "dissociative",
            "research-chemical",
            "habit-forming",
            "tentative"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-6"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "75-110mg",
                "Heavy": "150mg+",
                "Light": "50-75mg",
                "Strong": "110-150mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "3-6"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "10-30"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_Ephenidine.shtml"
        },
        "name": "ephenidine",
        "pretty_name": "Ephenidine",
        "properties": {
            "after-effects": "1-6 hours.",
            "categories": [
                "dissociative",
                "research-chemical",
                "habit-forming",
                "tentative"
            ],
            "dose": "Oral Light: 50-75mg Common: 75-110mg Strong: 110-150mg Heavy: 150mg+",
            "duration": "3-6 hours",
            "onset": "10-30 minutes.",
            "summary": "A dissociative drug which is less potent and less confusing than MXE but with otherwise similar properties. Reported as causing light stimulant effects at lower doses."
        },
        "pweffects": {
            "Acuity suppression": "https://psychonautwiki.org/wiki/Acuity_suppression",
            "Amnesia": "https://psychonautwiki.org/wiki/Amnesia",
            "Analysis enhancement": "https://psychonautwiki.org/wiki/Analysis_enhancement",
            "Anxiety suppression": "https://psychonautwiki.org/wiki/Anxiety_suppression",
            "Auditory distortion": "https://psychonautwiki.org/wiki/Auditory_distortion",
            "Auditory enhancement": "https://psychonautwiki.org/wiki/Auditory_enhancement",
            "Auditory hallucinations": "https://psychonautwiki.org/wiki/Auditory_hallucinations",
            "Auditory suppression": "https://psychonautwiki.org/wiki/Auditory_suppression",
            "Autonomous entities": "https://psychonautwiki.org/wiki/Autonomous_entities",
            "Cognitive euphoria": "https://psychonautwiki.org/wiki/Cognitive_euphoria",
            "Compulsive redosing": "https://psychonautwiki.org/wiki/Compulsive_redosing",
            "Conceptual thinking": "https://psychonautwiki.org/wiki/Conceptual_thinking",
            "Consciousness disconnection": "https://psychonautwiki.org/wiki/Consciousness_disconnection",
            "Depersonalization": "https://psychonautwiki.org/wiki/Depersonalization",
            "Derealization": "https://psychonautwiki.org/wiki/Derealization",
            "Disinhibition": "https://psychonautwiki.org/wiki/Disinhibition",
            "Double vision": "https://psychonautwiki.org/wiki/Double_vision",
            "Drifting": "https://psychonautwiki.org/wiki/Drifting",
            "D\u00e9j\u00e0 vu": "https://psychonautwiki.org/wiki/D%C3%A9j%C3%A0_vu",
            "Ego inflation": "https://psychonautwiki.org/wiki/Ego_inflation",
            "Frame rate suppression": "https://psychonautwiki.org/wiki/Frame_rate_suppression",
            "Geometry": "https://psychonautwiki.org/wiki/Geometry",
            "Increased heart rate": "https://psychonautwiki.org/wiki/Increased_heart_rate",
            "Information processing suppression": "https://psychonautwiki.org/wiki/Information_processing_suppression",
            "Internal hallucinations": "https://psychonautwiki.org/wiki/Internal_hallucinations",
            "Memory suppression": "https://psychonautwiki.org/wiki/Memory_suppression",
            "Motivation enhancement": "https://psychonautwiki.org/wiki/Motivation_enhancement",
            "Motor control loss": "https://psychonautwiki.org/wiki/Motor_control_loss",
            "Pain relief": "https://psychonautwiki.org/wiki/Pain_relief",
            "Pattern recognition suppression": "https://psychonautwiki.org/wiki/Pattern_recognition_suppression",
            "Perception of decreased weight": "https://psychonautwiki.org/wiki/Perception_of_decreased_weight",
            "Perspective alterations": "https://psychonautwiki.org/wiki/Perspective_alterations",
            "Perspective distortions": "https://psychonautwiki.org/wiki/Perspective_distortions",
            "Physical autonomy": "https://psychonautwiki.org/wiki/Physical_autonomy",
            "Scenarios and plots": "https://psychonautwiki.org/wiki/Scenarios_and_plots",
            "Scenery slicing": "https://psychonautwiki.org/wiki/Scenery_slicing",
            "Settings, sceneries, and landscapes": "https://psychonautwiki.org/wiki/Settings,_sceneries,_and_landscapes",
            "Spontaneous tactile sensations": "https://psychonautwiki.org/wiki/Spontaneous_tactile_sensations",
            "Stimulation": "https://psychonautwiki.org/wiki/Stimulation",
            "Tactile disconnection": "https://psychonautwiki.org/wiki/Tactile_disconnection",
            "Tactile suppression": "https://psychonautwiki.org/wiki/Tactile_suppression",
            "Thought acceleration": "https://psychonautwiki.org/wiki/Thought_acceleration",
            "Thought deceleration": "https://psychonautwiki.org/wiki/Thought_deceleration",
            "Time distortion": "https://psychonautwiki.org/wiki/Time_distortion",
            "Unity and interconnectedness": "https://psychonautwiki.org/wiki/Unity_and_interconnectedness",
            "Visual disconnection": "https://psychonautwiki.org/wiki/Visual_disconnection"
        }
    },
    "ept": {
        "aliases": [
            "ethylpropyltryptamine",
            "n,n-ethylpropyltryptamine"
        ],
        "categories": [
            "psychedelic",
            "tentative",
            "research-chemical"
        ],
        "formatted_aftereffects": {
            "Insufflated": "1-4",
            "Oral": "1-6",
            "_unit": "hours"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "75-100mg",
                "Light": "50-75mg",
                "Strong": "100mg+"
            }
        },
        "formatted_duration": {
            "Insufflated": "1-3",
            "Oral": "2-4",
            "_unit": "hours"
        },
        "formatted_onset": {
            "Insufflated": "5-20",
            "Oral": "20-60",
            "_unit": "minutes"
        },
        "name": "ept",
        "pretty_name": "EPT",
        "properties": {
            "after-effects": "Oral: 1-6 hours. | Insufflated: 1-4 hours.",
            "aliases": [
                "ethylpropyltryptamine",
                "n,n-ethylpropyltryptamine"
            ],
            "categories": [
                "psychedelic",
                "tentative",
                "research-chemical"
            ],
            "dose": "Oral Light: 50-75mg Common: 75-100mg Strong: 100mg+",
            "duration": "Oral: 2-4 hours. | Insufflated: 1-3 hours.",
            "onset": "Oral: 20-60 minutes. | Insufflated: 5-20 minutes.",
            "summary": "Ethylpropyltryptamine a novel tryptamine, that is the structural homologue of DMT."
        }
    },
    "escaline": {
        "categories": [
            "psychedelic",
            "research-chemical"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "3-5"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "45-60mg",
                "Light": "30-45mg",
                "Strong": "60mg+",
                "Threshold": "20-30mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "8-12"
        },
        "formatted_effects": [
            "Euphoria",
            "empathy",
            "insight",
            "brightened colour",
            "Closed/Open eye visuals",
            "enhanced tactile sensation",
            "mental/physical stimulation",
            "decreased appetite",
            "pupil dilation",
            "restlessness",
            "change in perception",
            "ego softening",
            "sweating/chills",
            "muscle tension",
            "confusion",
            "insomnia",
            ""
        ],
        "formatted_onset": {
            "_unit": "hours",
            "value": "1.5-2"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_Escaline.shtml"
        },
        "name": "escaline",
        "pretty_name": "Escaline",
        "properties": {
            "after-effects": "3-5 hours",
            "categories": [
                "psychedelic",
                "research-chemical"
            ],
            "dose": "Oral Threshold: 20-30mg Light: 30-45mg Common: 45-60mg Strong: 60mg+",
            "duration": "8-12 hours",
            "effects": "Euphoria, empathy, insight, brightened colour, Closed/Open eye visuals, enhanced tactile sensation, mental/physical stimulation, decreased appetite, pupil dilation, restlessness, change in perception, ego softening, sweating/chills, muscle tension, confusion, insomnia.",
            "onset": "1.5-2 hours",
            "summary": "First synthesised in the 50s, this uncommon drug was reexamined by David Nichols in the 1990s. It is an analogue of mescaline which is roughly six times more potent, and is thus a powerful psychedelic phenethylamine. Subjective effects may include stimulation and hallucinations."
        },
        "pweffects": {
            "Acuity enhancement": "https://psychonautwiki.org/wiki/Acuity_enhancement",
            "After images": "https://psychonautwiki.org/wiki/After_images",
            "Auditory distortion": "https://psychonautwiki.org/wiki/Auditory_distortion",
            "Auditory enhancement": "https://psychonautwiki.org/wiki/Auditory_enhancement",
            "Auditory hallucinations": "https://psychonautwiki.org/wiki/Auditory_hallucinations",
            "Autonomous entities": "https://psychonautwiki.org/wiki/Autonomous_entities",
            "Bodily control enhancement": "https://psychonautwiki.org/wiki/Bodily_control_enhancement",
            "Colour enhancement": "https://psychonautwiki.org/wiki/Colour_enhancement",
            "Colour shifting": "https://psychonautwiki.org/wiki/Colour_shifting",
            "Conceptual thinking": "https://psychonautwiki.org/wiki/Conceptual_thinking",
            "Delusions": "https://psychonautwiki.org/wiki/Delusions",
            "Drifting": "https://psychonautwiki.org/wiki/Drifting",
            "D\u00e9j\u00e0 vu": "https://psychonautwiki.org/wiki/D%C3%A9j%C3%A0_vu",
            "Emotion enhancement": "https://psychonautwiki.org/wiki/Emotion_enhancement",
            "External hallucinations": "https://psychonautwiki.org/wiki/External_hallucinations",
            "Geometry": "https://psychonautwiki.org/wiki/Geometry",
            "Immersion enhancement": "https://psychonautwiki.org/wiki/Immersion_enhancement",
            "Increased heart rate": "https://psychonautwiki.org/wiki/Increased_heart_rate",
            "Internal hallucinations": "https://psychonautwiki.org/wiki/Internal_hallucinations",
            "Memory suppression": "https://psychonautwiki.org/wiki/Memory_suppression",
            "Muscle spasms": "https://psychonautwiki.org/wiki/Muscle_spasms",
            "Nausea": "https://psychonautwiki.org/wiki/Nausea",
            "Novelty enhancement": "https://psychonautwiki.org/wiki/Novelty_enhancement",
            "Pattern recognition enhancement": "https://psychonautwiki.org/wiki/Pattern_recognition_enhancement",
            "Personal bias suppression": "https://psychonautwiki.org/wiki/Personal_bias_suppression",
            "Perspective alterations": "https://psychonautwiki.org/wiki/Perspective_alterations",
            "Pupil dilation": "https://psychonautwiki.org/wiki/Pupil_dilation",
            "Scenarios and plots": "https://psychonautwiki.org/wiki/Scenarios_and_plots",
            "Scenery slicing": "https://psychonautwiki.org/wiki/Scenery_slicing",
            "Settings, sceneries, and landscapes": "https://psychonautwiki.org/wiki/Settings,_sceneries,_and_landscapes",
            "Spontaneous tactile sensations": "https://psychonautwiki.org/wiki/Spontaneous_tactile_sensations",
            "Stimulation": "https://psychonautwiki.org/wiki/Stimulation",
            "Symmetrical texture repetition": "https://psychonautwiki.org/wiki/Symmetrical_texture_repetition",
            "Tactile enhancement": "https://psychonautwiki.org/wiki/Tactile_enhancement",
            "Thought acceleration": "https://psychonautwiki.org/wiki/Thought_acceleration",
            "Thought disorganization": "https://psychonautwiki.org/wiki/Thought_disorganization",
            "Thought loops": "https://psychonautwiki.org/wiki/Thought_loops",
            "Time distortion": "https://psychonautwiki.org/wiki/Time_distortion",
            "Tracers": "https://psychonautwiki.org/wiki/Tracers",
            "Transformations": "https://psychonautwiki.org/wiki/Transformations",
            "Wakefulness": "https://psychonautwiki.org/wiki/Wakefulness"
        }
    },
    "escitalopram": {
        "aliases": [
            "lexapro",
            "cipralex"
        ],
        "categories": [
            "ssri"
        ],
        "name": "escitalopram",
        "pretty_name": "Escitalopram",
        "properties": {
            "aliases": [
                "lexapro",
                "cipralex"
            ],
            "categories": [
                "ssri"
            ]
        }
    },
    "estazolam": {
        "aliases": [
            "prosom",
            "eurodin",
            "elprazolam"
        ],
        "categories": [
            "benzodiazepine",
            "habit-forming",
            "depressant"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "2-24"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "1-2mg",
                "Light": "0.5-1mg",
                "Strong": "2-4mg+"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "7-12"
        },
        "formatted_effects": [
            "Anxiolytic",
            "Sedative",
            "Muscle Relaxant",
            "Amnesia",
            "Dystaxia",
            "Hypnotic",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "30-60"
        },
        "name": "estazolam",
        "pretty_name": "Estazolam",
        "properties": {
            "after-effects": "2-24 hours.",
            "aliases": [
                "prosom",
                "eurodin",
                "elprazolam"
            ],
            "avoid": "All other CNS depressants.",
            "bioavailability": "Oral 93%",
            "categories": [
                "benzodiazepine",
                "habit-forming",
                "depressant"
            ],
            "dose": "Light: 0.5-1mg Common: 1-2mg Strong: 2-4mg+",
            "dose_to_diazepam": "Estazolam - 1-2mg's ~=10mg Diazepam.",
            "duration": "7-12 hours.",
            "effects": "Anxiolytic, Sedative, Muscle Relaxant, Amnesia, Dystaxia, Hypnotic.",
            "onset": "30-60 minutes.",
            "summary": "A rarely prescribed medium-duration prescription benzodiazepine. Mainly used as a hypnotic, it can cause amnesia and lowered inhibitions in excess."
        }
    },
    "eszopiclone": {
        "categories": [
            "depressant",
            "habit-forming"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-12"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "1-2mg",
                "Light": "0.5-1mg",
                "Strong": "2-4mg+"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "6-10"
        },
        "formatted_effects": [
            "anxiolytic",
            "sedative",
            "muscle relaxant",
            "amnesia",
            "dystaxia",
            "hypnotic"
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "15-30"
        },
        "name": "eszopiclone",
        "pretty_name": "Eszopiclone",
        "properties": {
            "after-effects": "1-12 hours.",
            "avoid": "All other CNS depressants.",
            "categories": [
                "depressant",
                "habit-forming"
            ],
            "dose": "Light: 0.5-1mg Common: 1-2mg Strong: 2-4mg+",
            "duration": "6-10 hours.",
            "effects": "anxiolytic, sedative, muscle relaxant, amnesia, dystaxia, hypnotic",
            "onset": "15-30 minutes.",
            "summary": "The d-isomer of Zopiclone, this drug is a potent hypnotic 'Z' drug often used to treat insomnia. High doses may cause amnesia, delirium and lowered inhibitions. Should not be combined with any depressants. Limited recreational value."
        }
    },
    "eth-lad": {
        "aliases": [
            "ethlad"
        ],
        "categories": [
            "research-chemical",
            "psychedelic"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-12"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "60-100ug",
                "Light": "30-60ug",
                "Strong": "100-200ug+",
                "Threshold": "20-30ug"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "6-14"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "15-90"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_ETHLAD.shtml",
            "tihkal": "https://www.erowid.org/library/books_online/tihkal/tihkal12.shtml"
        },
        "name": "eth-lad",
        "pretty_name": "ETH-LAD",
        "properties": {
            "after-effects": "1-12 hours.",
            "aliases": [
                "ethlad"
            ],
            "categories": [
                "research-chemical",
                "psychedelic"
            ],
            "dose": "Oral Threshold: 20-30ug Light: 30-60ug Common: 60-100ug Strong: 100-200ug+",
            "duration": "6-14 hours",
            "onset": "15-90 minutes",
            "summary": "A psychedelic drug and slightly more potent analogue of LSD, first synthesised by Alexander Shulgin - sometimes described as being less 'abrasive' than LSD. Less common than the associated AL-LAD, though has seen some popularity since its release on the Internet research chemical scene in 2015."
        }
    },
    "ethaqualone": {
        "aliases": [
            "etaqualone"
        ],
        "categories": [
            "depressant",
            "research-chemical",
            "habit-forming",
            "depressant"
        ],
        "formatted_aftereffects": {
            "Oral": "2-6",
            "_unit": "hours"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "175-300mg",
                "Light": "100-175mg",
                "Strong": "300-450mg"
            }
        },
        "formatted_duration": {
            "Oral": "4-6",
            "_unit": "hours"
        },
        "formatted_effects": [
            "Anxiolytic",
            "Sedative",
            "Muscle Relaxant",
            "Amnesia",
            "Dystaxia",
            "Hypnotic",
            ""
        ],
        "formatted_onset": {
            "Oral": "30-45",
            "_unit": "minutes"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_Etaqualone.shtml"
        },
        "name": "ethaqualone",
        "pretty_name": "Ethaqualone",
        "properties": {
            "after-effects": "Oral: 2-6 hours.",
            "aliases": [
                "etaqualone"
            ],
            "avoid": "All other CNS depressants.",
            "categories": [
                "depressant",
                "research-chemical",
                "habit-forming",
                "depressant"
            ],
            "dose": "Oral Light: 100-175mg Common: 175-300mg Strong: 300-450mg",
            "duration": "Oral: 4-6 hours.",
            "effects": "Anxiolytic, Sedative, Muscle Relaxant, Amnesia, Dystaxia, Hypnotic.",
            "onset": "Oral: 30-45 minutes.",
            "summary": "Analogue of Methaqualone that was mostly marketed in France. Slightly weaker and shorter acting than the prior."
        }
    },
    "ethketamine": {
        "aliases": [
            "n-ethyl-norketamine",
            "nek",
            "n-ethylnorketamine"
        ],
        "categories": [
            "dissociative",
            "research-chemical",
            "habit-forming"
        ],
        "formatted_aftereffects": {
            "Insufflated": "1-2",
            "Oral": "1-3",
            "_unit": "hours"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "40-90mg",
                "Light": "15-40mg",
                "Strong": "90-160mg."
            }
        },
        "formatted_duration": {
            "Insufflated": "1-3",
            "Oral": "2-4",
            "_unit": "hours"
        },
        "formatted_onset": {
            "Insufflated": "5-15",
            "Oral": "15-30",
            "_unit": "minutes"
        },
        "name": "ethketamine",
        "pretty_name": "Ethketamine",
        "properties": {
            "after-effects": "Oral: 1-3 hours. | Insufflated 1-2 hours.",
            "aliases": [
                "n-ethyl-norketamine",
                "nek",
                "n-ethylnorketamine"
            ],
            "categories": [
                "dissociative",
                "research-chemical",
                "habit-forming"
            ],
            "dose": "Light: 15-40mg Common: 40-90mg Strong: 90-160mg.",
            "duration": "Oral: 2-4 hours | Insufflated: 1-3 hours.",
            "onset": "Oral: 15-30 minutes. | Insufflated: 5-15 minutes.",
            "summary": "Ethketamine is a research chemical with properties similar to ketamine. While ketamine is a dissociative anesthetic producing hallucinogenic and sedative effects, recreational users have reported euphoria and dissociation when using NENK."
        }
    },
    "ethyl-pentedrone": {
        "aliases": [
            "nep",
            "n-ethylpentedrone"
        ],
        "categories": [
            "stimulant",
            "empathogen",
            "tentative",
            "research-chemical"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-24"
        },
        "formatted_dose": {
            "Insufflated": {
                "Common": "20-40",
                "Light": "10-20mg",
                "Strong": "40-60mg."
            }
        },
        "formatted_duration": {
            "Insufflated": "2-4",
            "Oral": "3-6",
            "_unit": "hours"
        },
        "formatted_onset": {
            "Insufflated": "5-10",
            "Oral": "10-20",
            "_unit": "minutes"
        },
        "name": "ethyl-pentedrone",
        "pretty_name": "ETHYL-PENTEDRONE",
        "properties": {
            "after-effects": "1-24 hours.",
            "aliases": [
                "nep",
                "n-ethylpentedrone"
            ],
            "categories": [
                "stimulant",
                "empathogen",
                "tentative",
                "research-chemical"
            ],
            "dose": "Insufflated Light: 10-20mg Common: 20-40 Strong: 40-60mg.",
            "duration": "Oral: 3-6 hours. | Insufflated: 2-4 hours.",
            "onset": "Oral: 10-20 minutes. | Insufflated: 5-10 minutes.",
            "summary": "A stimulant that came out around the same time as Ethyl-Hexedrone, not much information on it. Is in the cathinone family of substances. Related to Pentedrone."
        }
    },
    "ethylcathinone": {
        "aliases": [
            "ethcathinone",
            "e-cat",
            "eth-cat"
        ],
        "categories": [
            "stimulant",
            "psychedelic",
            "research-chemical",
            "habit-forming"
        ],
        "formatted_aftereffects": {
            "Insufflated": "30-90",
            "Oral": "2-3",
            "_unit": "hours"
        },
        "formatted_dose": {
            "Insufflated": {
                "Common": "35-70mg",
                "Light": "15-30mg",
                "Strong": "75-100mg+",
                "Threshold": "5-20mg"
            },
            "Oral": {
                "Common": "80-150mg",
                "Light": "50-80mg",
                "Strong": "150-300mg+",
                "Threshold": "30-50mg"
            }
        },
        "formatted_duration": {
            "Insufflated": "1-2",
            "Oral": "2-5",
            "_unit": "hours"
        },
        "formatted_onset": {
            "Insufflated": "5-15",
            "Oral": "15-60",
            "_unit": "minutes"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_Ethylcathinone.shtml"
        },
        "name": "ethylcathinone",
        "pretty_name": "Ethylcathinone",
        "properties": {
            "after-effects": "Oral: 2-3 hours. | Insufflated: 30-90 minutes.",
            "aliases": [
                "ethcathinone",
                "e-cat",
                "eth-cat"
            ],
            "categories": [
                "stimulant",
                "psychedelic",
                "research-chemical",
                "habit-forming"
            ],
            "dose": "Oral Threshold: 30-50mg Light: 50-80mg Common: 80-150mg Strong: 150-300mg+ | Insufflated Threshold: 5-20mg Light: 15-30mg Common: 35-70mg Strong: 75-100mg+",
            "duration": "Oral: 2-5 hours | Insufflated: 1-2 hours.",
            "onset": "Oral: 15-60 minutes. | Insufflated: 5-15 minutes.",
            "summary": "Ethylcathinone is a synthetic stimulant. It is similar to ecstasy in the sense that it provides euphoria, feelings of empathy and openness, and a desire to talk with others. It also carries over to some of the negative effects of ecstasy, such as insomnia, tightened jaw muscles, and grinding of the teeth."
        }
    },
    "ethylmorphine": {
        "categories": [
            "opioid",
            "habit-forming",
            "depressant"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-6"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "50-100mg",
                "Light": "40-50mg",
                "Strong": "100-200mg+"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "4-5"
        },
        "formatted_effects": [
            "Euphoria",
            "Dry Mouth",
            "Mood lift",
            "Itchiness",
            "Relaxant",
            "Constipation",
            "Pupil constriction",
            "Analgesia",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "15-30"
        },
        "name": "ethylmorphine",
        "pretty_name": "Ethylmorphine",
        "properties": {
            "Avoid": "All CNS depressants.",
            "after-effects": "1-6 hours.",
            "categories": [
                "opioid",
                "habit-forming",
                "depressant"
            ],
            "dose": "Light: 40-50mg Common: 50-100mg Strong: 100-200mg+",
            "duration": "4-5 hours.",
            "effects": "Euphoria, Dry Mouth, Mood lift, Itchiness, Relaxant, Constipation, Pupil constriction, Analgesia.",
            "onset": "15-30 minutes.",
            "summary": "A medium-strength opioid analgesic and analogue of morphine. Considered less potent than morphine but more potent than codeine, and has been used in Germany for this reason. Said to have a 'ceiling' effect where no more euphoria occurs with increased dosage. Under investigation as a maintainance drug in opioid dependence therapy."
        },
        "pweffects": {
            "Anxiety suppression": "https://psychonautwiki.org/wiki/Anxiety_suppression",
            "Cognitive euphoria": "https://psychonautwiki.org/wiki/Cognitive_euphoria",
            "Compulsive redosing": "https://psychonautwiki.org/wiki/Compulsive_redosing",
            "Constipation": "https://psychonautwiki.org/wiki/Constipation",
            "Cough suppression": "https://psychonautwiki.org/wiki/Cough_suppression",
            "Difficulty urinating": "https://psychonautwiki.org/wiki/Difficulty_urinating",
            "Itchiness": "https://psychonautwiki.org/wiki/Itchiness",
            "Nausea": "https://psychonautwiki.org/wiki/Nausea",
            "Pain relief": "https://psychonautwiki.org/wiki/Pain_relief",
            "Physical euphoria": "https://psychonautwiki.org/wiki/Physical_euphoria",
            "Pupil constriction": "https://psychonautwiki.org/wiki/Pupil_constriction",
            "Respiratory depression": "https://psychonautwiki.org/wiki/Respiratory_depression",
            "Sedation": "https://psychonautwiki.org/wiki/Sedation",
            "Stomach cramps": "https://psychonautwiki.org/wiki/Stomach_cramps"
        }
    },
    "ethylone": {
        "aliases": [
            "bk-mdea"
        ],
        "categories": [
            "stimulant",
            "psychedelic",
            "research-chemical",
            "habit-forming",
            "empathogen"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "6-24"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "200-250mg",
                "Light": "125-175mg",
                "Strong": "250-400mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "2-4"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "30-45"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_bkMDEA.shtml"
        },
        "name": "ethylone",
        "pretty_name": "Ethylone",
        "properties": {
            "after-effects": "6-24 hours.",
            "aliases": [
                "bk-mdea"
            ],
            "categories": [
                "stimulant",
                "psychedelic",
                "research-chemical",
                "habit-forming",
                "empathogen"
            ],
            "dose": "Oral Light: 125-175mg Common: 200-250mg Strong: 250-400mg",
            "duration": "2-4 hours.",
            "onset": "30-45 minutes.",
            "summary": "A euphoric stimulant often sold in place of MDMA since methylone was banned. Slightly less potent and empathogenic than methylone, it is often described as more of a 'straight stimulant.'"
        }
    },
    "ethylphenidate": {
        "aliases": [
            "eph"
        ],
        "categories": [
            "stimulant",
            "research-chemical",
            "habit-forming",
            "common"
        ],
        "dose_note": " NOTE: Ethylphenidate should NOT be insufflated (see summary for more details). This drug reacts with users in varying ways, so start low and work your way up.",
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-12"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "40-100mg",
                "Heavy": "150-200mg",
                "Light": "20-40mg",
                "Strong": "100-150mg"
            },
            "Plugged/Rectal": {
                "Common": "15-30mg",
                "Heavy": "50-75mg",
                "Light": "5-15mg",
                "Strong": "30-50mg"
            }
        },
        "formatted_duration": {
            "Insufflated": "2-6",
            "Oral": "4-10",
            "Plugged": "2-6",
            "_unit": "hours"
        },
        "formatted_effects": [
            "Focus/mental clarity",
            "Abstract thinking",
            "Euphoria",
            "Stimulation",
            "Increased music appreciation",
            "Warm fuzzy body high",
            "Increased desire to talk",
            "Wakefulness",
            "increased sex drive",
            "Chest pain",
            "Vasoconstriction",
            "Jaw Tension",
            "Restlessness",
            "high blood pressure",
            "compulsion to redose",
            "paranoia"
        ],
        "formatted_onset": {
            "Insufflated": "1-10",
            "Oral": "45-120",
            "Plugged": "5-20",
            "_unit": "minutes"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_Ethylphenidate.shtml"
        },
        "name": "ethylphenidate",
        "pretty_name": "Ethylphenidate",
        "properties": {
            "after-effects": "1-12 hours.",
            "aliases": [
                "eph"
            ],
            "categories": [
                "stimulant",
                "research-chemical",
                "habit-forming",
                "common"
            ],
            "dose": "Oral Light: 20-40mg Common: 40-100mg Strong: 100-150mg Heavy: 150-200mg | Plugged/Rectal Light: 5-15mg Common: 15-30mg Strong: 30-50mg Heavy: 50-75mg | NOTE: Ethylphenidate should NOT be insufflated (see summary for more details). This drug reacts with users in varying ways, so start low and work your way up.",
            "duration": "Oral: 4-10 hours. | Insufflated: 2-6 hours. | Plugged: 2-6 hours.",
            "effects": "Focus/mental clarity, Abstract thinking, Euphoria, Stimulation, Increased music appreciation, Warm fuzzy body high, Increased desire to talk, Wakefulness, increased sex drive, Chest pain, Vasoconstriction, Jaw Tension, Restlessness, high blood pressure, compulsion to redose, paranoia",
            "onset": "Insufflated: 1-10 minutes | Plugged: 5-20 minutes | Oral: 45-120 minutes",
            "summary": "Potent psychostimulant, similar to Methylphenidate. \u0002Note: Ethylphenidate should \u0016NOT\u0016 be insufflated as it is known to be highly caustic and will cause serious harm to your nasal septum, even with light usage."
        },
        "pweffects": {
            "Analysis enhancement": "https://psychonautwiki.org/wiki/Analysis_enhancement",
            "Anxiety": "https://psychonautwiki.org/wiki/Anxiety",
            "Appetite suppression": "https://psychonautwiki.org/wiki/Appetite_suppression",
            "Cognitive euphoria": "https://psychonautwiki.org/wiki/Cognitive_euphoria",
            "Cognitive fatigue": "https://psychonautwiki.org/wiki/Cognitive_fatigue",
            "Dehydration": "https://psychonautwiki.org/wiki/Dehydration",
            "Depression": "https://psychonautwiki.org/wiki/Depression",
            "Empathy, love, and sociability enhancement": "https://psychonautwiki.org/wiki/Empathy,_love,_and_sociability_enhancement",
            "Focus enhancement": "https://psychonautwiki.org/wiki/Focus_enhancement",
            "Increased heart rate": "https://psychonautwiki.org/wiki/Increased_heart_rate",
            "Irritability": "https://psychonautwiki.org/wiki/Irritability",
            "Motivation enhancement": "https://psychonautwiki.org/wiki/Motivation_enhancement",
            "Stimulation": "https://psychonautwiki.org/wiki/Stimulation",
            "Teeth grinding": "https://psychonautwiki.org/wiki/Teeth_grinding",
            "Thought acceleration": "https://psychonautwiki.org/wiki/Thought_acceleration",
            "Thought deceleration": "https://psychonautwiki.org/wiki/Thought_deceleration",
            "Vasoconstriction": "https://psychonautwiki.org/wiki/Vasoconstriction",
            "Wakefulness": "https://psychonautwiki.org/wiki/Wakefulness"
        },
        "sources": {
            "_general": [
                "https://www.ncbi.nlm.nih.gov/pubmed/10820132",
                "Ethylphenidate formation in human subjects after the administration of a single dose of methylphenidate and ethanol - https://www.ncbi.nlm.nih.gov/pubmed/10820132",
                "Methylphenidate and its ethanol transesterification metabolite ethylphenidate: brain disposition, monoamine transporters and motor activity - http://www.ncbi.nlm.nih.gov/pubmed/17218796"
            ]
        }
    },
    "etizolam": {
        "aliases": [
            "etiz",
            "etizest",
            "etilaam",
            "sedekopan",
            "depas",
            "etizola",
            "inxity",
            "zoly",
            "lamet",
            "towa"
        ],
        "categories": [
            "benzodiazepine",
            "research-chemical",
            "habit-forming",
            "depressant"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "6-24"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "1-2mg",
                "Light": "0.5-1mg",
                "Strong": "2-4mg+"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "5-8"
        },
        "formatted_effects": [
            "anxiolytic",
            "hypnotic",
            "sedative",
            "muscle relaxant",
            "amnesia",
            "dystaxia"
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "10-40"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_Etizolam.shtml"
        },
        "name": "etizolam",
        "pretty_name": "Etizolam",
        "properties": {
            "after-effects": "6-24 hours",
            "aliases": [
                "etiz",
                "etizest",
                "etilaam",
                "sedekopan",
                "depas",
                "etizola",
                "inxity",
                "zoly",
                "lamet",
                "towa"
            ],
            "avoid": "Other depressants such as Alcohol and Opioids.",
            "categories": [
                "benzodiazepine",
                "research-chemical",
                "habit-forming",
                "depressant"
            ],
            "dose": "Oral Light: 0.5-1mg Common: 1-2mg Strong: 2-4mg+",
            "dose_to_diazepam": "Etizolam - 1mg ~=10mg Diazepam.",
            "duration": "5-8 hours.",
            "effects": "anxiolytic, hypnotic, sedative, muscle relaxant, amnesia, dystaxia",
            "onset": "10-40 minutes",
            "summary": "A thienodiazepine anxiolytic. Similar in action to benzodiazepine drugs. Relieves anxiety, causes sedation and mild euphoria. High doses can lead to losing memory of what happened while on the drug. Users often compulsively re-dose frequently leading to accidental blackouts. Can be found in pressed pharmaceutical pills from various countries, clandestine pill presses, or as a powder",
            "tolerance": "Slower than other benzos, also observed to have reverse-tolerance effect."
        },
        "pweffects": {
            "Amnesia": "https://psychonautwiki.org/wiki/Amnesia",
            "Analysis suppression": "https://psychonautwiki.org/wiki/Analysis_suppression",
            "Anxiety suppression": "https://psychonautwiki.org/wiki/Anxiety_suppression",
            "Cognitive euphoria": "https://psychonautwiki.org/wiki/Cognitive_euphoria",
            "Compulsive redosing": "https://psychonautwiki.org/wiki/Compulsive_redosing",
            "Delusions": "https://psychonautwiki.org/wiki/Delusions",
            "Disinhibition": "https://psychonautwiki.org/wiki/Disinhibition",
            "Dizziness": "https://psychonautwiki.org/wiki/Dizziness",
            "Emotion suppression": "https://psychonautwiki.org/wiki/Emotion_suppression",
            "Information processing suppression": "https://psychonautwiki.org/wiki/Information_processing_suppression",
            "Motor control loss": "https://psychonautwiki.org/wiki/Motor_control_loss",
            "Muscle relaxation": "https://psychonautwiki.org/wiki/Muscle_relaxation",
            "Physical euphoria": "https://psychonautwiki.org/wiki/Physical_euphoria",
            "Respiratory depression": "https://psychonautwiki.org/wiki/Respiratory_depression",
            "Sedation": "https://psychonautwiki.org/wiki/Sedation",
            "Temporary erectile dysfunction": "https://psychonautwiki.org/wiki/Temporary_erectile_dysfunction",
            "Thought deceleration": "https://psychonautwiki.org/wiki/Thought_deceleration"
        },
        "sources": {
            "_general": [
                "Etizolam in the treatment of generalized anxiety disorder: a controlled clinical trial. - https://www.ncbi.nlm.nih.gov/pubmed/2572494",
                "Molecular and neurochemical evaluation of the effects of etizolam on GABAA receptors under normal and stress conditions. - http://www.ncbi.nlm.nih.gov/pubmed/10083975",
                "[A patient with Parkinson's disease complicated by hypothyroidism who developed malignant syndrome after discontinuation of etizolam]. - http://www.ncbi.nlm.nih.gov/pubmed/12424963",
                "Low tolerance and dependence liabilities of etizolam: molecular, functional, and pharmacological correlates. - http://www.ncbi.nlm.nih.gov/pubmed/16107249",
                "Effects of treatment with etizolam 0.5 mg BID on cognitive performance: a 3-week, multicenter, randomized, double-blind, placebo-controlled, two-tr... - http://www.ncbi.nlm.nih.gov/pubmed/20110024",
                "[Comparison of four immunoassay screening devices for detection of benzodiazepine and its metabolites in urine: mainly detection of etizolam, thien... - http://www.ncbi.nlm.nih.gov/pubmed/21485120",
                "Etizolam in the treatment of generalized anxiety disorder: a controlled clinical trial. - http://www.ncbi.nlm.nih.gov/pubmed/2572494"
            ]
        }
    },
    "etodesnitazene": {
        "aliases": [
            "etazene"
        ],
        "name": "etodesnitazene",
        "pretty_name": "Etodesnitazene",
        "properties": {
            "aliases": [
                "etazene"
            ],
            "draft": "draft"
        }
    },
    "fasoracetam": {
        "categories": [
            "research-chemical",
            "nootropic",
            "tentative"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-6"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "5-10mg",
                "Low": "2.5-5mg",
                "Strong": "10-25mg."
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "4-8"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "10-45"
        },
        "name": "fasoracetam",
        "pretty_name": "Fasoracetam",
        "properties": {
            "after-effects": "1-6 hours.",
            "categories": [
                "research-chemical",
                "nootropic",
                "tentative"
            ],
            "dose": "Low: 2.5-5mg Common: 5-10mg Strong: 10-25mg.",
            "duration": "4-8 hours.",
            "onset": "10-45 minutes.",
            "summary": "A substance in the racetam family. Appears to be a GABA(B) agonist, and has shown to block memory disruptions caused by Baclofen, another GABA(B) Agonist. Similar to another compound in the racetam family Coluracetam, it enhances High affinity choline reuptake (HACU). Also research is conducted if it helps with ADHD and Congitive impairment."
        }
    },
    "fentanyl": {
        "aliases": [
            "fent"
        ],
        "categories": [
            "opioid",
            "habit-forming",
            "depressant"
        ],
        "dose_note": " NOTE: Due to Fentanyl's high potency, it is incredibly difficult to measure safely, and so can easily lead to overdose.",
        "formatted_aftereffects": {
            "value": "Risk"
        },
        "formatted_dose": {
            "Intranasal": {
                "Common": "25-50ug",
                "Light": "10-25ug",
                "Strong": "50-75ug+"
            },
            "Transdermal": {
                "Common": "25-50ug/hr",
                "Light": "12.5ug/hr",
                "Strong": "50-100ug/hr"
            }
        },
        "formatted_duration": {
            "Buccal": "1-4",
            "Insufflated": "1-4",
            "Transdermal": "48-72",
            "_unit": "hours"
        },
        "formatted_effects": [
            "Analgesia",
            "euphoria",
            "feelings of relaxation",
            "sedative effects",
            "changes in focus",
            "attention",
            "respiratory depression",
            "nausea",
            "constipation",
            "dry mouth",
            "somnolence",
            "confusion",
            "weakness",
            "sweating",
            "fatigue",
            "dizziness",
            "anxiety"
        ],
        "formatted_onset": {
            "Buccal": "15-30",
            "Insufflated": "5-15",
            "Transdermal": "90-180",
            "_unit": "minutes"
        },
        "name": "fentanyl",
        "pretty_name": "Fentanyl",
        "properties": {
            "aliases": [
                "fent"
            ],
            "bioavailability": "Sublingual/Buccal 50% | Insufflated 70% | Transdermal 92%",
            "categories": [
                "opioid",
                "habit-forming",
                "depressant"
            ],
            "dose": "Intranasal Light: 10-25ug Common: 25-50ug Strong: 50-75ug+ | Transdermal Light: 12.5ug/hr Common: 25-50ug/hr Strong: 50-100ug/hr | NOTE: Due to Fentanyl's high potency, it is incredibly difficult to measure safely, and so can easily lead to overdose.",
            "duration": "Transdermal: 48-72 hours. | Buccal: 1-4 hours. | Insufflated: 1-4 hours.",
            "effects": "Analgesia, euphoria, feelings of relaxation, sedative effects, changes in focus, attention, respiratory depression, nausea, constipation, dry mouth, somnolence, confusion, weakness, sweating, fatigue, dizziness, anxiety",
            "onset": "Transdermal: 90-180 minutes. | Buccal: 15-30 ninutes | Insufflated: 5-15 minutes.",
            "summary": "Fentanyl is a synthetic opiate analgesic with a rapid onset and short duration of action. It is a strong agonist at the \u03bc-opioid receptors and is historically used to treat breakthrough pain. Fentanyl is approximately 100 times more potent than Morphine, and is commonly used as a patch. Sometimes used as an adulterant for heroin, which has led to many overdose deaths.",
            "warning": "Risk of post-acute withdrawal effects, including depression, anxiety disorder, psychosis, suicidal ideation in extreme cases."
        },
        "pweffects": {
            "Anxiety suppression": "https://psychonautwiki.org/wiki/Anxiety_suppression",
            "Cognitive euphoria": "https://psychonautwiki.org/wiki/Cognitive_euphoria",
            "Compulsive redosing": "https://psychonautwiki.org/wiki/Compulsive_redosing",
            "Constipation": "https://psychonautwiki.org/wiki/Constipation",
            "Cough suppression": "https://psychonautwiki.org/wiki/Cough_suppression",
            "Difficulty urinating": "https://psychonautwiki.org/wiki/Difficulty_urinating",
            "Itchiness": "https://psychonautwiki.org/wiki/Itchiness",
            "Pain relief": "https://psychonautwiki.org/wiki/Pain_relief",
            "Physical euphoria": "https://psychonautwiki.org/wiki/Physical_euphoria",
            "Pupil constriction": "https://psychonautwiki.org/wiki/Pupil_constriction",
            "Respiratory depression": "https://psychonautwiki.org/wiki/Respiratory_depression",
            "Sedation": "https://psychonautwiki.org/wiki/Sedation"
        }
    },
    "flualprazolam": {
        "categories": [
            "benzodiazepine",
            "habit-forming",
            "tentative",
            "research-chemical"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-36"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "0.25-0.5mg",
                "Heavy": "1-2mg",
                "Light": "0.125-0.25mg",
                "Strong": "0.5-1mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "6-14"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "10-30"
        },
        "name": "flualprazolam",
        "pretty_name": "Flualprazolam",
        "properties": {
            "after-effects": "1-36 hours.",
            "avoid": "All other CNS depressants.",
            "categories": [
                "benzodiazepine",
                "habit-forming",
                "tentative",
                "research-chemical"
            ],
            "dose": "Oral Light: 0.125-0.25mg Common: 0.25-0.5mg Strong: 0.5-1mg Heavy: 1-2mg",
            "duration": "6-14 hours.",
            "onset": "10-30 minutes.",
            "summary": "Fluorinated alprazolam, that likely has a longer half-life and higher potency than its parent compound."
        }
    },
    "flubromazepam": {
        "categories": [
            "benzodiazepine",
            "research-chemical",
            "habit-forming",
            "depressant"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "36+"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "4-8mg",
                "Light": "2-4mg",
                "Strong": "8-12mg+"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "12-18"
        },
        "formatted_effects": [
            "Anxiolytic",
            "Sedative",
            "Muscle Relaxant",
            "Amnesia",
            "Dystaxia",
            "Hypnotic",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "15-90"
        },
        "name": "flubromazepam",
        "pretty_name": "Flubromazepam",
        "properties": {
            "after-effects": "36+ hours",
            "categories": [
                "benzodiazepine",
                "research-chemical",
                "habit-forming",
                "depressant"
            ],
            "dose": "Light: 2-4mg Common: 4-8mg Strong: 8-12mg+",
            "dose_to_diazepam": "Flubromazepam - 6-8mg ~=10mg Diazepam.",
            "duration": "12-18 hours",
            "effects": "Anxiolytic, Sedative, Muscle Relaxant, Amnesia, Dystaxia, Hypnotic.",
            "onset": "15-90 minutes",
            "summary": "A somewhat common benzodiazepine drug known for its extreme duration, with effects for larger doses reaching up to three days. Sedative, hypnotic and anxiolytic, this compound is an analogue of Phenazepam. First discovered in the 1960s, it was never marketed as a licit drug, but has recently become available as an RC. Not to be confused with Flubromazolam."
        },
        "pweffects": {
            "Amnesia": "https://psychonautwiki.org/wiki/Amnesia",
            "Analysis suppression": "https://psychonautwiki.org/wiki/Analysis_suppression",
            "Anxiety suppression": "https://psychonautwiki.org/wiki/Anxiety_suppression",
            "Compulsive redosing": "https://psychonautwiki.org/wiki/Compulsive_redosing",
            "Delusions": "https://psychonautwiki.org/wiki/Delusions",
            "Disinhibition": "https://psychonautwiki.org/wiki/Disinhibition",
            "Dizziness": "https://psychonautwiki.org/wiki/Dizziness",
            "Emotion suppression": "https://psychonautwiki.org/wiki/Emotion_suppression",
            "Information processing suppression": "https://psychonautwiki.org/wiki/Information_processing_suppression",
            "Motor control loss": "https://psychonautwiki.org/wiki/Motor_control_loss",
            "Muscle relaxation": "https://psychonautwiki.org/wiki/Muscle_relaxation",
            "Respiratory depression": "https://psychonautwiki.org/wiki/Respiratory_depression",
            "Sedation": "https://psychonautwiki.org/wiki/Sedation",
            "Thought deceleration": "https://psychonautwiki.org/wiki/Thought_deceleration"
        }
    },
    "flubromazolam": {
        "aliases": [
            "f-lam",
            "flam"
        ],
        "categories": [
            "benzodiazepine",
            "research-chemical",
            "habit-forming",
            "depressant"
        ],
        "dose_note": " NOTE: These doses are tentative and may need further research.",
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "6-24"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "200-400ug",
                "Light": "100-200ug",
                "Strong": "400-600ug+",
                "Threshold": "80ug"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "6-12"
        },
        "formatted_effects": [
            "Anxiolytic",
            "Sedative",
            "Muscle Relaxant",
            "Amnesia",
            "Dystaxia",
            "Hypnotic",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "20-45"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_Flubromazolam.shtml"
        },
        "name": "flubromazolam",
        "pretty_name": "Flubromazolam",
        "properties": {
            "after-effects": "6-24 hours",
            "aliases": [
                "f-lam",
                "flam"
            ],
            "avoid": "All other CNS depressants.",
            "categories": [
                "benzodiazepine",
                "research-chemical",
                "habit-forming",
                "depressant"
            ],
            "dose": "Oral Threshold: 80ug Light: 100-200ug Common: 200-400ug Strong: 400-600ug+ | NOTE: These doses are tentative and may need further research.",
            "dose_to_diazepam": "Flubromazolam - 0.25mg ~=10mg Diazepam.",
            "duration": "6-12 hours",
            "effects": "Anxiolytic, Sedative, Muscle Relaxant, Amnesia, Dystaxia, Hypnotic.",
            "onset": "20-45 minutes.",
            "summary": "A very potent benzodiazepine derivative that is related to Triazolam and Pyrazolam. Popular in the research chemical scene, it is a potent sedative, hypnotic and anxiolytic. Potential for amnesia and reduced inhibitions in higher dose. Not to be confused with Flubromazepam, which is much less potent and has a much longer half-life."
        },
        "pweffects": {
            "Amnesia": "https://psychonautwiki.org/wiki/Amnesia",
            "Analysis suppression": "https://psychonautwiki.org/wiki/Analysis_suppression",
            "Anxiety suppression": "https://psychonautwiki.org/wiki/Anxiety_suppression",
            "Compulsive redosing": "https://psychonautwiki.org/wiki/Compulsive_redosing",
            "Delusions": "https://psychonautwiki.org/wiki/Delusions",
            "Disinhibition": "https://psychonautwiki.org/wiki/Disinhibition",
            "Dizziness": "https://psychonautwiki.org/wiki/Dizziness",
            "Emotion suppression": "https://psychonautwiki.org/wiki/Emotion_suppression",
            "Information processing suppression": "https://psychonautwiki.org/wiki/Information_processing_suppression",
            "Motor control loss": "https://psychonautwiki.org/wiki/Motor_control_loss",
            "Muscle relaxation": "https://psychonautwiki.org/wiki/Muscle_relaxation",
            "Respiratory depression": "https://psychonautwiki.org/wiki/Respiratory_depression",
            "Sedation": "https://psychonautwiki.org/wiki/Sedation",
            "Thought deceleration": "https://psychonautwiki.org/wiki/Thought_deceleration"
        }
    },
    "fluclotizolam": {
        "categories": [
            "benzodiazepine",
            "tentative",
            "research-chemical",
            "habit-forming"
        ],
        "dose_note": " Note: These doses are extremely tentative and will vary from user to user depending on many factors including but not limited to tolerance.",
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-14"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "250-500ug",
                "Heavy": "750ug+",
                "Light": "250ug",
                "Strong": "500-750ug"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "3-6"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "10-30"
        },
        "name": "fluclotizolam",
        "pretty_name": "Fluclotizolam",
        "properties": {
            "after-effects": "1-14 hours.",
            "categories": [
                "benzodiazepine",
                "tentative",
                "research-chemical",
                "habit-forming"
            ],
            "dose": "Oral Light: 250ug Common: 250-500ug Strong: 500-750ug Heavy: 750ug+ | Note: These doses are extremely tentative and will vary from user to user depending on many factors including but not limited to tolerance.",
            "duration": "3-6 hours.",
            "onset": "10-30 minutes.",
            "summary": "A derivative of Etizolam. There are conflicting reports on its dosage, though claims have been made that it is approximately 3x the potency of Etizolam, with a shorter half-life."
        }
    },
    "flunitrazepam": {
        "aliases": [
            "roofies",
            "rohypnol"
        ],
        "categories": [
            "benzodiazepine",
            "habit-forming",
            "depressant"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "2-24"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "1-2mg",
                "Heavy": "2-4mg+",
                "Light": "0.5-1mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "4-8"
        },
        "formatted_effects": [
            "Anxiolytic",
            "Sedative",
            "Muscle Relaxant",
            "Amnesia",
            "Dystaxia",
            "Hypnotic",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "15-30"
        },
        "name": "flunitrazepam",
        "pretty_name": "Flunitrazepam",
        "properties": {
            "after-effects": "2-24 hours.",
            "aliases": [
                "roofies",
                "rohypnol"
            ],
            "categories": [
                "benzodiazepine",
                "habit-forming",
                "depressant"
            ],
            "dose": "Oral Light: 0.5-1mg Common: 1-2mg Heavy: 2-4mg+",
            "dose_to_diazepam": "Flunitrazepam - 1mg ~=10mg Diazepam.",
            "duration": "4-8 hours.",
            "effects": "Anxiolytic, Sedative, Muscle Relaxant, Amnesia, Dystaxia, Hypnotic.",
            "onset": "15-30 minutes.",
            "summary": "Known as Rohypnol or 'roofies,' this infamous drug has similar qualities to most other benzodiazepines; sedating with strong hypnotic effects. Despite being known as a 'date rape drug' has only been implicated in a small number of such crimes. Danger of respiratory depression in combination with other depressants. May cause amnesia and lowered inhibitions in overdose."
        }
    },
    "flunitrazolam": {
        "aliases": [
            "fln"
        ],
        "categories": [
            "benzodiazepine",
            "depressant",
            "habit-forming",
            "tentative"
        ],
        "formatted_aftereffects": {
            "Oral": "1-16",
            "Sublingual": "1-12",
            "_unit": "hours"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "80-150ug",
                "Light": "40-80ug",
                "Strong": "150-300ug.",
                "Threshold": "30-40ug"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "4-5"
        },
        "formatted_effects": [
            "Anxiolytic",
            "Sedative",
            "Muscle Relaxant",
            "Amnesia",
            "Dystaxia",
            "Blackouts",
            ""
        ],
        "formatted_onset": {
            "Oral": "10-30",
            "Sublingual": "5-15",
            "_unit": "minutes"
        },
        "name": "flunitrazolam",
        "pretty_name": "Flunitrazolam",
        "properties": {
            "after-effects": "Oral: 1-16 hours. | Sublingual: 1-12 hours. | Note: This can be much longer on higher doses (Between 0.5-1mg after-effects can last up to around 36 hours)",
            "aliases": [
                "fln"
            ],
            "avoid": "All other CNS depressants.",
            "categories": [
                "benzodiazepine",
                "depressant",
                "habit-forming",
                "tentative"
            ],
            "dose": "Threshold: 30-40ug Light: 40-80ug Common: 80-150ug Strong: 150-300ug.",
            "duration": "4-5 hours",
            "effects": "Anxiolytic, Sedative, Muscle Relaxant, Amnesia, Dystaxia, Blackouts.",
            "onset": "Oral: 10-30 minutes. | Sublingual: 5-15 minutes.",
            "summary": "A very potent hypnotic Benzodiazepine. Triazolo version of Flunitrazepam."
        }
    },
    "fluorolintane": {
        "categories": [
            "research-chemical",
            "habit-forming",
            "tentative",
            "dissociative"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "2-6"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "100-150mg",
                "Heavy": "250mg+.",
                "Light": "75-100mg",
                "Strong": "150-250mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "3-6"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "15-45"
        },
        "name": "fluorolintane",
        "pretty_name": "Fluorolintane",
        "properties": {
            "after-effects": "2-6 hours.",
            "categories": [
                "research-chemical",
                "habit-forming",
                "tentative",
                "dissociative"
            ],
            "dose": "Oral Light: 75-100mg Common: 100-150mg Strong: 150-250mg Heavy: 250mg+.",
            "duration": "3-6 hours",
            "onset": "15-45 minutes.",
            "summary": "A dissociative anaesthetic also known as 2-FPPP, very little is known about this obscure and rare drug. Reported by some to be stimulating, having effects similar to other dissociative drugs such as PCP and ketamine."
        }
    },
    "fluorophenibut": {
        "categories": [
            "tentative",
            "depressant",
            "habit-forming"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-8"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "100-150mg",
                "Light": "50-100mg",
                "Strong": "200-250mg+"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "8-12"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "60-120"
        },
        "name": "fluorophenibut",
        "pretty_name": "Fluorophenibut",
        "properties": {
            "after-effects": "1-8 hours.",
            "categories": [
                "tentative",
                "depressant",
                "habit-forming"
            ],
            "dose": "Light: 50-100mg Common: 100-150mg Strong: 200-250mg+",
            "duration": "8-12 hours.",
            "onset": "60-120 minutes.",
            "summary": "An anxiolytic analogue of GABA and Phenibut, with similar activity to the latter. Expected to be 5-10 times as potent as phenibut, some preliminary reports suggest tolerance builds more slowly."
        }
    },
    "fluoxetine": {
        "aliases": [
            "prozac",
            "sarafem"
        ],
        "categories": [
            "ssri"
        ],
        "name": "fluoxetine",
        "pretty_name": "Fluoxetine",
        "properties": {
            "aliases": [
                "prozac",
                "sarafem"
            ],
            "categories": [
                "ssri"
            ]
        }
    },
    "flurazepam": {
        "aliases": [
            "dalmane"
        ],
        "categories": [
            "benzodiazepine",
            "habit-forming",
            "depressant"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "2-48"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "15-30mg",
                "Light": "5-10mg",
                "Strong": "30-60mg."
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "12-16"
        },
        "formatted_effects": [
            "Anxiolytic",
            "Sedative",
            "Muscle Relaxant",
            "Amnesia",
            "Dystaxia",
            "Hypnotic",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "45-90"
        },
        "name": "flurazepam",
        "pretty_name": "Flurazepam",
        "properties": {
            "after-effects": "2-48 hours.",
            "aliases": [
                "dalmane"
            ],
            "avoid": "All other CNS depressants.",
            "bioavailability": "Oral 83%",
            "categories": [
                "benzodiazepine",
                "habit-forming",
                "depressant"
            ],
            "dose": "Light: 5-10mg Common: 15-30mg Strong: 30-60mg.",
            "dose_to_diazepam": "Flurazepam - 15-30mg's ~=10mg Diazepam.",
            "duration": "12-16 hours.",
            "effects": "Anxiolytic, Sedative, Muscle Relaxant, Amnesia, Dystaxia, Hypnotic.",
            "onset": "45-90 minutes.",
            "summary": "Benzodiazepine with an extremely long half life, between 40 and 250 hours. Mainly used for general anxiety disorder. Sedating, hypnotic, anxiolytic. Potential for amnesia and reduced inhibitions in overdose."
        }
    },
    "flutazolam": {
        "categories": [
            "benzodiazepine",
            "habit-forming",
            "depressant"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-12"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "5-10mg",
                "Light": "2.5-5mg",
                "Strong": "10-15mg."
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "3-8"
        },
        "formatted_effects": [
            "Anxiolytic",
            "Sedative",
            "Muscle Relaxant",
            "Amnesia",
            "Dystaxia",
            "Hypnotic",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "10-30"
        },
        "name": "flutazolam",
        "pretty_name": "Flutazolam",
        "properties": {
            "after-effects": "1-12 hours.",
            "avoid": "All other CNS depressants.",
            "categories": [
                "benzodiazepine",
                "habit-forming",
                "depressant"
            ],
            "dose": "Oral Light: 2.5-5mg Common: 5-10mg Strong: 10-15mg.",
            "duration": "3-8 hours.",
            "effects": "Anxiolytic, Sedative, Muscle Relaxant, Amnesia, Dystaxia, Hypnotic.",
            "onset": "10-30 minutes.",
            "summary": "A benzodiazepine derivative. It was invented in Japan, and has mainly stayed in that area. Similar potency to Diazepam, yet produces a more marked sedation and impaired coordination. Usually used as a treatment for Insomnia. A hypnotic and sedative which may cause amnesia and lowered inhibitions in high doses."
        }
    },
    "flutoprazepam": {
        "aliases": [
            "restas"
        ],
        "categories": [
            "benzodiazepine",
            "habit-forming",
            "depressant"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "24-36"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "1.5-3mg",
                "Light": "0.5-1mg",
                "Strong": "3-5mg+"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "12-16"
        },
        "formatted_effects": [
            "Anxiolytic",
            "Sedative",
            "Muscle Relaxant",
            "Amnesia",
            "Dystaxia",
            "Hypnotic",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "15-45"
        },
        "name": "flutoprazepam",
        "pretty_name": "Flutoprazepam",
        "properties": {
            "after-effects": "24-36 hours",
            "aliases": [
                "restas"
            ],
            "avoid": "All other CNS depressants.",
            "categories": [
                "benzodiazepine",
                "habit-forming",
                "depressant"
            ],
            "dose": "Light: 0.5-1mg Common: 1.5-3mg Strong: 3-5mg+",
            "dose_to_diazepam": "Flutoprazepam - ~2.5mg ~=10mg Diazepam.",
            "duration": "12-16 hours",
            "effects": "Anxiolytic, Sedative, Muscle Relaxant, Amnesia, Dystaxia, Hypnotic.",
            "onset": "15-45 minutes.",
            "summary": "A potent benzodiazepine that is roughly 4-5x the potency of Diazepam and has a longer duration, rarely seen outside of Japan. Sedative, hypnotic and anxiolytic. May cause amnesia and loss of inhibitions in excess. Do not mix with other depressants."
        }
    },
    "fluvoxamine": {
        "aliases": [
            "luvox",
            "faverin"
        ],
        "categories": [
            "ssri"
        ],
        "name": "fluvoxamine",
        "pretty_name": "Fluvoxamine",
        "properties": {
            "aliases": [
                "luvox",
                "faverin"
            ],
            "categories": [
                "ssri"
            ]
        }
    },
    "focalin": {
        "aliases": [
            "dexmethylphenidate",
            "dextromethylphenidate"
        ],
        "categories": [
            "stimulant",
            "habit-forming",
            "common"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-12"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "20-30mg",
                "Heavy": "40-50mg",
                "Light": "10-20mg",
                "Strong": "30-40mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "9-12"
        },
        "formatted_onset": {
            "value": "45-90"
        },
        "name": "focalin",
        "pretty_name": "Dexmethylphenidate",
        "properties": {
            "after-effects": "1-12 hours.",
            "aliases": [
                "dexmethylphenidate",
                "dextromethylphenidate"
            ],
            "categories": [
                "stimulant",
                "habit-forming",
                "common"
            ],
            "dose": "Oral Light: 10-20mg Common: 20-30mg Strong: 30-40mg Heavy: 40-50mg",
            "duration": "9-12 hours",
            "onset": "45-90 mintues.",
            "summary": "The psychoactive isomer of methylphenidate, mostly used to treat ADHD. Twice as potent as methylphenidate, and is said to have cleaner psychostimulant effects with fewer side effects."
        }
    },
    "furanylfentanyl": {
        "aliases": [
            "fu-f",
            "furanyl-fentanyl"
        ],
        "categories": [
            "research-chemical",
            "habit-forming",
            "tentative",
            "opioid",
            "depressant"
        ],
        "dose_note": " NOTE: Very potent opioid, be very careful while dosing.",
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-3"
        },
        "formatted_dose": {
            "Insufflated": {
                "Common": "400-800ug",
                "Light": "200-400ug",
                "Strong": "800-1600ug+"
            },
            "Oral": {
                "Common": "500-900ug",
                "Light": "300-500ug",
                "Strong": "900-1600ug+."
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "1-3"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "1-10"
        },
        "name": "furanylfentanyl",
        "pretty_name": "Furanylfentanyl",
        "properties": {
            "after-effects": "1-3 hours.",
            "aliases": [
                "fu-f",
                "furanyl-fentanyl"
            ],
            "categories": [
                "research-chemical",
                "habit-forming",
                "tentative",
                "opioid",
                "depressant"
            ],
            "dose": "Oral Light: 300-500ug Common: 500-900ug Strong: 900-1600ug+. | Insufflated Light: 200-400ug Common: 400-800ug Strong: 800-1600ug+ | NOTE: Very potent opioid, be very careful while dosing.",
            "duration": "1-3 hours.",
            "onset": "1-10 minutes.",
            "summary": "An extremely potent opioid analgesic and analogue of fentanyl. Concrete information is difficult to obtain about even basic properties like active dose, though it is believed to be slightly less potent and shorter in duration than butyrfentanyl. Exercise extreme caution. Will cause respiratory depression in overdose."
        }
    },
    "g-130": {
        "categories": [
            "stimulant",
            "tentative",
            "research-chemical"
        ],
        "name": "g-130",
        "pretty_name": "G-130",
        "properties": {
            "categories": [
                "stimulant",
                "tentative",
                "research-chemical"
            ],
            "summary": "Stimulant that is related to Phenmetrazine. Nearly no information on dose or effects."
        }
    },
    "gaba": {
        "categories": [
            "depressant",
            "supplement"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-2"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "400-800mg",
                "Light": "200-400mg",
                "Strong": "800-1600mg+"
            }
        },
        "formatted_duration": {
            "Oral": "5-8",
            "_unit": "hours"
        },
        "formatted_onset": {
            "Oral": "15-60",
            "_unit": "minutes"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_GABA.shtml"
        },
        "name": "gaba",
        "pretty_name": "GABA",
        "properties": {
            "after-effects": "1-2 hours.",
            "categories": [
                "depressant",
                "supplement"
            ],
            "dose": "Oral Light: 200-400mg Common: 400-800mg Strong: 800-1600mg+",
            "duration": "Oral: 5-8 hours.",
            "onset": "Oral: 15-60 minutes.",
            "summary": "Gamma-Aminobutyric Acid. Supplement used in calming some down. Does not pass the brain blood barrier."
        }
    },
    "gabapentin": {
        "aliases": [
            "neurontin"
        ],
        "categories": [
            "depressant",
            "habit-forming",
            "depressant"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-6"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "600-900mg",
                "Light": "300-600mg",
                "Strong": "1200mg+"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "5-12"
        },
        "formatted_effects": [
            "Anxiolytic",
            "Sedative",
            "Muscle Relaxant",
            "Amnesia",
            "Dystaxia",
            "Hypnotic",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "30-90"
        },
        "name": "gabapentin",
        "pretty_name": "Gabapentin",
        "properties": {
            "after-effects": "1-6 hours.",
            "aliases": [
                "neurontin"
            ],
            "categories": [
                "depressant",
                "habit-forming",
                "depressant"
            ],
            "dose": "Oral Light: 300-600mg Common: 600-900mg Strong: 1200mg+",
            "duration": "5-12 hours.",
            "effects": "Anxiolytic, Sedative, Muscle Relaxant, Amnesia, Dystaxia, Hypnotic.",
            "onset": "30-90 minutes",
            "summary": "An analogue of GABA also known as Neurontin, originally developed to treat epilepsy. Commonly prescribed for neuropathic pain, it also has pronounced anxiolytic effects leading to its use in treating anxiety disorders."
        },
        "pweffects": {
            "Amnesia": "https://psychonautwiki.org/wiki/Amnesia",
            "Anxiety suppression": "https://psychonautwiki.org/wiki/Anxiety_suppression",
            "Cognitive euphoria": "https://psychonautwiki.org/wiki/Cognitive_euphoria",
            "Dizziness": "https://psychonautwiki.org/wiki/Dizziness",
            "Emotion suppression": "https://psychonautwiki.org/wiki/Emotion_suppression",
            "Muscle relaxation": "https://psychonautwiki.org/wiki/Muscle_relaxation",
            "Physical euphoria": "https://psychonautwiki.org/wiki/Physical_euphoria",
            "Sedation": "https://psychonautwiki.org/wiki/Sedation",
            "Seizure suppression": "https://psychonautwiki.org/wiki/Seizure_suppression",
            "Thought deceleration": "https://psychonautwiki.org/wiki/Thought_deceleration"
        }
    },
    "gbl": {
        "categories": [
            "depressant",
            "habit-forming",
            "common"
        ],
        "dose_note": " NOTE: 1ml = 1.6g GHB. Tends to induce heavy sleep as you pass the 2ml mark.",
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-2"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "0.6-1.5ml",
                "Dangerous": "5ml+",
                "Heavy": "2-3ml",
                "Light": "0.3-0.9ml",
                "Strong": "1.2-2ml"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "1-2"
        },
        "formatted_effects": [
            "relaxation",
            "mood lift",
            "happiness",
            "sociability",
            "increased sex drive",
            "lowered inhibitions",
            "analgesia",
            "dystaxia",
            "drowsiness",
            "sleep",
            "amnesia"
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "10-30"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_GBL.shtml"
        },
        "name": "gbl",
        "pretty_name": "GBL",
        "properties": {
            "after-effects": "1-2 hours",
            "avoid": "Alcohol, other depressants.",
            "categories": [
                "depressant",
                "habit-forming",
                "common"
            ],
            "dose": "Oral Light: 0.3-0.9ml Common: 0.6-1.5ml Strong: 1.2-2ml Heavy: 2-3ml Dangerous: 5ml+ | NOTE: 1ml = 1.6g GHB. Tends to induce heavy sleep as you pass the 2ml mark.",
            "duration": "1-2 hours",
            "effects": "relaxation, mood lift, happiness, sociability, increased sex drive, lowered inhibitions, analgesia, dystaxia, drowsiness, sleep, amnesia",
            "onset": "10-30 minutes",
            "summary": "A pro-drug to GHB whose rapid absorption leads it to have a faster onset and shorter duration. Used in a similar manner to GHB, as a less-toxic alternative to alcohol. Consume slowly instead of as a \"shot\" to hugely improve safety and reduce overdose risk."
        }
    },
    "ghb": {
        "categories": [
            "depressant",
            "habit-forming",
            "common"
        ],
        "dose_note": " NOTE: Tends to induce heavy sedation from about the 3g mark.",
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "2-4"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "1-2.5g",
                "Dangerous": "7g+",
                "Heavy": "3.5-5g",
                "Light": "0.5-1.5g",
                "Strong": "2-3.5g"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "1.5-2.5"
        },
        "formatted_effects": [
            "Similar to alcohol",
            "but subjectively 'cleaner'"
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "20-60"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_GHB.shtml"
        },
        "name": "ghb",
        "pretty_name": "GHB",
        "properties": {
            "after-effects": "2-4 hours",
            "avoid": "Alcohol, benzos and other depressants",
            "categories": [
                "depressant",
                "habit-forming",
                "common"
            ],
            "dose": "Oral Light: 0.5-1.5g Common: 1-2.5g Strong: 2-3.5g Heavy: 3.5-5g Dangerous: 7g+ | NOTE: Tends to induce heavy sedation from about the 3g mark.",
            "duration": "1.5-2.5 hours",
            "effects": "Similar to alcohol, but subjectively 'cleaner'",
            "onset": "20-60 minutes",
            "summary": "A euphoric depressant which is prescribed as a sleep aid and sometimes to help with Alcohol detox. Also used as a recreational depressant, as a non-toxic alternative to Alcohol. Despite not having Alcohol's toxicity it is risky due to among other things inconsistent concentration in commonly sold solution form, and can be very dangerous if taken with other depressants.",
            "summary=a": "euphoric depressant which is prescribed as a sleep aid and sometimes to help with Alcohol detox. Also used as a recreational depressant, as a non-toxic alternative to Alcohol. Despite not having Alcohol's toxicity it is risky due to among other things inconsistent concentration in commonly sold solution form, and can be very dangerous if taken with other depressants."
        },
        "sources": {
            "_general": [
                "The presence of gamma-hydroxybutyric acid (GHB) and gamma-butyrolactone (GBL) in alcoholic and non-alcoholic beverages - http://www.ncbi.nlm.nih.gov/pubmed/15939164",
                "Pharmacological aspects of the combined use of 3,4-methylenedioxymethamphetamine (MDMA, ecstasy) and gamma-hydroxybutyric acid (GHB): a review of t.. - http://www.ncbi.nlm.nih.gov/pubmed/16234132"
            ]
        }
    },
    "glaucine": {
        "categories": [
            "opioid",
            "habit-forming",
            "depressant",
            "tentative"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-8"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "100-150mg",
                "Light": "50-100mg",
                "Strong": "150-200mg+"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "6-8"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "45-90"
        },
        "name": "glaucine",
        "pretty_name": "Glaucine",
        "properties": {
            "after-effects": "1-8 hours.",
            "categories": [
                "opioid",
                "habit-forming",
                "depressant",
                "tentative"
            ],
            "dose": "Oral Light: 50-100mg Common: 100-150mg Strong: 150-200mg+",
            "duration": "6-8 hours.",
            "onset": "45-90 minutes.",
            "summary": "An alkaloid that is found in several different scpecies in the Papaveraceae family. It has antiinflammatory and antitussive effects. Can also be referred to as Yellow Horned Poppy."
        }
    },
    "glutethimide": {
        "aliases": [
            "doriden",
            "elrodorm",
            "noxyron",
            "glimid"
        ],
        "categories": [
            "depressant",
            "habit-forming"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-12"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "500mg",
                "Light": "250mg",
                "Strong": "750mg+"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "2-8"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "30-45"
        },
        "name": "glutethimide",
        "pretty_name": "Glutethimide",
        "properties": {
            "after-effects": "1-12 hours.",
            "aliases": [
                "doriden",
                "elrodorm",
                "noxyron",
                "glimid"
            ],
            "avoid": "All other CNS depressants.",
            "categories": [
                "depressant",
                "habit-forming"
            ],
            "dose": "Light: 250mg Common: 500mg Strong: 750mg+",
            "duration": "2-8 hours.",
            "onset": "30-45 minutes.",
            "summary": "Is a hypnotic sedative that was introduced in 1954, as a \"safe\" alternative to barbiturates to treat insomnia. Anecdotally long term use has had effects similar to withdrawal, while still on a stable dose of the drug."
        }
    },
    "halazepam": {
        "aliases": [
            "paxipam"
        ],
        "categories": [
            "benzodiazepine",
            "habit-forming",
            "depressant"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "12-40"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "20-40mg",
                "Light": "10-20mg",
                "Strong": "40-80mg+"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "8-14"
        },
        "formatted_effects": [
            "Anxiolytic",
            "Sedative",
            "Muscle Relaxant",
            "Amnesia",
            "Dystaxia",
            "Hypnotic",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "15-45"
        },
        "name": "halazepam",
        "pretty_name": "Halazepam",
        "properties": {
            "after-effects": "12-40 hours.",
            "aliases": [
                "paxipam"
            ],
            "avoid": "All other CNS depressants.",
            "categories": [
                "benzodiazepine",
                "habit-forming",
                "depressant"
            ],
            "dose": "Light: 10-20mg Common: 20-40mg Strong: 40-80mg+",
            "dose_to_diazepam": "Halazepam - 20mg ~=10mg Diazepam.",
            "duration": "8-14 hours.",
            "effects": "Anxiolytic, Sedative, Muscle Relaxant, Amnesia, Dystaxia, Hypnotic.",
            "onset": "15-45 minutes.",
            "summary": "A less common prescription benzodiazepine and derivative of Nordazepam. Also known as Paxipam, it is no longer prescribed in the USA. Sedating, hypnotic and anxiolytic. High doses may induce amnesia and lowered inhibitions."
        }
    },
    "halothane": {
        "categories": [
            "depressant",
            "tentative"
        ],
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_Halothane.shtml"
        },
        "name": "halothane",
        "pretty_name": "Halothane",
        "properties": {
            "categories": [
                "depressant",
                "tentative"
            ],
            "summary": "A powerful inhalant anaesthetic generally used in a medical setting to induce unconsciousness, as a supplement with ketamine or fentanyl."
        }
    },
    "hdep-28": {
        "aliases": [
            "ethylnaphthidate"
        ],
        "categories": [
            "stimulant",
            "research-chemical",
            "tentative",
            "habit-forming"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-8"
        },
        "formatted_dose": {
            "Insufflated": {
                "Common": "15-35mg",
                "Light": "5-15mg",
                "Strong": "35-60mg"
            },
            "Oral": {
                "Common": "30-50mg",
                "Light": "15-30mg",
                "Strong": "50-100mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "2-5"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "1-15"
        },
        "name": "hdep-28",
        "pretty_name": "HDEP-28",
        "properties": {
            "after-effects": "1-8 hours.",
            "aliases": [
                "ethylnaphthidate"
            ],
            "avoid": "Other stimulants.",
            "categories": [
                "stimulant",
                "research-chemical",
                "tentative",
                "habit-forming"
            ],
            "dose": "Oral Light: 15-30mg Common: 30-50mg Strong: 50-100mg | Insufflated Light: 5-15mg Common: 15-35mg Strong: 35-60mg",
            "duration": "2-5 hours.",
            "onset": "1-15 minutes.",
            "summary": "Most likely a TRI, such as HDMP-28, short history of human use."
        }
    },
    "hdmp-28": {
        "aliases": [
            "methylnaphtidate"
        ],
        "categories": [
            "stimulant",
            "research-chemical",
            "tentative",
            "habit-forming"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-8"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "15-30mg",
                "Light": "10-15",
                "Strong": "30-50mg+",
                "Threshold": "8-10mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "2-4"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "1-10"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_HDMP28.shtml"
        },
        "name": "hdmp-28",
        "pretty_name": "HDMP-28",
        "properties": {
            "after-effects": "1-8 hours.",
            "aliases": [
                "methylnaphtidate"
            ],
            "avoid": "Other stimulants.",
            "categories": [
                "stimulant",
                "research-chemical",
                "tentative",
                "habit-forming"
            ],
            "dose": "Oral Threshold: 8-10mg Light: 10-15 Common: 15-30mg Strong: 30-50mg+",
            "duration": "2-4 hours. (Dose dependent)",
            "onset": "1-10 minutes.",
            "summary": "Also commonly known as methylnapthidate. A functional stimulant similar to methylphenidate but with a longer duration. Not especially recreational."
        }
    },
    "heroin": {
        "aliases": [
            "diamorphine"
        ],
        "categories": [
            "opioid",
            "habit-forming",
            "depressant",
            "common"
        ],
        "dose_note": " Note: Heroin dose varies greatly depending on quality and tolerance.",
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-24"
        },
        "formatted_dose": {
            "Insufflated": {
                "Common": "20-35mg",
                "Heavy": "50-75mg",
                "Light": "7.5-20mg",
                "Strong": "35-50mg"
            },
            "Intravenous": {
                "Common": "5-10mg",
                "Strong": "8-15mg"
            },
            "Smoked": {
                "Common": "15-25mg",
                "Heavy": "30-50mg",
                "Light": "5-15mg"
            }
        },
        "formatted_duration": {
            "IV": "4-5",
            "Insufflated": "3-6",
            "Smoked": "3-5",
            "_unit": "hours"
        },
        "formatted_effects": [
            "Euphoria",
            "Dry Mouth",
            "Mood lift",
            "Itchiness",
            "Relaxant",
            "Constipation",
            "Pupil Constriction",
            "Analgesia",
            ""
        ],
        "formatted_onset": {
            "IV": "0-5",
            "Insufflated": "10-15",
            "Smoked": "5-10",
            "_unit": "minutes"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_Heroin.shtml"
        },
        "name": "heroin",
        "pretty_name": "Heroin",
        "properties": {
            "after-effects": "1-24 hours.",
            "aliases": [
                "diamorphine"
            ],
            "bioavailability": "Oral 35% | Intramuscular 85%",
            "categories": [
                "opioid",
                "habit-forming",
                "depressant",
                "common"
            ],
            "dose": "Insufflated Light: 7.5-20mg Common: 20-35mg Strong: 35-50mg Heavy: 50-75mg  | Smoked Light: 5-15mg Common: 15-25mg Strong 20-30mg Heavy: 30-50mg | Intravenous Common: 5-10mg Strong: 8-15mg | Note: Heroin dose varies greatly depending on quality and tolerance.",
            "duration": "Insufflated: 3-6 hours | IV: 4-5 hours | Smoked: 3-5 hours.",
            "effects": "Euphoria, Dry Mouth, Mood lift, Itchiness, Relaxant, Constipation, Pupil Constriction, Analgesia.",
            "half-life": "2-3 minutes",
            "marquis": "Deep purplish red",
            "onset": "Insufflated: 10-15 minutes | Smoked: 5-10 minutes | IV: 0-5 minutes",
            "summary": "A powerful opioid derived from Morphine, with 2-4x its potency. Infamous for a high addiction potential and fatal respiratory depression in overdose, C. R. Alder Wright first synthesised this compound in 1874 trying to find a less addictive alternative to Morphine. In recent years, it has often been sold cut with the extremely potent fentanyl, causing a spike in overdose deaths."
        },
        "pweffects": {
            "Anxiety suppression": "https://psychonautwiki.org/wiki/Anxiety_suppression",
            "Cognitive euphoria": "https://psychonautwiki.org/wiki/Cognitive_euphoria",
            "Compulsive redosing": "https://psychonautwiki.org/wiki/Compulsive_redosing",
            "Constipation": "https://psychonautwiki.org/wiki/Constipation",
            "Cough suppression": "https://psychonautwiki.org/wiki/Cough_suppression",
            "Difficulty urinating": "https://psychonautwiki.org/wiki/Difficulty_urinating",
            "Internal hallucinations": "https://psychonautwiki.org/wiki/Internal_hallucinations",
            "Itchiness": "https://psychonautwiki.org/wiki/Itchiness",
            "Nausea": "https://psychonautwiki.org/wiki/Nausea",
            "Pain relief": "https://psychonautwiki.org/wiki/Pain_relief",
            "Physical euphoria": "https://psychonautwiki.org/wiki/Physical_euphoria",
            "Pupil constriction": "https://psychonautwiki.org/wiki/Pupil_constriction",
            "Respiratory depression": "https://psychonautwiki.org/wiki/Respiratory_depression",
            "Sedation": "https://psychonautwiki.org/wiki/Sedation"
        },
        "sources": {
            "_general": [
                "Disrupted white matter integrity in heroin dependence: a controlled study utilizing diffusion tensor imaging - http://www.ncbi.nlm.nih.gov/pubmed/18720268",
                "The treatment of heroin addicts with dextromethorphan: a double-blind comparison of dextromethorphan with chlorpromazine - http://www.ncbi.nlm.nih.gov/pubmed/2187002",
                "Effects of 1-(2,5-dimethoxy-4-methylphenyl)-2-aminopropane (DOM) and quipazine on heroin self-administration in rhesus monkeys - http://www.ncbi.nlm.nih.gov/pubmed/22836370",
                "Heroin \"overdose\" death: contribution of drug-associated environmental cues - http://www.ncbi.nlm.nih.gov/pubmed/7200260",
                "Methadone trials have proven successful in treating Heroin addiction - http://jamanetwork.com/journals/jama/article-abstract/656315",
                "Heroin has been linked to reduction in testosterone and DHT levels - http://www.sciencedirect.com/science/article/pii/0300483X79900167"
            ]
        }
    },
    "hexedrone": {
        "categories": [
            "stimulant",
            "research-chemical",
            "tentative",
            "habit-forming"
        ],
        "dose_note": " NOTE: These doses are tentative and may need further research.",
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-12"
        },
        "formatted_dose": {
            "Threshold:": {
                "Common": "70-100mg",
                "Light": "50-70mg",
                "Strong": "100-125mg+",
                "Threshold": "30-50mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "1-4"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "15-30"
        },
        "name": "hexedrone",
        "pretty_name": "Hexedrone",
        "properties": {
            "after-effects": "1-12 hours.",
            "avoid": "Other stimulants. ",
            "categories": [
                "stimulant",
                "research-chemical",
                "tentative",
                "habit-forming"
            ],
            "dose": "Threshold: 30-50mg Light: 50-70mg Common: 70-100mg Strong: 100-125mg+ | NOTE: These doses are tentative and may need further research.",
            "duration": "1-4 hours.",
            "onset": "15-30 minutes.",
            "summary": "A rare mephedrone analogue also known as MACP, a cathinone stimulant with similar effects to pentedrone."
        }
    },
    "hexen": {
        "aliases": [
            "ethyl-hexedrone",
            "n-ethylhexedrone",
            "hex-en",
            "n-ethyl-hexedrone"
        ],
        "categories": [
            "tentative",
            "stimulant",
            "habit-forming",
            "research-chemical"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "2-6"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "25-40mg",
                "Light": "15-25mg",
                "Strong": "40-50mg+",
                "Threshold": "5-15mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "1-4"
        },
        "formatted_effects": [
            "Stimulation",
            "Dehydration",
            "Hypertension",
            "Tachychardia",
            "Increased alertness",
            "Euphoria",
            "Bruxism",
            "Loss of Inhibition",
            "Increase in energy"
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "15-30"
        },
        "name": "hexen",
        "pretty_name": "Hexen",
        "properties": {
            "after-effects": "2-6 hours.",
            "aliases": [
                "ethyl-hexedrone",
                "n-ethylhexedrone",
                "hex-en",
                "n-ethyl-hexedrone"
            ],
            "avoid": "Other stimulants. 2C-X compounds. All CNS depressants. Tramadol. DXM. MXE.",
            "categories": [
                "tentative",
                "stimulant",
                "habit-forming",
                "research-chemical"
            ],
            "dose": "Threshold: 5-15mg Light: 15-25mg Common: 25-40mg Strong: 40-50mg+",
            "duration": "1-4 hours",
            "effects": "Stimulation, Dehydration, Hypertension, Tachychardia, Increased alertness, Euphoria, Bruxism, Loss of Inhibition, Increase in energy",
            "onset": "15-30 minutes.",
            "summary": "A cathinone based stimulant. Hexen (aka Ethyl-Hexedrone) acts as an NDRI to produce it's effects, and as with most cathinones has a fast onset and short duration. This drug has very little history of human consumption and next to no research/data, and therefor should be treated with caution as a research chemical."
        }
    },
    "hexobarbital": {
        "categories": [
            "barbiturate",
            "depressant",
            "habit-forming",
            "tentative"
        ],
        "dose_note": " Note: Take this with a grain of salt maybe.",
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-4"
        },
        "formatted_dose": {
            "Light:": {
                "Common": "15-20mg",
                "Light": "10-15mg",
                "Strong": "20-30mg"
            }
        },
        "formatted_duration": {
            "_unit": "minutes",
            "value": "30-45"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "1-2"
        },
        "name": "hexobarbital",
        "pretty_name": "Hexobarbital",
        "properties": {
            "after-effects": "1-4 hours.",
            "avoid": "All other CNS depressants.",
            "categories": [
                "barbiturate",
                "depressant",
                "habit-forming",
                "tentative"
            ],
            "dose": "Light: 10-15mg Common: 15-20mg Strong: 20-30mg | Note: Take this with a grain of salt maybe.",
            "duration": "30-45 minutes.",
            "onset": "1-2 minutes.",
            "summary": "Is a barbiturate that was once used for inducing anesthesia for surgery. It has a very rapid onset, and a short duration of effects."
        }
    },
    "homomazindol": {
        "categories": [
            "stimulant",
            "tentative",
            "research-chemical",
            "habit-forming"
        ],
        "name": "homomazindol",
        "pretty_name": "Homomazindol",
        "properties": {
            "categories": [
                "stimulant",
                "tentative",
                "research-chemical",
                "habit-forming"
            ],
            "summary": "A potent analogue of mazindol, a rare, atypical stimulant drug and appetite suppressant occasionally prescribed in cases of severe obesity."
        }
    },
    "homosildenafil": {
        "categories": [
            "research-chemical"
        ],
        "formatted_dose": {
            "Oral": {
                "Common": "25-50mg",
                "Light": "10-25mg",
                "Strong": "50-100mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "5-9"
        },
        "name": "homosildenafil",
        "pretty_name": "Homosildenafil",
        "properties": {
            "categories": [
                "research-chemical"
            ],
            "dose": "Oral Light: 10-25mg Common: 25-50mg Strong: 50-100mg",
            "duration": "5-9 hours.",
            "oral": "Light: 10-25mg Common: 25-50mg Strong: 50-100mg.",
            "summary": "An analogue of sildenafil (viagra) with similar effects. Has been missold in certain 'herbal' blends and dietary supplements for sexual potency. Little is known about the pharmacology or safety profile of this drug in humans, potentially less potent than sildenafil."
        }
    },
    "hot-2": {
        "aliases": [
            "hot2"
        ],
        "categories": [
            "psychedelic",
            "research-chemical",
            "tentative"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-12"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "12-15mg",
                "Light": "10-12mg",
                "Strong": "15-20mg+",
                "Threshold": "8mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "5-12"
        },
        "formatted_effects": [
            "Euphoria",
            "empathy",
            "insight",
            "brightened colour",
            "Closed/Open eye visuals",
            "enhanced tactile sensation",
            "mental/physical stimulation",
            "decreased appetite",
            "pupil dilation",
            "restlessness",
            "change in perception",
            "ego softening",
            "sweating/chills",
            "muscle tension",
            "confusion",
            "insomnia",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "20-40"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_HOT2.shtml",
            "pihkal": "https://www.erowid.org/library/books_online/pihkal/pihkal087.shtml"
        },
        "name": "hot-2",
        "pretty_name": "HOT-2",
        "properties": {
            "after-effects": "1-12 hours.",
            "aliases": [
                "hot2"
            ],
            "avoid": "It will have some 2C-T-2 in it unless the synth went perfectly and went in your body quite fast, thus you will most likely have some 2C-T-2 in your concoction which might hold the same MAOI properties of 2C-T-7.",
            "categories": [
                "psychedelic",
                "research-chemical",
                "tentative"
            ],
            "dose": "Threshold: 8mg Light: 10-12mg Common: 12-15mg Strong: 15-20mg+",
            "duration": "5-12 hours",
            "effects": "Euphoria, empathy, insight, brightened colour, Closed/Open eye visuals, enhanced tactile sensation, mental/physical stimulation, decreased appetite, pupil dilation, restlessness, change in perception, ego softening, sweating/chills, muscle tension, confusion, insomnia.",
            "onset": "20-40 minutes",
            "summary": "A rather rare psychedelic phenylethylamine that is the hydroxylated version and prodrug for 2C-T-2."
        }
    },
    "hot-7": {
        "aliases": [
            "hot7"
        ],
        "categories": [
            "psychedelic",
            "research-chemical",
            "tentative",
            "empathogen"
        ],
        "dose_note": " NOTE: Start low as there is a weird dose curve with this substance, and there also could be possible MAOI effect just like with 2C-T-7.",
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-12"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "20-30mg",
                "Light": "15-20mg",
                "Strong": "30-40mg+",
                "Threshold": "15mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "5-8"
        },
        "formatted_effects": [
            "Euphoria",
            "empathy",
            "insight",
            "brightened colour",
            "Closed/Open eye visuals",
            "enhanced tactile sensation",
            "mental/physical stimulation",
            "decreased appetite",
            "pupil dilation",
            "restlessness",
            "change in perception",
            "ego softening",
            "sweating/chills",
            "muscle tension",
            "confusion",
            "insomnia",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "60-180"
        },
        "name": "hot-7",
        "pretty_name": "HOT-7",
        "properties": {
            "a": "rather rare psychedelic phentlethylamine that is the hydroxlated version and prodrug for 2C-T-7. It decomposes into the parent compound.",
            "after-effects": "1-12 hours.",
            "aliases": [
                "hot7"
            ],
            "categories": [
                "psychedelic",
                "research-chemical",
                "tentative",
                "empathogen"
            ],
            "dose": "Oral Threshold: 15mg Light: 15-20mg Common: 20-30mg Strong: 30-40mg+ | NOTE: Start low as there is a weird dose curve with this substance, and there also could be possible MAOI effect just like with 2C-T-7.",
            "duration": "5-8 hours",
            "effects": "Euphoria, empathy, insight, brightened colour, Closed/Open eye visuals, enhanced tactile sensation, mental/physical stimulation, decreased appetite, pupil dilation, restlessness, change in perception, ego softening, sweating/chills, muscle tension, confusion, insomnia.",
            "onset": "60-180 minutes.",
            "summary": "A rather rare psychedelic phenylethylamine that is the hydroxylated version and prodrug for 2C-T-7."
        }
    },
    "huperzine-a": {
        "aliases": [
            "h-a"
        ],
        "categories": [
            "nootropic",
            "tentative"
        ],
        "dose_note": " Note: This substance is usually taken once a day, and is usually \"cycled\" off after 2-4 weeks. The optimal amount of time to break for in unknown as of yet. The doses are the same as for Oral.",
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-14"
        },
        "formatted_dose": {
            "Insufflted": {
                "Common": "75-150ug",
                "Light": "50-75ug",
                "Strong": "150ug-200ug."
            }
        },
        "formatted_duration": {
            "Insufflated": "6-12",
            "Oral": "8-14",
            "_unit": "hours"
        },
        "formatted_onset": {
            "Insufflated": "1-2",
            "Oral": "10-20",
            "_unit": "minutes"
        },
        "name": "huperzine-a",
        "pretty_name": "HUPERZINE-A",
        "properties": {
            "after-effects": "1-14 hours.",
            "aliases": [
                "h-a"
            ],
            "avoid": "Anticholinergic drugs, which include many first generation antihistamines. Acetylcholinesterase inhibitors. Cholinergic drugs. As it may add to the negative side-effects.",
            "categories": [
                "nootropic",
                "tentative"
            ],
            "dose": "Insufflted Light: 50-75ug Common: 75-150ug Strong: 150ug-200ug. | Note: This substance is usually taken once a day, and is usually \"cycled\" off after 2-4 weeks. The optimal amount of time to break for in unknown as of yet. The doses are the same as for Oral.",
            "duration": "Oral: 8-14 hours. | Insufflated: 6-12 hours.",
            "onset": "Oral: 10-20 minutes. | Insufflated: 1-2 minutes.",
            "summary": "A compound that is extracted from the herbs of Huperziceae family. Is known as an acetylcholinesterase inhibitor, which stops an enzyme from breaking down acetylcholine which results in increases in acetylcholine. Is currently in preliminary trials for Alzheimer's."
        }
    },
    "hydrocodone": {
        "aliases": [
            "vicodin",
            "hydro"
        ],
        "categories": [
            "depressant",
            "opioid",
            "habit-forming",
            "depressant",
            "common"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-12"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "10-25mg",
                "Light": "5-10mg",
                "Strong": "25-40mg."
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "4-8"
        },
        "formatted_effects": [
            "Euphoria",
            "Dry Mouth",
            "Mood lift",
            "Itchiness",
            "Relaxant",
            "Constipation",
            "Pupil constriction",
            "Analgesia",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "10-60"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_Hydrocodone.shtml"
        },
        "name": "hydrocodone",
        "pretty_name": "Hydrocodone",
        "properties": {
            "after-effects": "1-12 hours.",
            "aliases": [
                "vicodin",
                "hydro"
            ],
            "avoid": "Alcohol (Can cause dangerous respiratory depression, which may result in death) Grapefruit juice (Inhibits enzymes in your small intestine, increasing absorption rate to a possible dangerous amount)",
            "bioavailability": "Oral 70-85%",
            "categories": [
                "depressant",
                "opioid",
                "habit-forming",
                "depressant",
                "common"
            ],
            "dose": "Oral Light: 5-10mg Common: 10-25mg Strong: 25-40mg.",
            "duration": "4-8 hours",
            "effects": "Euphoria, Dry Mouth, Mood lift, Itchiness, Relaxant, Constipation, Pupil constriction, Analgesia.",
            "onset": "10-60 minutes depending on stomach contents.",
            "summary": "A codeine-derived opioid generally unheard of outside the United States. Generally mild in effects, used as an analgesic and cough-supressant. Sometimes used recreationally."
        },
        "pweffects": {
            "Anxiety suppression": "https://psychonautwiki.org/wiki/Anxiety_suppression",
            "Cognitive euphoria": "https://psychonautwiki.org/wiki/Cognitive_euphoria",
            "Compulsive redosing": "https://psychonautwiki.org/wiki/Compulsive_redosing",
            "Constipation": "https://psychonautwiki.org/wiki/Constipation",
            "Cough suppression": "https://psychonautwiki.org/wiki/Cough_suppression",
            "Difficulty urinating": "https://psychonautwiki.org/wiki/Difficulty_urinating",
            "Itchiness": "https://psychonautwiki.org/wiki/Itchiness",
            "Pain relief": "https://psychonautwiki.org/wiki/Pain_relief",
            "Physical euphoria": "https://psychonautwiki.org/wiki/Physical_euphoria",
            "Pupil constriction": "https://psychonautwiki.org/wiki/Pupil_constriction",
            "Respiratory depression": "https://psychonautwiki.org/wiki/Respiratory_depression",
            "Sedation": "https://psychonautwiki.org/wiki/Sedation"
        }
    },
    "hydromorphone": {
        "aliases": [
            "dilaudid",
            "diluadid"
        ],
        "categories": [
            "opioid",
            "habit-forming",
            "depressant"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-6"
        },
        "formatted_dose": {
            "Insufflated": {
                "Common": "3-4mg",
                "Light": "1-2mg",
                "Strong": "4-8mg+"
            },
            "Intravenous": {
                "Common": "2-4mg",
                "Light": "1-2mg",
                "Strong": "4-6mg+"
            },
            "Oral": {
                "Common": "3-4",
                "Light": "1-2mg",
                "Strong": "4-8mg+"
            }
        },
        "formatted_duration": {
            "Insufflated": "2-3",
            "Intravenous": "1-2",
            "Oral": "3-4",
            "_unit": "hours"
        },
        "formatted_effects": [
            "Euphoria",
            "Dry Mouth",
            "Mood lift",
            "Itchiness",
            "Relaxant",
            "Constipation",
            "Pupil Constriction",
            "Analgesia",
            ""
        ],
        "formatted_onset": {
            "Insufflated": "5-10",
            "Intravenous": "0-1",
            "Oral": "30-60",
            "_unit": "minutes"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_Hydromorphone.shtml"
        },
        "name": "hydromorphone",
        "pretty_name": "Hydromorphone",
        "properties": {
            "after-effects": "1-6 hours.",
            "aliases": [
                "dilaudid",
                "diluadid"
            ],
            "avoid": "All other CNS depressants.",
            "bioavailability": "Oral 51.35% +/- 29.29% | Insufflated 52.4% | Rectal 36.33% +/- 29.6%",
            "categories": [
                "opioid",
                "habit-forming",
                "depressant"
            ],
            "dose": "Oral Light: 1-2mg Common: 3-4 Strong: 4-8mg+ | Insufflated Light: 1-2mg Common: 3-4mg Strong: 4-8mg+ | Intravenous Light: 1-2mg Common: 2-4mg Strong: 4-6mg+",
            "dose:": "Oral Light: 1-2mg Common: 3-4 Strong: 4-8mg+ | Insufflated Light: 1-2mg Common: 3-4mg Strong: 4-8mg+ | Intravenous Light: 1-2mg Common: 2-4mg Strong: 4-6mg+",
            "duration": "Oral: 3-4 hours | Insufflated: 2-3 hours | Intravenous: 1-2 hours.",
            "effects": "Euphoria, Dry Mouth, Mood lift, Itchiness, Relaxant, Constipation, Pupil Constriction, Analgesia.",
            "onset": "Oral 30-60 minutes | Insufflated 5-10 minutes | Intravenous 0-1 minutes",
            "summary": "An opioid that is roughly 5x the potency of IV Morphine. Only comes in IR tablets in the US, and is given mostly as XR in other countries. It is frequently used in hospitals for short, but immediate pain relief during procedures requiring the patient to be awake. Also frequently used as a recreational opiate."
        }
    },
    "hydroxyzine": {
        "aliases": [
            "vistaril",
            "atarax"
        ],
        "categories": [
            "depressant",
            "deliriant"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-8"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "25-100mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "3-5"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "20-60"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_Hydroxyzine.shtml"
        },
        "name": "hydroxyzine",
        "pretty_name": "Hydroxyzine",
        "properties": {
            "after-effects": "1-8 hours.",
            "aliases": [
                "vistaril",
                "atarax"
            ],
            "categories": [
                "depressant",
                "deliriant"
            ],
            "dose": "Oral Common: 25-100mg",
            "duration": "3-5 hours.",
            "onset": "20-60 minutes.",
            "summary": "An antihistamine drug commonly prescribed for anxiety, itchiness, nausea, and insomnia. Hydroxyzine has also been used to potentiate the analgesia of opioids as well as diminishing the negative effects of opioids, such as itchiness."
        }
    },
    "ibogaine": {
        "aliases": [
            "iboga"
        ],
        "categories": [
            "psychedelic",
            "opioid",
            "dissociative",
            "depressant"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "24-72"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "16-22mg/kg",
                "NOTE": "Doses"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "24-30"
        },
        "formatted_effects": [
            "Addiction help",
            "Euphoria",
            "empathy",
            "insight",
            "brightened colour",
            "Closed/Open eye visuals",
            "enhanced tactile sensation",
            "mental/physical stimulation",
            "decreased appetite",
            "pupil constriction",
            "restlessness",
            "change in perception",
            "ego softening",
            "sweating/chills",
            "muscle tension",
            "confusion",
            "insomnia",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "45-180"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_Ibogaine.shtml",
            "tihkal": "https://www.erowid.org/library/books_online/tihkal/tihkal25.shtml"
        },
        "name": "ibogaine",
        "pretty_name": "Ibogaine",
        "properties": {
            "after-effects": "24-72 hours",
            "aliases": [
                "iboga"
            ],
            "categories": [
                "psychedelic",
                "opioid",
                "dissociative",
                "depressant"
            ],
            "dose": "Oral Common: 16-22mg/kg NOTE: Doses are for Ibogaine Hcl. Potency of ibogaine root bark can vary from roughly 2.5-6% ibogaine content",
            "duration": "24-30 hours",
            "effects": "Addiction help, Euphoria, empathy, insight, brightened colour, Closed/Open eye visuals, enhanced tactile sensation, mental/physical stimulation, decreased appetite, pupil constriction, restlessness, change in perception, ego softening, sweating/chills, muscle tension, confusion, insomnia.",
            "onset": "45-180 minutes",
            "summary": "An alkaloid found in many African plants most famously Iboga, with psychedelic and hallucinogenic properties. May be unpleasant. Traditionally used in tribal environments for coming-of-age rituals, it has recently been used as an alternative treatment for drug addiction although this usage has not been backed by conclusive data in humans. Has killed in overdose."
        },
        "sources": {
            "_general": [
                "Toxicity of ibogaine is associated with a lengthened QT interval in the electrophysiology of the heart - http://www.nejm.org/doi/full/10.1056/NEJMc0804248#t=article",
                "signs of neurotoxicity found in animal testing - http://www.sciencedirect.com/science/article/pii/030645229390500F"
            ]
        }
    },
    "ibuprofen": {
        "categories": [
            "common"
        ],
        "formatted_dose": {
            "Oral": {
                "Common": "400-800mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "4-6"
        },
        "formatted_onset": {
            "value": "within"
        },
        "name": "ibuprofen",
        "pretty_name": "Ibuprofen",
        "properties": {
            "avoid": "Alcoholic beverages.",
            "categories": [
                "common"
            ],
            "dose": "Common: 400-800mg's.",
            "duration": "4-6 hours. ER forumulations up to 12 hours.",
            "onset": "within an hour.",
            "summary": "A ubiquitously available pain reliever/fever reducer. Ibuprofen is a nonsteroidal anti-inflammatory drug, available in many forms. It is sometimes used to reduce the body-load caused by certain drugs, such as stimulants."
        },
        "sources": {
            "_general": [
                "Ibuprofen: pharmacology, efficacy and safety - http://www.ncbi.nlm.nih.gov/pubmed/19949916",
                "Coronary arterial vasodilator effect of ibuprofen - http://www.ncbi.nlm.nih.gov/pubmed/7053413"
            ]
        }
    },
    "indapex": {
        "aliases": [
            "5-meo-tmt"
        ],
        "categories": [
            "psychedelic",
            "research-chemical",
            "tentative"
        ],
        "dose_note": " Note: Very odd dosing curve. So be careful.",
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-8"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "75-100mg",
                "Light": "60-75mg",
                "Strong": "100-150mg."
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "5-10"
        },
        "formatted_effects": [
            "Euphoria",
            "empathy",
            "insight",
            "brightened colour",
            "Closed/Open eye visuals",
            "enhanced tactile sensation",
            "mental/physical stimulation",
            "decreased appetite",
            "pupil dilation",
            "restlessness",
            "change in perception",
            "ego softening",
            "sweating/chills",
            "muscle tension",
            "confusion",
            "insomnia",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "20-50"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_5MeOTMT.shtml",
            "tihkal": "https://www.erowid.org/library/books_online/tihkal/tihkal45.shtml"
        },
        "name": "indapex",
        "pretty_name": "Indapex",
        "properties": {
            "after-effects": "1-8 hours.",
            "aliases": [
                "5-meo-tmt"
            ],
            "categories": [
                "psychedelic",
                "research-chemical",
                "tentative"
            ],
            "dose": "Oral Light: 60-75mg Common: 75-100mg Strong: 100-150mg. | Note: Very odd dosing curve. So be careful.",
            "duration": "5-10 hours.",
            "effects": "Euphoria, empathy, insight, brightened colour, Closed/Open eye visuals, enhanced tactile sensation, mental/physical stimulation, decreased appetite, pupil dilation, restlessness, change in perception, ego softening, sweating/chills, muscle tension, confusion, insomnia.",
            "onset": "20-50 minutes.",
            "summary": "5-MEO-TMT, one of Shulgin's lesser known creations. A psychedelic tryptamine little heard of outside of TiHKaL with very little known information about its effects on humans. May be particularly given to causing nausea."
        }
    },
    "indapyrophenidone": {
        "categories": [
            "stimulant",
            "tentative",
            "research-chemical",
            "habit-forming"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-4"
        },
        "formatted_dose": {
            "Insufflated": {
                "Common": "40-60mg",
                "Heavy": "90mg+",
                "Light": "20-40mg",
                "Strong": "60-90mg"
            },
            "Vaporized": {
                "Common": "10-25mg",
                "Heavy": "50mg+.",
                "Light": "5-10mg",
                "Strong": "25-50mg"
            }
        },
        "formatted_duration": {
            "Insufflated": "1-3",
            "Vaporized": "1-1.5",
            "_unit": "hours"
        },
        "name": "indapyrophenidone",
        "pretty_name": "Indapyrophenidone",
        "properties": {
            "after-effects": "1-4 hours.",
            "categories": [
                "stimulant",
                "tentative",
                "research-chemical",
                "habit-forming"
            ],
            "dose": "Vaporized Light: 5-10mg Common: 10-25mg Strong: 25-50mg Heavy: 50mg+. | Insufflated Light: 20-40mg Common: 40-60mg Strong: 60-90mg Heavy: 90mg+",
            "duration": "Vaporized: 1-1.5 hours | Insufflated: 1-3 hours",
            "smmary": "Rare or new pyrovalerone drug also known as Thymergix and Centroton, with effectively no history of human use. Likely to have a similar effect profile to MDPV.",
            "summary": "Indane analogue of Pyrophenidone, a NDRI stimulant with a short duration."
        }
    },
    "isomethadone": {
        "categories": [
            "opioid",
            "habit-forming",
            "tentative",
            "depressant"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-24"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "2.5-7.5mg",
                "Light": "1.5-2.5mg",
                "Strong": "7.5-15mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "30-40"
        },
        "formatted_effects": [
            "Euphoria",
            "Dry Mouth",
            "Mood lift",
            "Itchiness",
            "Relaxant",
            "Constipation",
            "Pupil constriction",
            "Analgesia",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "30-90"
        },
        "name": "isomethadone",
        "pretty_name": "Isomethadone",
        "properties": {
            "after-effects": "1-24 hours.",
            "avoid": "All other CNS depressants",
            "categories": [
                "opioid",
                "habit-forming",
                "tentative",
                "depressant"
            ],
            "dose": "Light: 1.5-2.5mg Common: 2.5-7.5mg Strong: 7.5-15mg",
            "duration": "30-40 hours",
            "effects": "Euphoria, Dry Mouth, Mood lift, Itchiness, Relaxant, Constipation, Pupil constriction, Analgesia.",
            "onset": "30-90 minutes",
            "summary": "Once a pharmaceutical drug also known as isoamidone, this opioid analgesic and methadone analogue was withdrawn from the market and is seldom seen today. Rarely abused, though reports state it is around twice as potent as methadone, and more euphoric."
        }
    },
    "isophenmetrazine": {
        "categories": [
            "stimulant",
            "research-chemical",
            "tentative",
            "habit-forming"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-6"
        },
        "formatted_dose": {
            "Insufflated": {
                "Common": "5-15mg",
                "Light": "2-5mg",
                "Strong": "20-40mg+"
            },
            "Oral": {
                "Common": "10-20mg",
                "Light": "5-10mg",
                "Strong": "20-50mg+"
            }
        },
        "formatted_duration": {
            "Oral": "3-5",
            "_unit": "hours"
        },
        "formatted_onset": {
            "Oral": "15-30",
            "_unit": "minutes"
        },
        "name": "isophenmetrazine",
        "pretty_name": "Isophenmetrazine",
        "properties": {
            "after-effects": "1-6 hours.",
            "avoid": "Other stimulants.",
            "categories": [
                "stimulant",
                "research-chemical",
                "tentative",
                "habit-forming"
            ],
            "dose": "Oral Light: 5-10mg Common: 10-20mg Strong: 20-50mg+ | Insufflated Light: 2-5mg Common: 5-15mg Strong: 20-40mg+",
            "duration": "Oral: 3-5 hours. Insufflated: 2-4 hours.",
            "onset": "Oral: 15-30 minutes. Insufflated: 5-10 minutes.",
            "summary": "Rare and little known analogue of phenmetrazine, which is slightly more potent than other analogues. Probably a stimulating, appetite supressing drug with high addiction potential. Potentially a dopamine and/or norepinephrine releasing agent."
        }
    },
    "isopropylphenidate": {
        "aliases": [
            "iph",
            "ipph",
            "ippd",
            "ipp"
        ],
        "categories": [
            "research-chemical",
            "habit-forming",
            "tentative",
            "stimulant"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-8"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "10-15mg",
                "Light": "7-10mg",
                "Strong": "15-30mg+"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "3-6"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "30"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_Isopropylphenidate.shtml"
        },
        "name": "isopropylphenidate",
        "pretty_name": "Isopropylphenidate",
        "properties": {
            "after-effects": "1-8 hours.",
            "aliases": [
                "iph",
                "ipph",
                "ippd",
                "ipp"
            ],
            "categories": [
                "research-chemical",
                "habit-forming",
                "tentative",
                "stimulant"
            ],
            "dose": "Light: 7-10mg Common: 10-15mg Strong: 15-30mg+",
            "duration": "3-6 hours",
            "onset": "<30 minutes.",
            "summary": "IPPH (or incorrectly IPH) is a novel piperidine based methylphenidate analogue and NDRI stimulant, but comes with much less physical side effects."
        },
        "pweffects": {
            "Analysis enhancement": "https://psychonautwiki.org/wiki/Analysis_enhancement",
            "Anxiety": "https://psychonautwiki.org/wiki/Anxiety",
            "Appetite suppression": "https://psychonautwiki.org/wiki/Appetite_suppression",
            "Cognitive euphoria": "https://psychonautwiki.org/wiki/Cognitive_euphoria",
            "Cognitive fatigue": "https://psychonautwiki.org/wiki/Cognitive_fatigue",
            "Dehydration": "https://psychonautwiki.org/wiki/Dehydration",
            "Depression": "https://psychonautwiki.org/wiki/Depression",
            "Focus enhancement": "https://psychonautwiki.org/wiki/Focus_enhancement",
            "Increased heart rate": "https://psychonautwiki.org/wiki/Increased_heart_rate",
            "Irritability": "https://psychonautwiki.org/wiki/Irritability",
            "Motivation enhancement": "https://psychonautwiki.org/wiki/Motivation_enhancement",
            "Stimulation": "https://psychonautwiki.org/wiki/Stimulation",
            "Teeth grinding": "https://psychonautwiki.org/wiki/Teeth_grinding",
            "Thought acceleration": "https://psychonautwiki.org/wiki/Thought_acceleration",
            "Thought deceleration": "https://psychonautwiki.org/wiki/Thought_deceleration",
            "Vasoconstriction": "https://psychonautwiki.org/wiki/Vasoconstriction",
            "Wakefulness": "https://psychonautwiki.org/wiki/Wakefulness"
        },
        "sources": {
            "_general": [
                "Isopropylphenidate: an ester homolog of methylphenidate with sustained and selective dopaminergic activity and reduced drug interaction liability. - http://www.ncbi.nlm.nih.gov/pubmed/24261661"
            ]
        }
    },
    "isoproscaline": {
        "aliases": [
            "ip"
        ],
        "categories": [
            "psychedelic",
            "research-chemical",
            "tentative"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-12"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "50-60mg",
                "Light": "40-50mg",
                "Strong": "60-80mg+",
                "Threshold": "30mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "10-20"
        },
        "formatted_effects": [
            "Euphoria",
            "empathy",
            "insight",
            "brightened colour",
            "Closed/Open eye visuals",
            "enhanced tactile sensation",
            "mental/physical stimulation",
            "decreased appetite",
            "pupil dilation",
            "restlessness",
            "change in perception",
            "ego softening",
            "sweating/chills",
            "muscle tension",
            "confusion",
            "insomnia",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "60-180"
        },
        "name": "isoproscaline",
        "pretty_name": "Isoproscaline",
        "properties": {
            "after-effects": "1-12 hours.",
            "aliases": [
                "ip"
            ],
            "categories": [
                "psychedelic",
                "research-chemical",
                "tentative"
            ],
            "dose": "Oral Threshold: 30mg Light: 40-50mg Common: 50-60mg Strong: 60-80mg+",
            "duration": "10-20 hours",
            "effects": "Euphoria, empathy, insight, brightened colour, Closed/Open eye visuals, enhanced tactile sensation, mental/physical stimulation, decreased appetite, pupil dilation, restlessness, change in perception, ego softening, sweating/chills, muscle tension, confusion, insomnia.",
            "onset": "60-180 minutes.",
            "summary": "A analogue of mescaline, and more closely related to proscaline."
        }
    },
    "jenkem": {
        "categories": [
            "deliriant",
            "tentative"
        ],
        "name": "jenkem",
        "pretty_name": "Jenkem",
        "properties": {
            "categories": [
                "deliriant",
                "tentative"
            ],
            "summary": "A hoax which began in online communities of a non-existent drug which was claimed to result from a process involving human waste. http://www.snopes.com/crime/warnings/jenkem.asp"
        }
    },
    "kanna": {
        "categories": [
            "habit-forming",
            "depressant"
        ],
        "dose_note": " Note: We recommend against insufflating this substance, it is extremely painful and damaging to the nasal cavity.",
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-8"
        },
        "formatted_dose": {
            "Insufflated": {
                "Common": "20-50mg",
                "Light": "10-20mg",
                "Strong": "50-150mg+"
            },
            "Oral": {
                "Common": "500-1000mg",
                "Light": "250-500mg",
                "Strong": "1000-2000mg"
            },
            "Vapourized": {
                "Common": "50-100mg",
                "Light": "30-50mg",
                "Strong": "100-250mg."
            }
        },
        "formatted_duration": {
            "Insufflated": "60-150",
            "Oral": "180-360",
            "Vapourized": "90-150",
            "_unit": "minutes"
        },
        "formatted_onset": {
            "Insufflated": "5-10",
            "Oral": "30-90",
            "Smoking": "1-2",
            "_unit": "minutes"
        },
        "name": "kanna",
        "pretty_name": "Kanna",
        "properties": {
            "after-effects": "1-8 hours.",
            "avoid": "Other CNS depressants.",
            "categories": [
                "habit-forming",
                "depressant"
            ],
            "dose": "Oral Light: 250-500mg Common: 500-1000mg Strong: 1000-2000mg | Insufflated Light: 10-20mg Common: 20-50mg Strong: 50-150mg+ | Vapourized Light: 30-50mg Common:  50-100mg Strong: 100-250mg. | Note: We recommend against insufflating this substance, it is extremely painful and damaging to the nasal cavity.",
            "duration": "Oral 180-360 minutes. | Insufflated: 60-150 minutes. | Vapourized: 90-150 minutes",
            "onset": "Oral: 30-90 minutes. | Smoking: 1-2 minutes. | Insufflated: 5-10 minutes.",
            "summary": "A South African plant containing numerous psychoactive alkaloids, including mesembrine and mesembrenone. The first written account of the substance was in 1662. The pharmacology of these compounds is poorly understood, but they are suspected to be serotonin uptake inhibitors and potentially monoamine releasers. Said to suppress appetite, produce mild euphoria and reduce anxiety."
        }
    },
    "kava": {
        "categories": [
            "depressant",
            "habit-forming"
        ],
        "dose_note": " NOTE: Doses are given for pure kavalactones, usually 5-20% of kava.",
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "9-18"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "70-150mg",
                "Heavy": "300mg+",
                "Light": "50-70mg",
                "Strong": "150-200mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "3-6"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "20-30"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_Kava.shtml"
        },
        "name": "kava",
        "pretty_name": "Kava",
        "properties": {
            "after-effects": "9-18 hours.",
            "categories": [
                "depressant",
                "habit-forming"
            ],
            "dose": "Oral Light: 50-70mg Common: 70-150mg Strong: 150-200mg Heavy: 300mg+ | NOTE: Doses are given for pure kavalactones, usually 5-20% of kava.",
            "duration": "3-6 hours",
            "onset": "20-30 minutes",
            "summary": "Tropical evergreen shrub with large heart-shaped leaves and woody stems. Its thick roots are mashed or ground and made into a cold and bitter-tasting beverage used similarly to alcohol. It has a long history of ritual and recreational use in Pacific Polynesia and is now a common herbal product, used widely by those in certain societies as part of a 'Kava Culture.'"
        },
        "sources": {
            "_general": [
                "clinical trials show that Kava significantly lowers anxiety compared to placebo - Mosby's Dental Drug Reference Ninth Edition 2010"
            ]
        }
    },
    "ketamine": {
        "aliases": [
            "k",
            "ket",
            "kitty",
            "kittens"
        ],
        "categories": [
            "dissociative",
            "habit-forming",
            "common"
        ],
        "combos": {
            "2c-t-x": {
                "status": "Low Risk & Synergy"
            },
            "2c-x": {
                "status": "Low Risk & Synergy"
            },
            "5-meo-xxt": {
                "status": "Low Risk & Synergy"
            },
            "alcohol": {
                "note": "Both substances cause ataxia and bring a very high risk of vomiting and unconsciousness. If the user falls unconscious while under the influence there is a severe risk of vomit aspiration if they are not placed in the recovery position.",
                "status": "Dangerous"
            },
            "amphetamines": {
                "note": "No unexpected interactions, though likely to increase blood pressure but not an issue with sensible doses. Moving around on high doses of this combination may be ill advised due to risk of physical injury.",
                "status": "Caution"
            },
            "amt": {
                "status": "Low Risk & Synergy"
            },
            "benzodiazepines": {
                "note": "Both substances potentiate the ataxia and sedation caused by the other and can lead to unexpected loss of consciousness at high doses. While unconscious, vomit aspiration is a risk if not placed in the recovery position.",
                "status": "Caution"
            },
            "benzos": {
                "note": "Both substances potentiate the ataxia and sedation caused by the other and can lead to unexpected loss of consciousness at high doses. While unconscious, vomit aspiration is a risk if not placed in the recovery position.",
                "status": "Caution"
            },
            "caffeine": {
                "note": "No unexpected interactions.",
                "status": "Low Risk & No Synergy"
            },
            "cannabis": {
                "status": "Low Risk & Synergy"
            },
            "cocaine": {
                "note": "No unexpected interactions, though likely to increase blood pressure but not an issue with sensible doses. Moving around on high doses of this combination may be ill advised due to risk of physical injury.",
                "status": "Caution"
            },
            "dmt": {
                "status": "Low Risk & Synergy"
            },
            "dox": {
                "note": "Ketamine and psychedelics tend to potentiate each other - go slowly.",
                "status": "Low Risk & Synergy"
            },
            "dxm": {
                "status": "Low Risk & No Synergy"
            },
            "ghb/gbl": {
                "note": "Both substances cause ataxia and bring a risk of vomiting and unconsciousness. If the user falls unconscious while under the influence there is a severe risk of vomit aspiration if they are not placed in the recovery position.",
                "status": "Dangerous"
            },
            "lsd": {
                "status": "Low Risk & Synergy"
            },
            "maois": {
                "note": "MAO-B inhibitors appear to increase the potency of Ketamine. MAO-A inhbitors have some negative reports associated with the combination but there isn't much information available",
                "status": "Caution"
            },
            "mdma": {
                "note": "No unexpected interactions, though likely to increase blood pressure  but not an issue with sensible doses. Moving around on high doses of  this combination may be ill advised due to risk of physical injury.",
                "status": "Low Risk & Synergy"
            },
            "mescaline": {
                "status": "Low Risk & Synergy"
            },
            "mushrooms": {
                "status": "Low Risk & Synergy"
            },
            "mxe": {
                "status": "Low Risk & Synergy"
            },
            "nbomes": {
                "status": "Low Risk & Synergy"
            },
            "nitrous": {
                "status": "Low Risk & Synergy"
            },
            "opioids": {
                "note": "Both substances bring a risk of vomiting and unconsciousness. If the user falls unconscious while under the influence there is a severe risk of vomit aspiration if they are not placed in the recovery position.",
                "status": "Dangerous"
            },
            "pcp": {
                "status": "Low Risk & Synergy"
            },
            "ssris": {
                "status": "Low Risk & No Synergy"
            },
            "tramadol": {
                "status": "Dangerous"
            }
        },
        "dose_note": " NOTE: Ketamine is based on weight. These are figures for the average 150 pound male There is no concrete dose for the \"K-Hole\" as each user is different.",
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-2"
        },
        "formatted_dose": {
            "Insufflated": {
                "Common": "50-125mg",
                "Heavy": "175mg+",
                "Light": "20-50mg",
                "Strong": "125-175mg",
                "Threshold": "5-10mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "1-2"
        },
        "formatted_effects": [
            "A feeling of drunkenness and well being at low doses",
            "As dose increases the user may begin to feel a disconnection from their body",
            "At 'khole' doses the user may become completely disconnected from both body and mind",
            ""
        ],
        "formatted_onset": {
            "Insufflated": "7.5-20",
            "Intramuscular": "2-7.5",
            "Intravenous": "0-2",
            "Oral": "10-75",
            "_unit": "minutes"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_Ketamine.shtml"
        },
        "name": "ketamine",
        "pretty_name": "Ketamine",
        "properties": {
            "after-effects": "1-2 hours",
            "aliases": [
                "k",
                "ket",
                "kitty",
                "kittens"
            ],
            "avoid": "Driving. Moving and walking if possible. Mixing with other depressants like alcohol, benzos and opiates.",
            "categories": [
                "dissociative",
                "habit-forming",
                "common"
            ],
            "dose": "Insufflated Threshold: 5-10mg Light: 20-50mg Common: 50-125mg Strong: 125-175mg Heavy: 175mg+ | NOTE: Ketamine is based on weight. These are figures for the average 150 pound male There is no concrete dose for the \"K-Hole\" as each user is different.",
            "duration": "1-2 hours",
            "effects": "A feeling of drunkenness and well being at low doses. As dose increases the user may begin to feel a disconnection from their body. At 'khole' doses the user may become completely disconnected from both body and mind.",
            "molecule": "http://wiki.tripsit.me/images/7/76/Ketamine.png",
            "onset": "Insufflated: 7.5-20 minutes | Oral: 10-75 minutes | Intramuscular: 2-7.5 minutes | Intravenous: 0-2 minutes",
            "summary": "A short acting dissociative anaesthetic and hallucinogen commonly used in emergency medicine. It is the prototypical dissociative, and is widely used at sub-anesthetic doses recreationally. Small doses are comparable with alcohol, while larger doses are immobilising and lead to psychedelic experiences: the \"K-Hole.\""
        },
        "pweffects": {
            "Acuity suppression": "https://psychonautwiki.org/wiki/Acuity_suppression",
            "Amnesia": "https://psychonautwiki.org/wiki/Amnesia",
            "Analysis enhancement": "https://psychonautwiki.org/wiki/Analysis_enhancement",
            "Anxiety suppression": "https://psychonautwiki.org/wiki/Anxiety_suppression",
            "Auditory distortion": "https://psychonautwiki.org/wiki/Auditory_distortion",
            "Auditory enhancement": "https://psychonautwiki.org/wiki/Auditory_enhancement",
            "Auditory hallucinations": "https://psychonautwiki.org/wiki/Auditory_hallucinations",
            "Auditory suppression": "https://psychonautwiki.org/wiki/Auditory_suppression",
            "Autonomous entities": "https://psychonautwiki.org/wiki/Autonomous_entities",
            "Compulsive redosing": "https://psychonautwiki.org/wiki/Compulsive_redosing",
            "Conceptual thinking": "https://psychonautwiki.org/wiki/Conceptual_thinking",
            "Consciousness disconnection": "https://psychonautwiki.org/wiki/Consciousness_disconnection",
            "Depersonalization": "https://psychonautwiki.org/wiki/Depersonalization",
            "Derealization": "https://psychonautwiki.org/wiki/Derealization",
            "Disinhibition": "https://psychonautwiki.org/wiki/Disinhibition",
            "Dizziness": "https://psychonautwiki.org/wiki/Dizziness",
            "Double vision": "https://psychonautwiki.org/wiki/Double_vision",
            "D\u00e9j\u00e0 vu": "https://psychonautwiki.org/wiki/D%C3%A9j%C3%A0_vu",
            "Environmental cubism": "https://psychonautwiki.org/wiki/Environmental_cubism",
            "Environmental orbism": "https://psychonautwiki.org/wiki/Environmental_orbism",
            "External hallucinations": "https://psychonautwiki.org/wiki/External_hallucinations",
            "Frame rate suppression": "https://psychonautwiki.org/wiki/Frame_rate_suppression",
            "Geometry": "https://psychonautwiki.org/wiki/Geometry",
            "Immersion enhancement": "https://psychonautwiki.org/wiki/Immersion_enhancement",
            "Information processing suppression": "https://psychonautwiki.org/wiki/Information_processing_suppression",
            "Internal hallucinations": "https://psychonautwiki.org/wiki/Internal_hallucinations",
            "Memory suppression": "https://psychonautwiki.org/wiki/Memory_suppression",
            "Motor control loss": "https://psychonautwiki.org/wiki/Motor_control_loss",
            "Nausea": "https://psychonautwiki.org/wiki/Nausea",
            "Pattern recognition suppression": "https://psychonautwiki.org/wiki/Pattern_recognition_suppression",
            "Perception of decreased weight": "https://psychonautwiki.org/wiki/Perception_of_decreased_weight",
            "Personal bias suppression": "https://psychonautwiki.org/wiki/Personal_bias_suppression",
            "Perspective alterations": "https://psychonautwiki.org/wiki/Perspective_alterations",
            "Perspective distortions": "https://psychonautwiki.org/wiki/Perspective_distortions",
            "Physical autonomy": "https://psychonautwiki.org/wiki/Physical_autonomy",
            "Physical euphoria": "https://psychonautwiki.org/wiki/Physical_euphoria",
            "Scenarios and plots": "https://psychonautwiki.org/wiki/Scenarios_and_plots",
            "Scenery slicing": "https://psychonautwiki.org/wiki/Scenery_slicing",
            "Settings, sceneries, and landscapes": "https://psychonautwiki.org/wiki/Settings,_sceneries,_and_landscapes",
            "Spontaneous tactile sensations": "https://psychonautwiki.org/wiki/Spontaneous_tactile_sensations",
            "Subconscious communication": "https://psychonautwiki.org/wiki/Subconscious_communication",
            "Suggestibility enhancement": "https://psychonautwiki.org/wiki/Suggestibility_enhancement",
            "Synaesthesia": "https://psychonautwiki.org/wiki/Synaesthesia",
            "Tactile disconnection": "https://psychonautwiki.org/wiki/Tactile_disconnection",
            "Tactile suppression": "https://psychonautwiki.org/wiki/Tactile_suppression",
            "Thought deceleration": "https://psychonautwiki.org/wiki/Thought_deceleration",
            "Time distortion": "https://psychonautwiki.org/wiki/Time_distortion",
            "Unity and interconnectedness": "https://psychonautwiki.org/wiki/Unity_and_interconnectedness",
            "Visual disconnection": "https://psychonautwiki.org/wiki/Visual_disconnection",
            "Visual sliding": "https://psychonautwiki.org/wiki/Visual_sliding"
        },
        "sources": {
            "_general": [
                "Comparative and interactive human psychopharmacologic effects of ketamine and amphetamine: implications for glutamatergic and dopaminergic model ps.. - https://www.ncbi.nlm.nih.gov/pubmed/16143730",
                "The effect of ketamine on opioid-induced acute tolerance: can it explain reduction of opioid consumption with ketamine-opioid analgesic combinations - http://www.ncbi.nlm.nih.gov/pubmed/11094005",
                "Subanesthetic ketamine infusion therapy: a retrospective analysis of a novel therapeutic approach to complex regional pain syndrome - http://www.ncbi.nlm.nih.gov/pubmed/15367304",
                "Effects of ketamine on precipitated opiate withdrawal - http://www.ncbi.nlm.nih.gov/pubmed/16963828",
                "Low-dose ketamine with multimodal postcesarean delivery analgesia: a randomized controlled trial - http://www.ncbi.nlm.nih.gov/pubmed/21224020",
                "Chronic ketamine exposure induces permanent impairment of brain functions in adolescent cynomolgus monkeys - http://www.ncbi.nlm.nih.gov/pubmed/23145560",
                "GLYX-13, a NMDA receptor glycine-site functional partial agonist, induces antidepressant-like effects without ketamine-like side effects - http://www.ncbi.nlm.nih.gov/pubmed/23303054",
                "From \"Special K\" to \"Special M\": the evolution of the recreational use of ketamine and methoxetamine - http://www.ncbi.nlm.nih.gov/pubmed/23421859",
                "Daily oral ketamine for the treatment of depression and anxiety in patients receiving hospice care: a 28-day open-label proof-of-concept trial - http://www.ncbi.nlm.nih.gov/pubmed/23805864",
                "Brain damages in ketamine addicts as revealed by magnetic resonance imaging - http://www.ncbi.nlm.nih.gov/pubmed/23882190",
                "Antidepressant efficacy of ketamine in treatment-resistant major depression: a two-site randomized controlled trial - http://www.ncbi.nlm.nih.gov/pubmed/23982301",
                "Are sexes affected differently by ketamine? An exploratory study in ketamine users - http://www.ncbi.nlm.nih.gov/pubmed/24106975",
                "Therapeutic infusions of ketamine: do the psychoactive effects matter - http://www.ncbi.nlm.nih.gov/pubmed/24480515",
                "The absolute bioavailability of racemic ketamine from a novel sublingual formulation - http://www.ncbi.nlm.nih.gov/pubmed/24977293",
                "The mood stabilizer lithium potentiates the antidepressant-like effects and ameliorates oxidative stress induced by acute ketamine in a mouse model.. - http://www.ncbi.nlm.nih.gov/pubmed/25548109",
                "The promise of ketamine for treatment-resistant depression: current evidence and future directions - http://www.ncbi.nlm.nih.gov/pubmed/25649308",
                "Antidepressants do not increase the lethality of ketamine in mice - http://www.ncbi.nlm.nih.gov/pubmed/6849728",
                "Effect of ketamine, an NMDA receptor inhibitor, in acute and chronic orofacial pain - http://www.ncbi.nlm.nih.gov/pubmed/7659431",
                "Ketamine and norketamine plasma concentrations after i.v., nasal and rectal administration in children - http://www.ncbi.nlm.nih.gov/pubmed/8881626",
                "Tissue distribution of ketamine in a mixed drug fatality - http://www.ncbi.nlm.nih.gov/pubmed/9397567",
                "[From the racemate to the eutomer: (S)-ketamine. Renaissance of a substance?] - http://www.ncbi.nlm.nih.gov/pubmed/9451486",
                "Chronic abuse has led to a case of kidney and liver damage http://www.ncbi.nlm.nih.gov/pubmed/24982568",
                "ketamine in the hospital setting can raise blood pressure and is something to be considered when using it: \"Emergency care in the streets\"",
                "Ketamine shows promise in treating suicidal ideation in patients with depression - http://www.biologicalpsychiatryjournal.com/article/S0006-3223(09)00519-8/abstract"
            ]
        }
    },
    "ketazolam": {
        "categories": [
            "depressant",
            "habit-forming"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "2-12"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "15-30mg",
                "Light": "5-15mg",
                "Strong": "30-60mg+"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "8-12"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "30-90"
        },
        "name": "ketazolam",
        "pretty_name": "Ketazolam",
        "properties": {
            "after-effects": "2-12 hours.",
            "avoid": "All other CNS depressants.",
            "categories": [
                "depressant",
                "habit-forming"
            ],
            "dose": "Light: 5-15mg Common: 15-30mg Strong: 30-60mg+",
            "dose_to_diazepam": "Ketazolam - 15-30mg's ~=10mg Diazepam.",
            "duration": "8-12 hours.",
            "onset": "30-90 minutes.",
            "summary": "Benzodiazepine derivative that has most of the common benzodiazepine effects. Has been seen to have similar effectiveness when compared to Diazepam, with milder side-effects. Is marketed in few countries."
        }
    },
    "ketobemidone": {
        "aliases": [
            "kbd"
        ],
        "categories": [
            "opioid",
            "habit-forming",
            "depressant"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-8"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "5-10mg",
                "Light": "5mg",
                "Strong": "10-15mg."
            }
        },
        "formatted_duration": {
            "Oral": "4-8",
            "_unit": "hours"
        },
        "formatted_effects": [
            "Euphoria",
            "Dry Mouth",
            "Mood lift",
            "Itchiness",
            "Relaxant",
            "Constipation",
            "Pupil constriction",
            "Analgesia",
            ""
        ],
        "formatted_onset": {
            "Oral": "45-60",
            "_unit": "minutes"
        },
        "name": "ketobemidone",
        "pretty_name": "Ketobemidone",
        "properties": {
            "Bioavailability": "Oral: 34% Insufflated ~30-40% Plugged: 44% Intravenous: 99%+",
            "after-effects": "1-8 hours.",
            "aliases": [
                "kbd"
            ],
            "avoid": "All other CNS depressants.",
            "bioavailability": "Oral 34% +/- 10% | Rectal 44% +/- 9%",
            "categories": [
                "opioid",
                "habit-forming",
                "depressant"
            ],
            "dose": "Oral Light: 5mg Common: 5-10mg Strong: 10-15mg.",
            "duration": "Oral: 4-8 hours Insufflated: 2-4 hours. Plugged: 5-10 hours. Intravenious: 2-4 hours.",
            "effects": "Euphoria, Dry Mouth, Mood lift, Itchiness, Relaxant, Constipation, Pupil constriction, Analgesia.",
            "half-life": "2.25-2.45 Hours.",
            "onset": "Oral: 45-60 minutes. Insufflated: 5-15 minutes. Plugged: 15-30 minutes.",
            "summary": "An opioid analgesic drug that also acts as an NDMA antagonist. Found to be as potent as morphine in physical side effects, and has high potential for addiction like all opioids do. Overdose may lead to respiratory depression/death. Do not mix with CNS depressants or stimulants. Caution should be used for asthmatic users."
        }
    },
    "khat": {
        "categories": [
            "habit-forming",
            "stimulant"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-10"
        },
        "formatted_duration": {
            "_unit": "minutes",
            "value": "30-120"
        },
        "formatted_onset": {
            "Chewed": "10-15",
            "_unit": "minutes"
        },
        "name": "khat",
        "pretty_name": "Khat",
        "properties": {
            "after-effects": "1-10 hours.",
            "avoid": "Other stimulants",
            "categories": [
                "habit-forming",
                "stimulant"
            ],
            "duration": "30-120 minutes.",
            "onset": "Chewed: 10-15 minutes",
            "summary": "A shrub whose leaves contain Cathinone and Cathine, they are mostly chewed for the stimulant effect they provide. Very long history of human use."
        }
    },
    "kratom": {
        "categories": [
            "opioid",
            "stimulant",
            "habit-forming",
            "depressant",
            "common"
        ],
        "dose_note": " Note: This is for plain leaf only. Some users experience stronger effects from lower doses compared to higher doses. It also is very different person to person, just use this as an outline, as it will change batch to batch and even dose to dose.",
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-12"
        },
        "formatted_dose": {
            "Light:": {
                "Common": "1.5-3g",
                "Light": "0.5-1.5g",
                "Strong": "3-6g"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "2-5"
        },
        "formatted_effects": [
            "Simultaneous stimulation & sedation",
            "Feelings of empathy",
            "Feelings of euphoria",
            "Aphrodisiac qualities for some people",
            "Vivid waking dreams",
            "Useful with physical labor"
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "10-40"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_Kratom.shtml"
        },
        "name": "kratom",
        "pretty_name": "Kratom",
        "properties": {
            "after-effects": "1-12 hours.",
            "categories": [
                "opioid",
                "stimulant",
                "habit-forming",
                "depressant",
                "common"
            ],
            "detection": "Kratom use is not detected by typical drug screening tests, but its metabolites can be detected by more specialized testing.",
            "dose": "Light: 0.5-1.5g Common: 1.5-3g Strong: 3-6g | Note: This is for plain leaf only. Some users experience stronger effects from lower doses compared to higher doses. It also is very different person to person, just use this as an outline, as it will change batch to batch and even dose to dose.",
            "duration": "2-5 hours",
            "effects": "Simultaneous stimulation & sedation. Feelings of empathy. Feelings of euphoria. Aphrodisiac qualities for some people. Vivid waking dreams. Useful with physical labor",
            "onset": "10-40 minutes.",
            "summary": "A drug made out of the leaves of Mitragyna Speciosa, which is related to coffee. Stimulating at lower doses, with opioid effects at higher doses. Frequent heavy use can cause physical addiction and withdrawals."
        },
        "pweffects": {
            "Acuity suppression": "https://psychonautwiki.org/wiki/Acuity_suppression",
            "Anxiety suppression": "https://psychonautwiki.org/wiki/Anxiety_suppression",
            "Body odor alteration": "https://psychonautwiki.org/wiki/Body_odor_alteration",
            "Cognitive euphoria": "https://psychonautwiki.org/wiki/Cognitive_euphoria",
            "Constipation": "https://psychonautwiki.org/wiki/Constipation",
            "Cough suppression": "https://psychonautwiki.org/wiki/Cough_suppression",
            "Difficulty urinating": "https://psychonautwiki.org/wiki/Difficulty_urinating",
            "Double vision": "https://psychonautwiki.org/wiki/Double_vision",
            "Internal hallucinations": "https://psychonautwiki.org/wiki/Internal_hallucinations",
            "Itchiness": "https://psychonautwiki.org/wiki/Itchiness",
            "Motivation enhancement": "https://psychonautwiki.org/wiki/Motivation_enhancement",
            "Nausea": "https://psychonautwiki.org/wiki/Nausea",
            "Pain relief": "https://psychonautwiki.org/wiki/Pain_relief",
            "Physical euphoria": "https://psychonautwiki.org/wiki/Physical_euphoria",
            "Pupil constriction": "https://psychonautwiki.org/wiki/Pupil_constriction",
            "Stimulation": "https://psychonautwiki.org/wiki/Stimulation",
            "Thought acceleration": "https://psychonautwiki.org/wiki/Thought_acceleration",
            "Visual disconnection": "https://psychonautwiki.org/wiki/Visual_disconnection"
        },
        "sources": {
            "_general": [
                "Seizure and coma following Kratom (Mitragynina speciosa Korth) exposure - http://www.ncbi.nlm.nih.gov/pubmed/20411370",
                "A drug toxicity death involving propylhexedrine and mitragynine. - https://www.ncbi.nlm.nih.gov/pubmed/21219704",
                "A drug toxicity death involving propylhexedrine and mitragynine - https://www.ncbi.nlm.nih.gov/pubmed/21219704"
            ]
        }
    },
    "l-theanine": {
        "aliases": [
            "theanine"
        ],
        "categories": [
            "common",
            "supplement"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-2"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "100-200mg."
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "3-6"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "10-30"
        },
        "name": "l-theanine",
        "pretty_name": "L-THEANINE",
        "properties": {
            "after-effects": "1-2 hours.",
            "aliases": [
                "theanine"
            ],
            "categories": [
                "common",
                "supplement"
            ],
            "dose": "Common: 100-200mg.",
            "duration": "3-6 hours.",
            "onset": "10-30 minutes.",
            "summary": "An Amino acid that is structural similar to Glutamine. Most report it as a relaxing agent without much sedation. Most commonly found tea. Usually mixed with Caffeine."
        }
    },
    "librium": {
        "aliases": [
            "chlordiazepoxide"
        ],
        "categories": [
            "benzodiazepine",
            "habit-forming",
            "depressant"
        ],
        "dose_note": " NOTE: 25mg of Librium is approximately equal to 10mg of Diazepam",
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-14"
        },
        "formatted_dose": {
            "Light:": {
                "Common": "10-20mg",
                "Heavy": "20-40mg+",
                "Light": "5-10mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "6-10"
        },
        "formatted_effects": [
            "Anxiolytic",
            "Sedative",
            "Muscle Relaxant",
            "Amnesia",
            "Dystaxia",
            "Hypnotic",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "20-40"
        },
        "name": "librium",
        "pretty_name": "Librium",
        "properties": {
            "after-effects": "1-14 hours.",
            "aliases": [
                "chlordiazepoxide"
            ],
            "avoid": "All other CNS depressants",
            "bioavailability": "Oral 100% | Intramuscular 90-95%",
            "categories": [
                "benzodiazepine",
                "habit-forming",
                "depressant"
            ],
            "dose": "Light: 5-10mg Common: 10-20mg Heavy: 20-40mg+ | NOTE: 25mg of Librium is approximately equal to 10mg of Diazepam",
            "dose_to_diazepam": "25mg ~=10mg Diazepam",
            "duration": "6-10 hours",
            "effects": "Anxiolytic, Sedative, Muscle Relaxant, Amnesia, Dystaxia, Hypnotic.",
            "onset": "20-40 minutes",
            "summary": "Chlordiazepoxide, a medium-acting benzodiazepine drug prescribed mostly for sleep purposes. Sedative and hypnotic, it may cause lowered inhibitions and amnesia in high doses."
        },
        "sources": {
            "_general": [
                "Alcohol and benzodiazepines in fatal poisonings. - https://www.ncbi.nlm.nih.gov/pubmed/12170103"
            ]
        }
    },
    "loprazolam": {
        "aliases": [
            "dormonoct"
        ],
        "categories": [
            "depressant",
            "habit-forming"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-8"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "0.5-1.5mg",
                "Light": "0.25-0.5mg",
                "Strong": "1.5-3mg+"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "6-10"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "30-50"
        },
        "name": "loprazolam",
        "pretty_name": "Loprazolam",
        "properties": {
            "after-effects": "1-8 hours.",
            "aliases": [
                "dormonoct"
            ],
            "categories": [
                "depressant",
                "habit-forming"
            ],
            "dose": "Light: 0.25-0.5mg Common: 0.5-1.5mg Strong: 1.5-3mg+",
            "dose_to_diazepam": "Lopazolam - 1-2mg's ~=10mg Diazepam.",
            "duration": "6-10 hours.",
            "onset": "30-50 minutes.",
            "summary": "Is an Imidazolobenzidazepine derivative that has all the classic benzodiazepine effects. Is usually only prescribed for a short amount of time for insomnia."
        }
    },
    "lorazepam": {
        "aliases": [
            "ativan"
        ],
        "categories": [
            "benzodiazepine",
            "habit-forming",
            "depressant",
            "common"
        ],
        "dose_note": " NOTE: Warning - higher doses increase the chances of blacking out. Also 1mg Lorazepam ~= 10mg Diazepam.",
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-12"
        },
        "formatted_dose": {
            "Intramuscular": {
                "Common": "0.5-1mg",
                "Light": "0.25-0.5mg",
                "Strong": "1-2mg"
            },
            "Oral": {
                "Common": "1-2mg",
                "Light": "0.5mg-1mg",
                "Strong": "2-4mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "4-8"
        },
        "formatted_effects": [
            "Anxiolytic",
            "sedative",
            "high muscle relaxant properties",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "5-30"
        },
        "name": "lorazepam",
        "pretty_name": "Lorazepam",
        "properties": {
            "after-effects": "1-12 hours.",
            "aliases": [
                "ativan"
            ],
            "bioavailability": "Oral 85-90% | Insufflated 76-80%",
            "categories": [
                "benzodiazepine",
                "habit-forming",
                "depressant",
                "common"
            ],
            "dose": "Oral Light: 0.5mg-1mg Common: 1-2mg Strong: 2-4mg's. | Intramuscular Light: 0.25-0.5mg Common: 0.5-1mg Strong: 1-2mg's.",
            "dose_to_diazepam": "Lorazepam - 1mg ~=10mg Diazepam.",
            "duration": "4-8 hours",
            "effects": "Anxiolytic, sedative, high muscle relaxant properties.",
            "onset": "5-30 minutes",
            "summary": "An intermediate acting benzodiazepine commonly known as Ativan, commonly prescribed as an alternative to Xanax. Sedating, hypnotic and anxiolytic. Potential to induce amnesia and lowered inhibitions in overdose. Do not combine with other depressants."
        },
        "pweffects": {
            "Amnesia": "https://psychonautwiki.org/wiki/Amnesia",
            "Analysis suppression": "https://psychonautwiki.org/wiki/Analysis_suppression",
            "Anxiety suppression": "https://psychonautwiki.org/wiki/Anxiety_suppression",
            "Compulsive redosing": "https://psychonautwiki.org/wiki/Compulsive_redosing",
            "Delusions": "https://psychonautwiki.org/wiki/Delusions",
            "Disinhibition": "https://psychonautwiki.org/wiki/Disinhibition",
            "Dizziness": "https://psychonautwiki.org/wiki/Dizziness",
            "Emotion suppression": "https://psychonautwiki.org/wiki/Emotion_suppression",
            "Information processing suppression": "https://psychonautwiki.org/wiki/Information_processing_suppression",
            "Motor control loss": "https://psychonautwiki.org/wiki/Motor_control_loss",
            "Muscle relaxation": "https://psychonautwiki.org/wiki/Muscle_relaxation",
            "Nausea suppression": "https://psychonautwiki.org/wiki/Nausea_suppression",
            "Respiratory depression": "https://psychonautwiki.org/wiki/Respiratory_depression",
            "Sedation": "https://psychonautwiki.org/wiki/Sedation",
            "Seizure suppression": "https://psychonautwiki.org/wiki/Seizure_suppression",
            "Thought deceleration": "https://psychonautwiki.org/wiki/Thought_deceleration"
        },
        "sources": {
            "_general": [
                "Role of dopaminergic and serotonergic systems on behavioral stimulatory effects of low-dose alprazolam and lorazepam. - https://www.ncbi.nlm.nih.gov/pubmed/11226811"
            ]
        }
    },
    "lormetazepam": {
        "aliases": [
            "noctamid"
        ],
        "categories": [
            "benzodiazepine",
            "depressant",
            "habit-forming"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-24"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "1-2mg",
                "Light": "0.5-1mg",
                "Strong": "2-4mg."
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "4-8"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "10-30"
        },
        "name": "lormetazepam",
        "pretty_name": "Lormetazepam",
        "properties": {
            "after-effects": "1-24 hours (Heavily dependant on dose)",
            "aliases": [
                "noctamid"
            ],
            "avoid": "All other CNS depressants.",
            "bioavailability": "Oral: 80%.",
            "categories": [
                "benzodiazepine",
                "depressant",
                "habit-forming"
            ],
            "dose": "Light: 0.5-1mg Common: 1-2mg Strong: 2-4mg.",
            "dose_to_diazepam": "Lormetazepam - 1-2mg's ~=10mg Diazepam.",
            "duration": "4-8 hours. (Dependant on dose)",
            "onset": "10-30 minutes.",
            "summary": "Relatively rare prescription benzodiazepine. Short acting with a short half life. Generally only seen in the Netherlands. Sedative, hypnotic and anxiolytic."
        }
    },
    "lsa": {
        "aliases": [
            "hbwr",
            "morningglory",
            "hbmg",
            "Morning",
            "ololiuqui",
            "morning_glory",
            "hbw"
        ],
        "categories": [
            "psychedelic",
            "common"
        ],
        "formatted_aftereffects": {
            "value": "Some"
        },
        "formatted_dose": {
            "HBWR": {
                "Common": "2-6seeds",
                "Heavy": "14seeds+",
                "Light": "1-2seeds",
                "Strong": "6-14seeds"
            },
            "Morning_Glory": {
                "Common": "100-250seeds",
                "Heavy": "400seeds+",
                "Light": "50-100seeds",
                "Strong": "250-400seeds"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "4-10"
        },
        "formatted_effects": [
            "Euphoria",
            "empathy",
            "insight",
            "brightened colour",
            "Closed/Open eye visuals",
            "enhanced tactile sensation",
            "mental/physical stimulation",
            "decreased appetite",
            "pupil dilation",
            "restlessness",
            "change in perception",
            "ego softening",
            "sweating/chills",
            "muscle tension",
            "confusion",
            "insomnia",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "30-180"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_LSA.shtml"
        },
        "name": "lsa",
        "pretty_name": "LSA",
        "properties": {
            "after-effects": "Some users report a hangover, characterized by a feeling of mental sluggishness and dulled emotions.",
            "aliases": [
                "hbwr",
                "morningglory",
                "hbmg",
                "Morning",
                "ololiuqui",
                "morning_glory",
                "hbw"
            ],
            "categories": [
                "psychedelic",
                "common"
            ],
            "dose": "HBWR Light: 1-2seeds Common: 2-6seeds Strong: 6-14seeds Heavy: 14seeds+ | Morning_Glory Light: 50-100seeds Common: 100-250seeds Strong: 250-400seeds Heavy: 400seeds+",
            "duration": "4-10 hours",
            "effects": "Euphoria, empathy, insight, brightened colour, Closed/Open eye visuals, enhanced tactile sensation, mental/physical stimulation, decreased appetite, pupil dilation, restlessness, change in perception, ego softening, sweating/chills, muscle tension, confusion, insomnia.",
            "onset": "30-180 minutes",
            "summary": "A chemical found in Morning Glory and Hawaiian Baby Woodrose seeds, which are often legally available. Has mental effects similar to LSD, although with almost no visual effects. It is famous for being very nauseating, and for causing excessive time dilation at higher doses."
        },
        "pweffects": {
            "8B Geometry - Exposure to inner mechanics of consciousness": "https://psychonautwiki.org/wiki/8B_Geometry_-_Exposure_to_inner_mechanics_of_consciousness",
            "Acuity enhancement": "https://psychonautwiki.org/wiki/Acuity_enhancement",
            "Analysis enhancement": "https://psychonautwiki.org/wiki/Analysis_enhancement",
            "Auditory distortion": "https://psychonautwiki.org/wiki/Auditory_distortion",
            "Auditory enhancement": "https://psychonautwiki.org/wiki/Auditory_enhancement",
            "Auditory hallucinations": "https://psychonautwiki.org/wiki/Auditory_hallucinations",
            "Autonomous entities": "https://psychonautwiki.org/wiki/Autonomous_entities",
            "Colour enhancement": "https://psychonautwiki.org/wiki/Colour_enhancement",
            "Colour shifting": "https://psychonautwiki.org/wiki/Colour_shifting",
            "Conceptual thinking": "https://psychonautwiki.org/wiki/Conceptual_thinking",
            "Drifting": "https://psychonautwiki.org/wiki/Drifting",
            "D\u00e9j\u00e0 vu": "https://psychonautwiki.org/wiki/D%C3%A9j%C3%A0_vu",
            "Emotion enhancement": "https://psychonautwiki.org/wiki/Emotion_enhancement",
            "Geometry": "https://psychonautwiki.org/wiki/Geometry",
            "Internal hallucinations": "https://psychonautwiki.org/wiki/Internal_hallucinations",
            "Memory suppression": "https://psychonautwiki.org/wiki/Memory_suppression",
            "Motor control loss": "https://psychonautwiki.org/wiki/Motor_control_loss",
            "Novelty enhancement": "https://psychonautwiki.org/wiki/Novelty_enhancement",
            "Pattern recognition enhancement": "https://psychonautwiki.org/wiki/Pattern_recognition_enhancement",
            "Perception of increased weight": "https://psychonautwiki.org/wiki/Perception_of_increased_weight",
            "Perspective alterations": "https://psychonautwiki.org/wiki/Perspective_alterations",
            "Physical euphoria": "https://psychonautwiki.org/wiki/Physical_euphoria",
            "Pupil dilation": "https://psychonautwiki.org/wiki/Pupil_dilation",
            "Scenarios and plots": "https://psychonautwiki.org/wiki/Scenarios_and_plots",
            "Sedation": "https://psychonautwiki.org/wiki/Sedation",
            "Settings, sceneries, and landscapes": "https://psychonautwiki.org/wiki/Settings,_sceneries,_and_landscapes",
            "Spontaneous tactile sensations": "https://psychonautwiki.org/wiki/Spontaneous_tactile_sensations",
            "Subconscious communication": "https://psychonautwiki.org/wiki/Subconscious_communication",
            "Thought acceleration": "https://psychonautwiki.org/wiki/Thought_acceleration",
            "Thought connectivity": "https://psychonautwiki.org/wiki/Thought_connectivity",
            "Time distortion": "https://psychonautwiki.org/wiki/Time_distortion",
            "Transformations": "https://psychonautwiki.org/wiki/Transformations",
            "Unity and interconnectedness": "https://psychonautwiki.org/wiki/Unity_and_interconnectedness",
            "Vasoconstriction": "https://psychonautwiki.org/wiki/Vasoconstriction",
            "Wakefulness": "https://psychonautwiki.org/wiki/Wakefulness"
        }
    },
    "lsd": {
        "aliases": [
            "lsd-25",
            "acid",
            "cid",
            "lucy"
        ],
        "categories": [
            "psychedelic",
            "common"
        ],
        "combos": {
            "2c-t-x": {
                "status": "Low Risk & Synergy"
            },
            "2c-x": {
                "status": "Low Risk & Synergy"
            },
            "5-meo-xxt": {
                "status": "Low Risk & Synergy"
            },
            "alcohol": {
                "status": "Low Risk & Decrease"
            },
            "amphetamines": {
                "note": "Stimulants increase anxiety levels and the risk of thought loops which can lead to negative experiences",
                "status": "Caution"
            },
            "amt": {
                "status": "Low Risk & Synergy"
            },
            "benzodiazepines": {
                "status": "Low Risk & Decrease"
            },
            "benzos": {
                "status": "Low Risk & Decrease"
            },
            "caffeine": {
                "status": "Low Risk & No Synergy"
            },
            "cannabis": {
                "note": "Cannabis has an unexpectedly strong and somewhat unpredictable synergy with psychedelics.",
                "status": "Caution"
            },
            "cocaine": {
                "note": "Stimulants increase anxiety levels and the risk of thought loops which can lead to negative experiences",
                "status": "Caution"
            },
            "dmt": {
                "status": "Low Risk & Synergy"
            },
            "dox": {
                "status": "Low Risk & Synergy"
            },
            "dxm": {
                "status": "Low Risk & Synergy"
            },
            "ghb/gbl": {
                "status": "Low Risk & Decrease"
            },
            "ketamine": {
                "status": "Low Risk & Synergy"
            },
            "maois": {
                "status": "Low Risk & Decrease"
            },
            "mdma": {
                "status": "Low Risk & Synergy"
            },
            "mescaline": {
                "status": "Low Risk & Synergy"
            },
            "mushrooms": {
                "status": "Low Risk & Synergy"
            },
            "mxe": {
                "status": "Low Risk & Synergy"
            },
            "nbomes": {
                "status": "Low Risk & Synergy"
            },
            "nitrous": {
                "status": "Low Risk & Synergy"
            },
            "opioids": {
                "status": "Low Risk & No Synergy"
            },
            "pcp": {
                "status": "Low Risk & Synergy"
            },
            "ssris": {
                "status": "Low Risk & Decrease"
            },
            "tramadol": {
                "note": "Tramadol is well known to lower seizure threshold and psychedelics also cause occasional seizures.",
                "status": "Unsafe"
            }
        },
        "dose_note": " Note: These doses are for pure LSD, note that tabs are often rather a lot weaker than they are advertised.",
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "12-24"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "100-150ug",
                "Heavy": "250ug+",
                "Light": "50-100ug",
                "Strong": "175-225ug"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "9-14"
        },
        "formatted_effects": [
            "visual distortions",
            "a sense of childlike wonder",
            "brightening of colors",
            "racing thoughts",
            "hue shifts",
            "euphoria",
            "anxiety",
            "confusion"
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "45-90"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_LSD.shtml",
            "tihkal": "https://www.erowid.org/library/books_online/tihkal/tihkal26.shtml"
        },
        "name": "lsd",
        "pretty_name": "LSD",
        "properties": {
            "after-effects": "12-24 hours",
            "aliases": [
                "lsd-25",
                "acid",
                "cid",
                "lucy"
            ],
            "avoid": "marijuana (Can potentiate effects)",
            "categories": [
                "psychedelic",
                "common"
            ],
            "dose": "Oral Light: 50-100ug Common: 100-150ug Strong: 175-225ug Heavy: 250ug+ | Note: These doses are for pure LSD, note that tabs are often rather a lot weaker than they are advertised.",
            "duration": "9-14 hours, varying with dosage (heavy doses can lead to much longer trips).",
            "effects": "visual distortions, a sense of childlike wonder, brightening of colors,racing thoughts, hue shifts, euphoria, anxiety, confusion",
            "half-life": "3-5 hours",
            "marquis": "Olive black",
            "onset": "45-90 minutes depending on ROA and stomach contents.",
            "oral": "Light: 50-100ug Common: 100-150ug Strong: 175-225ug Heavy 225ug+ | Note: These doses are for pure LSD, note that tabs are often rather a lot weaker than they are advertised.",
            "summary": "LSD is a popular psychedelic with a relatively long history of use and research, and as such is known to be relatively safe despite its extremely high potency. It is the archetypical psychedelic to which all others are compared, and remains in popular usage."
        },
        "pweffects": {
            "8A Geometry - Exposure to semantic concept network": "https://psychonautwiki.org/wiki/8A_Geometry_-_Exposure_to_semantic_concept_network",
            "Acuity enhancement": "https://psychonautwiki.org/wiki/Acuity_enhancement",
            "After images": "https://psychonautwiki.org/wiki/After_images",
            "Analysis enhancement": "https://psychonautwiki.org/wiki/Analysis_enhancement",
            "Auditory distortion": "https://psychonautwiki.org/wiki/Auditory_distortion",
            "Auditory enhancement": "https://psychonautwiki.org/wiki/Auditory_enhancement",
            "Auditory hallucinations": "https://psychonautwiki.org/wiki/Auditory_hallucinations",
            "Autonomous entities": "https://psychonautwiki.org/wiki/Autonomous_entities",
            "Bodily control enhancement": "https://psychonautwiki.org/wiki/Bodily_control_enhancement",
            "Colour enhancement": "https://psychonautwiki.org/wiki/Colour_enhancement",
            "Colour shifting": "https://psychonautwiki.org/wiki/Colour_shifting",
            "Conceptual thinking": "https://psychonautwiki.org/wiki/Conceptual_thinking",
            "Creativity enhancement": "https://psychonautwiki.org/wiki/Creativity_enhancement",
            "Delusions": "https://psychonautwiki.org/wiki/Delusions",
            "Depth perception distortions": "https://psychonautwiki.org/wiki/Depth_perception_distortions",
            "Drifting": "https://psychonautwiki.org/wiki/Drifting",
            "D\u00e9j\u00e0 vu": "https://psychonautwiki.org/wiki/D%C3%A9j%C3%A0_vu",
            "Emotion enhancement": "https://psychonautwiki.org/wiki/Emotion_enhancement",
            "External hallucinations": "https://psychonautwiki.org/wiki/External_hallucinations",
            "Feelings of eternalism": "https://psychonautwiki.org/wiki/Feelings_of_eternalism",
            "Feelings of interdependent opposites": "https://psychonautwiki.org/wiki/Feelings_of_interdependent_opposites",
            "Feelings of self-design": "https://psychonautwiki.org/wiki/Feelings_of_self-design",
            "Geometry": "https://psychonautwiki.org/wiki/Geometry",
            "Immersion enhancement": "https://psychonautwiki.org/wiki/Immersion_enhancement",
            "Increased heart rate": "https://psychonautwiki.org/wiki/Increased_heart_rate",
            "Increased libido": "https://psychonautwiki.org/wiki/Increased_libido",
            "Internal hallucinations": "https://psychonautwiki.org/wiki/Internal_hallucinations",
            "Laughter": "https://psychonautwiki.org/wiki/Laughter",
            "Magnification": "https://psychonautwiki.org/wiki/Magnification",
            "Memory suppression": "https://psychonautwiki.org/wiki/Memory_suppression",
            "Multiple thought streams": "https://psychonautwiki.org/wiki/Multiple_thought_streams",
            "Muscle spasms": "https://psychonautwiki.org/wiki/Muscle_spasms",
            "Nausea": "https://psychonautwiki.org/wiki/Nausea",
            "Novelty enhancement": "https://psychonautwiki.org/wiki/Novelty_enhancement",
            "Pattern recognition enhancement": "https://psychonautwiki.org/wiki/Pattern_recognition_enhancement",
            "Personal bias suppression": "https://psychonautwiki.org/wiki/Personal_bias_suppression",
            "Personal meaning enhancement": "https://psychonautwiki.org/wiki/Personal_meaning_enhancement",
            "Personality regression": "https://psychonautwiki.org/wiki/Personality_regression",
            "Perspective alterations": "https://psychonautwiki.org/wiki/Perspective_alterations",
            "Perspective distortions": "https://psychonautwiki.org/wiki/Perspective_distortions",
            "Physical euphoria": "https://psychonautwiki.org/wiki/Physical_euphoria",
            "Pupil dilation": "https://psychonautwiki.org/wiki/Pupil_dilation",
            "Recursion": "https://psychonautwiki.org/wiki/Recursion",
            "Scenarios and plots": "https://psychonautwiki.org/wiki/Scenarios_and_plots",
            "Scenery slicing": "https://psychonautwiki.org/wiki/Scenery_slicing",
            "Settings, sceneries, and landscapes": "https://psychonautwiki.org/wiki/Settings,_sceneries,_and_landscapes",
            "Simultaneous emotions": "https://psychonautwiki.org/wiki/Simultaneous_emotions",
            "Spirituality enhancement": "https://psychonautwiki.org/wiki/Spirituality_enhancement",
            "Spontaneous tactile sensations": "https://psychonautwiki.org/wiki/Spontaneous_tactile_sensations",
            "Stimulation": "https://psychonautwiki.org/wiki/Stimulation"
        },
        "sources": {
            "_general": [
                "Agonistic activity of LSD and lisuride at cloned 5HT2A and 5HT2C receptors - http://www.ncbi.nlm.nih.gov/pubmed/9600588",
                "Alterations in responses to LSD in humans associated with chronic administration of tricyclic antidepressants, monoamine oxidase inhibitors or lithium... - http://www.ncbi.nlm.nih.gov/pubmed/8788508",
                "Chronic administration of serotonergic antidepressants attenuates the subjective effects of LSD in humans - http://www.ncbi.nlm.nih.gov/pubmed/8726753",
                "LSD toxicity: a suspected cause of death - http://www.ncbi.nlm.nih.gov/pubmed/845494",
                "Influence of naloxone on the effects of LSD in monkeys. - http://www.ncbi.nlm.nih.gov/pubmed/6527737",
                "Coma, hyperthermia and bleeding associated with massive LSD overdose. A report of eight cases - http://www.ncbi.nlm.nih.gov/pubmed/4816396",
                "Ascorbic acid antagonizes the behavioural effects of LSD in cats - http://www.ncbi.nlm.nih.gov/pubmed/2868111",
                "Illicit use of LSD or psilocybin, but not MDMA or nonpsychedelic drugs, is associated with mystical experiences in a dose-dependent manner - http://www.ncbi.nlm.nih.gov/pubmed/23457892",
                "New Onset LSD Flashback Syndrome Triggered by the Initiation of SSRIs - http://www.ncbi.nlm.nih.gov/pubmed/21603479",
                "LSD and tryptamine effects on sleep/wakefulness and electrocorticogram patterns in intact cats - http://www.ncbi.nlm.nih.gov/pubmed/210478",
                "Characterization of behavioral and endocrine effects of LSD on zebrafish - http://www.ncbi.nlm.nih.gov/pubmed/20561961",
                "Drug dreams in mescaline and LSD addiction - http://www.ncbi.nlm.nih.gov/pubmed/20163393",
                "Response of cluster headache to psilocybin and LSD - http://www.ncbi.nlm.nih.gov/pubmed/16801660",
                "LSD flashback syndrome exacerbated by selective serotonin reuptake inhibitor antidepressants in adolescents - https://www.ncbi.nlm.nih.gov/pubmed/7965440",
                "Metabolism of lysergic acid diethylamide (LSD) to 2-oxo-3-hydroxy LSD (O-H-LSD) in human liver microsomes and cryopreserved human hepatocytes - https://www.ncbi.nlm.nih.gov/pubmed/11043658",
                "LSD-induced entropic brain activity predicts subsequent personality change. - https://www.ncbi.nlm.nih.gov/pubmed/27151536"
            ]
        }
    },
    "lsm-775": {
        "aliases": [
            "lsm"
        ],
        "categories": [
            "psychedelic",
            "research-chemical",
            "tentative"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-16"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "0.75-1mg",
                "Heavy": "1.5+mg.",
                "Light": "0.5-0.75mg",
                "Strong": "1-1.5mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "8-13"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "25-45"
        },
        "name": "lsm-775",
        "pretty_name": "LSM-775",
        "properties": {
            "after-effects": "1-16 hours.",
            "aliases": [
                "lsm"
            ],
            "categories": [
                "psychedelic",
                "research-chemical",
                "tentative"
            ],
            "dose": "Light: 0.5-0.75mg Common: 0.75-1mg Strong: 1-1.5mg Heavy: 1.5+mg.",
            "duration": "8-13 hours",
            "onset": "25-45 minutes",
            "summary": "Psychedelic of the lysergamide class, less potent by weight and produces a rather mild, dreamy and even sedating trip compared to its bigger brother LSD."
        }
    },
    "lsz": {
        "categories": [
            "psychedelic",
            "research-chemical"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-24"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "150-300ug",
                "Heavy": "300ug+",
                "Light": "100-150ug",
                "Threshold": "80ug"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "7-10"
        },
        "formatted_effects": [
            "Euphoria",
            "empathy",
            "insight",
            "brightened colour",
            "Closed/Open eye visuals",
            "enhanced tactile sensation",
            "mental/physical stimulation",
            "decreased appetite",
            "pupil dilation",
            "restlessness",
            "change in perception",
            "ego softening",
            "sweating/chills",
            "muscle tension",
            "confusion",
            "insomnia",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "90-120"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_LSZ.shtml"
        },
        "name": "lsz",
        "pretty_name": "LSZ",
        "properties": {
            "after-effects": "1-24 hours.",
            "categories": [
                "psychedelic",
                "research-chemical"
            ],
            "dose": "Threshold: 80ug Light: 100-150ug Common: 150-300ug Heavy: 300ug+",
            "duration": "7-10 hours",
            "effects": "Euphoria, empathy, insight, brightened colour, Closed/Open eye visuals, enhanced tactile sensation, mental/physical stimulation, decreased appetite, pupil dilation, restlessness, change in perception, ego softening, sweating/chills, muscle tension, confusion, insomnia.",
            "onset": "90-120 minutes.",
            "summary": "A lysergamide very similar to LSD usually distinguishable only by its shorter duration, though some subjective reports have noted it may be slightly more introspective and slightly less confusing."
        }
    },
    "marinol": {
        "aliases": [
            "dronabinol",
            "syndros",
            "cesamet",
            "\u03b49-thc",
            "\u03b49--tetrahydrocannabinol",
            "delta9-tetrahydrocannabinol",
            "delta9-thc"
        ],
        "categories": [
            "depressant",
            "tentative"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-4"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "20-30mg",
                "Light": "10-20mg",
                "Strong": "30-50mg+"
            }
        },
        "formatted_duration": {
            "Oral": "4-12",
            "_unit": "hours"
        },
        "formatted_onset": {
            "_unit": "hours",
            "value": "Oral"
        },
        "name": "marinol",
        "pretty_name": "Marinol",
        "properties": {
            "after-effects": "1-4 hours.",
            "aliases": [
                "dronabinol",
                "syndros",
                "cesamet",
                "\u03b49-thc",
                "\u03b49--tetrahydrocannabinol",
                "delta9-tetrahydrocannabinol",
                "delta9-thc"
            ],
            "categories": [
                "depressant",
                "tentative"
            ],
            "dose": "Light: 10-20mg Common: 20-30mg Strong: 30-50mg+",
            "duration": "Oral: 4-12 hours, depending on dose",
            "half-life": "1.6\u201359 h,[3] 25\u201336 h (orally administered dronabinol)",
            "onset": "Oral 30-90 minutes, with effects peaking at 2-3 hours",
            "summary": "Synthetically created \u03949-THC, the main psychoactive ingredient in cannabis.",
            "warning": "At higher doses, anxiety and panic attacks are common."
        }
    },
    "mbdb": {
        "aliases": [
            "eden",
            "methyl-j"
        ],
        "categories": [
            "stimulant",
            "research-chemical",
            "tentative",
            "empathogen",
            "habit-forming"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-12"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "180-210mg",
                "Light": "150-180mg",
                "Strong": "210-250mg+"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "3-8"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "30-120"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_MBDB.shtml"
        },
        "name": "mbdb",
        "pretty_name": "MBDB",
        "properties": {
            "after-effects": "1-12 hours.",
            "aliases": [
                "eden",
                "methyl-j"
            ],
            "categories": [
                "stimulant",
                "research-chemical",
                "tentative",
                "empathogen",
                "habit-forming"
            ],
            "dose": "Light: 150-180mg Common: 180-210mg Strong: 210-250mg+",
            "duration": "3-8 hours",
            "onset": "30-120 minutes.",
            "summary": "A rare entactogenic drug and analogue of MDMA possibly first synthesised by David Nichols. Potentially less potent than related drugs of its type. Sometimes referred to as a 'watered down MDMA.'"
        }
    },
    "mbzp": {
        "aliases": [
            "methylbenylpiperazine"
        ],
        "categories": [
            "stimulant",
            "research-chemical",
            "tentative",
            "habit-forming"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "2-4"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "80-120mg",
                "Heavy": "160-200mg+",
                "Light": "50-80mg",
                "Strong": "120-160mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "4-6"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "30-45"
        },
        "name": "mbzp",
        "pretty_name": "MBZP",
        "properties": {
            "after-effects": "2-4 hours, yet can be much long with extended doses/ect.",
            "aliases": [
                "methylbenylpiperazine"
            ],
            "categories": [
                "stimulant",
                "research-chemical",
                "tentative",
                "habit-forming"
            ],
            "dose": "Oral Light: 50-80mg Common: 80-120mg Strong: 120-160mg Heavy: 160-200mg+",
            "duration": "4-6 hours",
            "onset": "30-45 minutes.",
            "summary": "A stimulant drug which is a derivative of BZP."
        }
    },
    "mcpp": {
        "categories": [
            "stimulant",
            "research-chemical",
            "tentative"
        ],
        "formatted_onset": {
            "60": "minutes.",
            "_unit": "minutes"
        },
        "name": "mcpp",
        "pretty_name": "MCPP",
        "properties": {
            "categories": [
                "stimulant",
                "research-chemical",
                "tentative"
            ],
            "onset": "Oral: >60 minutes. Insufflated: >30 minutes.",
            "summary": "A phenylpiperazine stimulant first developed in the 1970s before being sold in the RC market, often mislabelled as MDMA. Said to have very unpleasant effects such as anxiogenesis and headaches."
        }
    },
    "mda": {
        "categories": [
            "psychedelic",
            "stimulant",
            "empathogen",
            "habit-forming",
            "common"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-12"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "40-80mg",
                "Heavy": "120mg+",
                "Light": "30-40mg",
                "Strong": "80-120mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "2-5"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "20-90"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_MDA.shtml",
            "pihkal": "https://www.erowid.org/library/books_online/pihkal/pihkal100.shtml"
        },
        "name": "mda",
        "pretty_name": "MDA",
        "properties": {
            "after-effects": "1-12 hours.",
            "categories": [
                "psychedelic",
                "stimulant",
                "empathogen",
                "habit-forming",
                "common"
            ],
            "dose": "Oral Light: 30-40mg Common: 40-80mg Strong: 80-120mg Heavy: 120mg+",
            "duration": "2-5 hours",
            "marquis": "Black",
            "onset": "20-90 minutes",
            "summary": "A stimulant and empathogen. Similar to MDMA but typically produces more visuals than MDMA. Known to be more neurotoxic than MDMA, and is a minor metabolite of MDMA. Duration and onset similar to MDMA. The common Marquis reagent test cannot differentiate MDA and MDMA."
        },
        "sources": {
            "_general": [
                "Synthesis of fluoro analogues of 3,4-(methylenedioxy)amphetamine (MDA) and its derivatives - http://www.ncbi.nlm.nih.gov/pubmed/17193269"
            ]
        }
    },
    "mdai": {
        "categories": [
            "psychedelic",
            "stimulant",
            "research-chemical",
            "habit-forming",
            "empathogen"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-8"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "100-150mg",
                "Heavy": "150-300mg+",
                "Light": "40-100mg",
                "Threshold": "20-40mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "4-6"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "30-60"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_MDAI.shtml"
        },
        "name": "mdai",
        "pretty_name": "MDAI",
        "properties": {
            "after-effects": "1-8 hours.",
            "categories": [
                "psychedelic",
                "stimulant",
                "research-chemical",
                "habit-forming",
                "empathogen"
            ],
            "dose": "Threshold: 20-40mg Light: 40-100mg Common: 100-150mg Heavy: 150-300mg+",
            "duration": "4-6 hours.",
            "onset": "30-60 minutes",
            "summary": "A selective serotonin releasing agent which is rarely used without a stimulant to obtain desirable effects. Previously believed not to be neuruotoxic, however MDAI has been implicated in several lethal and non-lethal intoxications, and as such may pose more of a risk to health than previously believed."
        }
    },
    "mdea": {
        "aliases": [
            "mde",
            "eve"
        ],
        "categories": [
            "stimulant",
            "empathogen",
            "tentative"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-36"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "100-150mg",
                "Light": "80-100mg",
                "Strong": "150-200mg."
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "3-6"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "30-60"
        },
        "name": "mdea",
        "pretty_name": "MDEA",
        "properties": {
            "after-effects": "1-36 hours.",
            "aliases": [
                "mde",
                "eve"
            ],
            "categories": [
                "stimulant",
                "empathogen",
                "tentative"
            ],
            "dose": "Light: 80-100mg Common: 100-150mg Strong: 150-200mg.",
            "duration": "3-6 hours.",
            "onset": "30-60 minutes.",
            "summary": "A quite rare empathogen closely related to MDMA. Yet is less potent than the prior."
        }
    },
    "mdma": {
        "aliases": [
            "molly",
            "ecstasy",
            "adam",
            "xtc",
            "mandy",
            "x",
            "md"
        ],
        "categories": [
            "stimulant",
            "psychedelic",
            "empathogen",
            "habit-forming",
            "common"
        ],
        "combos": {
            "2c-t-x": {
                "status": "Caution"
            },
            "2c-x": {
                "status": "Low Risk & Synergy"
            },
            "5-meo-xxt": {
                "note": "Some of the 5-MeO tryptamines are a bit unpredictable and should be mixed with MDMA with care",
                "status": "Caution"
            },
            "alcohol": {
                "note": "Both MDMA and alcohol cause dehydration. Approach this combination with caution, moderation and sufficient hydration. More than a small amount of alcohol will dull the euphoria of MDMA",
                "status": "Caution"
            },
            "amphetamines": {
                "note": "Amphetamines increase the neurotoxic effects of MDMA",
                "status": "Low Risk & Synergy"
            },
            "amt": {
                "status": "Dangerous"
            },
            "benzodiazepines": {
                "status": "Low Risk & Decrease"
            },
            "benzos": {
                "status": "Low Risk & Decrease"
            },
            "caffeine": {
                "note": "Caffiene is not really necessary with MDMA and increases any neurotoxic effects from MDMA",
                "status": "Caution"
            },
            "cannabis": {
                "note": "Large amounts of cannabis may cause strong and somewhat unpredictable experiences in combination with MDMA. Cannabis should be saved for towards the end of the experience if possible.",
                "status": "Low Risk & Synergy"
            },
            "cocaine": {
                "note": "Cocaine blocks some of the desirable effects of MDMA while increasing the risk of heart attack.",
                "status": "Caution"
            },
            "dmt": {
                "status": "Low Risk & Synergy"
            },
            "dox": {
                "note": "The combined stimulating effects of the two can be uncomfortable. Coming down on the MDMA while the DOx is still active can be quite anxiogenic. ",
                "status": "Caution"
            },
            "dxm": {
                "status": "Dangerous"
            },
            "ghb/gbl": {
                "note": "Large amounts of GHB/GBL may overwhelm the effects of MDMA on the comedown.",
                "status": "Caution"
            },
            "ketamine": {
                "note": "No unexpected interactions, though likely to increase blood pressure  but not an issue with sensible doses. Moving around on high doses of  this combination may be ill advised due to risk of physical injury.",
                "status": "Low Risk & Synergy"
            },
            "lsd": {
                "status": "Low Risk & Synergy"
            },
            "maois": {
                "note": "MAO-B inhibitors can increase the potency and duration of  phenethylamines unpredictably. MAO-A inhibitors with MDMA will lead to hypertensive crises.",
                "status": "Dangerous"
            },
            "mescaline": {
                "status": "Low Risk & Synergy"
            },
            "mushrooms": {
                "status": "Low Risk & Synergy"
            },
            "mxe": {
                "note": "There have been reports of risky serotonergic interactions when the two are taken at the same time, but MXE taken to the end of an MDMA experience does not appear to cause the same issues.",
                "status": "Caution"
            },
            "nbomes": {
                "status": "Caution"
            },
            "nitrous": {
                "status": "Low Risk & Synergy"
            },
            "opioids": {
                "status": "Low Risk & No Synergy"
            },
            "pcp": {
                "note": "This combination can easily lead to hypermanic states",
                "status": "Unsafe"
            },
            "ssris": {
                "status": "Low Risk & Decrease"
            },
            "tramadol": {
                "note": "Tramadol and stimulants both increase the risk of seizures.",
                "status": "Dangerous"
            }
        },
        "dose_note": " NOTE: Higher doses increase neurotoxic effects",
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-72"
        },
        "formatted_dose": {
            "Insufflated/Rectal": {
                "Common": "70-120mg",
                "Heavy": "165mg+",
                "Light": "30-70mg",
                "Strong": "120-165mg"
            },
            "Oral": {
                "Common": "75-125mg",
                "Heavy": "175mg+",
                "Light": "40-75mg",
                "Strong": "125-175mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "3-5"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "20-70"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_MDMA.shtml",
            "pihkal": "https://www.erowid.org/library/books_online/pihkal/pihkal109.shtml"
        },
        "name": "mdma",
        "pretty_name": "MDMA",
        "properties": {
            "after-effects": "1-72 hours.",
            "aliases": [
                "molly",
                "ecstasy",
                "adam",
                "xtc",
                "mandy",
                "x",
                "md"
            ],
            "categories": [
                "stimulant",
                "psychedelic",
                "empathogen",
                "habit-forming",
                "common"
            ],
            "detection": "1-3 days single use, 3-5 days heavy use",
            "dose": "Oral Light: 40-75mg  Common: 75-125mg  Strong: 125-175mg  Heavy: 175mg+ | Insufflated/Rectal Light: 30-70mg  Common: 70-120mg Strong: 120-165mg  Heavy: 165mg+ | NOTE: Higher doses increase neurotoxic effects",
            "duration": "3-5 hours",
            "general-advice": "Only roll every 2-3 months.",
            "marquis": "Black (may have purple tint)",
            "onset": "20-70 minutes",
            "summary": "The world's most popular empathogen with powerful pro-social effects. Has been strongly linked to cognitive decline in excess. Popular at parties, it is often sold in powder or in pills, and may be adulterated with other similar chemicals.",
            "wiki": "http://wiki.tripsit.me/wiki/MDMA"
        },
        "sources": {
            "_general": [
                "Alpha-lipoic acid prevents 3,4-methylenedioxy-methamphetamine (MDMA)-induced neurotoxicity - http://www.ncbi.nlm.nih.gov/pubmed/10619665",
                "Involvement of free radicals in MDMA-induced neurotoxicity in mice. - http://www.ncbi.nlm.nih.gov/pubmed/11435997",
                "Methamphetamine and MDMA (ecstasy) neurotoxicity: 'of mice and men'. - http://www.ncbi.nlm.nih.gov/pubmed/15370888",
                "The neurotoxic effects of 3,4-methylenedioxymethamphetamine (MDMA) and methamphetamine on serotonin, dopamine, and GABA-ergic terminals - http://www.ncbi.nlm.nih.gov/pubmed/15474609",
                "MDMA (Ecstasy) and human dopamine, norepinephrine, and serotonin transporters: implications for MDMA-induced neurotoxicity and treatment. - http://www.ncbi.nlm.nih.gov/pubmed/16220332",
                "Pharmacological aspects of the combined use of 3,4-methylenedioxymethamphetamine (MDMA, ecstasy) and gamma-hydroxybutyric acid (GHB) - http://www.ncbi.nlm.nih.gov/pubmed/16234132",
                "3,4-Methylenedioxymethamphetamine (MDMA) neurotoxicity in rats: a reappraisal of past and present findings. - http://www.ncbi.nlm.nih.gov/pubmed/16541247",
                "The effects of fluoxetine on the subjective and physiological effects of 3,4-methylenedioxymethamphetamine (MDMA) in humans - http://www.ncbi.nlm.nih.gov/pubmed/17047932",
                "Neurogenic bladder and chronic urinary retention associated with MDMA abuse. - http://www.ncbi.nlm.nih.gov/pubmed/18570171",
                "THC Prevents MDMA Neurotoxicity in Mice - http://www.ncbi.nlm.nih.gov/pubmed/20174577",
                "Effects of a beta-blocker on the cardiovascular response to MDMA (Ecstasy). - http://www.ncbi.nlm.nih.gov/pubmed/20378736",
                "Neurotoxicity of ecstasy (MDMA): an overview - http://www.ncbi.nlm.nih.gov/pubmed/20420572",
                "MDMA: interactions with other psychoactive drugs - http://www.ncbi.nlm.nih.gov/pubmed/21756931",
                "MDMA and temperature: a review of the thermal effects of 'Ecstasy' in humans. - http://www.ncbi.nlm.nih.gov/pubmed/21924843",
                "MDMA (ecstasy) effects on actual driving performance before and after sleep deprivation, as function of dose and concentration in blood and oral... - http://www.ncbi.nlm.nih.gov/pubmed/21952668",
                "MDMA increases glutamate release and reduces parvalbumin-positive GABAergic cells in the dorsal hippocampus of the rat: role of cyclooxygenase. - http://www.ncbi.nlm.nih.gov/pubmed/23179355",
                "MDMA Illicit use of LSD or psilocybin, but not MDMA or nonpsychedelic drugs, is associated with mystical experiences in a dose-dependent manner. - http://www.ncbi.nlm.nih.gov/pubmed/23457892",
                "Cocaine potentiates MDMA-induced oxidative stress but not dopaminergic neurotoxicity in mice: implications for the pathogenesis of free radical - http://www.ncbi.nlm.nih.gov/pubmed/23681166",
                "MDMA-induced neurotoxicity: parameters of degeneration and recovery of brain serotonin neurons. - http://www.ncbi.nlm.nih.gov/pubmed/2452449",
                "MDMA, cortisol, and heightened stress in recreational ecstasy users. - http://www.ncbi.nlm.nih.gov/pubmed/25014666",
                "A study of the mechanism of MDMA ('ecstasy')-induced neurotoxicity of 5-HT neurones using chlormethiazole, dizocilpine and other protective compounds. - http://www.ncbi.nlm.nih.gov/pubmed/7516800",
                "Inhibition of MAO-B protects against MDMA-induced neurotoxicity in the striatum. - http://www.ncbi.nlm.nih.gov/pubmed/7542394",
                "MDMA (ecstasy) inhibition of MAO type A and type B: comparisons with fenfluramine and fluoxetine (Prozac). - http://www.ncbi.nlm.nih.gov/pubmed/7945733",
                "Ecstasy use and serotonin syndrome: a neglected danger to adolescents and young adults prescribed selective serotonin reuptake inhibitors. - https://www.ncbi.nlm.nih.gov/pubmed/24006318",
                "3,4-Methylenedioxymethamphetamine (ecstasy) and alcohol interactions in humans: psychomotor performance, subjective effects, and pharmacokinetics. - http://www.ncbi.nlm.nih.gov/pubmed/11752122",
                "Putting an Ecstasy test kit to the test: harm reduction or harm induction? - http://www.ncbi.nlm.nih.gov/pubmed/14594341",
                "MDMA Vasopressin and oxytocin secretion in response to the consumption of ecstasy in a clubbing population. - http://www.ncbi.nlm.nih.gov/pubmed/16574714",
                "Monoamine oxidase-B mediates ecstasy-induced neurotoxic effects to adolescent rat brain mitochondria. - http://www.ncbi.nlm.nih.gov/pubmed/17881526",
                "Increased oxytocin concentrations and prosocial feelings in humans after ecstasy (3,4-methylenedioxymethamphetamine) administration. - http://www.ncbi.nlm.nih.gov/pubmed/19562632",
                "Neurotoxicity of ecstasy (MDMA): an overview. - http://www.ncbi.nlm.nih.gov/pubmed/20420572",
                "Mephedrone, compared with MDMA (ecstasy) and amphetamine, rapidly increases both dopamine and 5-HT levels in nucleus accumbens of awake rats - http://www.ncbi.nlm.nih.gov/pubmed/21615721",
                "Neurotoxicity of ecstasy and its metabolites in human dopaminergic differentiated SH-SY5Y cells. - http://www.ncbi.nlm.nih.gov/pubmed/23194825",
                "Neuroprotective properties of melissa officinalis L. Extract against ecstasy-induced neurotoxicity. - http://www.ncbi.nlm.nih.gov/pubmed/23671824",
                "Ecstasy use and serotonin syndrome: a neglected danger to adolescents and young adults prescribed selective serotonin reuptake inhibitors. - http://www.ncbi.nlm.nih.gov/pubmed/24006318",
                "MDMA, cortisol, and heightened stress in recreational ecstasy users - http://www.ncbi.nlm.nih.gov/pubmed/25014666",
                "History of MDMA - http://www.mdma.net/merck/history-ecstasy.html",
                "Study associating long-term serotonergic injury from use of MDMA - http://www.ncbi.nlm.nih.gov/pubmed/7643196",
                "Even after abstaining as long as 2.5 years, verbal memory deficits were still present in ex-mdma abuserd, indicating that the neurotoxicity may have some permanent damage features - http://m.jop.sagepub.com/content/20/2/211.short",
                "http://onlinelibrary.wiley.com/doi/10.1002/nrc.20023/abstract Potentiation of (DL)-3,4-methylenedioxymethamphetamine (MDMA)-induced toxicity by the serotonin 2A receptior partial agonist d-lysergic acid diethylamide (LSD), and the protection of same by the serotonin 2A/2C receptor antagonist MDL 11,939"
            ]
        }
    },
    "mdoh": {
        "categories": [
            "stimulant",
            "psychedelic",
            "research-chemical",
            "tentative",
            "empathogen",
            "habit-forming"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-6"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "120-150mg",
                "Heavy": "150mg+",
                "Light": "100-120mg",
                "Threshold": "80mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "4-6"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "20-40"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_MDOH.shtml",
            "pihkal": "https://www.erowid.org/library/books_online/pihkal/pihkal114.shtml"
        },
        "name": "mdoh",
        "pretty_name": "MDOH",
        "properties": {
            "after-effects": "1-6 hours.",
            "categories": [
                "stimulant",
                "psychedelic",
                "research-chemical",
                "tentative",
                "empathogen",
                "habit-forming"
            ],
            "dose": "Threshold: 80mg Light: 100-120mg Common: 120-150mg Heavy: 150mg+ (Tentative)",
            "duration": "4-6 hours",
            "onset": "20-40 minutes.",
            "summary": "An entactogen, stimulant and psychedelic first synthesised by Alexander Shulgin, MDOH is an analogue of MDA. Described as highly psychedelic, it is likely a serotonin releasing agent. It has not seen widespread use, perhaps due to a number of reported negative side effects such as urinary retention and a heavy comedown."
        }
    },
    "mdpa": {
        "aliases": [
            "methylenedioxyphenylacetamide"
        ],
        "categories": [
            "empathogen",
            "research-chemical",
            "habit-forming",
            "tentative"
        ],
        "formatted_dose": {
            "Oral": {
                "Common": "125-175mg",
                "Heavy": "250+mg.",
                "Light": "75-125mg",
                "Strong": "175-250mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "2-4"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "15-45"
        },
        "name": "mdpa",
        "pretty_name": "MDPA",
        "properties": {
            "aliases": [
                "methylenedioxyphenylacetamide"
            ],
            "categories": [
                "empathogen",
                "research-chemical",
                "habit-forming",
                "tentative"
            ],
            "dose": "Oral Light: 75-125mg Common: 125-175mg Strong: 175-250mg Heavy: 250+mg.",
            "duration": "2-4 hours",
            "onset": "15-45 minutes.",
            "summary": "An obscure substituted methylenedioxyphenethylamine with practically no history of human use. Its pharmacological profile is largely unknown, but potentially exhibits similar properties to other MDxx compounds. May be a monoamine releaser, reuptake inhibitor or both."
        }
    },
    "mdphp": {
        "aliases": [
            "monkey-dust"
        ],
        "categories": [
            "stimulant",
            "tentative",
            "habit-forming",
            "research-chemical"
        ],
        "dose_note": "NOTE: Dose data is tentative; There is a large variance in potency and composition of batches, and as such caution should be used when taking MDPHP. See ~mdphp summary ",
        "formatted_aftereffects": {
            "Insufflated/Inhaled": "2-36h",
            "Oral": "2-16h"
        },
        "formatted_dose": {
            "Insufflated/Inhaled": {
                "Common": "10-20mg",
                "Light": "5-10mg",
                "Strong": "20+mg"
            },
            "Oral": {
                "Common": "20-35mg",
                "Strong": "35+mg",
                "t": "10-20mg"
            }
        },
        "formatted_duration": {
            "Insufflated/Inhaled": "2-4",
            "Oral": "3-6",
            "_unit": "hours"
        },
        "formatted_effects": [
            "Stimulation",
            "Incresed Motivation",
            "Mood Enhancement",
            "Euphoria",
            "Sexual Enhancement",
            "Anxiety",
            "Paranoia",
            "Dry Mouth",
            "Muscle Tension",
            "Restlessness",
            "Uncomfortable Stimulation"
        ],
        "formatted_onset": {
            "Insufflated": "5-15",
            "Oral": "30-60",
            "_unit": "minutes"
        },
        "name": "mdphp",
        "pretty_name": "Mdphp",
        "properties": {
            "after-effects": "Oral: 2-16h | Insufflated/Inhaled: 2-36h",
            "aliases": [
                "monkey-dust"
            ],
            "categories": [
                "stimulant",
                "tentative",
                "habit-forming",
                "research-chemical"
            ],
            "dose": "NOTE: Dose data is tentative; There is a large variance in potency and composition of batches, and as such caution should be used when taking MDPHP. See ~mdphp summary | Oral Light: 10-20mg Common: 20-35mg Strong: 35+mg | Insufflated/Inhaled Light: 5-10mg Common: 10-20mg Strong: 20+mg",
            "duration": "Oral: 3-6 hours | Insufflated/Inhaled: 2-4 hours",
            "effects": "Stimulation, Incresed Motivation, Mood Enhancement, Euphoria, Sexual Enhancement, Anxiety, Paranoia, Dry Mouth, Muscle Tension, Restlessness, Uncomfortable Stimulation",
            "onset": "Oral: 30-60 minutes | Insufflated: 5-15 minutes",
            "onset:": "Oral: 2-36 minutes | Inflatted/Inhaled: 5-15 minutes",
            "summary": "MDPHP aka 'Monkey-Dust' is a substituted cathinone and pyrovalerone which has been sold as an alternative to a-PHP and MDPV. Said to be less intense than MDPV with similar effects. MDPHP potency is said to vary widely, and there are reports of mixed composition batches containing other drugs. Very little is known about MDPHP in terms of toxicity, pharmacology and metabolism."
        }
    },
    "mdpv": {
        "aliases": [
            "bath_salts"
        ],
        "categories": [
            "stimulant",
            "research-chemical",
            "habit-forming"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "2-48"
        },
        "formatted_dose": {
            "Insufflated": {
                "Common": "5-11mg",
                "Light": "2-5mg",
                "Strong": "10-20mg",
                "Threshold": "1-3mg"
            },
            "Oral": {
                "Common": "8-15mg",
                "Light": "4-10mg",
                "Strong": "12-25mg",
                "Threshold": "2-6mg"
            },
            "Rectal": {
                "Common": "6-12mg",
                "Light": "3-8mg",
                "Strong": "10-25mg",
                "Threshold": "1-5mg"
            }
        },
        "formatted_duration": {
            "Insufflated": "2-4",
            "Oral": "2-7",
            "_unit": "hours"
        },
        "formatted_effects": [
            "stimulation (mental and physical)",
            "euphoria",
            "increased mental clarity",
            "elevated heart rate",
            "headache",
            "confusion",
            "paranoia",
            "loss of apetite",
            "muscle tension"
        ],
        "formatted_onset": {
            "Insufflated": "5-20",
            "Oral": "15-30",
            "_unit": "minutes"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_MDPV.shtml"
        },
        "name": "mdpv",
        "pretty_name": "MDPV",
        "properties": {
            "after-effects": "2-48 hours",
            "aliases": [
                "bath_salts"
            ],
            "categories": [
                "stimulant",
                "research-chemical",
                "habit-forming"
            ],
            "dose": "Insufflated Threshold: 1-3mg  Light: 2-5mg  Common: 5-11mg  Strong: 10-20mg | Oral Threshold: 2-6mg  Light: 4-10mg  Common: 8-15mg  Strong: 12-25mg | Rectal Threshold: 1-5mg  Light: 3-8mg  Common: 6-12mg  Strong:  10-25mg",
            "duration": "Oral: 2-7 hours | Insufflated: 2-4 hours",
            "effects": "stimulation (mental and physical), euphoria, increased mental clarity, elevated heart rate, headache, confusion, paranoia, loss of apetite, muscle tension",
            "marquis": "Yellow",
            "onset": "Oral: 15-30 minutes | Insufflated: 5-20 minutes",
            "summary": "MDPV is a potent, and extremely compulsive synthetic euphoric stimulant, which shares some empathogenic effects with MDMA. Has a reputation for causing psychosis. MDPV has been found in products sold as \"bath salts\", \"plant food/fertilizer\", and in some \"ecstasy.\""
        },
        "sources": {
            "_general": [
                "Effect of synthetic cathinones: mephedrone, butylone and 3,4 methylene-dioxypyrovalerone (MDPV) on social separation induced distress vocalization,.. - http://www.ncbi.nlm.nih.gov/pubmed/25107736"
            ]
        }
    },
    "mebroqualone": {
        "aliases": [
            "mbq"
        ],
        "categories": [
            "depressant",
            "research-chemical",
            "habit-forming",
            "tentative"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-4"
        },
        "formatted_dose": {
            "Sublingual": {
                "Common": "8-15mg",
                "Light": "5-8mg",
                "Strong": "15-20mg.",
                "Threshold": "3-5mg"
            },
            "Vaporized": {
                "Common": "5-10mg",
                "Light": "3-5mg",
                "Strong": "10-20mg+",
                "Threshold": "2-3mg"
            }
        },
        "formatted_duration": {
            "Insufflated": "30-60",
            "Oral": "60-120",
            "Sublingual": "45-90",
            "Vapourized": "20-40",
            "_unit": "minutes"
        },
        "formatted_effects": [
            "Anxiolytic",
            "Sedative",
            "Muscle Relaxant",
            "Amnesia",
            "Dystaxia",
            "Hypnotic",
            ""
        ],
        "formatted_onset": {
            "Insufflated": "5-10",
            "Oral": "10-20",
            "Sublingual": "5-15",
            "Vapourized": "1-2",
            "_unit": "minutes"
        },
        "name": "mebroqualone",
        "pretty_name": "Mebroqualone",
        "properties": {
            "after-effects": "1-4 hours.",
            "aliases": [
                "mbq"
            ],
            "categories": [
                "depressant",
                "research-chemical",
                "habit-forming",
                "tentative"
            ],
            "dose": "Sublingual Threshold: 3-5mg  Light: 5-8mg  Common: 8-15mg  Strong: 15-20mg. | Vaporized Threshold: 2-3mg  Light: 3-5mg  Common: 5-10mg  Strong: 10-20mg+",
            "duration": "Oral: 60-120 minutes. | Sublingual: 45-90 minutes. | Insufflated: 30-60 minutes. | Vapourized: 20-40 minutes.",
            "effects": "Anxiolytic, Sedative, Muscle Relaxant, Amnesia, Dystaxia, Hypnotic.",
            "onset": "Oral: 10-20 minutes. | Sublingual: 5-15 minutes. | Insufflated: 5-10 minutes. | Vapourized: 1-2 minutes.",
            "summary": "A short acting analogue of Methaqualone, that is much more potent."
        }
    },
    "meclonazepam": {
        "categories": [
            "benzodiazepine",
            "habit-forming",
            "depressant",
            "tentative"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-6"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "3-6mg",
                "Heavy": "6-12mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "9-15"
        },
        "formatted_effects": [
            "Anxiolytic",
            "Sedative",
            "Muscle Relaxant",
            "Amnesia",
            "Dystaxia",
            "Hypnotic",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "20-60"
        },
        "name": "meclonazepam",
        "pretty_name": "Meclonazepam",
        "properties": {
            "after-effects": "1-6 hours.",
            "avoid": "All other CNS depressants.",
            "categories": [
                "benzodiazepine",
                "habit-forming",
                "depressant",
                "tentative"
            ],
            "dose": "Oral Light:1.50-3mg Common: 3-6mg Heavy: 6-12mg",
            "duration": "9-15 hours.",
            "effects": "Anxiolytic, Sedative, Muscle Relaxant, Amnesia, Dystaxia, Hypnotic.",
            "onset": "20-60 minutes",
            "summary": "A benzodiazepine related to clonazepam discovered by Hoffman-LaRoche in the 1960s. Potentially useful in treating schistosomiasis. Has been sold on the grey market as a recreational drug but has not seen widespread popularity."
        }
    },
    "medazepam": {
        "aliases": [
            "nobrium",
            "azepamid",
            "rudotel",
            "raporan",
            "mezapam",
            "talis"
        ],
        "categories": [
            "depressant",
            "benzodiazepine",
            "habit-forming"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-172"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "10-20mg",
                "Light": "5-10mg",
                "Strong": "20-40mg."
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "8-16"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "30-120"
        },
        "name": "medazepam",
        "pretty_name": "Medazepam",
        "properties": {
            "after-effects": "1-172 hours.",
            "aliases": [
                "nobrium",
                "azepamid",
                "rudotel",
                "raporan",
                "mezapam",
                "talis"
            ],
            "avoid": "All other CNS depressants.",
            "categories": [
                "depressant",
                "benzodiazepine",
                "habit-forming"
            ],
            "dose": "Light: 5-10mg Common: 10-20mg Strong: 20-40mg.",
            "dose_to_diazepam": "Medazepam - 10mg ~=10mg Diazepam.",
            "duration": "8-16 hours.",
            "onset": "30-120 minutes.",
            "summary": "Benzodiazepine derivative that has all of the classic benzodiazepine effects. Is a long-acting benzodiazepine drug (Half life of 36-200 hours) Is rarely prescribed in most countries. Is also a prodrug for Diazepam. Think of it as Desoxy-Diazepam if you'd like to."
        }
    },
    "melatonin": {
        "categories": [
            "nootropic",
            "common",
            "supplement"
        ],
        "formatted_dose": {
            "Oral": {
                "Common": ".3-1mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "6-8"
        },
        "formatted_onset": {
            "value": "Within"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_Melatonin.shtml",
            "tihkal": "https://www.erowid.org/library/books_online/tihkal/tihkal35.shtml"
        },
        "name": "melatonin",
        "pretty_name": "Melatonin",
        "properties": {
            "categories": [
                "nootropic",
                "common",
                "supplement"
            ],
            "dose": "Common: .3-1mg",
            "duration": "6-8 hours.",
            "onset": "Within an hour.",
            "summary": "A naturally occurring hormone produced in the body, which promotes sleep at certain times in the day based on the circadian rhythm. It is also commonly available as a drug to treat insomnia and promote a proper sleep cycle. It can be used to promote sleepfulness at the tail-end of drug experiences, though it is not particularly hypnotic."
        },
        "pweffects": {
            "Dream potentiation": "https://psychonautwiki.org/wiki/Dream_potentiation"
        },
        "sources": {
            "_general": [
                "Intranasal absorption of melatonin in vivo bioavailability study. - http://www.ncbi.nlm.nih.gov/pubmed/10332069",
                "Solubility and stability of melatonin in propylene glycol and 2-hydroxypropyl-beta-cyclodextrin vehicles. - http://www.ncbi.nlm.nih.gov/pubmed/18982260",
                "Melatonin, a potential therapeutic agent for smooth muscle-related pathological conditions and aging. - http://www.ncbi.nlm.nih.gov/pubmed/20939818",
                "Anxiolytic-like effects of a new 1-N substituted analog of melatonin in pinealectomized rats. - http://www.ncbi.nlm.nih.gov/pubmed/24495777",
                "Sleep-inducing effects of low doses of melatonin ingested in the evening. - http://www.ncbi.nlm.nih.gov/pubmed/7768078",
                "Anxiolytic activity of melatonin in mice: involvement of benzodiazepine receptors. - http://www.ncbi.nlm.nih.gov/pubmed/7905658"
            ],
            "dose": [
                "http://news.mit.edu/2001/melatonin-1017"
            ]
        }
    },
    "mem": {
        "categories": [
            "psychedelic",
            "research-chemical",
            "tentative"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-12"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "25-35mg",
                "Low": "15-25mg",
                "Strong": "35-45mg+.",
                "Threshold": "15mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "8-16"
        },
        "formatted_effects": [
            "Euphoria",
            "empathy",
            "insight",
            "brightened colour",
            "Closed/Open eye visuals",
            "enhanced tactile sensation",
            "mental/physical stimulation",
            "decreased appetite",
            "pupil dilation",
            "restlessness",
            "change in perception",
            "ego softening",
            "sweating/chills",
            "muscle tension",
            "confusion",
            "insomnia",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "Within"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_MEM.shtml",
            "pihkal": "https://www.erowid.org/library/books_online/pihkal/pihkal122.shtml"
        },
        "name": "mem",
        "pretty_name": "MEM",
        "properties": {
            "after-effects": "1-12 hours.",
            "categories": [
                "psychedelic",
                "research-chemical",
                "tentative"
            ],
            "dose": "Threshold: 15mg Low: 15-25mg Common: 25-35mg Strong: 35-45mg+.",
            "duration": "8-16 hours (Highly dependant on dose)",
            "effects": "Euphoria, empathy, insight, brightened colour, Closed/Open eye visuals, enhanced tactile sensation, mental/physical stimulation, decreased appetite, pupil dilation, restlessness, change in perception, ego softening, sweating/chills, muscle tension, confusion, insomnia.",
            "onset": "Within 60 minutes.",
            "summary": "A rare stimulant, psychedelic and amphetamine discovered by Alexander Shulgin. Related to the DOx class of drugs, little is known about this obscure compound's pharmacology, however it is likely to be potent and have a long duration."
        }
    },
    "memantine": {
        "categories": [
            "dissociative",
            "tentative"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-72"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "20-40mg",
                "Heavy": "40-80mg+",
                "Low": "10-20mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "12-72"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "30-90"
        },
        "name": "memantine",
        "pretty_name": "Memantine",
        "properties": {
            "after-effects": "1-72 hours.",
            "categories": [
                "dissociative",
                "tentative"
            ],
            "dose": "Oral Low: 10-20mg Common: 20-40mg Heavy: 40-80mg+",
            "duration": "12-72 hours",
            "onset": "30-90 minutes.",
            "summary": "An NMDA-antagonist that if used recreationally can cause to a very prolonged \"hole\" lasting up to 16+ hours."
        },
        "sources": {
            "_general": [
                "Memantine prevents aluminum-induced cognitive deficit in rats. - https://www.ncbi.nlm.nih.gov/pubmed/21741993"
            ]
        }
    },
    "mephedrone": {
        "aliases": [
            "4-mmc",
            "meow",
            "m-cat",
            "4-methylmethcathinone",
            "4mmc"
        ],
        "categories": [
            "stimulant",
            "research-chemical",
            "habit-forming",
            "empathogen"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "6-24"
        },
        "formatted_dose": {
            "Insufflated": {
                "Common": "20-80mg",
                "Heavy": "125mg+",
                "Light": "15-25mg",
                "Strong": "75-125mg"
            },
            "Oral": {
                "Common": "100-200mg",
                "Heavy": "300mg+",
                "Light": "50-100mg",
                "Strong": "150-300mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "2-3"
        },
        "formatted_effects": [
            "Generally described as being more intense of a stimulant than MDMA but with somewhat less of an empathogenic feel",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "15-45"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_4Methylmethcathinone.shtml"
        },
        "name": "mephedrone",
        "pretty_name": "Mephedrone",
        "properties": {
            "after-effects": "6-24 hours",
            "aliases": [
                "4-mmc",
                "meow",
                "m-cat",
                "4-methylmethcathinone",
                "4mmc"
            ],
            "categories": [
                "stimulant",
                "research-chemical",
                "habit-forming",
                "empathogen"
            ],
            "detection": "Mixed reports on whether the drug shows positive on standard drug tests.",
            "dose": "Oral  Light: 50-100mg Common: 100-200mg Strong: 150-300mg Heavy: 300mg+ | Insufflated  Light: 15-25mg Common: 20-80mg Strong: 75-125mg Heavy: 125mg+",
            "duration": "2-3 hours",
            "effects": "Generally described as being more intense of a stimulant than MDMA but with somewhat less of an empathogenic feel.",
            "onset": "15-45 minutes",
            "summary": "A shortlived euphoric stimulant, developed as an analogue of MDMA, which was extremely popular in the research chemical scene before being banned. Commonly seen on street markets but rarer online. Very strong urge to redose compulsively."
        },
        "pweffects": {
            "Analysis enhancement": "https://psychonautwiki.org/wiki/Analysis_enhancement",
            "Anxiety": "https://psychonautwiki.org/wiki/Anxiety",
            "Body odor alteration": "https://psychonautwiki.org/wiki/Body_odor_alteration",
            "Cognitive euphoria": "https://psychonautwiki.org/wiki/Cognitive_euphoria",
            "Cognitive fatigue": "https://psychonautwiki.org/wiki/Cognitive_fatigue",
            "Compulsive redosing": "https://psychonautwiki.org/wiki/Compulsive_redosing",
            "Dehydration": "https://psychonautwiki.org/wiki/Dehydration",
            "Depression": "https://psychonautwiki.org/wiki/Depression",
            "Difficulty urinating": "https://psychonautwiki.org/wiki/Difficulty_urinating",
            "Disinhibition": "https://psychonautwiki.org/wiki/Disinhibition",
            "Ego inflation": "https://psychonautwiki.org/wiki/Ego_inflation",
            "Empathy, love, and sociability enhancement": "https://psychonautwiki.org/wiki/Empathy,_love,_and_sociability_enhancement",
            "Increased blood pressure": "https://psychonautwiki.org/wiki/Increased_blood_pressure",
            "Increased heart rate": "https://psychonautwiki.org/wiki/Increased_heart_rate",
            "Increased libido": "https://psychonautwiki.org/wiki/Increased_libido",
            "Increased perspiration": "https://psychonautwiki.org/wiki/Increased_perspiration",
            "Irritability": "https://psychonautwiki.org/wiki/Irritability",
            "Motivation enhancement": "https://psychonautwiki.org/wiki/Motivation_enhancement",
            "Spontaneous tactile sensations": "https://psychonautwiki.org/wiki/Spontaneous_tactile_sensations",
            "Stimulation": "https://psychonautwiki.org/wiki/Stimulation",
            "Tactile enhancement": "https://psychonautwiki.org/wiki/Tactile_enhancement",
            "Teeth grinding": "https://psychonautwiki.org/wiki/Teeth_grinding",
            "Thought acceleration": "https://psychonautwiki.org/wiki/Thought_acceleration",
            "Thought deceleration": "https://psychonautwiki.org/wiki/Thought_deceleration",
            "Thought disorganization": "https://psychonautwiki.org/wiki/Thought_disorganization",
            "Time distortion": "https://psychonautwiki.org/wiki/Time_distortion",
            "Vasoconstriction": "https://psychonautwiki.org/wiki/Vasoconstriction",
            "Vibrating vision": "https://psychonautwiki.org/wiki/Vibrating_vision",
            "Wakefulness": "https://psychonautwiki.org/wiki/Wakefulness"
        },
        "sources": {
            "_general": [
                "Mephedrone toxicity has been clinically associated with seizures - http://emj.bmj.com/content/28/4/280.short"
            ]
        }
    },
    "mephenmetrazine": {
        "aliases": [
            "4-mpm",
            "4-methylphenmetrazine"
        ],
        "categories": [
            "stimulant",
            "research-chemical",
            "tentative",
            "habit-forming",
            "empathogen"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-8"
        },
        "formatted_dose": {
            "Insufflated": {
                "Common": "10-20mg",
                "Light": "5-10mg",
                "Strong": "20-25mg"
            },
            "Oral": {
                "Common": "15-25mg",
                "Light": "5-15mg",
                "Strong": "25-40mg."
            }
        },
        "formatted_duration": {
            "Insufflated": "2-3",
            "Oral": "3-5",
            "_unit": "hours"
        },
        "formatted_onset": {
            "Insufflated": "5-10",
            "Oral": "15-30",
            "_unit": "minutes"
        },
        "name": "mephenmetrazine",
        "pretty_name": "4-MPM",
        "properties": {
            "after-effects": "1-8 hours.",
            "aliases": [
                "4-mpm",
                "4-methylphenmetrazine"
            ],
            "avoid": "Other stimulants.",
            "categories": [
                "stimulant",
                "research-chemical",
                "tentative",
                "habit-forming",
                "empathogen"
            ],
            "dose": "Oral Light: 5-15mg Common: 15-25mg Strong: 25-40mg. | Insufflated Light: 5-10mg Common: 10-20mg Strong: 20-25mg's.",
            "duration": "Oral: 3-5 hours. | Insufflated 2-3 hours.",
            "onset": "Oral: 15-30 minutes. | Insufflated: 5-10 minutes.",
            "summary": "4-Methylphenmetrazine is an empathogen of the phenylmorpholine class that seems to have a very rapid tolerance build up."
        }
    },
    "mephtetramine": {
        "aliases": [
            "mtta"
        ],
        "categories": [
            "research-chemical",
            "tentative"
        ],
        "name": "mephtetramine",
        "pretty_name": "Mephtetramine",
        "properties": {
            "aliases": [
                "mtta"
            ],
            "categories": [
                "research-chemical",
                "tentative"
            ],
            "summary": "Has a Phenpropylamine backbone like Methylphenidate. Seems barely active past negative physical effects. Only reports that include activity past the prior were mixing it with another substance.",
            "warning": "Probably inactive. Please pm \"Hypnos\" if you have a trip report saying otherwise."
        }
    },
    "mescaline": {
        "aliases": [
            "buttons",
            "mesc",
            "san",
            "san-pedro"
        ],
        "categories": [
            "psychedelic",
            "common"
        ],
        "combos": {
            "2c-t-x": {
                "status": "Caution"
            },
            "2c-x": {
                "status": "Caution"
            },
            "5-meo-xxt": {
                "note": "The 5-MeO class of tryptamines can be unpredictable in their interactions",
                "status": "Caution"
            },
            "alcohol": {
                "status": "Low Risk & Decrease"
            },
            "amphetamines": {
                "note": "The focus and anxiety caused by stimulants is magnified by psychedelics and results in an increased risk of thought loops",
                "status": "Caution"
            },
            "amt": {
                "status": "Dangerous"
            },
            "benzodiazepines": {
                "status": "Low Risk & Decrease"
            },
            "benzos": {
                "status": "Low Risk & Decrease"
            },
            "caffeine": {
                "note": "High doses of caffeine are uncomfortable and this will be magnified by psychedelics",
                "status": "Low Risk & No Synergy"
            },
            "cannabis": {
                "note": "Cannabis has an unexpectedly strong and somewhat unpredictable synergy with psychedelics.",
                "status": "Caution"
            },
            "cocaine": {
                "note": "The focus and anxiety caused by stimulants is magnified by psychedelics and results in an increased risk of thought loops",
                "status": "Caution"
            },
            "dmt": {
                "status": "Low Risk & Synergy"
            },
            "dox": {
                "status": "Caution"
            },
            "dxm": {
                "status": "Low Risk & Synergy"
            },
            "ghb/gbl": {
                "status": "Low Risk & Decrease"
            },
            "ketamine": {
                "status": "Low Risk & Synergy"
            },
            "lsd": {
                "status": "Low Risk & Synergy"
            },
            "maois": {
                "status": "Caution"
            },
            "mdma": {
                "status": "Low Risk & Synergy"
            },
            "mushrooms": {
                "status": "Low Risk & Synergy"
            },
            "mxe": {
                "status": "Low Risk & Synergy"
            },
            "nbomes": {
                "status": "Caution"
            },
            "nitrous": {
                "status": "Low Risk & Synergy"
            },
            "opioids": {
                "status": "Low Risk & No Synergy"
            },
            "pcp": {
                "status": "Low Risk & Synergy"
            },
            "ssris": {
                "status": "Low Risk & Decrease"
            },
            "tramadol": {
                "note": "This combination can cause seizures due to the lowering of the threshold by tramadol and the potential of mescaline to cause seziures.",
                "status": "Unsafe"
            }
        },
        "dose_note": " NOTE: Doses are for Mescaline HCl",
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "3-5"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "200-300mg",
                "Heavy": "500-700mg+",
                "Light": "100-200mg",
                "Strong": "300-500mg",
                "Threshold": "100mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "6-12"
        },
        "formatted_effects": [
            "Euphoria",
            "empathy",
            "insight",
            "brightened colour",
            "Closed/Open eye visuals",
            "enhanced tactile sensation",
            "mental/physical stimulation",
            "decreased appetite",
            "pupil dilation",
            "restlessness",
            "change in perception",
            "ego softening",
            "sweating/chills",
            "muscle tension",
            "confusion",
            "insomnia",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "60-180"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_Mescaline.shtml"
        },
        "name": "mescaline",
        "pretty_name": "Mescaline",
        "properties": {
            "after-effects": "3-5 hours.",
            "aliases": [
                "buttons",
                "mesc",
                "san",
                "san-pedro"
            ],
            "categories": [
                "psychedelic",
                "common"
            ],
            "dose": "Oral Threshold: 100mg Light: 100-200mg Common: 200-300mg Strong: 300-500mg Heavy: 500-700mg+ | NOTE: Doses are for Mescaline HCl",
            "duration": "6-12 hours.",
            "effects": "Euphoria, empathy, insight, brightened colour, Closed/Open eye visuals, enhanced tactile sensation, mental/physical stimulation, decreased appetite, pupil dilation, restlessness, change in perception, ego softening, sweating/chills, muscle tension, confusion, insomnia.",
            "marquis": "Strong orange",
            "onset": "60-180 minutes, sometimes longer.",
            "summary": "A psychedelic of the phenethylamine family. Found in psychedelic cacti that have long been used by peoples native to the Southwestern US and Mexico, including Peyote and San Pedro cacti, among others. Can be found as cactus pulp, as an extract from cacti, or as a synthetic substance created in a lab."
        },
        "pweffects": {
            "8B Geometry - Exposure to inner mechanics of consciousness": "https://psychonautwiki.org/wiki/8B_Geometry_-_Exposure_to_inner_mechanics_of_consciousness",
            "Acuity enhancement": "https://psychonautwiki.org/wiki/Acuity_enhancement",
            "After images": "https://psychonautwiki.org/wiki/After_images",
            "Analysis enhancement": "https://psychonautwiki.org/wiki/Analysis_enhancement",
            "Auditory distortion": "https://psychonautwiki.org/wiki/Auditory_distortion",
            "Auditory enhancement": "https://psychonautwiki.org/wiki/Auditory_enhancement",
            "Auditory hallucinations": "https://psychonautwiki.org/wiki/Auditory_hallucinations",
            "Autonomous entities": "https://psychonautwiki.org/wiki/Autonomous_entities",
            "Bodily control enhancement": "https://psychonautwiki.org/wiki/Bodily_control_enhancement",
            "Colour enhancement": "https://psychonautwiki.org/wiki/Colour_enhancement",
            "Colour shifting": "https://psychonautwiki.org/wiki/Colour_shifting",
            "Conceptual thinking": "https://psychonautwiki.org/wiki/Conceptual_thinking",
            "Delusions": "https://psychonautwiki.org/wiki/Delusions",
            "Drifting": "https://psychonautwiki.org/wiki/Drifting",
            "Emotion enhancement": "https://psychonautwiki.org/wiki/Emotion_enhancement",
            "Feelings of interdependent opposites": "https://psychonautwiki.org/wiki/Feelings_of_interdependent_opposites",
            "Geometry": "https://psychonautwiki.org/wiki/Geometry",
            "Immersion enhancement": "https://psychonautwiki.org/wiki/Immersion_enhancement",
            "Increased heart rate": "https://psychonautwiki.org/wiki/Increased_heart_rate",
            "Internal hallucinations": "https://psychonautwiki.org/wiki/Internal_hallucinations",
            "Memory suppression": "https://psychonautwiki.org/wiki/Memory_suppression",
            "Nausea": "https://psychonautwiki.org/wiki/Nausea",
            "Novelty enhancement": "https://psychonautwiki.org/wiki/Novelty_enhancement",
            "Pattern recognition enhancement": "https://psychonautwiki.org/wiki/Pattern_recognition_enhancement",
            "Personal bias suppression": "https://psychonautwiki.org/wiki/Personal_bias_suppression",
            "Personal meaning enhancement": "https://psychonautwiki.org/wiki/Personal_meaning_enhancement",
            "Perspective alterations": "https://psychonautwiki.org/wiki/Perspective_alterations",
            "Physical euphoria": "https://psychonautwiki.org/wiki/Physical_euphoria",
            "Pupil dilation": "https://psychonautwiki.org/wiki/Pupil_dilation",
            "Scenarios and plots": "https://psychonautwiki.org/wiki/Scenarios_and_plots",
            "Scenery slicing": "https://psychonautwiki.org/wiki/Scenery_slicing",
            "Settings, sceneries, and landscapes": "https://psychonautwiki.org/wiki/Settings,_sceneries,_and_landscapes",
            "Spirituality enhancement": "https://psychonautwiki.org/wiki/Spirituality_enhancement",
            "Spontaneous tactile sensations": "https://psychonautwiki.org/wiki/Spontaneous_tactile_sensations",
            "Stimulation": "https://psychonautwiki.org/wiki/Stimulation",
            "Suggestibility enhancement": "https://psychonautwiki.org/wiki/Suggestibility_enhancement",
            "Symmetrical texture repetition": "https://psychonautwiki.org/wiki/Symmetrical_texture_repetition",
            "Synaesthesia": "https://psychonautwiki.org/wiki/Synaesthesia",
            "Tactile enhancement": "https://psychonautwiki.org/wiki/Tactile_enhancement",
            "Thought acceleration": "https://psychonautwiki.org/wiki/Thought_acceleration",
            "Thought loops": "https://psychonautwiki.org/wiki/Thought_loops",
            "Time distortion": "https://psychonautwiki.org/wiki/Time_distortion",
            "Tracers": "https://psychonautwiki.org/wiki/Tracers",
            "Transformations": "https://psychonautwiki.org/wiki/Transformations",
            "Unity and interconnectedness": "https://psychonautwiki.org/wiki/Unity_and_interconnectedness",
            "Wakefulness": "https://psychonautwiki.org/wiki/Wakefulness"
        },
        "sources": {
            "_general": [
                "CLINICAL SYNDROMES AND BIOCHEMICAL ALTERATIONS FOLLOWING MESCALINE, LYSERGIC ACID DIETHYLAMIDE, PSILOCYBIN AND A COMBINATION OF THE THREE PSYCHOTOM.. - http://www.ncbi.nlm.nih.gov/pubmed/14156873"
            ]
        }
    },
    "met": {
        "aliases": [
            "methylethyltryptamine"
        ],
        "categories": [
            "psychedelic",
            "research-chemical",
            "tentative"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-6"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "20-25mg",
                "Light": "10-20mg",
                "Strong": "25-30mg+"
            }
        },
        "formatted_duration": {
            "Insufflated": "2-3",
            "Oral": "4-6",
            "Smoked": "0.5-1",
            "_unit": "hours"
        },
        "formatted_effects": [
            "Euphoria",
            "empathy",
            "insight",
            "brightened colour",
            "Closed/Open eye visuals",
            "enhanced tactile sensation",
            "mental/physical stimulation",
            "decreased appetite",
            "pupil dilation",
            "restlessness",
            "change in perception",
            "ego softening",
            "sweating/chills",
            "muscle tension",
            "confusion",
            "insomnia",
            ""
        ],
        "formatted_onset": {
            "Insufflated": "10-15",
            "Oral": "60-90",
            "Smoked": "5-10",
            "_unit": "minutes"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_MET.shtml"
        },
        "name": "met",
        "pretty_name": "MET",
        "properties": {
            "after-effects": "1-6 hours.",
            "aliases": [
                "methylethyltryptamine"
            ],
            "categories": [
                "psychedelic",
                "research-chemical",
                "tentative"
            ],
            "dose": "Oral Light: 60-80mg Common: 80-120mg Strong: 120mg+ Insufflated Light: 10-15mg Common: 15-20mg Strong: 20-25mg+ Vaporized Light: 10-20mg Common: 20-25mg Strong: 25-30mg+",
            "duration": "Oral: 4-6 hours. | Insufflated: 2-3 hours. | Smoked: 0.5-1 hours.",
            "effects": "Euphoria, empathy, insight, brightened colour, Closed/Open eye visuals, enhanced tactile sensation, mental/physical stimulation, decreased appetite, pupil dilation, restlessness, change in perception, ego softening, sweating/chills, muscle tension, confusion, insomnia.",
            "onset": "Oral: 60-90 minutes. | Insufflated: 10-15 minutes. | Smoked: 5-10 minutes.",
            "summary": "A rare psychedelic tryptamine, related to DMT and DET. Little information exists about the effects or pharmacology of this drug."
        }
    },
    "metaclazepam": {
        "categories": [
            "habit-forming",
            "tentative",
            "depressant"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-24"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "18.75mg",
                "Light": "9.5mg-18.75mg",
                "Strong": "35-50mg+"
            }
        },
        "formatted_onset": {
            "_unit": "hours",
            "value": "duration"
        },
        "name": "metaclazepam",
        "pretty_name": "Metaclazepam",
        "properties": {
            "after-effects": "1-24 hours.",
            "avoid": "All other CNS depressants.",
            "categories": [
                "habit-forming",
                "tentative",
                "depressant"
            ],
            "dose": "Oral Light: 9.5mg-18.75mg's. Common: 18.75mg's-35mg Strong: 35-50mg+",
            "onset": "duration 6-16 hours.",
            "summary": "A benzodiazepine derivative. Which is mostly an anxiolytic substance, without strong hypnotic properties that most benzodiazepines have. Its active metabolite is N-desmethylmetaclazepam, which is the main metabolite. Slightly more effective as an anxiolytic than Bromazepam."
        }
    },
    "metaxalone": {
        "aliases": [
            "skelaxin"
        ],
        "categories": [
            "depressant"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-8"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "800-1600mg.",
                "Light": "400-800mg.",
                "Strong": "1600-2400mg."
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "4-8"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "15-45"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_Metaxalone.shtml"
        },
        "name": "metaxalone",
        "pretty_name": "Metaxalone",
        "properties": {
            "after-effects": "1-8 hours.",
            "aliases": [
                "skelaxin"
            ],
            "categories": [
                "depressant"
            ],
            "dose": "Oral Light: 400-800mg. Common: 800-1600mg. Strong: 1600-2400mg.",
            "duration": "4-8 hours.",
            "onset": "15-45 minutes.",
            "summary": "Muscle relaxant, that is used to relieve pain from general pain, and other musculoskeletal conditions."
        }
    },
    "methadone": {
        "categories": [
            "opioid",
            "habit-forming",
            "depressant",
            "common"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-48"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "10-20mg",
                "Light": "5-10mg",
                "NOTE": "these",
                "Strong": "20-35mg+"
            }
        },
        "formatted_duration": {
            "_unit": "hours"
        },
        "formatted_effects": [
            "Euphoria",
            "Dry Mouth",
            "Mood lift",
            "Itchiness",
            "Relaxant",
            "Constipation",
            "Pupil constriction",
            "Analgesia",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "45-120"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_Methadone.shtml"
        },
        "name": "methadone",
        "pretty_name": "Methadone",
        "properties": {
            "after-effects": "1-48 hours.",
            "avoid": "All other CNS depressants",
            "bioavailability": "Oral 75-97% (Mean 86%) | Rectal 70-81% (Mean 76%)",
            "categories": [
                "opioid",
                "habit-forming",
                "depressant",
                "common"
            ],
            "dose": "Light: 5-10mg Common: 10-20mg Strong: 20-35mg+ NOTE: these doses are not intended for opioid-na\u00efve users. 40mg could be lethal for a na\u00efve user. Always start low and titrate /slowly/",
            "duration": "Oral 6-12 hours. NOTE: Can last much longer. Mostly dependant if using Chronically or not.",
            "effects": "Euphoria, Dry Mouth, Mood lift, Itchiness, Relaxant, Constipation, Pupil constriction, Analgesia.",
            "half-life": "12-18 hours on the first dose 13-47 on concurrent",
            "onset": "45-120 minutes.",
            "summary": "A synthetic opioid drug used as an analgesic and is often used in detoxification off of other opioids. As it has a much longer half-life."
        },
        "sources": {
            "_general": [
                "Methadone trials have proven successful in treating Heroin addiction - http://jamanetwork.com/journals/jama/article-abstract/656315"
            ]
        }
    },
    "methallylescaline": {
        "aliases": [
            "mal"
        ],
        "categories": [
            "psychedelic",
            "research-chemical"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "3-5"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "25-40mg",
                "Heavy": "40mg+",
                "Low": "15-25mg",
                "Threshold": "10-15mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "6-12"
        },
        "formatted_effects": [
            "Euphoria",
            "empathy",
            "insight",
            "brightened colour",
            "Closed/Open eye visuals",
            "enhanced tactile sensation",
            "mental/physical stimulation",
            "decreased appetite",
            "pupil dilation",
            "restlessness",
            "change in perception",
            "ego softening",
            "sweating/chills",
            "muscle tension",
            "confusion",
            "insomnia",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "20-60"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_Methallylescaline.shtml",
            "pihkal": "https://www.erowid.org/library/books_online/pihkal/pihkal099.shtml"
        },
        "name": "methallylescaline",
        "pretty_name": "Methallylescaline",
        "properties": {
            "after-effects": "3-5 hours.",
            "aliases": [
                "mal"
            ],
            "categories": [
                "psychedelic",
                "research-chemical"
            ],
            "dose": "Oral Threshold: 10-15mg Low: 15-25mg Common: 25-40mg Heavy: 40mg+",
            "duration": "6-12 hours Varies GREATLY on dose.",
            "effects": "Euphoria, empathy, insight, brightened colour, Closed/Open eye visuals, enhanced tactile sensation, mental/physical stimulation, decreased appetite, pupil dilation, restlessness, change in perception, ego softening, sweating/chills, muscle tension, confusion, insomnia.",
            "onset": "20-60 minutes.",
            "summary": "Mescaline analogue first synthesised by Alexander Shulgin, derived from and less potent than allylescaline. A psychedelic phenethylamine which causes stimulation, euphoria and hallucinatory experiences."
        },
        "pweffects": {
            "Acuity enhancement": "https://psychonautwiki.org/wiki/Acuity_enhancement",
            "After images": "https://psychonautwiki.org/wiki/After_images",
            "Analysis enhancement": "https://psychonautwiki.org/wiki/Analysis_enhancement",
            "Auditory distortion": "https://psychonautwiki.org/wiki/Auditory_distortion",
            "Auditory enhancement": "https://psychonautwiki.org/wiki/Auditory_enhancement",
            "Auditory hallucinations": "https://psychonautwiki.org/wiki/Auditory_hallucinations",
            "Autonomous entities": "https://psychonautwiki.org/wiki/Autonomous_entities",
            "Bodily control enhancement": "https://psychonautwiki.org/wiki/Bodily_control_enhancement",
            "Colour enhancement": "https://psychonautwiki.org/wiki/Colour_enhancement",
            "Colour shifting": "https://psychonautwiki.org/wiki/Colour_shifting",
            "Conceptual thinking": "https://psychonautwiki.org/wiki/Conceptual_thinking",
            "Delusions": "https://psychonautwiki.org/wiki/Delusions",
            "Drifting": "https://psychonautwiki.org/wiki/Drifting",
            "Emotion enhancement": "https://psychonautwiki.org/wiki/Emotion_enhancement",
            "Geometry": "https://psychonautwiki.org/wiki/Geometry",
            "Immersion enhancement": "https://psychonautwiki.org/wiki/Immersion_enhancement",
            "Internal hallucinations": "https://psychonautwiki.org/wiki/Internal_hallucinations",
            "Memory suppression": "https://psychonautwiki.org/wiki/Memory_suppression",
            "Nausea": "https://psychonautwiki.org/wiki/Nausea",
            "Novelty enhancement": "https://psychonautwiki.org/wiki/Novelty_enhancement",
            "Pattern recognition enhancement": "https://psychonautwiki.org/wiki/Pattern_recognition_enhancement",
            "Personal bias suppression": "https://psychonautwiki.org/wiki/Personal_bias_suppression",
            "Perspective alterations": "https://psychonautwiki.org/wiki/Perspective_alterations",
            "Pupil dilation": "https://psychonautwiki.org/wiki/Pupil_dilation",
            "Scenarios and plots": "https://psychonautwiki.org/wiki/Scenarios_and_plots",
            "Scenery slicing": "https://psychonautwiki.org/wiki/Scenery_slicing",
            "Settings, sceneries, and landscapes": "https://psychonautwiki.org/wiki/Settings,_sceneries,_and_landscapes",
            "Spontaneous tactile sensations": "https://psychonautwiki.org/wiki/Spontaneous_tactile_sensations",
            "Stimulation": "https://psychonautwiki.org/wiki/Stimulation",
            "Symmetrical texture repetition": "https://psychonautwiki.org/wiki/Symmetrical_texture_repetition",
            "Tactile enhancement": "https://psychonautwiki.org/wiki/Tactile_enhancement",
            "Thought acceleration": "https://psychonautwiki.org/wiki/Thought_acceleration",
            "Thought disorganization": "https://psychonautwiki.org/wiki/Thought_disorganization",
            "Thought loops": "https://psychonautwiki.org/wiki/Thought_loops",
            "Time distortion": "https://psychonautwiki.org/wiki/Time_distortion",
            "Tracers": "https://psychonautwiki.org/wiki/Tracers",
            "Transformations": "https://psychonautwiki.org/wiki/Transformations",
            "Wakefulness": "https://psychonautwiki.org/wiki/Wakefulness"
        }
    },
    "methamnetamine": {
        "aliases": [
            "methylnaphetamine",
            "mnt",
            "n-methyl-pal-287"
        ],
        "categories": [
            "psychedelic",
            "stimulant",
            "research-chemical",
            "tentative",
            "empathogen",
            "habit-forming"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-6"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "80-120mg",
                "Heavy": "150mg+",
                "Light": "60-80mg",
                "Strong": "120-150mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "3-6"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "10-30"
        },
        "name": "methamnetamine",
        "pretty_name": "Methamnetamine",
        "properties": {
            "after-effects": "1-6 hours.",
            "aliases": [
                "methylnaphetamine",
                "mnt",
                "n-methyl-pal-287"
            ],
            "categories": [
                "psychedelic",
                "stimulant",
                "research-chemical",
                "tentative",
                "empathogen",
                "habit-forming"
            ],
            "dose": "Oral Light: 60-80mg Common: 80-120mg Strong: 120-150mg Heavy: 150mg+",
            "duration": "3-6 hours.",
            "onset": "10-30 minutes.",
            "summary": "A selective serotonin releaser, which also shows some light psychedelic activity. Almost always taken with a stimulant, to cause euphoric effects."
        }
    },
    "methamphetamine": {
        "aliases": [
            "meth",
            "desoxyn",
            "tik"
        ],
        "categories": [
            "stimulant",
            "habit-forming",
            "common"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "24"
        },
        "formatted_dose": {
            "IV": {
                "Common": "10-20mg",
                "Heavy": "40mg+",
                "Light": "5-10mg",
                "Strong": "20-40mg"
            },
            "Insufflated": {
                "Common": "10-30mg",
                "Heavy": "50mg+",
                "Light": "5-10mg",
                "Strong": "30-50mg"
            },
            "Oral": {
                "Common": "10-30mg",
                "Heavy": "40-100mg",
                "Light": "5-10mg",
                "Strong": "20-40mg"
            },
            "Smoked": {
                "Common": "10-20mg",
                "Heavy": "50mg+",
                "Light": "5-10mg",
                "Strong": "30-60mg"
            }
        },
        "formatted_duration": {
            "Insufflated": "8-10",
            "Oral": "10-12",
            "Smoked": "3-8",
            "_unit": "hours"
        },
        "formatted_effects": [
            "increased energy/alertness",
            "Decreased need for sleep",
            "Increased sociability",
            "mood lift",
            "increase sexuality",
            "Excessive talking",
            "Decreased appetite",
            "Weight loss",
            "Sweating",
            "Distrubed sleep patterns",
            "Bruxia",
            "Visual and audiotory hallucinations itchiness",
            "agressiveness",
            "moodiness",
            "fatal kidney disorder",
            "possible brain damage liver damage",
            ""
        ],
        "formatted_onset": {
            "IV": "0-2",
            "Insufflated": "5-10",
            "Oral": "20-70",
            "Smoked": "0-2",
            "_unit": "minutes"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_Methamphetamine.shtml"
        },
        "name": "methamphetamine",
        "pretty_name": "Methamphetamine",
        "properties": {
            "after-effects": "24 hours for all routes of administration. After effects may last longer if a user redoses.",
            "aliases": [
                "meth",
                "desoxyn",
                "tik"
            ],
            "avoid": "Rinsing mouth with mouthwash high in alcohol due to drying effects; using sugar filled chewing gum; usage within 14 days of MAOI - Also: Just avoid meth in the first place. Please.",
            "bioavailability": "Oral 55-62.7% | Insufflated 75-80% | Vapourized 67-90.3%.",
            "categories": [
                "stimulant",
                "habit-forming",
                "common"
            ],
            "dose": "Oral Light: 5-10mg Common: 10-30mg Strong: 20-40mg Heavy: 40-100mg | Insufflated Light: 5-10mg Common: 10-30mg Strong: 30-50mg Heavy: 50mg+ | Smoked Light: 5-10mg Common: 10-20mg Strong: 30-60mg Heavy: 50mg+ | IV Light: 5-10mg Common: 10-20mg Strong: 20-40mg Heavy: 40mg+",
            "duration": "Oral: 10-12 hours | Insufflated: 8-10 hours | Smoked: 3-8 hours | IV: 6-10 hours *NOTE: Check ~after-effects*",
            "effects": "increased energy/alertness, Decreased need for sleep, Increased sociability, mood lift, increase sexuality, Excessive talking, Decreased appetite, Weight loss, Sweating, Distrubed sleep patterns, Bruxia, Visual and audiotory hallucinations itchiness, agressiveness, moodiness, fatal kidney disorder, possible brain damage liver damage.",
            "marquis": "Deep reddish orange - Dark reddish brown",
            "onset": "Oral: 20-70 minutes | Insufflated: 5-10 minutes | Smoked: 0-2 minutes | IV: 0-2 minutes",
            "summary": "A fairly common and very strong CNS stimulant. It is sometimes prescribed in the form of desoxyn for ADHD and severe obesity. In low doses, methamphetamine can elevate mood, increase alertness, concentration, energy and reduces appetite. At higher doses, it can induce mania, psychosis and muscle degeneration among other issues. Tolerant users may report much higher doses than new users."
        },
        "pweffects": {
            "Abnormal heartbeat": "https://psychonautwiki.org/wiki/Abnormal_heartbeat",
            "Analysis enhancement": "https://psychonautwiki.org/wiki/Analysis_enhancement",
            "Anxiety": "https://psychonautwiki.org/wiki/Anxiety",
            "Appetite suppression": "https://psychonautwiki.org/wiki/Appetite_suppression",
            "Body odor alteration": "https://psychonautwiki.org/wiki/Body_odor_alteration",
            "Bronchodilation": "https://psychonautwiki.org/wiki/Bronchodilation",
            "Cognitive euphoria": "https://psychonautwiki.org/wiki/Cognitive_euphoria",
            "Cognitive fatigue": "https://psychonautwiki.org/wiki/Cognitive_fatigue",
            "Compulsive redosing": "https://psychonautwiki.org/wiki/Compulsive_redosing",
            "Dehydration": "https://psychonautwiki.org/wiki/Dehydration",
            "Depression": "https://psychonautwiki.org/wiki/Depression",
            "Ego inflation": "https://psychonautwiki.org/wiki/Ego_inflation",
            "Focus enhancement": "https://psychonautwiki.org/wiki/Focus_enhancement",
            "Frequent urination": "https://psychonautwiki.org/wiki/Frequent_urination",
            "Increased blood pressure": "https://psychonautwiki.org/wiki/Increased_blood_pressure",
            "Increased heart rate": "https://psychonautwiki.org/wiki/Increased_heart_rate",
            "Increased libido": "https://psychonautwiki.org/wiki/Increased_libido",
            "Increased perspiration": "https://psychonautwiki.org/wiki/Increased_perspiration",
            "Irritability": "https://psychonautwiki.org/wiki/Irritability",
            "Memory enhancement": "https://psychonautwiki.org/wiki/Memory_enhancement",
            "Motivation enhancement": "https://psychonautwiki.org/wiki/Motivation_enhancement",
            "Nausea": "https://psychonautwiki.org/wiki/Nausea",
            "Stimulation": "https://psychonautwiki.org/wiki/Stimulation",
            "Teeth grinding": "https://psychonautwiki.org/wiki/Teeth_grinding",
            "Temporary erectile dysfunction": "https://psychonautwiki.org/wiki/Temporary_erectile_dysfunction",
            "Thought acceleration": "https://psychonautwiki.org/wiki/Thought_acceleration",
            "Thought deceleration": "https://psychonautwiki.org/wiki/Thought_deceleration",
            "Thought organization": "https://psychonautwiki.org/wiki/Thought_organization",
            "Vasoconstriction": "https://psychonautwiki.org/wiki/Vasoconstriction",
            "Wakefulness": "https://psychonautwiki.org/wiki/Wakefulness"
        },
        "sources": {
            "_general": [
                "Comparison of intranasal methamphetamine and d-amphetamine self-administration by humans. -https://www.ncbi.nlm.nih.gov/pubmed/22050030",
                "Methamphetamine or desoxyn should not be used within 14 days of using a MAOI drug - Mosby's Dental Drug Reference Ninth Edition 2010",
                "Meth/desoxyn usage for long periods of time in children or people who have not finished growing will cause temporary suppression of weight and height growth - Mosby's Dental Drug Reference 9th Ed. 2010"
            ]
        }
    },
    "methaqualone": {
        "aliases": [
            "ludes",
            "quaaludes",
            "qualudes",
            "mandrax"
        ],
        "categories": [
            "depressant",
            "habit-forming"
        ],
        "dose_note": " NOTE: Do not take more than 300mg without a tolerance.",
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "4-6"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "150-300mg",
                "Light": "75-150mg",
                "Strong": "300mg+"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "5-8"
        },
        "formatted_effects": [
            "Anxiolytic",
            "Sedative",
            "Muscle Relaxant",
            "Amnesia",
            "Dystaxia",
            "Hypnotic",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "30-45"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_Methaqualone.shtml"
        },
        "name": "methaqualone",
        "pretty_name": "Methaqualone",
        "properties": {
            "after-effects": "4-6 hours.",
            "aliases": [
                "ludes",
                "quaaludes",
                "qualudes",
                "mandrax"
            ],
            "avoid": "All other CNS depressants.",
            "categories": [
                "depressant",
                "habit-forming"
            ],
            "dose": "Oral Light: 75-150mg Common: 150-300mg Strong: 300mg+ | NOTE: Do not take more than 300mg without a tolerance.",
            "duration": "5-8 hours.",
            "effects": "Anxiolytic, Sedative, Muscle Relaxant, Amnesia, Dystaxia, Hypnotic.",
            "onset": "30-45 minutes",
            "summary": "A pharmaceutical depressant and sedative phased out due to the better safety profile of benzodiazepines, part of the Qualone group of substances. Now very rare, except in South Africa."
        },
        "pweffects": {
            "Acuity suppression": "https://psychonautwiki.org/wiki/Acuity_suppression",
            "Anxiety suppression": "https://psychonautwiki.org/wiki/Anxiety_suppression",
            "Changes in gravity": "https://psychonautwiki.org/wiki/Changes_in_gravity",
            "Cognitive euphoria": "https://psychonautwiki.org/wiki/Cognitive_euphoria",
            "Compulsive redosing": "https://psychonautwiki.org/wiki/Compulsive_redosing",
            "Constipation": "https://psychonautwiki.org/wiki/Constipation",
            "Disinhibition": "https://psychonautwiki.org/wiki/Disinhibition",
            "Dizziness": "https://psychonautwiki.org/wiki/Dizziness",
            "Double vision": "https://psychonautwiki.org/wiki/Double_vision",
            "Dream potentiation": "https://psychonautwiki.org/wiki/Dream_potentiation",
            "Increased libido": "https://psychonautwiki.org/wiki/Increased_libido",
            "Information processing suppression": "https://psychonautwiki.org/wiki/Information_processing_suppression",
            "Internal hallucinations": "https://psychonautwiki.org/wiki/Internal_hallucinations",
            "Motor control loss": "https://psychonautwiki.org/wiki/Motor_control_loss",
            "Muscle relaxation": "https://psychonautwiki.org/wiki/Muscle_relaxation",
            "Physical euphoria": "https://psychonautwiki.org/wiki/Physical_euphoria",
            "Respiratory depression": "https://psychonautwiki.org/wiki/Respiratory_depression",
            "Sedation": "https://psychonautwiki.org/wiki/Sedation",
            "Subconscious communication": "https://psychonautwiki.org/wiki/Subconscious_communication",
            "Thought deceleration": "https://psychonautwiki.org/wiki/Thought_deceleration",
            "Visual disconnection": "https://psychonautwiki.org/wiki/Visual_disconnection"
        }
    },
    "methedrone": {
        "aliases": [
            "bk-pmma"
        ],
        "categories": [
            "stimulant",
            "research-chemical",
            "habit-forming"
        ],
        "name": "methedrone",
        "pretty_name": "Methedrone",
        "properties": {
            "aliases": [
                "bk-pmma"
            ],
            "categories": [
                "stimulant",
                "research-chemical",
                "habit-forming"
            ],
            "summary": "BK-PMMA Closely related to PMMA and others. Stimulant."
        }
    },
    "methoxphenidine": {
        "aliases": [
            "2-meo-diphenidine",
            "methoxyphenidine",
            "2-mxp",
            "mxp"
        ],
        "categories": [
            "dissociative",
            "research-chemical",
            "tentative",
            "habit-forming"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-3"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "75-120mg",
                "Light": "50-75mg",
                "Strong": "120-150mg+",
                "Threshold": "30-50mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "6-8"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "30-60"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_Methoxphenidine.shtml"
        },
        "name": "methoxphenidine",
        "pretty_name": "Methoxphenidine",
        "properties": {
            "after-effects": "1-3 hours, but all the time in the world young padawan.",
            "aliases": [
                "2-meo-diphenidine",
                "methoxyphenidine",
                "2-mxp",
                "mxp"
            ],
            "categories": [
                "dissociative",
                "research-chemical",
                "tentative",
                "habit-forming"
            ],
            "dose": "Threshold: 30-50mg Light: 50-75mg Common: 75-120mg Strong: 120-150mg+",
            "duration": "6-8 hours",
            "onset": "30-60 minutes.",
            "summary": "A dissociative from the diarylethylamine class, a more potent analogue of diphenidine. Known to be unpredictable, and can cause blackouts."
        },
        "pweffects": {
            "Acuity suppression": "https://psychonautwiki.org/wiki/Acuity_suppression",
            "Amnesia": "https://psychonautwiki.org/wiki/Amnesia",
            "Anxiety suppression": "https://psychonautwiki.org/wiki/Anxiety_suppression",
            "Auditory distortion": "https://psychonautwiki.org/wiki/Auditory_distortion",
            "Auditory hallucinations": "https://psychonautwiki.org/wiki/Auditory_hallucinations",
            "Auditory suppression": "https://psychonautwiki.org/wiki/Auditory_suppression",
            "Autonomous entities": "https://psychonautwiki.org/wiki/Autonomous_entities",
            "Cognitive euphoria": "https://psychonautwiki.org/wiki/Cognitive_euphoria",
            "Conceptual thinking": "https://psychonautwiki.org/wiki/Conceptual_thinking",
            "Consciousness disconnection": "https://psychonautwiki.org/wiki/Consciousness_disconnection",
            "Depersonalization": "https://psychonautwiki.org/wiki/Depersonalization",
            "Derealization": "https://psychonautwiki.org/wiki/Derealization",
            "Disinhibition": "https://psychonautwiki.org/wiki/Disinhibition",
            "Dizziness": "https://psychonautwiki.org/wiki/Dizziness",
            "Double vision": "https://psychonautwiki.org/wiki/Double_vision",
            "Environmental cubism": "https://psychonautwiki.org/wiki/Environmental_cubism",
            "Environmental orbism": "https://psychonautwiki.org/wiki/Environmental_orbism",
            "Frame rate suppression": "https://psychonautwiki.org/wiki/Frame_rate_suppression",
            "Geometry": "https://psychonautwiki.org/wiki/Geometry",
            "Information processing suppression": "https://psychonautwiki.org/wiki/Information_processing_suppression",
            "Internal hallucinations": "https://psychonautwiki.org/wiki/Internal_hallucinations",
            "Memory suppression": "https://psychonautwiki.org/wiki/Memory_suppression",
            "Motor control loss": "https://psychonautwiki.org/wiki/Motor_control_loss",
            "Pattern recognition suppression": "https://psychonautwiki.org/wiki/Pattern_recognition_suppression",
            "Perception of decreased weight": "https://psychonautwiki.org/wiki/Perception_of_decreased_weight",
            "Perspective alterations": "https://psychonautwiki.org/wiki/Perspective_alterations",
            "Perspective distortions": "https://psychonautwiki.org/wiki/Perspective_distortions",
            "Physical autonomy": "https://psychonautwiki.org/wiki/Physical_autonomy",
            "Physical euphoria": "https://psychonautwiki.org/wiki/Physical_euphoria",
            "Scenarios and plots": "https://psychonautwiki.org/wiki/Scenarios_and_plots",
            "Scenery slicing": "https://psychonautwiki.org/wiki/Scenery_slicing",
            "Settings, sceneries, and landscapes": "https://psychonautwiki.org/wiki/Settings,_sceneries,_and_landscapes",
            "Spontaneous tactile sensations": "https://psychonautwiki.org/wiki/Spontaneous_tactile_sensations",
            "Tactile disconnection": "https://psychonautwiki.org/wiki/Tactile_disconnection",
            "Tactile suppression": "https://psychonautwiki.org/wiki/Tactile_suppression",
            "Thought acceleration": "https://psychonautwiki.org/wiki/Thought_acceleration",
            "Thought deceleration": "https://psychonautwiki.org/wiki/Thought_deceleration",
            "Time distortion": "https://psychonautwiki.org/wiki/Time_distortion",
            "Visual disconnection": "https://psychonautwiki.org/wiki/Visual_disconnection"
        }
    },
    "methoxyacetyl-fentanyl": {
        "aliases": [
            "maf",
            "desfluoroocfentanil"
        ],
        "categories": [
            "depressant",
            "research-chemical",
            "habit-forming",
            "opioid"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-4"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "0.5-1.5mg",
                "Light": "0.25-0.5mg",
                "Strong": "1.5mg+"
            }
        },
        "formatted_duration": {
            "Insufflated": "10-20",
            "_unit": "minutes"
        },
        "formatted_onset": {
            "Insufflated": "10-20",
            "_unit": "minutes"
        },
        "name": "methoxyacetyl-fentanyl",
        "pretty_name": "METHOXYACETYL-FENTANYL",
        "properties": {
            "after-effects": "1-4 hours.",
            "aliases": [
                "maf",
                "desfluoroocfentanil"
            ],
            "categories": [
                "depressant",
                "research-chemical",
                "habit-forming",
                "opioid"
            ],
            "dose": "Light: 0.25-0.5mg Common: 0.5-1.5mg Strong: 1.5mg+",
            "duration": "Insufflated: 10-20 minutes.",
            "onset": "Insufflated: 10-20 minutes.",
            "summary": "A quite potent fentanyl analogue."
        }
    },
    "methoxyketamine": {
        "aliases": [
            "2-meo-ketamine"
        ],
        "categories": [
            "dissociative",
            "research-chemical",
            "habit-forming"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "2-4"
        },
        "formatted_dose": {
            "Insufflated": {
                "Common": "60-130mg",
                "Light": "15-60mg",
                "Strong": "130-200mg+",
                "Threshold": "5-15mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "1-2"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "10-20"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_Methoxyketamine.shtml"
        },
        "name": "methoxyketamine",
        "pretty_name": "Methoxyketamine",
        "properties": {
            "after-effects": "2-4 hours",
            "aliases": [
                "2-meo-ketamine"
            ],
            "categories": [
                "dissociative",
                "research-chemical",
                "habit-forming"
            ],
            "dose": "Insufflated Threshold: 5-15mg Light: 15-60mg Common: 60-130mg Strong: 130-200mg+",
            "duration": "1-2 hours",
            "onset": "10-20 minutes",
            "summary": "An arylcyclohexylamine drug and analogue of ketamine, though slightly less potent. Produces similar dissociative and anaesthetic effects. Very rare."
        }
    },
    "methoxypiperamide": {
        "categories": [
            "inactive",
            "research-chemical"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-12"
        },
        "name": "methoxypiperamide",
        "pretty_name": "Methoxypiperamide",
        "properties": {
            "categories": [
                "inactive",
                "research-chemical"
            ],
            "summary": "Drug of the Piperazine class. The 4-Methoxy-\u03b1-keto analogue of Methylbenzylpiperazine. Seemingly inactive on its own. Was sold in tandem with Mephtetramine."
        }
    },
    "methylmethaqualone": {
        "aliases": [
            "mmq"
        ],
        "categories": [
            "depressant",
            "research-chemical",
            "habit-forming"
        ],
        "dose_note": " NOTE: Remember this substance is known to cause seizures, take much caution with this.",
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-2"
        },
        "formatted_dose": {
            "Vapourized/Sublingual": {
                "Common": "5-10mg.",
                "Light": "3-5mg",
                "Strong": "10-20mg+",
                "Threshold": "2-3mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "1-2"
        },
        "formatted_effects": [
            "Anxiolytic",
            "Sedative",
            "Muscle Relaxant",
            "Amnesia",
            "Dystaxia",
            "Hypnotic",
            ""
        ],
        "formatted_onset": {
            "Sublingual": "10",
            "Vapourized": "0-1",
            "_unit": "minutes"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_Methylmethaqualone.shtml"
        },
        "name": "methylmethaqualone",
        "pretty_name": "Methylmethaqualone",
        "properties": {
            "after-effects": "1-2 hours.",
            "aliases": [
                "mmq"
            ],
            "categories": [
                "depressant",
                "research-chemical",
                "habit-forming"
            ],
            "dose": "Vapourized/Sublingual Threshold: 2-3mg Light: 3-5mg Common: 5-10mg. Strong: 10-20mg+ | NOTE: Remember this substance is known to cause seizures, take much caution with this.",
            "duration": "1-2 hours",
            "effects": "Anxiolytic, Sedative, Muscle Relaxant, Amnesia, Dystaxia, Hypnotic.",
            "onset": "Sublingual: 10 minutes | Vapourized: 0-1 minutes.",
            "summary": "A more potent analogue of methaqualone with a short duration. Thought to be potentially neurotoxic. Has pro-convulsive effects."
        }
    },
    "methylmorphenate": {
        "categories": [
            "stimulant",
            "research-chemical",
            "habit-forming",
            "tentative"
        ],
        "name": "methylmorphenate",
        "pretty_name": "Methylmorphenate",
        "properties": {
            "categories": [
                "stimulant",
                "research-chemical",
                "habit-forming",
                "tentative"
            ],
            "summary": "Stimulant of the phenylmorpholine class, an analogue of Methylphenidate where the piperidine ring has been replaced by a morpholine one, with ~1/10 potency."
        }
    },
    "methylone": {
        "aliases": [
            "bk-mdma",
            "m1",
            "mdmc"
        ],
        "categories": [
            "stimulant",
            "psychedelic",
            "research-chemical",
            "habit-forming",
            "empathogen",
            "common"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "6-24"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "150-250mg",
                "Heavy": "300+mg",
                "Light": "100-150mg",
                "Strong": "200-300mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "2-4"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "15-60"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_Methylone.shtml",
            "pihkal": "https://www.erowid.org/library/books_online/pihkal/pihkal110.shtml"
        },
        "name": "methylone",
        "pretty_name": "Methylone",
        "properties": {
            "after-effects": "6-24 hours",
            "aliases": [
                "bk-mdma",
                "m1",
                "mdmc"
            ],
            "categories": [
                "stimulant",
                "psychedelic",
                "research-chemical",
                "habit-forming",
                "empathogen",
                "common"
            ],
            "dose": "Oral Light: 100-150mg  Common: 150-250mg  Strong: 200-300mg  Heavy: 300+mg",
            "duration": "2-4 hours",
            "marquis": "Yellow",
            "onset": "15-60 minutes",
            "summary": "\u03b2k-MDMA is a cathinone stimulant and empathogen, similar in structure to MDMA, though more stimulating and less empathogenic in comparison. Was very commonly mis-sold as MDMA on the street until it was banned in 2013. The Marquis reagent can differentiate \u03b2k-MDMA from MDMA. Less potent than MDMA with a slightly shorter duration."
        },
        "pweffects": {
            "Analysis enhancement": "https://psychonautwiki.org/wiki/Analysis_enhancement",
            "Anxiety": "https://psychonautwiki.org/wiki/Anxiety",
            "Cognitive euphoria": "https://psychonautwiki.org/wiki/Cognitive_euphoria",
            "Cognitive fatigue": "https://psychonautwiki.org/wiki/Cognitive_fatigue",
            "Dehydration": "https://psychonautwiki.org/wiki/Dehydration",
            "Depression": "https://psychonautwiki.org/wiki/Depression",
            "Difficulty urinating": "https://psychonautwiki.org/wiki/Difficulty_urinating",
            "Empathy, love, and sociability enhancement": "https://psychonautwiki.org/wiki/Empathy,_love,_and_sociability_enhancement",
            "Increased blood pressure": "https://psychonautwiki.org/wiki/Increased_blood_pressure",
            "Increased heart rate": "https://psychonautwiki.org/wiki/Increased_heart_rate",
            "Increased libido": "https://psychonautwiki.org/wiki/Increased_libido",
            "Increased perspiration": "https://psychonautwiki.org/wiki/Increased_perspiration",
            "Irritability": "https://psychonautwiki.org/wiki/Irritability",
            "Mindfulness": "https://psychonautwiki.org/wiki/Mindfulness",
            "Spontaneous tactile sensations": "https://psychonautwiki.org/wiki/Spontaneous_tactile_sensations",
            "Stimulation": "https://psychonautwiki.org/wiki/Stimulation",
            "Tactile enhancement": "https://psychonautwiki.org/wiki/Tactile_enhancement",
            "Teeth grinding": "https://psychonautwiki.org/wiki/Teeth_grinding",
            "Temperature regulation suppression": "https://psychonautwiki.org/wiki/Temperature_regulation_suppression",
            "Thought acceleration": "https://psychonautwiki.org/wiki/Thought_acceleration",
            "Thought deceleration": "https://psychonautwiki.org/wiki/Thought_deceleration",
            "Time distortion": "https://psychonautwiki.org/wiki/Time_distortion",
            "Vibrating vision": "https://psychonautwiki.org/wiki/Vibrating_vision",
            "Wakefulness": "https://psychonautwiki.org/wiki/Wakefulness"
        }
    },
    "methylphenidate": {
        "aliases": [
            "mph",
            "ritalin",
            "concerta",
            "biphentin"
        ],
        "categories": [
            "stimulant",
            "habit-forming",
            "common"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-24"
        },
        "formatted_dose": {
            "Insufflated": {
                "Common": "15-40mg",
                "Heavy": "60-75mg+",
                "Light": "5-15mg",
                "Strong": "40-60mg"
            },
            "Oral": {
                "Common": "40-60mg",
                "Heavy": "80-100mg+",
                "Light": "20-40mg",
                "Strong": "60-80mg"
            }
        },
        "formatted_duration": {
            "Insufflated": "2-4",
            "Oral-IR": "3-6",
            "Oral-XR": "8-12",
            "_unit": "hours"
        },
        "formatted_effects": [
            "Increased alertness",
            "Euphoria",
            "Increased motivation",
            "Reduced appetite",
            "Flushing of the face",
            "Increased body temperature",
            "Tachycardia (Increased heart rate) Paranoia",
            "Insomnia",
            ""
        ],
        "formatted_onset": {
            "Insufflated-IR": "5-10",
            "Insufflated-XR": "5-10",
            "Oral-IR": "30-120",
            "Oral-XR": "30-120",
            "_unit": "minutes"
        },
        "name": "methylphenidate",
        "pretty_name": "Methylphenidate",
        "properties": {
            "after-effects": "1-24 hours.",
            "aliases": [
                "mph",
                "ritalin",
                "concerta",
                "biphentin"
            ],
            "categories": [
                "stimulant",
                "habit-forming",
                "common"
            ],
            "dose": "Oral Light: 20-40mg  Common: 40-60mg  Strong: 60-80mg  Heavy: 80-100mg+ | Insufflated Light: 5-15mg  Common: 15-40mg  Strong: 40-60mg  Heavy: 60-75mg+",
            "duration": "Oral-IR: 3-6 hours. | Oral-XR: 8-12 hours. | Insufflated: 2-4 hours. | Note: XR formulations become IR before they can be insufflated, so duration should be mostly the same.",
            "effects": "Increased alertness, Euphoria, Increased motivation, Reduced appetite, Flushing of the face, Increased body temperature, Tachycardia (Increased heart rate) Paranoia, Insomnia.",
            "marquis": "Moderate orange yellow ",
            "onset": "Oral-IR: 30-120 minutes | Oral-XR: 30-120 minutes | Insufflated-XR: 5-10 minutes | Insufflated-IR: 5-10 minutes",
            "summary": "A psychostimulant commonly used in the treatment of ADHD, narcolepsy and obesity, particularly in the EU instead of Adderall. Methylphenidate is also a 5HT1A receptor agonist. Sometimes prescribed off-label to help the withdrawals from cocaine and other stimulants."
        },
        "pweffects": {
            "Analysis enhancement": "https://psychonautwiki.org/wiki/Analysis_enhancement",
            "Anxiety": "https://psychonautwiki.org/wiki/Anxiety",
            "Appetite suppression": "https://psychonautwiki.org/wiki/Appetite_suppression",
            "Cognitive euphoria": "https://psychonautwiki.org/wiki/Cognitive_euphoria",
            "Cognitive fatigue": "https://psychonautwiki.org/wiki/Cognitive_fatigue",
            "Dehydration": "https://psychonautwiki.org/wiki/Dehydration",
            "Depression": "https://psychonautwiki.org/wiki/Depression",
            "Focus enhancement": "https://psychonautwiki.org/wiki/Focus_enhancement",
            "Increased heart rate": "https://psychonautwiki.org/wiki/Increased_heart_rate",
            "Increased perspiration": "https://psychonautwiki.org/wiki/Increased_perspiration",
            "Irritability": "https://psychonautwiki.org/wiki/Irritability",
            "Memory enhancement": "https://psychonautwiki.org/wiki/Memory_enhancement",
            "Motivation enhancement": "https://psychonautwiki.org/wiki/Motivation_enhancement",
            "Stimulation": "https://psychonautwiki.org/wiki/Stimulation",
            "Teeth grinding": "https://psychonautwiki.org/wiki/Teeth_grinding",
            "Thought acceleration": "https://psychonautwiki.org/wiki/Thought_acceleration",
            "Thought deceleration": "https://psychonautwiki.org/wiki/Thought_deceleration",
            "Thought organization": "https://psychonautwiki.org/wiki/Thought_organization",
            "Wakefulness": "https://psychonautwiki.org/wiki/Wakefulness"
        },
        "sources": {
            "_general": [
                "A chemical ionization selected ion monitoring assay for methylphenidate and ritalinic acid - http://www.ncbi.nlm.nih.gov/pubmed/526558",
                "Panlobular pulmonary emphysema caused by i.v. injection of methylphenidate (Ritalin): findings on chest radiographs and CT scans. - http://www.ncbi.nlm.nih.gov/pubmed/8109495",
                "Ethylphenidate formation in human subjects after the administration of a single dose of methylphenidate and ethanol. - https://www.ncbi.nlm.nih.gov/pubmed/10820132",
                "A comparison of methylphenidate-, amphetamine-, and methamphetamine-induced hyperthermia and neurotoxicity in male Sprague-Dawley rats during... - https://www.ncbi.nlm.nih.gov/pubmed/22289608",
                "Methylphenidate and brain dopamine neurotoxicity. - http://www.ncbi.nlm.nih.gov/pubmed/9365033",
                "Methylphenidate treatment induces oxidative stress in young rat brain. - http://www.ncbi.nlm.nih.gov/pubmed/16494852",
                "A comprehensive in vitro screening of d-, l-, and dl-threo-methylphenidate: an exploratory study. - http://www.ncbi.nlm.nih.gov/pubmed/17201613",
                "Methylphenidate and its ethanol transesterification metabolite ethylphenidate: brain disposition, monoamine transporters and motor activity. - http://www.ncbi.nlm.nih.gov/pubmed/17218796",
                "The psychostimulant d-threo-(R,R)-methylphenidate binds as an agonist to the 5HT(1A) receptor. - http://www.ncbi.nlm.nih.gov/pubmed/19322953",
                "Methylphenidate combined with aripiprazole in children and adolescents with bipolar disorder and attention-deficit/hyperactivity disorder - http://www.ncbi.nlm.nih.gov/pubmed/19877980",
                "Isopropylphenidate: an ester homolog of methylphenidate with sustained and selective dopaminergic activity and reduced drug interaction - http://www.ncbi.nlm.nih.gov/pubmed/24261661",
                "Object memory impairment at post-drug Day 15 but not at Day 1 after a regimen of repeated treatment with oral methylphenidate. - http://www.ncbi.nlm.nih.gov/pubmed/24631430",
                "Long Withdrawal of Methylphenidate Induces a Differential Response of the Dopaminergic System and Increases Sensitivity to Cocaine in the Prefrontal Cortex of Spontaneously Hypertensive Rats. - http://www.ncbi.nlm.nih.gov/pubmed/26509840",
                "A chemical ionization selected ion monitoring assay for methylphenidate and ritalinic acid. - http://www.ncbi.nlm.nih.gov/pubmed/526558",
                "A comparison of methylphenidate-, amphetamine-, and methamphetamine-induced hyperthermia and neurotoxicity in male Sprague-Dawley rats during the w... - https://www.ncbi.nlm.nih.gov/pubmed/22289608",
                "Methylphenidate and brain dopamine neurotoxicity. - https://www.ncbi.nlm.nih.gov/pubmed/9365033",
                "Methylphenidate combined with aripiprazole in children and adolescents with bipolar disorder and attention-deficit/hyperactivity disorder: a random... - http://www.ncbi.nlm.nih.gov/pubmed/19877980",
                "Long Withdrawal of Methylphenidate Induces a Differential Response of the Dopaminergic System and Increases Sensitivity to Cocaine in the Prefronta... - http://www.ncbi.nlm.nih.gov/pubmed/26509840",
                "IV use of methylphenidate can lead to infections and abscesses due to the fillers in the medication - http://onlinelibrary.wiley.com/doi/10.1002/hed.2890060409/full",
                "Pregnancy category C according to the FDA - http://www.accessdata.fda.gov/drugsatfda_docs/label/2007/010187s069,018029s040,021284s011lbl.pdf"
            ]
        }
    },
    "methyprylon": {
        "aliases": [
            "noludar"
        ],
        "categories": [
            "depressant",
            "habit-forming",
            "tentative"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-16"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "200-300mg",
                "Light": "150-200mg",
                "Strong": "300mg+"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "6-12"
        },
        "name": "methyprylon",
        "pretty_name": "Methyprylon",
        "properties": {
            "after-effects": "1-16 hours.",
            "aliases": [
                "noludar"
            ],
            "avoid": "All other CNS depressants.",
            "categories": [
                "depressant",
                "habit-forming",
                "tentative"
            ],
            "dose": "Light: 150-200mg Common: 200-300mg Strong: 300mg+",
            "duration": "6-12 hours.",
            "summary": "Sedative of the pipeidinedone family. Was used for treating insomnia, yet is rarely used today due to substances with fewer side effects, such as benzodiazepines."
        }
    },
    "metizolam": {
        "aliases": [
            "metiz",
            "desmethyletizolam"
        ],
        "categories": [
            "benzodiazepine",
            "research-chemical",
            "depressant",
            "habit-forming",
            "tentative"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "10-30"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "2-4mg",
                "Heavy": "6mg+",
                "Light": "1-2mg",
                "Strong": "4-6mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "5-8"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "30-90"
        },
        "name": "metizolam",
        "pretty_name": "Metizolam",
        "properties": {
            "after-effects": "10-30 hours",
            "aliases": [
                "metiz",
                "desmethyletizolam"
            ],
            "categories": [
                "benzodiazepine",
                "research-chemical",
                "depressant",
                "habit-forming",
                "tentative"
            ],
            "dose": "Light: 1-2mg Common: 2-4mg Strong: 4-6mg Heavy: 6mg+",
            "duration": "5-8 hours",
            "onset": "30-90 minutes",
            "summary": "Also known as desmethyletizolam, a thienodiazepine similar in effects and structure to etizolam, but around half as potent and with around a 60% longer half-life. A sedative, and hypnotic, it may cause amnesia and lowered inhibitions in excess."
        },
        "pweffects": {
            "Amnesia": "https://psychonautwiki.org/wiki/Amnesia",
            "Analysis suppression": "https://psychonautwiki.org/wiki/Analysis_suppression",
            "Anxiety suppression": "https://psychonautwiki.org/wiki/Anxiety_suppression",
            "Cognitive euphoria": "https://psychonautwiki.org/wiki/Cognitive_euphoria",
            "Compulsive redosing": "https://psychonautwiki.org/wiki/Compulsive_redosing",
            "Delusions": "https://psychonautwiki.org/wiki/Delusions",
            "Disinhibition": "https://psychonautwiki.org/wiki/Disinhibition",
            "Dizziness": "https://psychonautwiki.org/wiki/Dizziness",
            "Emotion suppression": "https://psychonautwiki.org/wiki/Emotion_suppression",
            "Information processing suppression": "https://psychonautwiki.org/wiki/Information_processing_suppression",
            "Motor control loss": "https://psychonautwiki.org/wiki/Motor_control_loss",
            "Muscle relaxation": "https://psychonautwiki.org/wiki/Muscle_relaxation",
            "Respiratory depression": "https://psychonautwiki.org/wiki/Respiratory_depression",
            "Sedation": "https://psychonautwiki.org/wiki/Sedation",
            "Thought deceleration": "https://psychonautwiki.org/wiki/Thought_deceleration"
        }
    },
    "mexamine": {
        "categories": [
            "psychedelic",
            "tentative"
        ],
        "formatted_effects": [
            "Euphoria",
            "empathy",
            "insight",
            "brightened colour",
            "Closed/Open eye visuals",
            "enhanced tactile sensation",
            "mental/physical stimulation",
            "decreased appetite",
            "pupil dilation",
            "restlessness",
            "change in perception",
            "ego softening",
            "sweating/chills",
            "muscle tension",
            "confusion",
            "insomnia",
            ""
        ],
        "name": "mexamine",
        "pretty_name": "Mexamine",
        "properties": {
            "categories": [
                "psychedelic",
                "tentative"
            ],
            "effects": "Euphoria, empathy, insight, brightened colour, Closed/Open eye visuals, enhanced tactile sensation, mental/physical stimulation, decreased appetite, pupil dilation, restlessness, change in perception, ego softening, sweating/chills, muscle tension, confusion, insomnia.",
            "summary": "5-Methoxytryptamine, a tryptamine derivative that naturally occurs in the body at low levels. No evidence of recreational use. Apparently enhances dreams."
        }
    },
    "mexazolam": {
        "aliases": [
            "melex",
            "sedoxil"
        ],
        "categories": [
            "depressant",
            "habit-forming"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-12"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "0.5-1.5mg",
                "Heavy": "2-3mg.",
                "Light": "0.25-0.5mg",
                "Strong": "1.5-2mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "4-8"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "5-45"
        },
        "name": "mexazolam",
        "pretty_name": "Mexazolam",
        "properties": {
            "after-effects": "1-12 hours.",
            "aliases": [
                "melex",
                "sedoxil"
            ],
            "categories": [
                "depressant",
                "habit-forming"
            ],
            "dose": "Oral Light: 0.25-0.5mg Common: 0.5-1.5mg Strong: 1.5-2mg Heavy: 2-3mg.",
            "duration": "4-8 hours.",
            "onset": "5-45 minutes.",
            "summary": "Benzodiazepine derivative that has been trialed for anxiety and was found to be effective for anxiety at one week week follow-ups yet after three weeks it had lost its therapeutic anxiolytic properties and becoming no more effective than placebo."
        }
    },
    "mexedrone": {
        "aliases": [
            "4-mmeoc"
        ],
        "categories": [
            "empathogen",
            "stimulant",
            "research-chemical",
            "habit-forming",
            "tentative"
        ],
        "formatted_aftereffects": {
            "Insufflated": "1-4",
            "Oral": "2-6",
            "_unit": "hours"
        },
        "formatted_dose": {
            "Insufflated": {
                "Common": "80-120mg",
                "Light": "50-80mg",
                "Strong": "120-200mg+"
            },
            "Oral": {
                "Common": "150-200",
                "Light": "75-150mg",
                "Strong": "200-300mg+"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "1-3"
        },
        "formatted_onset": {
            "Insufflated": "3-10",
            "Oral": "30-60",
            "_unit": "minutes"
        },
        "name": "mexedrone",
        "pretty_name": "Mexedrone",
        "properties": {
            "after-effects": "Oral: 2-6 | Insufflated: 1-4 hours.",
            "aliases": [
                "4-mmeoc"
            ],
            "categories": [
                "empathogen",
                "stimulant",
                "research-chemical",
                "habit-forming",
                "tentative"
            ],
            "dose": "Oral Light: 75-150mg Common: 150-200 Strong: 200-300mg+ | Insufflated Light: 50-80mg Common: 80-120mg Strong: 120-200mg+",
            "duration": "1-3 hours.",
            "onset": "Oral: 30-60 minutes. | Insufflated: 3-10 minutes.",
            "summary": "Mexedrone is a stimulant drug of the cathinone class. It alters the reuptake of serotonin, dopamine, and norepinephrine to cause euphoria,  and is similar in effects to mephedrone. It is considered a designer drug and is in a legally grey area globally.",
            "warning": "Caution: not much is known about how mexedrone affects the body as it is relatively new, be cautious with doses and how you use it."
        },
        "pweffects": {
            "Auditory enhancement": "https://psychonautwiki.org/wiki/Auditory_enhancement",
            "Cognitive euphoria": "https://psychonautwiki.org/wiki/Cognitive_euphoria",
            "Dehydration": "https://psychonautwiki.org/wiki/Dehydration",
            "Increased perspiration": "https://psychonautwiki.org/wiki/Increased_perspiration",
            "Physical euphoria": "https://psychonautwiki.org/wiki/Physical_euphoria",
            "Sedation": "https://psychonautwiki.org/wiki/Sedation",
            "Spontaneous tactile sensations": "https://psychonautwiki.org/wiki/Spontaneous_tactile_sensations",
            "Tactile enhancement": "https://psychonautwiki.org/wiki/Tactile_enhancement",
            "Teeth grinding": "https://psychonautwiki.org/wiki/Teeth_grinding",
            "Temperature regulation suppression": "https://psychonautwiki.org/wiki/Temperature_regulation_suppression",
            "Thought acceleration": "https://psychonautwiki.org/wiki/Thought_acceleration",
            "Thought connectivity": "https://psychonautwiki.org/wiki/Thought_connectivity",
            "Vibrating vision": "https://psychonautwiki.org/wiki/Vibrating_vision"
        }
    },
    "midazolam": {
        "categories": [
            "benzodiazepine",
            "habit-forming",
            "depressant"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-12"
        },
        "formatted_dose": {
            "Insufflated": {
                "Common": "7-15mg",
                "Low": "3-7mg",
                "Strong": "15-25mg"
            },
            "Intramuscular": {
                "Common": "5-12mg",
                "Low": "3-5mg",
                "Strong": "12-25mg"
            },
            "Intravenous": {
                "Common": "5-10mg",
                "Low": "2.5-5mg",
                "Strong": "10-20mg"
            },
            "Oral": {
                "Common": "10-15mg",
                "Low": "5-10mg",
                "Strong": "15-30mg."
            },
            "Rectal": {
                "Common": "7-15mg",
                "Low": "3-7mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "4-8"
        },
        "formatted_effects": [
            "Anxiolytic",
            "Sedative",
            "Muscle Relaxant",
            "Amnesia",
            "Dystaxia",
            "Hypnotic",
            ""
        ],
        "formatted_onset": {
            "IM": "10-20",
            "IV": "0-1",
            "Insufflated": "1-5",
            "Rectal": "15-25",
            "_unit": "minutes",
            "oral": "10-40"
        },
        "name": "midazolam",
        "pretty_name": "Midazolam",
        "properties": {
            "after-effects": "1-12 hours.",
            "avoid": "All other CNS depressants.",
            "bioavailability": "Oral [variable - significant first-pass metabolism] | Insufflated 55% | Intramuscular 90%",
            "bioavailability:": "Oral [Highly variable] | Insufflated 55% | Intramuscular 90%",
            "categories": [
                "benzodiazepine",
                "habit-forming",
                "depressant"
            ],
            "dose": "Oral Low: 5-10mg's Common: 10-15mg's Strong: 15-30mg. | Insufflated Low: 3-7mg's Common: 7-15mg Strong: 15-25mg's. | Rectal Low: 3-7mg's Common: 7-15mg's Strong:15-25mg's | Intravenous Low: 2.5-5mg's Common: 5-10mg's Strong: 10-20mg's | Intramuscular Low: 3-5mg's Common: 5-12mg's Strong: 12-25mg's.",
            "dose_to_diazepam": "Midazolam - 10mg ~=10mg Diazepam.",
            "duration": "4-8 hours.",
            "effects": "Anxiolytic, Sedative, Muscle Relaxant, Amnesia, Dystaxia, Hypnotic.",
            "onset": "oral 10-40 minutes | Insufflated: 1-5 minutes | Rectal: 15-25 minutes. | IV: 0-1 minutes | IM: 10-20 minutes.",
            "summary": "A common hypnotic, sedative and anxiolytic benzodiazepine. High doses may cause amnesia and loss of inhibitions. Unusually, it is water soluble, and commonly used as a premedication for sedation as the solubility makes it better for IV use than other benzodiazepines."
        },
        "sources": {
            "bioavailability": [
                "https://www.openanesthesia.org/midazolam_bioavailability_versus_route/"
            ]
        }
    },
    "mipt": {
        "aliases": [
            "n-methyl-n-isopropyltryptamine"
        ],
        "categories": [
            "psychedelic",
            "research-chemical",
            "tentative"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-6"
        },
        "formatted_dose": {
            "Insufflated": {
                "Common": "10-15mg",
                "Light": "5-10mg",
                "Strong": "15-20mg+"
            },
            "Oral": {
                "Common": "10-15mg",
                "Light": "5-10mg",
                "Strong": "15-25mg+"
            },
            "Vapourized": {
                "Common": "5-15mg",
                "Light": "3-5mg",
                "Strong": "15-20mg+"
            }
        },
        "formatted_duration": {
            "Insufflated": "3-5",
            "Oral": "2-5",
            "Vapourized": "2-3",
            "_unit": "hours"
        },
        "formatted_effects": [
            "Euphoria",
            "empathy",
            "insight",
            "brightened colour",
            "Closed/Open eye visuals",
            "enhanced tactile sensation",
            "mental/physical stimulation",
            "decreased appetite",
            "pupil dilation",
            "restlessness",
            "change in perception",
            "ego softening",
            "sweating/chills",
            "muscle tension",
            "confusion",
            "insomnia",
            ""
        ],
        "formatted_onset": {
            "Insufflated": "0-2",
            "Oral": "30-45",
            "Vapourized": "0-1",
            "_unit": "minutes"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_MIPT.shtml",
            "tihkal": "https://www.erowid.org/library/books_online/tihkal/tihkal47.shtml"
        },
        "name": "mipt",
        "pretty_name": "MiPT",
        "properties": {
            "after-effects": "1-6 hours.",
            "aliases": [
                "n-methyl-n-isopropyltryptamine"
            ],
            "categories": [
                "psychedelic",
                "research-chemical",
                "tentative"
            ],
            "dose": "Oral Light: 5-10mg Common: 10-15mg Strong: 15-25mg+ | Insufflated Light: 5-10mg Common: 10-15mg Strong: 15-20mg+ | Vapourized Light: 3-5mg Common: 5-15mg Strong: 15-20mg+",
            "duration": "Oral: 2-5 hours. | Insufflated 3-5 hours. | Vapourized 2-3 hours.",
            "effects": "Euphoria, empathy, insight, brightened colour, Closed/Open eye visuals, enhanced tactile sensation, mental/physical stimulation, decreased appetite, pupil dilation, restlessness, change in perception, ego softening, sweating/chills, muscle tension, confusion, insomnia.",
            "onset": "Oral: 30-45 minutes. | Insufflated: 0-2 minutes | Vapourized: 0-1 minutes",
            "summary": "N-Methyl-N-isopropyltryptamine, a tryptamine analogue of DMT, a very uncommon drug with very few reports of human use. Described as 'more psychedelic than hallucinogenic' users report only mild visuals with some stimulation and cognitive effects. One of the more stable tryptamines."
        }
    },
    "mk-801": {
        "aliases": [
            "dizocilpine",
            "mk801"
        ],
        "categories": [
            "dissociative",
            "research-chemical",
            "tentative",
            "habit-forming"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-72"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "50-100ug"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "20-36"
        },
        "formatted_onset": {
            "IM": "45mins",
            "Oral": "15-30mins"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_Dizocilpine.shtml"
        },
        "name": "mk-801",
        "pretty_name": "MK-801",
        "properties": {
            "after-effects": "1-72 hours.",
            "aliases": [
                "dizocilpine",
                "mk801"
            ],
            "avoid": "Driving. Moving and walking if possible. Mixing with other depressants like alcohol, benzos and opiates.",
            "categories": [
                "dissociative",
                "research-chemical",
                "tentative",
                "habit-forming"
            ],
            "dose": "Oral Common: 50-100ug",
            "duration": "20-36 hours.",
            "onset": "Oral 15-30mins | IM 45mins",
            "summary": "Dissociative research chemical similar to PCP, and Ketamine. Dizocilpine, also known as MK-801, is a non-competitive antagonist of the NMDA receptor."
        }
    },
    "moclobemide": {
        "formatted_dose": {
            "Oral": {
                "Common": "300mg",
                "Light": "150mg",
                "Strong": "600mg."
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "2-6"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "30-90"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_Moclobemide.shtml"
        },
        "name": "moclobemide",
        "pretty_name": "Moclobemide",
        "properties": {
            "dose": "Light: 150mg Common: 300mg Strong: 600mg.",
            "duration": "2-6 hours.",
            "onset": "30-90 minutes.",
            "summary": "A reversible MAOI which is prescribed to treat depression and anxiety. Its reversibility and short-acting length of effects often means it is used in \"pharmahuasca\" preparations."
        }
    },
    "modafinil": {
        "aliases": [
            "provigil"
        ],
        "categories": [
            "stimulant",
            "habit-forming",
            "nootropic",
            "common"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-16"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "100-300mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "12-16"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "30-45"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_Modafinil.shtml"
        },
        "name": "modafinil",
        "pretty_name": "Modafinil",
        "properties": {
            "after-effects": "1-16 hours.",
            "aliases": [
                "provigil"
            ],
            "categories": [
                "stimulant",
                "habit-forming",
                "nootropic",
                "common"
            ],
            "dose": "Common: 100-300mg",
            "duration": "12-16 hours.",
            "onset": "30-45 minutes",
            "summary": "A wakefulness promoting, long acting stimulant which is typically only used functionally, because there is no real euphoric component to its effects. Also prescribed for daytime sleeping disorders."
        },
        "pweffects": {
            "Anxiety": "https://psychonautwiki.org/wiki/Anxiety",
            "Appetite suppression": "https://psychonautwiki.org/wiki/Appetite_suppression",
            "Body odor alteration": "https://psychonautwiki.org/wiki/Body_odor_alteration",
            "Dehydration": "https://psychonautwiki.org/wiki/Dehydration",
            "Diarrhea": "https://psychonautwiki.org/wiki/Diarrhea",
            "Dizziness": "https://psychonautwiki.org/wiki/Dizziness",
            "Emotion enhancement": "https://psychonautwiki.org/wiki/Emotion_enhancement",
            "Focus enhancement": "https://psychonautwiki.org/wiki/Focus_enhancement",
            "Headaches": "https://psychonautwiki.org/wiki/Headaches",
            "Increased heart rate": "https://psychonautwiki.org/wiki/Increased_heart_rate",
            "Memory enhancement": "https://psychonautwiki.org/wiki/Memory_enhancement",
            "Motivation enhancement": "https://psychonautwiki.org/wiki/Motivation_enhancement",
            "Nausea": "https://psychonautwiki.org/wiki/Nausea",
            "Photophobia": "https://psychonautwiki.org/wiki/Photophobia",
            "Stimulation": "https://psychonautwiki.org/wiki/Stimulation",
            "Thought acceleration": "https://psychonautwiki.org/wiki/Thought_acceleration",
            "Wakefulness": "https://psychonautwiki.org/wiki/Wakefulness"
        },
        "sources": {
            "_general": [
                "Modafinil augmentation of selective serotonin reuptake inhibitor therapy in MDD partial responders with persistent fatigue and sleepiness. - http://www.ncbi.nlm.nih.gov/pubmed/17729016",
                "Pharmacogenetics of modafinil after sleep loss: catechol-O-methyltransferase genotype modulates waking functions but not recovery sleep. - http://www.ncbi.nlm.nih.gov/pubmed/19037200",
                "Evidence for the involvement of dopamine transporters in behavioral stimulant effects of modafinil. - http://www.ncbi.nlm.nih.gov/pubmed/19197004",
                "Effects of modafinil on attention performance, short-term memory and executive function in university students: a randomized trial. - http://www.ncbi.nlm.nih.gov/pubmed/26135067",
                "The vigilance promoting drug modafinil decreases GABA release in the medial preoptic area and in the posterior hypothalamus of the awake rat: possi... - http://www.ncbi.nlm.nih.gov/pubmed/8977135",
                "Modafinil has been found to interact with oral anti contraceptives, causing mainly low dosage regiments of steroidal drugs to be weakened to the point of no longer working. - http://www.modafinilfacts.com/contraceptives.htm"
            ]
        }
    },
    "morpheridine": {
        "categories": [
            "opioid",
            "depressant",
            "habit-forming",
            "tentative"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-6"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "10-20mg",
                "Light": "5-10mg.",
                "Strong": "20-35mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "Oral"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "Oral"
        },
        "name": "morpheridine",
        "pretty_name": "Morpheridine",
        "properties": {
            "after-effects": "1-6 hours.",
            "categories": [
                "opioid",
                "depressant",
                "habit-forming",
                "tentative"
            ],
            "dose": "Oral Light: 5-10mg. Common: 10-20mg Strong: 20-35mg's.",
            "duration": "Oral 4-6 hours.",
            "onset": "Oral 15-35 minutes.",
            "summary": "Is a 4-Phenylpiperidine derivative that is related to Pehidine. It is roughly 4x as potent as the parent compound, does not cause convulsions such as Pethidine.",
            "warning": "Do not mix with any other CNS depressants."
        }
    },
    "morphine": {
        "categories": [
            "opioid",
            "habit-forming",
            "common",
            "depressant"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-12"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "15-20mg",
                "Light": "5mg-10mg",
                "Strong": "30mg+"
            }
        },
        "formatted_duration": {
            "IV/IM": "2-4",
            "Insufflated": "4-5",
            "Oral_ER": "4-10",
            "Oral_IR": "4-6",
            "Plugged": "3-4",
            "_unit": "hours"
        },
        "formatted_effects": [
            "Euphoria",
            "Dry Mouth",
            "Mood lift",
            "Itchiness",
            "Relaxant",
            "Constipation",
            "Pupil constriction",
            "Analgesia",
            ""
        ],
        "formatted_onset": {
            "IV/IM": "0-1",
            "Insufflated": "10-30",
            "Oral_ER": "40-80",
            "Oral_IR": "10-30",
            "Plugged": "10-30",
            "_unit": "minutes"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_Morphine.shtml"
        },
        "name": "morphine",
        "pretty_name": "Morphine",
        "properties": {
            "after-effects": "1-12 hours.",
            "bioavailability": "Oral 30% | Insufflated 15-20% | Rectal 30% NOTE: Chitosan (A linear polysaccharide that helps absorb drugs better) increases the insufflated bioavailabilty to around 60%. Ratio used was 1.3 grams : 6.7 grams (Morphine:Chitosan) Use with caution.",
            "categories": [
                "opioid",
                "habit-forming",
                "common",
                "depressant"
            ],
            "dose": "Oral Light: 5mg-10mg Common: 15-20mg Strong: 30mg+",
            "duration": "Oral_IR: 4-6 hours | Oral_ER: 4-10 hours | Insufflated: 4-5 hours | Plugged: 3-4 hours | IV/IM: 2-4 hours.",
            "effects": "Euphoria, Dry Mouth, Mood lift, Itchiness, Relaxant, Constipation, Pupil constriction, Analgesia.",
            "onset": "Oral_IR: 10-30 minutes | Oral_ER: 40-80 minutes | Insufflated: 10-30 minutes | Plugged: 10-30 minutes | IV/IM: 0-1 minutes.",
            "summary": "The prototypical opioid drug, a powerful analgesic with euphoric qualities, found in the seeds and wax of the plant papaver somniferum (opium poppy).  First isolated by Friedrich Sert\u00fcrner in 1805, named for its sleep-inducing qualities. Do not combine with other depressants, may cause dangerous respiratory depression in overdose."
        },
        "pweffects": {
            "Anxiety suppression": "https://psychonautwiki.org/wiki/Anxiety_suppression",
            "Cognitive euphoria": "https://psychonautwiki.org/wiki/Cognitive_euphoria",
            "Compulsive redosing": "https://psychonautwiki.org/wiki/Compulsive_redosing",
            "Constipation": "https://psychonautwiki.org/wiki/Constipation",
            "Cough suppression": "https://psychonautwiki.org/wiki/Cough_suppression",
            "Difficulty urinating": "https://psychonautwiki.org/wiki/Difficulty_urinating",
            "Internal hallucinations": "https://psychonautwiki.org/wiki/Internal_hallucinations",
            "Itchiness": "https://psychonautwiki.org/wiki/Itchiness",
            "Nausea": "https://psychonautwiki.org/wiki/Nausea",
            "Pain relief": "https://psychonautwiki.org/wiki/Pain_relief",
            "Physical euphoria": "https://psychonautwiki.org/wiki/Physical_euphoria",
            "Pupil constriction": "https://psychonautwiki.org/wiki/Pupil_constriction",
            "Respiratory depression": "https://psychonautwiki.org/wiki/Respiratory_depression",
            "Sedation": "https://psychonautwiki.org/wiki/Sedation"
        },
        "sources": {
            "_general": [
                "Codeine analgesia is due to codeine-6-glucuronide, not morphine. - https://www.ncbi.nlm.nih.gov/pubmed/11092114",
                "Dextromethorphan potentiates the antinociceptive effects of morphine and the delta-opioid agonist SNC80 in squirrel monkeys. - http://www.ncbi.nlm.nih.gov/pubmed/11805202",
                "Magnesium increases morphine analgesic effect in different experimental models of pain. - http://www.ncbi.nlm.nih.gov/pubmed/11873038",
                "Identification of CYP3A4 and CYP2C8 as the major cytochrome P450 s responsible for morphine N-demethylation in human liver microsomes. - http://www.ncbi.nlm.nih.gov/pubmed/12936704",
                "4-Caffeoyl-1,5-quinide in roasted coffee inhibits [3H]naloxone binding and reverses anti-nociceptive effects of morphine in mice. - http://www.ncbi.nlm.nih.gov/pubmed/15088081",
                "Evaluation the effects of dextromethorphan and midazolam on morphine induced tolerance and dependence in mice. - http://www.ncbi.nlm.nih.gov/pubmed/18819620",
                "Enhancement by grapefruit juice of morphine antinociception. - http://www.ncbi.nlm.nih.gov/pubmed/19043223",
                "Low-Dose Cannabinoid Type 2 Receptor Agonist Attenuates Tolerance to Repeated Morphine Administration via Regulating \u03bc-Opioid Receptor Expression i... - http://www.ncbi.nlm.nih.gov/pubmed/26720619",
                "Influence of a high-fat meal on the absorption of morphine from oral solutions. - http://www.ncbi.nlm.nih.gov/pubmed/2791448",
                "Discriminative stimulus effects of reversible and irreversible opiate agonists: morphine, oxymorphazone and buprenorphine. - http://www.ncbi.nlm.nih.gov/pubmed/6206224",
                "Endogenous codeine and morphine in poor and extensive metabolisers of the CYP2D6 (debrisoquine/sparteine) polymorphism. - http://www.ncbi.nlm.nih.gov/pubmed/8113966",
                "The effect of food intake on the pharmacokinetics of sustained-release morphine sulfate capsules. - http://www.ncbi.nlm.nih.gov/pubmed/9152568"
            ]
        }
    },
    "mpa": {
        "aliases": [
            "methiopropamine"
        ],
        "categories": [
            "stimulant",
            "research-chemical",
            "habit-forming"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "3-5"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "20-40mg",
                "Light": "5-15mg",
                "Strong": "40-60mg+",
                "Threshold": "5mg"
            }
        },
        "formatted_duration": {
            "Insufflated": "3-4",
            "Oral": "4-6",
            "_unit": "hours"
        },
        "formatted_onset": {
            "Insufflated": "15-30",
            "Oral": "30-60",
            "_unit": "minutes"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_Methiopropamine.shtml"
        },
        "name": "mpa",
        "pretty_name": "MPA",
        "properties": {
            "after-effects": "3-5 hours",
            "aliases": [
                "methiopropamine"
            ],
            "categories": [
                "stimulant",
                "research-chemical",
                "habit-forming"
            ],
            "dose": "Oral Threshold: 10mg Light: 20-40mg Common: 40-60mg Strong:60-80mg+ Insufflated Threshold: 5mg Light: 5-15mg Common: 20-40mg Strong: 40-60mg+",
            "duration": "Oral: 4-6 hours | Insufflated 3-4 hours.",
            "onset": "Oral: 30-60 minutes. | Insufflated: 15-30 minutes.",
            "summary": "An analogue of methamphetamine with effects close to amphetamine. Some users report negative side effects including stomach discomfort and sweating. Acts as a selective NDRI."
        },
        "pweffects": {
            "Analysis enhancement": "https://psychonautwiki.org/wiki/Analysis_enhancement",
            "Anxiety": "https://psychonautwiki.org/wiki/Anxiety",
            "Appetite suppression": "https://psychonautwiki.org/wiki/Appetite_suppression",
            "Cognitive fatigue": "https://psychonautwiki.org/wiki/Cognitive_fatigue",
            "Compulsive redosing": "https://psychonautwiki.org/wiki/Compulsive_redosing",
            "Depression": "https://psychonautwiki.org/wiki/Depression",
            "Focus enhancement": "https://psychonautwiki.org/wiki/Focus_enhancement",
            "Increased heart rate": "https://psychonautwiki.org/wiki/Increased_heart_rate",
            "Increased libido": "https://psychonautwiki.org/wiki/Increased_libido",
            "Increased perspiration": "https://psychonautwiki.org/wiki/Increased_perspiration",
            "Irritability": "https://psychonautwiki.org/wiki/Irritability",
            "Motivation enhancement": "https://psychonautwiki.org/wiki/Motivation_enhancement",
            "Stimulation": "https://psychonautwiki.org/wiki/Stimulation",
            "Teeth grinding": "https://psychonautwiki.org/wiki/Teeth_grinding",
            "Temperature regulation suppression": "https://psychonautwiki.org/wiki/Temperature_regulation_suppression",
            "Thought acceleration": "https://psychonautwiki.org/wiki/Thought_acceleration",
            "Thought deceleration": "https://psychonautwiki.org/wiki/Thought_deceleration",
            "Thought organization": "https://psychonautwiki.org/wiki/Thought_organization",
            "Wakefulness": "https://psychonautwiki.org/wiki/Wakefulness"
        }
    },
    "mt-45": {
        "aliases": [
            "ic-6",
            "mt45"
        ],
        "categories": [
            "opioid",
            "research-chemical",
            "habit-forming",
            "depressant"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "2-3"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "45-60mg",
                "Light": "30-45mg",
                "Strong": "60mg+",
                "Threshold": "30mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "4-6"
        },
        "formatted_effects": [
            "Euphoria",
            "Dry Mouth",
            "Mood lift",
            "Itchiness",
            "Relaxant",
            "Constipation",
            "Pupil constriction",
            "Analgesia",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "30-45"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_MT45.shtml"
        },
        "name": "mt-45",
        "pretty_name": "MT-45",
        "properties": {
            "after-effects": "2-3 hours.",
            "aliases": [
                "ic-6",
                "mt45"
            ],
            "categories": [
                "opioid",
                "research-chemical",
                "habit-forming",
                "depressant"
            ],
            "dose": "Oral Threshold: 30mg Light: 30-45mg's Common: 45-60mg Strong: 60mg+",
            "duration": "4-6 hours",
            "effects": "Euphoria, Dry Mouth, Mood lift, Itchiness, Relaxant, Constipation, Pupil constriction, Analgesia.",
            "onset": "30-45 minutes",
            "summary": "A synthetic opioid drug that was rumoured to be roughly 80% the potency of Morphine orally. Was created by Dainippon Pharmaceutical in the 1970's. It has been used as a lead compound for the design of related substances. It has been associated with hearing loss and hair loss. Structurally unrelated to most other opioid drugs. Treat with caution, especially long term use."
        }
    },
    "mushrooms": {
        "aliases": [
            "psilocybin",
            "shrooms",
            "mushroom",
            "psylocybin"
        ],
        "categories": [
            "psychedelic",
            "common"
        ],
        "combos": {
            "2c-t-x": {
                "status": "Low Risk & Synergy"
            },
            "2c-x": {
                "status": "Low Risk & Synergy"
            },
            "5-meo-xxt": {
                "status": "Low Risk & Synergy"
            },
            "alcohol": {
                "status": "Low Risk & Decrease"
            },
            "amphetamines": {
                "note": "Stimulants increase anxiety levels and the risk of thought loops which can lead to negative experiences",
                "status": "Caution"
            },
            "amt": {
                "status": "Low Risk & Synergy"
            },
            "benzodiazepines": {
                "status": "Low Risk & Decrease"
            },
            "benzos": {
                "status": "Low Risk & Decrease"
            },
            "caffeine": {
                "status": "Low Risk & No Synergy"
            },
            "cannabis": {
                "note": "Cannabis has an unexpectedly strong and somewhat unpredictable synergy with psychedelics.",
                "status": "Caution"
            },
            "cocaine": {
                "note": "Stimulants increase anxiety levels and the risk of thought loops which can lead to negative experiences",
                "status": "Caution"
            },
            "dmt": {
                "status": "Low Risk & Synergy"
            },
            "dox": {
                "status": "Low Risk & Synergy"
            },
            "dxm": {
                "status": "Low Risk & Synergy"
            },
            "ghb/gbl": {
                "status": "Low Risk & Decrease"
            },
            "ketamine": {
                "status": "Low Risk & Synergy"
            },
            "lsd": {
                "status": "Low Risk & Synergy"
            },
            "maois": {
                "status": "Low Risk & Synergy"
            },
            "mdma": {
                "status": "Low Risk & Synergy"
            },
            "mescaline": {
                "status": "Low Risk & Synergy"
            },
            "mxe": {
                "status": "Low Risk & Synergy"
            },
            "nbomes": {
                "status": "Low Risk & Synergy"
            },
            "nitrous": {
                "status": "Low Risk & Synergy"
            },
            "opioids": {
                "status": "Low Risk & No Synergy"
            },
            "pcp": {
                "status": "Low Risk & Synergy"
            },
            "ssris": {
                "status": "Low Risk & Decrease"
            },
            "tramadol": {
                "note": "Tramadol is well known to lower seizure threshold and psychedelics also cause occasional seizures.",
                "status": "Unsafe"
            }
        },
        "dose_note": " NOTE: Dosage ranges will vary between fungus strains. The doses given are for *dried* mushrooms, which are many times more potent by weight than those consumed when wet.",
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-24"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "1.5-3.5g",
                "Light": "0.5-1.5g",
                "Strong": "3.5g+"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "4-6"
        },
        "formatted_effects": [
            "visual distortion",
            "color enhancement",
            "sense of connectedness with nature",
            "sense of well being",
            "sense of wonder"
        ],
        "formatted_onset": {
            "value": "Varies"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_Psilocybin.shtml"
        },
        "name": "mushrooms",
        "pretty_name": "Mushrooms",
        "properties": {
            "after-effects": "1-24 hours.",
            "aliases": [
                "psilocybin",
                "shrooms",
                "mushroom",
                "psylocybin"
            ],
            "categories": [
                "psychedelic",
                "common"
            ],
            "dose": "Oral Light: 0.5-1.5g Common: 1.5-3.5g Strong: 3.5g+ | NOTE: Dosage ranges will vary between fungus strains. The doses given are for *dried* mushrooms, which are many times more potent by weight than those consumed when wet.",
            "duration": "4-6 hours",
            "effects": "visual distortion, color enhancement, sense of connectedness with nature, sense of well being, sense of wonder",
            "half-life": "1-4 hours",
            "onset": "Varies depending on dosage, common doses (See ~drug mushrooms dose) are normally felt within one hour",
            "summary": "Fungi containing psilocybin, a prototypical psychedelic with similar effects to LSD, but with a shorter duration; also considered as being more confusing, introspective and entheogenic. Usually refers to psilocybe mushrooms rather than Amanitas, which have different effects. Are considered physically safe if properly identified, which should always be done by an expert."
        },
        "pweffects": {
            "8B Geometry - Exposure to inner mechanics of consciousness": "https://psychonautwiki.org/wiki/8B_Geometry_-_Exposure_to_inner_mechanics_of_consciousness",
            "Acuity enhancement": "https://psychonautwiki.org/wiki/Acuity_enhancement",
            "After images": "https://psychonautwiki.org/wiki/After_images",
            "Analysis enhancement": "https://psychonautwiki.org/wiki/Analysis_enhancement",
            "Auditory distortion": "https://psychonautwiki.org/wiki/Auditory_distortion",
            "Auditory enhancement": "https://psychonautwiki.org/wiki/Auditory_enhancement",
            "Auditory hallucinations": "https://psychonautwiki.org/wiki/Auditory_hallucinations",
            "Autonomous entities": "https://psychonautwiki.org/wiki/Autonomous_entities",
            "Changes in gravity": "https://psychonautwiki.org/wiki/Changes_in_gravity",
            "Colour enhancement": "https://psychonautwiki.org/wiki/Colour_enhancement",
            "Colour shifting": "https://psychonautwiki.org/wiki/Colour_shifting",
            "Conceptual thinking": "https://psychonautwiki.org/wiki/Conceptual_thinking",
            "Creativity enhancement": "https://psychonautwiki.org/wiki/Creativity_enhancement",
            "Delusions": "https://psychonautwiki.org/wiki/Delusions",
            "Drifting": "https://psychonautwiki.org/wiki/Drifting",
            "D\u00e9j\u00e0 vu": "https://psychonautwiki.org/wiki/D%C3%A9j%C3%A0_vu",
            "Emotion enhancement": "https://psychonautwiki.org/wiki/Emotion_enhancement",
            "Enhancement and suppression cycles": "https://psychonautwiki.org/wiki/Enhancement_and_suppression_cycles",
            "Excessive yawning": "https://psychonautwiki.org/wiki/Excessive_yawning",
            "Exposure to inner mechanics of consciousness": "https://psychonautwiki.org/wiki/Exposure_to_inner_mechanics_of_consciousness",
            "External hallucinations": "https://psychonautwiki.org/wiki/External_hallucinations",
            "Feelings of interdependent opposites": "https://psychonautwiki.org/wiki/Feelings_of_interdependent_opposites",
            "Feelings of predeterminism": "https://psychonautwiki.org/wiki/Feelings_of_predeterminism",
            "Feelings of self-design": "https://psychonautwiki.org/wiki/Feelings_of_self-design",
            "Geometry": "https://psychonautwiki.org/wiki/Geometry",
            "Immersion enhancement": "https://psychonautwiki.org/wiki/Immersion_enhancement",
            "Internal hallucinations": "https://psychonautwiki.org/wiki/Internal_hallucinations",
            "Memory suppression": "https://psychonautwiki.org/wiki/Memory_suppression",
            "Mindfulness": "https://psychonautwiki.org/wiki/Mindfulness",
            "Nausea": "https://psychonautwiki.org/wiki/Nausea",
            "Novelty enhancement": "https://psychonautwiki.org/wiki/Novelty_enhancement",
            "Pattern recognition enhancement": "https://psychonautwiki.org/wiki/Pattern_recognition_enhancement",
            "Personal bias suppression": "https://psychonautwiki.org/wiki/Personal_bias_suppression",
            "Perspective alterations": "https://psychonautwiki.org/wiki/Perspective_alterations",
            "Pupil dilation": "https://psychonautwiki.org/wiki/Pupil_dilation",
            "Runny nose": "https://psychonautwiki.org/wiki/Runny_nose",
            "Salivation": "https://psychonautwiki.org/wiki/Salivation",
            "Scenarios and plots": "https://psychonautwiki.org/wiki/Scenarios_and_plots",
            "Scenery slicing": "https://psychonautwiki.org/wiki/Scenery_slicing",
            "Sedation": "https://psychonautwiki.org/wiki/Sedation",
            "Settings, sceneries, and landscapes": "https://psychonautwiki.org/wiki/Settings,_sceneries,_and_landscapes",
            "Spirituality enhancement": "https://psychonautwiki.org/wiki/Spirituality_enhancement",
            "Spontaneous tactile sensations": "https://psychonautwiki.org/wiki/Spontaneous_tactile_sensations",
            "Subconscious communication": "https://psychonautwiki.org/wiki/Subconscious_communication",
            "Symmetrical texture repetition": "https://psychonautwiki.org/wiki/Symmetrical_texture_repetition",
            "Synaesthesia": "https://psychonautwiki.org/wiki/Synaesthesia",
            "Thought connectivity": "https://psychonautwiki.org/wiki/Thought_connectivity",
            "Time distortion": "https://psychonautwiki.org/wiki/Time_distortion",
            "Tracers": "https://psychonautwiki.org/wiki/Tracers",
            "Transformations": "https://psychonautwiki.org/wiki/Transformations"
        },
        "sources": {
            "_general": [
                "A study done on psilocybin leads psychiatrists to believe there are implications that it may help to treat ptsd - http://bjp.rcpsych.org/content/200/3/238.short"
            ]
        }
    },
    "mxe": {
        "aliases": [
            "methoxetamine",
            "3-meo-2'oxo-pce"
        ],
        "categories": [
            "dissociative",
            "research-chemical",
            "habit-forming"
        ],
        "combos": {
            "2c-t-x": {
                "status": "Caution"
            },
            "2c-x": {
                "status": "Low Risk & Synergy"
            },
            "5-meo-xxt": {
                "note": "Little information exists about this combination.",
                "status": "Low Risk & Synergy"
            },
            "alcohol": {
                "note": "There is a high risk of memory loss, vomiting and severe ataxia from this combination.",
                "status": "Dangerous"
            },
            "amphetamines": {
                "note": "Risk of tachycardia, hypertension, and manic states",
                "status": "Caution"
            },
            "amt": {
                "status": "Dangerous"
            },
            "benzodiazepines": {
                "note": "Both substances potentiate the ataxia and sedation caused by the other and can lead to unexpected loss of consciousness at high doses. Place affected patients in the recovery position to prevent vomit aspiration from excess.",
                "status": "Caution"
            },
            "benzos": {
                "note": "Both substances potentiate the ataxia and sedation caused by the other and can lead to unexpected loss of consciousness at high doses. Place affected patients in the recovery position to prevent vomit aspiration from excess.",
                "status": "Caution"
            },
            "caffeine": {
                "note": "No likely interactions",
                "status": "Low Risk & No Synergy"
            },
            "cannabis": {
                "status": "Low Risk & Synergy"
            },
            "cocaine": {
                "note": "Stimulants taken with MXE can lead to hypermanic states much more easily, especially if sleep is avoided.",
                "status": "Caution"
            },
            "dmt": {
                "status": "Low Risk & Synergy"
            },
            "dox": {
                "note": "As an NMDA antagonist MXE potentiates DOx which can be unpleasantly intense",
                "status": "Caution"
            },
            "dxm": {
                "status": "Low Risk & No Synergy"
            },
            "ghb/gbl": {
                "note": "Both substances cause ataxia and bring a risk of vomiting and unconsciousness. If the patient falls unconscious while under the influence there is a severe risk of vomit aspiration if they are not placed in the recovery position.",
                "status": "Dangerous"
            },
            "ketamine": {
                "status": "Low Risk & Synergy"
            },
            "lsd": {
                "status": "Low Risk & Synergy"
            },
            "maois": {
                "note": "MAO-B inhibitors appear to increase the potency of MXE. MAO-A inhbitors have some negative reports associated with the combination but there isn't much information available",
                "status": "Unsafe"
            },
            "mdma": {
                "note": "There have been reports of risky serotonergic interactions when the two are taken at the same time, but MXE taken to the end of an MDMA experience does not appear to cause the same issues.",
                "status": "Caution"
            },
            "mescaline": {
                "status": "Low Risk & Synergy"
            },
            "mushrooms": {
                "status": "Low Risk & Synergy"
            },
            "nbomes": {
                "note": "As an NMDA antagonist MXE potentiates NBOMes which can be unpleasantly intense",
                "status": "Caution"
            },
            "nitrous": {
                "status": "Low Risk & Synergy"
            },
            "opioids": {
                "note": "This combination can potentiate the effects of the opioid",
                "status": "Dangerous"
            },
            "pcp": {
                "note": "There are no reports available about this combination",
                "status": "Caution"
            },
            "ssris": {
                "note": "Depending on the SSRI this combination can be unpredictable",
                "status": "Caution"
            },
            "tramadol": {
                "status": "Dangerous"
            }
        },
        "dose_note": " NOTE: Bodyweight plays a slight factor in MXE dosing, these are values for a 175lb (80kg) male",
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "2-48"
        },
        "formatted_dose": {
            "Insufflated": {
                "Common": "20-35mg",
                "Heavy": "60mg+",
                "Light": "10-20mg",
                "M-Hole": "70mg+",
                "Strong": "35-60mg",
                "Threshold": "5-10mg"
            },
            "Oral": {
                "Common": "25-35",
                "Light": "15-25mg",
                "M-Hole": "75mg+",
                "Strong": "40-65mg",
                "Threshold": "10-15mg"
            },
            "Sublingual": {
                "Common": "40-60mg",
                "Low": "10-20mg",
                "M-Hole": "75-100mg",
                "Strong": "60-75mg",
                "Threshold": "5-10mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "3-6"
        },
        "formatted_onset": {
            "Insufflated": "5-20",
            "Oral": "30-60",
            "Sublingual": "15-45",
            "_unit": "minutes"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_Methoxetamine_.shtml"
        },
        "name": "mxe",
        "pretty_name": "MXE",
        "properties": {
            "after-effects": "2-48 hours",
            "aliases": [
                "methoxetamine",
                "3-meo-2'oxo-pce"
            ],
            "avoid": "Alcohol, Benzodiazepines, Opioids, Other CNS depressants, including substances that have an effect on Serotonin (For example, yet not limited to MDMA, Amphetamine, and other stimulants)",
            "categories": [
                "dissociative",
                "research-chemical",
                "habit-forming"
            ],
            "dose": "Insufflated Threshold: 5-10mg Light: 10-20mg Common: 20-35mg Strong: 35-60mg Heavy: 60mg+ M-Hole: 70mg+ | Oral Threshold: 10-15mg Light: 15-25mg Common: 25-35 Strong: 40-65mg M-Hole: 75mg+ | Sublingual Threshold: 5-10mg Low: 10-20mg Common: 40-60mg Strong: 60-75mg M-Hole: 75-100mg | NOTE: Bodyweight plays a slight factor in MXE dosing, these are values for a 175lb (80kg) male",
            "duration": "3-6 hours",
            "legality": "Methoxetamine is illegal in the US states Arizona, Florida, Indiana, Louisiana, Minnesota, North Dakota, Ohio and Virginia. It is also banned in Brazil, France, Germany, Japan, Russia and the UK.",
            "onset": "Insufflated: 5-20 minutes | Oral: 30-60 minutes | Sublingual: 15-45 minutes",
            "summary": "A popular dissociative drug which is an analogue of ketamine, though less sedating and more potent by weight, with a subjectively more 'complicated' set of effects."
        },
        "pweffects": {
            "Acuity suppression": "https://psychonautwiki.org/wiki/Acuity_suppression",
            "Amnesia": "https://psychonautwiki.org/wiki/Amnesia",
            "Analysis enhancement": "https://psychonautwiki.org/wiki/Analysis_enhancement",
            "Anxiety suppression": "https://psychonautwiki.org/wiki/Anxiety_suppression",
            "Auditory distortion": "https://psychonautwiki.org/wiki/Auditory_distortion",
            "Auditory hallucinations": "https://psychonautwiki.org/wiki/Auditory_hallucinations",
            "Auditory suppression": "https://psychonautwiki.org/wiki/Auditory_suppression",
            "Autonomous entities": "https://psychonautwiki.org/wiki/Autonomous_entities",
            "Cognitive euphoria": "https://psychonautwiki.org/wiki/Cognitive_euphoria",
            "Compulsive redosing": "https://psychonautwiki.org/wiki/Compulsive_redosing",
            "Conceptual thinking": "https://psychonautwiki.org/wiki/Conceptual_thinking",
            "Consciousness disconnection": "https://psychonautwiki.org/wiki/Consciousness_disconnection",
            "Creativity enhancement": "https://psychonautwiki.org/wiki/Creativity_enhancement",
            "Depersonalization": "https://psychonautwiki.org/wiki/Depersonalization",
            "Derealization": "https://psychonautwiki.org/wiki/Derealization",
            "Disinhibition": "https://psychonautwiki.org/wiki/Disinhibition",
            "Dizziness": "https://psychonautwiki.org/wiki/Dizziness",
            "Double vision": "https://psychonautwiki.org/wiki/Double_vision",
            "D\u00e9j\u00e0 vu": "https://psychonautwiki.org/wiki/D%C3%A9j%C3%A0_vu",
            "Environmental cubism": "https://psychonautwiki.org/wiki/Environmental_cubism",
            "Environmental orbism": "https://psychonautwiki.org/wiki/Environmental_orbism",
            "External hallucinations": "https://psychonautwiki.org/wiki/External_hallucinations",
            "Frame rate suppression": "https://psychonautwiki.org/wiki/Frame_rate_suppression",
            "Geometry": "https://psychonautwiki.org/wiki/Geometry",
            "Immersion enhancement": "https://psychonautwiki.org/wiki/Immersion_enhancement",
            "Information processing suppression": "https://psychonautwiki.org/wiki/Information_processing_suppression",
            "Internal hallucinations": "https://psychonautwiki.org/wiki/Internal_hallucinations",
            "Mania": "https://psychonautwiki.org/wiki/Mania",
            "Memory suppression": "https://psychonautwiki.org/wiki/Memory_suppression",
            "Motor control loss": "https://psychonautwiki.org/wiki/Motor_control_loss",
            "Nausea": "https://psychonautwiki.org/wiki/Nausea",
            "Pattern recognition suppression": "https://psychonautwiki.org/wiki/Pattern_recognition_suppression",
            "Perception of decreased weight": "https://psychonautwiki.org/wiki/Perception_of_decreased_weight",
            "Perspective alterations": "https://psychonautwiki.org/wiki/Perspective_alterations",
            "Perspective distortions": "https://psychonautwiki.org/wiki/Perspective_distortions",
            "Physical autonomy": "https://psychonautwiki.org/wiki/Physical_autonomy",
            "Physical euphoria": "https://psychonautwiki.org/wiki/Physical_euphoria",
            "Scenarios and plots": "https://psychonautwiki.org/wiki/Scenarios_and_plots",
            "Scenery slicing": "https://psychonautwiki.org/wiki/Scenery_slicing",
            "Settings, sceneries, and landscapes": "https://psychonautwiki.org/wiki/Settings,_sceneries,_and_landscapes",
            "Spontaneous tactile sensations": "https://psychonautwiki.org/wiki/Spontaneous_tactile_sensations",
            "Tactile disconnection": "https://psychonautwiki.org/wiki/Tactile_disconnection",
            "Tactile suppression": "https://psychonautwiki.org/wiki/Tactile_suppression",
            "Thought deceleration": "https://psychonautwiki.org/wiki/Thought_deceleration",
            "Time distortion": "https://psychonautwiki.org/wiki/Time_distortion",
            "Unity and interconnectedness": "https://psychonautwiki.org/wiki/Unity_and_interconnectedness",
            "Visual disconnection": "https://psychonautwiki.org/wiki/Visual_disconnection",
            "Visual sliding": "https://psychonautwiki.org/wiki/Visual_sliding"
        },
        "sources": {
            "_general": [
                "Methoxetamine associated reversible cerebellar toxicity: three cases with analytical confirmation. - http://www.ncbi.nlm.nih.gov/pubmed/22578175",
                "Methoxetamine: from drug of abuse to rapid-acting antidepressant. - http://www.ncbi.nlm.nih.gov/pubmed/22819129",
                "From Special K to Special M: the evolution of the recreational use of ketamine and methoxetamine. - http://www.ncbi.nlm.nih.gov/pubmed/23421859",
                "Ketamine-derived designer drug methoxetamine: metabolism including isoenzyme kinetics and toxicological detectability using GC-MS and LC-(HR-)MSn - http://www.ncbi.nlm.nih.gov/pubmed/23774830",
                "Three months of methoxetamine administration is associated with significant bladder and renal toxicity in mice. - http://www.ncbi.nlm.nih.gov/pubmed/24580056",
                "Analytical findings of an acute intoxication after inhalation of methoxetamine. - http://www.ncbi.nlm.nih.gov/pubmed/24904014",
                "Acute methoxetamine and amphetamine poisoning with fatal outcome: a case report - http://www.ncbi.nlm.nih.gov/pubmed/25060403",
                "From \"Special K\" to \"Special M\": the evolution of the recreational use of ketamine and methoxetamine. - http://www.ncbi.nlm.nih.gov/pubmed/23421859",
                "Ketamine-derived designer drug methoxetamine: metabolism including isoenzyme kinetics and toxicological detectability using GC-MS and LC-(HR-)MSn. - http://www.ncbi.nlm.nih.gov/pubmed/23774830",
                "Acute methoxetamine and amphetamine poisoning with fatal outcome: a case report. - http://www.ncbi.nlm.nih.gov/pubmed/25060403~adddrugsource cannabis general Cannabis use in relation to obesity and insulin resistance in the Inuit population. - https://www.ncbi.nlm.nih.gov/pubmed/25557382",
                "3 case reports of toxicity due to recreational use of MXE - http://link.springer.com/article/10.1007/s00228-011-1199-9"
            ],
            "legality": [
                "http://www.azleg.gov/DocumentsForBill.asp?Session_ID=112&Bill_Number=HB2453",
                "http://www.leg.state.fl.us/Statutes/index.cfm?App_mode=Display_Statute&URL=0800-0899/0893/0893.html",
                "http://www.in.gov/legislative/ic/2010/title35/ar31.5/ch2.html",
                "http://www.legis.la.gov/legis/ViewDocument.aspx?d=850979&n=HB10%20Act",
                "https://www.revisor.mn.gov/statutes/?id=152.02",
                "http://www.legis.nd.gov/cencode/t19c03-1.pdf?20140721032549",
                "http://www.legislature.state.oh.us/BillText130/130_HB_315_RH_N.html",
                "http://www.legislation.gov.uk/uksi/2013/239/contents/made"
            ]
        }
    },
    "mxm": {
        "aliases": [
            "methoxmetamine"
        ],
        "categories": [
            "dissociative",
            "research-chemical",
            "habit-forming"
        ],
        "dose_note": " NOTE: (Once again, do not take this as a catch all.)",
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "2-4"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "40-60mg",
                "Light": "20-40mg",
                "Strong": "60-100mg+",
                "Threshold": "10-20mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "3-5"
        },
        "formatted_onset": {
            "_unit": "hours",
            "value": "Varying"
        },
        "name": "mxm",
        "pretty_name": "MXM",
        "properties": {
            "after-effects": "2-4 hours.",
            "aliases": [
                "methoxmetamine"
            ],
            "avoid": "CNS depressants.",
            "categories": [
                "dissociative",
                "research-chemical",
                "habit-forming"
            ],
            "dose": "Threshold: 10-20mg Light: 20-40mg Common: 40-60mg Strong: 60-100mg+",
            "duration": "3-5 hours. (Dependant on dose/ROA)",
            "onset": "Varying widely from reports of 30 minutes up to four hours.",
            "summary": "An arylcyclohexamine, dissociative and anaesthetic closely related to methoxetamine, ketamine and PCP. It has seen some popularity among RC users, being advertised as an MXE replacement after its illegalisation in many parts of the world - however, users report a more stimulating experience closer to those caused by PCP and its analogues."
        }
    },
    "naphyrone": {
        "categories": [
            "stimulant",
            "research-chemical",
            "habit-forming"
        ],
        "formatted_dose": {
            "(Tentative)": {
                "Common": "20-35mg",
                "Oral": "Light",
                "Strong": "35-50mg+"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "6-12"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "Within"
        },
        "name": "naphyrone",
        "pretty_name": "Naphyrone",
        "properties": {
            "categories": [
                "stimulant",
                "research-chemical",
                "habit-forming"
            ],
            "dose": "(Tentative) Oral: Light: 10-20mg Common: 20-35mg Strong: 35-50mg+",
            "duration": "6-12 hours (Very dependant on dose)",
            "onset": "Within 30 minutes.",
            "summary": "A drug derived from pyrovalerone which acts as a TRI, producing stimulating effects. Had been sold in a blend called \"NRG-1\" Little information exists about the safety profile of this drug."
        }
    },
    "naproxen": {
        "categories": [
            "common"
        ],
        "dose_note": " Note: Maximum recommended daily dose is 1500mg.",
        "formatted_dose": {
            "Common:": {
                "Common": "250-500mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "4-6"
        },
        "formatted_onset": {
            "value": "1"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_Naproxen.shtml"
        },
        "name": "naproxen",
        "pretty_name": "Naproxen",
        "properties": {
            "avoid": "Alcoholic beverages.",
            "categories": [
                "common"
            ],
            "dose": "Common: 250-500mg | Note: Maximum recommended daily dose is 1500mg.",
            "duration": "4-6 hours. ER forumulations up to 12 hours.",
            "onset": "1 hour.",
            "summary": "A very common pain reliever/fever reducer also known as Aleve. Naproxen is in the same category as Ibuprofen, which is also a nonsteroidal anti-inflammatory. This drug is available in most places over the counter. Is sometimes used to reduce the body-load of certain drugs."
        }
    },
    "neb": {
        "aliases": [
            "n-ethylbuphedrone"
        ],
        "categories": [
            "stimulant",
            "research-chemical",
            "habit-forming"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-6"
        },
        "formatted_dose": {
            "Insufflated": {
                "Common": "15-30mg",
                "Light": "10-15mg",
                "Strong": "30-45mg"
            },
            "Oral": {
                "Common": "50-80mg",
                "Light": "30-50mg",
                "Strong": "80-100mg+",
                "Threshold": "30mg"
            }
        },
        "formatted_duration": {
            "Insufflated": "90-120",
            "Oral": "90-180",
            "_unit": "minutes"
        },
        "formatted_onset": {
            "Insufflated": "5-10",
            "Oral": "20-30",
            "_unit": "minutes"
        },
        "name": "neb",
        "pretty_name": "NEB",
        "properties": {
            "after-effects": "1-6 hours.",
            "aliases": [
                "n-ethylbuphedrone"
            ],
            "categories": [
                "stimulant",
                "research-chemical",
                "habit-forming"
            ],
            "dose": "Oral Threshold: 30mg Light: 30-50mg Common: 50-80mg Strong: 80-100mg+ | Insufflated Light: 10-15mg Common: 15-30mg Strong: 30-45mg",
            "duration": "Oral: 90-180 minutes. | Insufflated: 90-120 minutes.",
            "onset": "Oral: 20-30 minutes | Insufflated: 5-10 minutes.",
            "summary": "N-Ethylbuphedrone, an uncommon substituted cathinone. First appeared around 2011 but has not become popular. Effects should somewhat resemble other cathinones generally. Short-acting stimulating with more dopamine action than serotonin."
        }
    },
    "nefiracetam": {
        "aliases": [
            "nerfiracetam"
        ],
        "categories": [
            "nootropic",
            "tentative",
            "research-chemical"
        ],
        "dose_note": " NOTE: Usually divided into three doses. Roughly around 0.5mg-1.6mg/kg.",
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-8"
        },
        "formatted_dose": {
            "Common:": {
                "Common": "150-450mg."
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "6-12"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "30-60"
        },
        "name": "nefiracetam",
        "pretty_name": "Nefiracetam",
        "properties": {
            "after-effects": "1-8 hours.",
            "aliases": [
                "nerfiracetam"
            ],
            "categories": [
                "nootropic",
                "tentative",
                "research-chemical"
            ],
            "dose": "Common: 150-450mg. | NOTE: Usually divided into three doses. Roughly around 0.5mg-1.6mg/kg.",
            "duration": "6-12 hours.",
            "onset": "30-60 minutes.",
            "summary": "Nootropic compound of the racetam family. Seems to enhance both GABAergic and cholinergic signalling. Long term use appears to be neuroprotective. Fat soluble."
        }
    },
    "nicomorphine": {
        "categories": [
            "opioid",
            "depressant",
            "habit-forming",
            "tentative"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-6"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "5-10mg",
                "Light": "2.5-5mg",
                "Strong": "10-20mg+"
            }
        },
        "formatted_duration": {
            "Intravenously": "2-4",
            "Oral": "4-6",
            "_unit": "hours"
        },
        "formatted_onset": {
            "Intravenously": "1-2",
            "Oral": "15-30",
            "_unit": "minutes"
        },
        "name": "nicomorphine",
        "pretty_name": "Nicomorphine",
        "properties": {
            "after-effects": "1-6 hours.",
            "avoid": "All other CNS depressants.",
            "categories": [
                "opioid",
                "depressant",
                "habit-forming",
                "tentative"
            ],
            "dose": "Oral Light: 2.5-5mg Common: 5-10mg Strong: 10-20mg+",
            "duration": "Oral: 4-6 hours | Intravenously: 2-4 hours.",
            "onset": "Oral: 15-30 minutes | Intravenously: 1-2 minutes.",
            "summary": "Opioid agonist that is 2-3x the potency of Morphine. Is used in few countries. Rapid onset of effects, due to the increased lipid solubility."
        }
    },
    "nicotine": {
        "categories": [
            "habit-forming",
            "nootropic",
            "common"
        ],
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_Nicotine.shtml"
        },
        "name": "nicotine",
        "pretty_name": "Nicotine",
        "properties": {
            "categories": [
                "habit-forming",
                "nootropic",
                "common"
            ],
            "summary": "A chemical found in tobacco, aubergines and tomatoes which is considered one of the most addictive drugs in existence. It is a mild stimulant, with stress relieving effects. It is widely used in the form of cigarettes, the use of which carries a high risk of causing cancer or heart issues over time. Increasingly, it is 'vaped' as a purportedly safer alternative to smoking."
        },
        "pweffects": {
            "Abnormal heartbeat": "https://psychonautwiki.org/wiki/Abnormal_heartbeat",
            "Anxiety": "https://psychonautwiki.org/wiki/Anxiety",
            "Appetite suppression": "https://psychonautwiki.org/wiki/Appetite_suppression",
            "Cognitive euphoria": "https://psychonautwiki.org/wiki/Cognitive_euphoria",
            "Compulsive redosing": "https://psychonautwiki.org/wiki/Compulsive_redosing",
            "Dizziness": "https://psychonautwiki.org/wiki/Dizziness",
            "Focus enhancement": "https://psychonautwiki.org/wiki/Focus_enhancement",
            "Increased libido": "https://psychonautwiki.org/wiki/Increased_libido",
            "Memory enhancement": "https://psychonautwiki.org/wiki/Memory_enhancement",
            "Motivation enhancement": "https://psychonautwiki.org/wiki/Motivation_enhancement",
            "Nausea": "https://psychonautwiki.org/wiki/Nausea",
            "Thought acceleration": "https://psychonautwiki.org/wiki/Thought_acceleration",
            "Vasoconstriction": "https://psychonautwiki.org/wiki/Vasoconstriction"
        },
        "sources": {
            "_general": [
                "Nicotine treatment of mild cognitive impairment: a 6-month double-blind pilot clinical trial. -https://www.ncbi.nlm.nih.gov/pubmed/22232050",
                "Nicotine treatment of mild cognitive impairment: a 6-month double-blind pilot clinical trial. - https://www.ncbi.nlm.nih.gov/pubmed/22232050",
                "Site of nicotine absorption from a vapour inhaler--comparison with cigarette smoking - http://www.ncbi.nlm.nih.gov/pubmed/10663452",
                "Brand differences of free-base nicotine delivery in cigarette smoke: the view of the tobacco industry documents - http://www.ncbi.nlm.nih.gov/pubmed/16728749",
                "Exposure to nicotine produces an increase in dopamine D2(High) receptors: a possible mechanism for dopamine hypersensitivity. - http://www.ncbi.nlm.nih.gov/pubmed/20942582",
                "Tobacco leaf, smoke and smoking, MAO inhibitors, Parkinson's disease and neuroprotection are there links? - http://www.ncbi.nlm.nih.gov/pubmed/14697903",
                "Brand differences of free-base nicotine delivery in cigarette smoke: the view of the tobacco industry documents. - http://www.ncbi.nlm.nih.gov/pubmed/16728749",
                "Do electronic cigarettes impart a lower potential disease burden than conventional tobacco cigarettes? Review on E-cigarette vapor versus tobacco s... - http://www.ncbi.nlm.nih.gov/pubmed/25302452",
                "The impact of caffeine use on tobacco cessation and withdrawal. - http://www.ncbi.nlm.nih.gov/pubmed/9022872"
            ]
        }
    },
    "nifoxipam": {
        "categories": [
            "benzodiazepine",
            "research-chemical",
            "habit-forming",
            "tentative",
            "depressant"
        ],
        "dose_note": " NOTE: Higher doses will increase the likelihood of blacking out",
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-24"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "500ug-1000ug",
                "Heavy": "1000ug-2000ug+",
                "Light": "250ug-500ug."
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "10-18"
        },
        "formatted_effects": [
            "Anxiolytic",
            "Sedative",
            "Muscle Relaxant",
            "Amnesia",
            "Dystaxia",
            "Hypnotic",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "10-75"
        },
        "name": "nifoxipam",
        "pretty_name": "Nifoxipam",
        "properties": {
            "after-effects": "1-24 hours.",
            "avoid": "All other CNS depressants.",
            "categories": [
                "benzodiazepine",
                "research-chemical",
                "habit-forming",
                "tentative",
                "depressant"
            ],
            "dose": "Oral Light: 250ug-500ug. Common: 500ug-1000ug Heavy: 1000ug-2000ug+ | NOTE: Higher doses will increase the likelihood of blacking out",
            "duration": "10-18 hours. ",
            "effects": "Anxiolytic, Sedative, Muscle Relaxant, Amnesia, Dystaxia, Hypnotic.",
            "onset": "10-75 minutes.",
            "summary": "An uncommon and relatively new RC benzodiazepine, and metabolite of the hypnotic benzodiazepine flunitrazepam. Little information about the pharmacological properties of this drug exists. Likely to be a strong sedative and hypnotic."
        },
        "pweffects": {
            "Amnesia": "https://psychonautwiki.org/wiki/Amnesia",
            "Analysis suppression": "https://psychonautwiki.org/wiki/Analysis_suppression",
            "Anxiety suppression": "https://psychonautwiki.org/wiki/Anxiety_suppression",
            "Cognitive euphoria": "https://psychonautwiki.org/wiki/Cognitive_euphoria",
            "Compulsive redosing": "https://psychonautwiki.org/wiki/Compulsive_redosing",
            "Delusions": "https://psychonautwiki.org/wiki/Delusions",
            "Disinhibition": "https://psychonautwiki.org/wiki/Disinhibition",
            "Dizziness": "https://psychonautwiki.org/wiki/Dizziness",
            "Emotion suppression": "https://psychonautwiki.org/wiki/Emotion_suppression",
            "Information processing suppression": "https://psychonautwiki.org/wiki/Information_processing_suppression",
            "Motor control loss": "https://psychonautwiki.org/wiki/Motor_control_loss",
            "Muscle relaxation": "https://psychonautwiki.org/wiki/Muscle_relaxation",
            "Respiratory depression": "https://psychonautwiki.org/wiki/Respiratory_depression",
            "Sedation": "https://psychonautwiki.org/wiki/Sedation",
            "Thought deceleration": "https://psychonautwiki.org/wiki/Thought_deceleration"
        }
    },
    "nimetazepam": {
        "aliases": [
            "erimin"
        ],
        "categories": [
            "benzodiazepine",
            "habit-forming",
            "depressant"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "12-24"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "5-10mg",
                "Light": "2.5-5mg",
                "Strong": "10-20mg+"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "5-8"
        },
        "formatted_effects": [
            "Anxiolytic",
            "Sedative",
            "Muscle Relaxant",
            "Amnesia",
            "Dystaxia",
            "Hypnotic",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "15-30"
        },
        "name": "nimetazepam",
        "pretty_name": "Nimetazepam",
        "properties": {
            "after-effects": "12-24 hours",
            "aliases": [
                "erimin"
            ],
            "avoid": "All other CNS depressants.",
            "categories": [
                "benzodiazepine",
                "habit-forming",
                "depressant"
            ],
            "dose": "Oral Light: 2.5-5mg Common: 5-10mg Strong: 10-20mg+",
            "duration": "5-8 hours",
            "effects": "Anxiolytic, Sedative, Muscle Relaxant, Amnesia, Dystaxia, Hypnotic.",
            "onset": "15-30 minutes.",
            "summary": "A pharmaceutical benzodiazepine with hypnotic and sedative effects. Rarely seen in the West but reportedly very frequently abused in Malaysia."
        }
    },
    "nitemazepam": {
        "aliases": [
            "3-hydroxynimetazepam"
        ],
        "categories": [
            "benzodiazepine",
            "depressant",
            "habit-forming",
            "tentative"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-12"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "1.5-3mg",
                "Light": "1-1.5mg",
                "Strong": "3-5mg+"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "6-12"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "15-45"
        },
        "name": "nitemazepam",
        "pretty_name": "Nitemazepam",
        "properties": {
            "after-effects": "1-12 hours.",
            "aliases": [
                "3-hydroxynimetazepam"
            ],
            "categories": [
                "benzodiazepine",
                "depressant",
                "habit-forming",
                "tentative"
            ],
            "dose": "Light: 1-1.5mg Common: 1.5-3mg Strong: 3-5mg+",
            "duration": "6-12 hours.",
            "onset": "15-45 minutes.",
            "summary": "A new RC benzodiazepine based off the chemical structure of Nimetazepam. It is relatively new and not many experience reports exist on it. It is expected to feel similar to temazepam."
        }
    },
    "nitracaine": {
        "categories": [
            "stimulant",
            "tentative",
            "habit-forming"
        ],
        "formatted_dose": {
            "Insufflated": {
                "Common": "30-40mg",
                "Light": "20-30mg",
                "Strong": "50mg+"
            },
            "Oral": {
                "Common": "100-150mg",
                "Low": "100mg",
                "Strong": "150-175mg+"
            }
        },
        "formatted_duration": {
            "Insufflated": "2-4",
            "Oral": "3-5",
            "_unit": "hours"
        },
        "formatted_onset": {
            "Insufflated": "5-10",
            "Oral": "10-30",
            "_unit": "minutes"
        },
        "name": "nitracaine",
        "pretty_name": "Nitracaine",
        "properties": {
            "categories": [
                "stimulant",
                "tentative",
                "habit-forming"
            ],
            "dose": "Oral Low: 100mg Common: 100-150mg Strong: 150-175mg+ | Insufflated Light: 20-30mg Common: 30-40mg Strong: 50mg+",
            "duration": "Insufflated: 2-4 hours | Oral: 3-5 hours.",
            "onset": "Oral: 10-30 minutes. | Insufflated: 5-10 minutes",
            "summary": "An analogue of dimethocaine with local anaesthetic and stimulant properties, marketed in the RC scene as a Cocaine replacement. Has not seen widespread popularity."
        }
    },
    "nitrazepam": {
        "aliases": [
            "mogadon",
            "baronite",
            "dormin",
            "dreem",
            "enzed",
            "gentravit",
            "hypnonex",
            "hypnoril",
            "hypnotex",
            "konit",
            "nicare",
            "nigap",
            "nipam",
            "nirosun",
            "nitavan",
            "nithra"
        ],
        "categories": [
            "benzodiazepine",
            "habit-forming",
            "depressant"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "6-12"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "5-15mg",
                "Heavy": "20-30mg+",
                "Light": "2-5mg",
                "Strong": "15-20mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "5-8"
        },
        "formatted_effects": [
            "Anxiolytic",
            "Sedative",
            "Muscle Relaxant",
            "Amnesia",
            "Dystaxia",
            "Hypnotic",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "10-40"
        },
        "name": "nitrazepam",
        "pretty_name": "Nitrazepam",
        "properties": {
            "after-effects": "6-12 hours",
            "aliases": [
                "mogadon",
                "baronite",
                "dormin",
                "dreem",
                "enzed",
                "gentravit",
                "hypnonex",
                "hypnoril",
                "hypnotex",
                "konit",
                "nicare",
                "nigap",
                "nipam",
                "nirosun",
                "nitavan",
                "nithra"
            ],
            "categories": [
                "benzodiazepine",
                "habit-forming",
                "depressant"
            ],
            "dose": "Light: 2-5mg Common: 5-15mg Strong: 15-20mg Heavy: 20-30mg+",
            "dose_to_diazepam": "Nitrazepam - 10mg ~=10mg Diazepam.",
            "duration": "5-8 hours.",
            "effects": "Anxiolytic, Sedative, Muscle Relaxant, Amnesia, Dystaxia, Hypnotic.",
            "onset": "10-40 minutes",
            "summary": "Hypnotic Benzodiazepine, that is used for short term relief of anxiety and insomnia. It has a pronouced affect on respritory action."
        }
    },
    "nitrazolam": {
        "categories": [
            "benzodiazepine",
            "habit-forming",
            "depressant",
            "tentative"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "2-24"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "1-2mg",
                "Light": "0.5-1mg",
                "Strong": "2-3mg+"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "5-10"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "15-30"
        },
        "name": "nitrazolam",
        "pretty_name": "Nitrazolam",
        "properties": {
            "after-effects": "2-24 hours (Very dose dependant)",
            "avoid": "All other CNS depressants.",
            "categories": [
                "benzodiazepine",
                "habit-forming",
                "depressant",
                "tentative"
            ],
            "dose": "Oral Light: 0.5-1mg Common: 1-2mg Strong: 2-3mg+",
            "duration": "5-10 hours.",
            "onset": "15-30 minutes.",
            "summary": "Hypnotic benzodiazepine that is the triazolo analogue of Nitrazepam and about 4x more potent compared to the parent compound. Also the dechlorinated derivative of Clonazolam with roughly 1/10 potency."
        }
    },
    "nitrous": {
        "aliases": [
            "laughing_gas",
            "n20",
            "n2o",
            "nos"
        ],
        "categories": [
            "dissociative",
            "habit-forming",
            "common"
        ],
        "combos": {
            "2c-t-x": {
                "status": "Low Risk & Synergy"
            },
            "2c-x": {
                "status": "Low Risk & Synergy"
            },
            "5-meo-xxt": {
                "status": "Low Risk & Synergy"
            },
            "alcohol": {
                "note": "Both substances potentiate the ataxia and sedation caused by the other and can lead to unexpected loss of consciousness at high doses. While unconscious, vomit aspiration is a risk if not placed in the recovery position. Memory blackouts are likely.",
                "status": "Caution"
            },
            "amphetamines": {
                "status": "Low Risk & Synergy"
            },
            "amt": {
                "status": "Low Risk & Synergy"
            },
            "benzodiazepines": {
                "status": "Low Risk & Decrease"
            },
            "benzos": {
                "status": "Low Risk & Decrease"
            },
            "caffeine": {
                "status": "Low Risk & No Synergy"
            },
            "cannabis": {
                "status": "Low Risk & Synergy"
            },
            "cocaine": {
                "status": "Low Risk & Synergy"
            },
            "dmt": {
                "status": "Low Risk & Synergy"
            },
            "dox": {
                "status": "Low Risk & Synergy"
            },
            "dxm": {
                "status": "Low Risk & Synergy"
            },
            "ghb/gbl": {
                "note": "Both substances potentiate the ataxia and sedation caused by the other and can lead to unexpected loss of consciousness at high doses. While unconscious, vomit aspiration is a risk if not placed in the recovery position. Memory blackouts are likely.",
                "status": "Caution"
            },
            "ketamine": {
                "status": "Low Risk & Synergy"
            },
            "lsd": {
                "status": "Low Risk & Synergy"
            },
            "maois": {
                "status": "Low Risk & No Synergy"
            },
            "mdma": {
                "status": "Low Risk & Synergy"
            },
            "mescaline": {
                "status": "Low Risk & Synergy"
            },
            "mushrooms": {
                "status": "Low Risk & Synergy"
            },
            "mxe": {
                "status": "Low Risk & Synergy"
            },
            "nbomes": {
                "status": "Low Risk & Synergy"
            },
            "opioids": {
                "note": "Both substances potentiate the ataxia and sedation caused by the other and can lead to unexpected loss of consciousness at high doses. While unconscious, vomit aspiration is a risk if not placed in the recovery position. Memory blackouts are likely.",
                "status": "Caution"
            },
            "pcp": {
                "status": "Low Risk & Synergy"
            },
            "ssris": {
                "status": "Low Risk & No Synergy"
            },
            "tramadol": {
                "note": "Both substances potentiate the ataxia and sedation caused by the other and can lead to unexpected loss of consciousness at high doses. While unconscious, vomit aspiration is a risk if not placed in the recovery position. Memory blackouts are likely.",
                "status": "Caution"
            }
        },
        "formatted_aftereffects": {
            "_unit": "minutes",
            "value": "15-30"
        },
        "formatted_duration": {
            "_unit": "minutes",
            "value": "1-5"
        },
        "formatted_effects": [
            "giggling",
            "mood lift",
            "euphoria",
            "sound distortion",
            "dream like state",
            "minor to strong hallucinations",
            "reduction of external stimuli",
            "analgesia",
            "buzzing sensation in nerve",
            "clumsiness",
            "nausea",
            "headaches",
            "numbness in extremities"
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "0-1"
        },
        "name": "nitrous",
        "pretty_name": "N2O",
        "properties": {
            "after-effects": "15-30 minutes",
            "aliases": [
                "laughing_gas",
                "n20",
                "n2o",
                "nos"
            ],
            "categories": [
                "dissociative",
                "habit-forming",
                "common"
            ],
            "duration": "1-5 minutes",
            "effects": "giggling, mood lift, euphoria, sound distortion, dream like state, minor to strong hallucinations, reduction of external stimuli, analgesia, buzzing sensation in nerve, clumsiness, nausea, headaches, numbness in extremities",
            "onset": "0-1 minutes",
            "summary": "Nitrous oxide, also known as laughing gas, often inhaled through balloons filled with canisters of the gas.. A short-acting dissociative inhalant with strong visual, mental and auditory effects. Extremely popular especially in combination with other drugs."
        },
        "pweffects": {
            "Acuity suppression": "https://psychonautwiki.org/wiki/Acuity_suppression",
            "Amnesia": "https://psychonautwiki.org/wiki/Amnesia",
            "Auditory distortion": "https://psychonautwiki.org/wiki/Auditory_distortion",
            "Auditory suppression": "https://psychonautwiki.org/wiki/Auditory_suppression",
            "Changes in felt bodily form": "https://psychonautwiki.org/wiki/Changes_in_felt_bodily_form",
            "Cognitive euphoria": "https://psychonautwiki.org/wiki/Cognitive_euphoria",
            "Compulsive redosing": "https://psychonautwiki.org/wiki/Compulsive_redosing",
            "Depersonalization": "https://psychonautwiki.org/wiki/Depersonalization",
            "Derealization": "https://psychonautwiki.org/wiki/Derealization",
            "Dizziness": "https://psychonautwiki.org/wiki/Dizziness",
            "Double vision": "https://psychonautwiki.org/wiki/Double_vision",
            "D\u00e9j\u00e0 vu": "https://psychonautwiki.org/wiki/D%C3%A9j%C3%A0_vu",
            "External hallucinations": "https://psychonautwiki.org/wiki/External_hallucinations",
            "Frame rate suppression": "https://psychonautwiki.org/wiki/Frame_rate_suppression",
            "Geometry": "https://psychonautwiki.org/wiki/Geometry",
            "Headaches": "https://psychonautwiki.org/wiki/Headaches",
            "Information processing suppression": "https://psychonautwiki.org/wiki/Information_processing_suppression",
            "Internal hallucinations": "https://psychonautwiki.org/wiki/Internal_hallucinations",
            "Laughter": "https://psychonautwiki.org/wiki/Laughter",
            "Memory suppression": "https://psychonautwiki.org/wiki/Memory_suppression",
            "Motor control loss": "https://psychonautwiki.org/wiki/Motor_control_loss",
            "Pattern recognition suppression": "https://psychonautwiki.org/wiki/Pattern_recognition_suppression",
            "Perception of decreased weight": "https://psychonautwiki.org/wiki/Perception_of_decreased_weight",
            "Physical euphoria": "https://psychonautwiki.org/wiki/Physical_euphoria",
            "Spontaneous tactile sensations": "https://psychonautwiki.org/wiki/Spontaneous_tactile_sensations",
            "Suggestibility enhancement": "https://psychonautwiki.org/wiki/Suggestibility_enhancement",
            "Tactile suppression": "https://psychonautwiki.org/wiki/Tactile_suppression",
            "Thought deceleration": "https://psychonautwiki.org/wiki/Thought_deceleration",
            "Unity and interconnectedness": "https://psychonautwiki.org/wiki/Unity_and_interconnectedness"
        },
        "sources": {
            "_general": [
                "Ketamine potentiates cerebrocortical damage induced by the common anaesthetic agent nitrous oxide in adult rats - http://www.ncbi.nlm.nih.gov/pubmed/10928976",
                "Severe neurotoxicity following intrathecal methotrexate with nitrous oxide sedation in a child with acute lymphoblastic leukemia - http://www.ncbi.nlm.nih.gov/pubmed/25360802",
                "Neurologic degeneration associated with nitrous oxide anesthesia in patients with vitamin B12 deficiency - http://www.ncbi.nlm.nih.gov/pubmed/8250714"
            ]
        }
    },
    "nm-2-ai": {
        "categories": [
            "stimulant",
            "empathogen"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-8"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "100-150",
                "Light": "50-100mg",
                "Strong": "150mg-200mg+"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "3-5"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "15-45"
        },
        "name": "nm-2-ai",
        "pretty_name": "NM-2-AI",
        "properties": {
            "after-effects": "1-8 hours.",
            "categories": [
                "stimulant",
                "empathogen"
            ],
            "dose": "Oral Light: 50-100mg Common: 100-150 Strong: 150mg-200mg+",
            "duration": "3-5 hours.",
            "note": "Most of the reports are in pellets that have more than one drug in them (Namely MPA). So start slow and work your way up.",
            "onset": "15-45 minutes.",
            "summary": "Stimulant that is in the aminoindane class. Is it quite close to it's bigger brother 2-AI. Yet this has a lower potency, has a longer duration though."
        }
    },
    "noctec": {
        "aliases": [
            "chloral-hydrate",
            "aquachloral",
            "somnos"
        ],
        "categories": [
            "depressant",
            "habit-forming"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "2-6"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "200-500mg",
                "Light": "200mg",
                "Strong": "500-1000mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "5-10"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "20-60"
        },
        "name": "noctec",
        "pretty_name": "Chloral hydrate",
        "properties": {
            "after-effects": "2-6 hours.",
            "aliases": [
                "chloral-hydrate",
                "aquachloral",
                "somnos"
            ],
            "avod": "All other CNS depressants.",
            "categories": [
                "depressant",
                "habit-forming"
            ],
            "dose": "Light: 200mg's Common: 200-500mg's Strong: 500-1000mg's.",
            "duration": "5-10 hours",
            "onset": "20-60 minutes.",
            "summary": "Chloral Hydrate, a sedative drug discovered in 1832 with a history of recreational use going back to the 19th century. Sometimes prescribed for extreme insomnia. For such an old drug, relatively little is known about its long-term term effects on the body. Produces intoxication comparable to alcohol or benzodiazepines."
        }
    },
    "noopept": {
        "categories": [
            "research-chemical",
            "nootropic"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-8"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "10mg",
                "Light": "5mg",
                "Strong": "10-20mg+"
            },
            "Sublingual/Insufflated": {
                "Common": "5-10mg",
                "Light": "2-5mg",
                "Strong": "10mg+"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "3-6"
        },
        "formatted_onset": {
            "Intranasal": "0-5",
            "Oral": "15-30",
            "Sublingual": "5-10",
            "_unit": "minutes"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_Noopept_.shtml"
        },
        "name": "noopept",
        "pretty_name": "Noopept",
        "properties": {
            "after-effects": "1-8 hours.",
            "avoid": "Because Noopept modulates AMPA and NMDA receptors dissociative drugs like Ketamine, MXE,etc. will have diminished effects with Noopept. It can also have unpredictable potentiating effects on Psychedelics, Alcohol, Cannabis and some Stimulants. Use caution when combining with drugs.",
            "categories": [
                "research-chemical",
                "nootropic"
            ],
            "dose": "Oral Light: 5mg Common: 10mg Strong: 10-20mg+ | Sublingual/Insufflated Light: 2-5mg Common: 5-10mg Strong: 10mg+",
            "duration": "3-6 hours depending on stomach contents/ROA/ect.",
            "onset": "Oral: 15-30 minutes | Sublingual: 5-10 minutes | Intranasal: 0-5 minutes.",
            "summary": "A common nootropic often attributed with temporarily increasing intelligence, concentration, focus and memory recall. Daily use can lead to dependency with withdrawals which make the user feel 'stupid.' Often taken daily in a 'stack' with other nootropics."
        },
        "pweffects": {
            "Acuity enhancement": "https://psychonautwiki.org/wiki/Acuity_enhancement",
            "Anxiety suppression": "https://psychonautwiki.org/wiki/Anxiety_suppression",
            "Colour enhancement": "https://psychonautwiki.org/wiki/Colour_enhancement",
            "Focus enhancement": "https://psychonautwiki.org/wiki/Focus_enhancement",
            "Irritability": "https://psychonautwiki.org/wiki/Irritability",
            "Memory enhancement": "https://psychonautwiki.org/wiki/Memory_enhancement",
            "Motivation enhancement": "https://psychonautwiki.org/wiki/Motivation_enhancement",
            "Rejuvenation": "https://psychonautwiki.org/wiki/Rejuvenation",
            "Spontaneous tactile sensations": "https://psychonautwiki.org/wiki/Spontaneous_tactile_sensations",
            "Stimulation": "https://psychonautwiki.org/wiki/Stimulation",
            "Thought acceleration": "https://psychonautwiki.org/wiki/Thought_acceleration",
            "Thought connectivity": "https://psychonautwiki.org/wiki/Thought_connectivity",
            "Wakefulness": "https://psychonautwiki.org/wiki/Wakefulness"
        }
    },
    "nordazepam": {
        "aliases": [
            "nordaz",
            "nordiazepam",
            "desmethyldiazepam"
        ],
        "categories": [
            "benzodiazepine",
            "habit-forming",
            "depressant"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-120"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "5-15mg",
                "Light": "2.5-5mg",
                "Strong": "15-30mg+"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "10-20"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "45-120"
        },
        "name": "nordazepam",
        "pretty_name": "Nordazepam",
        "properties": {
            "after-effects": "1-120 hours.",
            "aliases": [
                "nordaz",
                "nordiazepam",
                "desmethyldiazepam"
            ],
            "avoid": "All other CNS depressants.",
            "categories": [
                "benzodiazepine",
                "habit-forming",
                "depressant"
            ],
            "dose": "Light: 2.5-5mg Common: 5-15mg Strong: 15-30mg+",
            "dose_to_diazepam": "Nordazepam - 10mg ~=10mg Diazepam.",
            "duration": "10-20 hours.",
            "onset": "45-120 minutes.",
            "summary": "Has all the normal benzodiazepine effects. Such as being an anti-convulsant, muscle relaxant, sedative effects, and anxiolytic. Active metabolite of Diazepam, Chlordiazepoxide, Clorazepate, among many others, which is where most of its effects come from. Has one of the longest lasting half-lifes in the class."
        }
    },
    "norflurazepam": {
        "aliases": [
            "n-desalkylflurazepam"
        ],
        "categories": [
            "benzodiazepine",
            "depressant",
            "tentative",
            "habit-forming"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-12"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "5-10mg",
                "Light": "2-5mg",
                "Strong": "10-20mg+"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "10-16"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "45-120"
        },
        "name": "norflurazepam",
        "pretty_name": "Norflurazepam",
        "properties": {
            "after-effects": "1-12 hours.",
            "aliases": [
                "n-desalkylflurazepam"
            ],
            "avoid": "All other CNS depressants.",
            "categories": [
                "benzodiazepine",
                "depressant",
                "tentative",
                "habit-forming"
            ],
            "dose": "Light: 2-5mg Common: 5-10mg Strong: 10-20mg+",
            "duration": "10-16 hours.",
            "onset": "45-120 minutes.",
            "summary": "Benzodiazepine analogue that is an active metabolite to many other benzodiazepines, such as Flurazepam, Flutoprazepam, and Midazolam."
        }
    },
    "o-desmethyltramadol": {
        "aliases": [
            "odt",
            "o-smt",
            "o-dsmt"
        ],
        "categories": [
            "opioid",
            "research-chemical",
            "habit-forming",
            "tentative",
            "depressant"
        ],
        "dose_note": " NOTE: Insufflation considered extremely painful.",
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-8"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "25-50mg",
                "Light": "10-25mg",
                "Strong": "50-100mg+"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "3-6"
        },
        "formatted_effects": [
            "Euphoria",
            "Dry Mouth",
            "Mood lift",
            "Itchiness",
            "Relaxant",
            "Constipation",
            "Pupil constriction",
            "Analgesia",
            ""
        ],
        "formatted_onset": {
            "Insufflated": "20",
            "Oral": "20-40",
            "_unit": "minutes"
        },
        "name": "o-desmethyltramadol",
        "pretty_name": "O-Desmethyltramadol",
        "properties": {
            "after-effects": "1-8 hours.",
            "aliases": [
                "odt",
                "o-smt",
                "o-dsmt"
            ],
            "avoid": "All other CNS depressants.",
            "categories": [
                "opioid",
                "research-chemical",
                "habit-forming",
                "tentative",
                "depressant"
            ],
            "dose": "Oral Light: 10-25mg Common: 25-50mg Strong: 50-100mg+ | NOTE: Insufflation considered extremely painful.",
            "duration": "3-6 hours",
            "effects": "Euphoria, Dry Mouth, Mood lift, Itchiness, Relaxant, Constipation, Pupil constriction, Analgesia.",
            "onset": "Oral: 20-40 minutes | Insufflated: 20 minutes.",
            "summary": "A opioid analgesic which is the main active metabolite of Tramadol. Alone, it is a few times more potent than Tramadol and has additional affinity for \u03b4 and \u03ba-opioid receptors. Has proven popular when sold, but these occasions have been rare due to patent rights."
        }
    },
    "o-pce": {
        "aliases": [
            "2'-oxo-pce",
            "eticyclidone",
            "opce",
            "2-oxo-pce"
        ],
        "categories": [
            "dissociative",
            "research-chemical",
            "habit-forming",
            "tentative"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "2-48"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "5-10mg",
                "Light": "3-5mg",
                "Strong": "10-20mg."
            }
        },
        "formatted_duration": {
            "Insufflated": "2-5",
            "Oral": "3-6",
            "_unit": "hours"
        },
        "formatted_onset": {
            "Insufflated": "15-45",
            "Oral": "25-75",
            "_unit": "minutes"
        },
        "name": "o-pce",
        "pretty_name": "O-PCE",
        "properties": {
            "after-effects": "2-48 hours.",
            "aliases": [
                "2'-oxo-pce",
                "eticyclidone",
                "opce",
                "2-oxo-pce"
            ],
            "avoid": "CNS depressants.",
            "categories": [
                "dissociative",
                "research-chemical",
                "habit-forming",
                "tentative"
            ],
            "dose": "Oral Light: 3-6mg Common: 6-11mg Strong: 10-20mg. Insufflated Light: 3-5mg Common: 5-10mg Strong: 10-20mg.",
            "duration": "Oral 3-6 hours. | Insufflated 2-5 hours.",
            "onset": "Oral 25-75 minutes. | Insufflated 15-45 minutes.",
            "summary": "Dissociative of the Arylcyclohexylamine class. Structurally related to Deschloroketamine."
        }
    },
    "opium": {
        "aliases": [
            "O"
        ],
        "categories": [
            "opioid",
            "habit-forming",
            "depressant",
            "common"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-12"
        },
        "formatted_dose": {
            "Oral_Tea": {
                "Common": "333-500mg.",
                "Fatal": "2000mg"
            },
            "Smoked": {
                "Common": "100mg"
            }
        },
        "formatted_effects": [
            "Euphoria",
            "Dry Mouth",
            "Mood lift",
            "Itchiness",
            "Relaxant",
            "Constipation",
            "Pupil constriction",
            "Analgesia",
            ""
        ],
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_Opium.shtml"
        },
        "name": "opium",
        "pretty_name": "Opium",
        "properties": {
            "after-effects": "1-12 hours.",
            "aliases": [
                "O"
            ],
            "avoid": "Easy to overdose. Don't smoke from aluminum foil.",
            "categories": [
                "opioid",
                "habit-forming",
                "depressant",
                "common"
            ],
            "effects": "Euphoria, Dry Mouth, Mood lift, Itchiness, Relaxant, Constipation, Pupil constriction, Analgesia.",
            "marquis": "Dark grayish reddish Brown",
            "summary": "Opium is a naturally occurring analgesic harvested as a latex from ripe Papaver somniferum (opium poppy) pods. The sap of the poppy plant primarily contains codeine and morphine with the amounts varying by plant, which can be made into a tea and consumed raw, or further processed."
        }
    },
    "oxazepam": {
        "aliases": [
            "serax"
        ],
        "categories": [
            "benzodiazepine",
            "depressant",
            "habit-forming"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-10"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "10-30mg",
                "Light": "5-10mg",
                "Strong": "30-45mg+"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "4-6"
        },
        "formatted_effects": [
            "Typical benzodiazepine effects",
            "Amnesic",
            "anxiolytic",
            "anticonvulsant",
            "hypnotic",
            "sedative",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "60-120"
        },
        "name": "oxazepam",
        "pretty_name": "Oxazepam",
        "properties": {
            "after-effects": "1-10 hours.",
            "aliases": [
                "serax"
            ],
            "avoid": "All other CNS depressants.",
            "categories": [
                "benzodiazepine",
                "depressant",
                "habit-forming"
            ],
            "dose": "Light: 5-10mg Common: 10-30mg Strong: 30-45mg+",
            "dose_to_diazepam": "Oxazepam - 20mg ~=10mg Diazepam.",
            "duration": "4-6 hours.",
            "effects": "Typical benzodiazepine effects. Amnesic, anxiolytic, anticonvulsant, hypnotic, sedative.",
            "onset": "60-120 minutes.",
            "summary": "A prescription benzodiazepine with intermediate duration and half life. A sedative and hypnotic which may cause lowered inhibitions and amnesia in higher doses."
        }
    },
    "oxazolam": {
        "categories": [
            "depressant",
            "habit-forming"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "6-12"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "10-15mg",
                "Light": "5-10mg",
                "Strong": "15-30mg+"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "6-12"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "30-90"
        },
        "name": "oxazolam",
        "pretty_name": "Oxazolam",
        "properties": {
            "after-effects": "6-12 hours.",
            "categories": [
                "depressant",
                "habit-forming"
            ],
            "dose": "Light: 5-10mg Common: 10-15mg Strong: 15-30mg+",
            "duration": "6-12 hours.",
            "onset": "30-90 minutes.",
            "summary": "A benzodiazepine derivative that is a prodrug for desmethyldiazepam."
        }
    },
    "oxiracetam": {
        "aliases": [
            "neuractiv",
            "neuromet",
            "hydroxypiracetam"
        ],
        "dose_note": " Note: This is for the course over a 24 hour period. 2-3x times daily, such as 400mg-800mg/3x day.",
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-6"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "1200-2400mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "4-6"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "15-30"
        },
        "name": "oxiracetam",
        "pretty_name": "Oxiracetam",
        "properties": {
            "after-effects": "1-6 hours.",
            "aliases": [
                "neuractiv",
                "neuromet",
                "hydroxypiracetam"
            ],
            "dose": "Common: 1200-2400mg",
            "duration": "4-6 hours.",
            "experiences": "https://erowid.org/experiences/subs/exp_Smarts_Oxiracetam.shtml",
            "note": "The doses listed are for over the course of a 24 hour period. 2-3x daily, such as 400-800mg three times a day.",
            "onset": "15-30 minutes.",
            "summary": "Oxiracetam is a racetam nootropic, having a hydroxyl group being the only difference between this and Piracetam. It used as a nootropic, namely for increased cognitive function. It is usually used two to three times a day. This substance is normally taken with Choline, can cause headaches without the addition of Choline."
        }
    },
    "oxycodone": {
        "aliases": [
            "oxy",
            "oxycontin",
            "percocet",
            "oxynorm"
        ],
        "categories": [
            "opioid",
            "habit-forming",
            "depressant",
            "common"
        ],
        "dose_note": " Note: Dosages reflect that, while nasal bioavailability (BA) may be less than oral BA, nasal administration causes an additional 'rush' (due to quicker onset); this may lead to a subjective experience of greater strength than an equivalent oral dose.",
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-24"
        },
        "formatted_dose": {
            "Insufflated": {
                "Common": "7.5-15mg",
                "Light": "2.5-7.5mg",
                "Strong": "15-25mg"
            },
            "Oral": {
                "Common": "10-25mg",
                "Light": "2.5-10mg",
                "Strong": "25-40mg"
            }
        },
        "formatted_duration": {
            "IV": "3-5",
            "Insufflated": "3-5",
            "Oral_ER": "6-8",
            "Oral_IR": "4-6",
            "_unit": "hours"
        },
        "formatted_effects": [
            "Pain relief",
            "Respiratory depression",
            "Sedation",
            "Constipation",
            "Cough suppression",
            "Decreased libido",
            "Difficulty urinating",
            "Itchiness",
            "Nausea",
            "Pupil constriction",
            "Stomach cramps",
            "Appetite suppression",
            "Euphoria",
            "Anxiety suppression",
            "Dream potentiation",
            ""
        ],
        "formatted_onset": {
            "IV": "0-1",
            "Insufflated": "2-5",
            "Oral_ER": "40",
            "Oral_IR": "20",
            "_unit": "minutes"
        },
        "name": "oxycodone",
        "pretty_name": "Oxycodone",
        "properties": {
            "after-effects": "1-24 hours.",
            "aliases": [
                "oxy",
                "oxycontin",
                "percocet",
                "oxynorm"
            ],
            "bioavailability": "Oral 60-87% | Insufflated 55-70%",
            "categories": [
                "opioid",
                "habit-forming",
                "depressant",
                "common"
            ],
            "detection": "3-5 days for minimal use, 5-8 for regular use.",
            "dose": "Oral Light: 2.5-10mg  Common: 10-25mg  Strong: 25-40mg | Insufflated Light: 2.5-7.5mg  Common: 7.5-15mg  Strong: 15-25mg | Note: Dosages reflect that, while nasal bioavailability (BA) may be less than oral BA, nasal administration causes an additional 'rush' (due to quicker onset); this may lead to a subjective experience of greater strength than an equivalent oral dose.",
            "duration": "Oral_IR: 4-6 hours | Oral_ER: 6-8 hours. | Insufflated: 3-5 hours. | IV: 3-5 hours.",
            "effects": "Pain relief, Respiratory depression, Sedation, Constipation, Cough suppression, Decreased libido, Difficulty urinating, Itchiness, Nausea, Pupil constriction, Stomach cramps, Appetite suppression, Euphoria, Anxiety suppression, Dream potentiation.",
            "half-life": "2-4 hours",
            "marquis": "Pale violet",
            "onset": "Oral_IR: 20 minutes | Oral_ER: 40 minutes | Insufflated: 2-5 minutes | IV: 0-1 minutes",
            "potentiators": "Avoid grapefruit juice, alcohol, and diphenhydramine. These products may react negatively and cause an overdose. Also do not consume more than 4g APAP (acetaminophen) in a day.",
            "summary": "A semisynthetic opioid analgesic developed in 1917, prescribed primarily for pain management. It has become extremely popular as a recreational drug in some areas, and carries a high potential for addiction. Reported as being a little more 'stimulating' than other opioids."
        },
        "pweffects": {
            "Anxiety suppression": "https://psychonautwiki.org/wiki/Anxiety_suppression",
            "Cognitive euphoria": "https://psychonautwiki.org/wiki/Cognitive_euphoria",
            "Constipation": "https://psychonautwiki.org/wiki/Constipation",
            "Cough suppression": "https://psychonautwiki.org/wiki/Cough_suppression",
            "Difficulty urinating": "https://psychonautwiki.org/wiki/Difficulty_urinating",
            "Internal hallucinations": "https://psychonautwiki.org/wiki/Internal_hallucinations",
            "Itchiness": "https://psychonautwiki.org/wiki/Itchiness",
            "Nausea": "https://psychonautwiki.org/wiki/Nausea",
            "Pain relief": "https://psychonautwiki.org/wiki/Pain_relief",
            "Physical euphoria": "https://psychonautwiki.org/wiki/Physical_euphoria",
            "Pupil constriction": "https://psychonautwiki.org/wiki/Pupil_constriction",
            "Respiratory depression": "https://psychonautwiki.org/wiki/Respiratory_depression",
            "Sedation": "https://psychonautwiki.org/wiki/Sedation",
            "Stomach cramps": "https://psychonautwiki.org/wiki/Stomach_cramps"
        },
        "sources": {
            "_general": [
                "Controlled-release oxycodone-induced seizures. - http://www.ncbi.nlm.nih.gov/pubmed/16368452",
                "Grapefruit juice enhances the exposure to oral oxycodone. - http://www.ncbi.nlm.nih.gov/pubmed/20406214",
                "Oxycodone/paracetamol: a low-dose synergic combination useful in different types of pain. - http://www.ncbi.nlm.nih.gov/pubmed/20670044",
                "Pharmacokinetics and pharmacodynamics of oxycodone when given intravenously and rectally to adult patients with cancer pain. - http://www.ncbi.nlm.nih.gov/pubmed/7818116",
                "Differential effects of food on the bioavailability of controlled-release oxycodone tablets and immediate-release oxycodone solution. - http://www.ncbi.nlm.nih.gov/pubmed/8901078",
                "Oxycodone is found to suppress sodium currents in the thalamic regions of the brain at high doses and is an effect that is independent of the MOR/u-opioid recepter and therefore this mechanism is not blocked by the use of naloxone - http://www.sciencedirect.com/science/article/pii/S0304394009001268",
                "Oxycodone is found to have longer lasting more efficient effects on pain due to neuropathy because of having GABA-B agonist properties -http://journals.plos.org/plosone/article?id=10.1371/journal.pone.0091297",
                "Oxycodone when paired with an ultra low dose of naltrexone, an opioid antagonist, oxycodone has a longer duration of pain relief - http://www.sciencedirect.com/science/article/pii/S1526590005004128",
                "Oxycodone has been found to be an effective treatment for restless leg syndrome - http://europepmc.org/abstract/med/8341893",
                "Pharmacokinetics of oxycodone done orally and intramuscularly http://onlinelibrary.wiley.com/doi/10.1111/j.1365-2125.1992.tb04090.x/abstract"
            ]
        }
    },
    "oxymorphone": {
        "aliases": [
            "opana",
            "stopsigns"
        ],
        "categories": [
            "opioid",
            "habit-forming",
            "depressant"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-12"
        },
        "formatted_dose": {
            "Insufflated": {
                "Common": "4-6mg",
                "Heavy": "6-10mg+",
                "Low": "2-4mg"
            },
            "Oral": {
                "Common": "10-20mg",
                "Heavy": "20mg+",
                "Low": "5-7.5mg"
            }
        },
        "formatted_duration": {
            "IV": "2-4",
            "Insufflated": "5-8",
            "Oral_ER": "6-14",
            "Oral_IR": "4-8",
            "Plugged": "4-7",
            "_unit": "hours"
        },
        "formatted_effects": [
            "Euphoria",
            "Dry Mouth",
            "Mood lift",
            "Itchiness",
            "Relaxant",
            "Constipation",
            "Pupil constriction",
            "Analgesia",
            ""
        ],
        "formatted_onset": {
            "IV": "0-1",
            "Insufflated": "1-5",
            "Oral_ER": "60-90",
            "Oral_IR": "20-40",
            "Plugged": "15-30",
            "_unit": "minutes"
        },
        "name": "oxymorphone",
        "pretty_name": "Oxymorphone",
        "properties": {
            "after-effects": "1-12 hours.",
            "aliases": [
                "opana",
                "stopsigns"
            ],
            "avoid": "All other CNS depressants.",
            "bioavailability": "Intranasal: 43%, Oral: 10-20%, Rectal: 10%",
            "categories": [
                "opioid",
                "habit-forming",
                "depressant"
            ],
            "dose": "Oral Low: 5-7.5mg Common: 10-20mg  Heavy: 20mg+ | Insufflated Low: 2-4mg Common: 4-6mg Heavy: 6-10mg+",
            "duration": "Oral_IR: 4-8 hours | Oral_ER: 6-14 hours | Insufflated 5-8 hours | Plugged: 4-7 hours | IV: 2-4 hours. | Note: Tolerance + contents in your stomach can cause this to be quite different.",
            "effects": "Euphoria, Dry Mouth, Mood lift, Itchiness, Relaxant, Constipation, Pupil constriction, Analgesia.",
            "onset": "Oral_IR: 20-40 minutes | Oral_ER: 60-90 minutes. | Insufflated: 1-5 minutes | Plugged: 15-30 minutes. | IV: 0-1 minutes",
            "summary": "A powerful semisynthetic opioid analgesic also known as opana. A derivative of morphine it is approximately ten times as potent. Has a low oral bioavailability, and as such it is usually insufflated or taken rectally.",
            "warning": "NOTE: There has been reports of a rare blood disorder from Intravenous use of Oxymorphone ER. Take this into consideration before taking the drug this way."
        }
    },
    "pagoclone": {
        "categories": [
            "depressant",
            "habit-forming",
            "tentative",
            "research-chemical"
        ],
        "name": "pagoclone",
        "pretty_name": "Pagoclone",
        "properties": {
            "categories": [
                "depressant",
                "habit-forming",
                "tentative",
                "research-chemical"
            ],
            "summary": "An anxiolytic drug related to zopiclone with no sedative or hypnotic qualities. Has been investigated as a possible alcohol replacement. Related in structure and effect to Zopiclone and Zolpidem."
        }
    },
    "palfium": {
        "aliases": [
            "dextromoramide"
        ],
        "categories": [
            "opioid",
            "habit-forming",
            "depressant"
        ],
        "dose_note": " NOTE: Read ~summary before you take this drug. It's very unpredictable.",
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-12"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "5-7.5mg",
                "Light": "2.5-5mg",
                "Strong": "7.5-10mg+"
            }
        },
        "formatted_duration": {
            "Intravenously": "2-3",
            "Oral": "3-5",
            "_unit": "hours"
        },
        "formatted_onset": {
            "Intravenously": "1-2",
            "Oral": "5-15",
            "_unit": "minutes"
        },
        "name": "palfium",
        "pretty_name": "Dextromoramide",
        "properties": {
            "after-effects": "1-12 hours.",
            "aliases": [
                "dextromoramide"
            ],
            "avoid": "All other CNS depressants.",
            "categories": [
                "opioid",
                "habit-forming",
                "depressant"
            ],
            "dose": "Oral Light: 2.5-5mg Common: 5-7.5mg Strong: 7.5-10mg+ | NOTE: Read ~summary before you take this drug. It's very unpredictable.",
            "duration": "Oral 3-5 hours. | Intravenously: 2-3 hours.",
            "onset": "Oral: 5-15 minutes. | Intravenously: 1-2 minutes.",
            "summary": "Dextromoramide, a rare and powerful opioid analgesic approximately three times as potent as morphine with a shorter duration. Generally only seen in the Netherlands. Reported as having strange and rapid tolerance behaviour."
        }
    },
    "parafluorobutyrfentanyl": {
        "aliases": [
            "pfbf",
            "4-fluorobutyrfentanyl",
            "4-fbf"
        ],
        "categories": [
            "opioid",
            "research-chemical",
            "habit-forming",
            "depressant"
        ],
        "formatted_dose": {
            "Oral": {
                "Common": "600-900ug",
                "Low": "300ug",
                "Strong": "900-1200ug."
            }
        },
        "formatted_duration": {
            "_unit": "minutes",
            "value": "30-60"
        },
        "formatted_effects": [
            "Euphoria",
            "Dry Mouth",
            "Mood lift",
            "Itchiness",
            "Relaxant",
            "Constipation",
            "Pupil constriction",
            "Analgesia",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "Insufflated"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_4Fluorobutyrfentanyl.shtml"
        },
        "name": "parafluorobutyrfentanyl",
        "pretty_name": "4-Fluorobutyrfentanyl",
        "properties": {
            "aliases": [
                "pfbf",
                "4-fluorobutyrfentanyl",
                "4-fbf"
            ],
            "categories": [
                "opioid",
                "research-chemical",
                "habit-forming",
                "depressant"
            ],
            "dose": "Low: 300ug Common: 600-900ug Strong: 900-1200ug.",
            "duration": "30-60 minutes.",
            "effects": "Euphoria, Dry Mouth, Mood lift, Itchiness, Relaxant, Constipation, Pupil constriction, Analgesia.",
            "onset": "Insufflated <5 minutes.",
            "summary": "Rare, little known and extremely potent RC analogue of Fentanyl. This powerful opioid is generally only dispensed as a nasal spray. Handle with extreme caution and never mix with other depressants."
        }
    },
    "parafluorofentanyl": {
        "aliases": [
            "pff",
            "4-fluorofentanyl"
        ],
        "categories": [
            "opioid",
            "depressant",
            "habit-forming",
            "tentative"
        ],
        "formatted_aftereffects": {
            "Insufflated": "1-2",
            "Oral": "1-4",
            "_unit": "hours"
        },
        "formatted_dose": {
            "Insufflated": {
                "Common": "25-40ug",
                "Light": "10-25ug",
                "Strong": "40-65ug+"
            }
        },
        "formatted_duration": {
            "Insufflated": "2-3",
            "Oral": "3-4",
            "_unit": "hours"
        },
        "formatted_onset": {
            "Insufflated": "0-1",
            "Oral": "5-10",
            "_unit": "minutes"
        },
        "name": "parafluorofentanyl",
        "pretty_name": "Parafluorofentanyl",
        "properties": {
            "after-effects": "Oral: 1-4 hours. | Insufflated: 1-2 hours.",
            "aliases": [
                "pff",
                "4-fluorofentanyl"
            ],
            "categories": [
                "opioid",
                "depressant",
                "habit-forming",
                "tentative"
            ],
            "dose": "Insufflated Light: 10-25ug Common: 25-40ug Strong: 40-65ug+",
            "duration": "Oral: 3-4 hours. | Insufflated: 2-3 hours.",
            "onset": "Oral: 5-10 minutes. | Insufflated: 0-1 minute.",
            "summary": "Rare, little known and extremely potent analogue of Fentanyl developed by Janssen Pharmaceutica in the 1960s. Use with extreme caution and never mix with other depressants."
        }
    },
    "paroxetine": {
        "aliases": [
            "paxil",
            "seroxat"
        ],
        "categories": [
            "ssri"
        ],
        "name": "paroxetine",
        "pretty_name": "Paroxetine",
        "properties": {
            "aliases": [
                "paxil",
                "seroxat"
            ],
            "categories": [
                "ssri"
            ]
        }
    },
    "pce": {
        "aliases": [
            "eticyclidine"
        ],
        "categories": [
            "dissociative",
            "tentative",
            "habit-forming"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-4"
        },
        "formatted_dose": {
            "Insufflated": {
                "Common": "3-7mg",
                "Light": "1-3mg",
                "Strong": "7-15mg+"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "2-5"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "Insufflated"
        },
        "name": "pce",
        "pretty_name": "PCE",
        "properties": {
            "after-effects": "1-4 hours.",
            "aliases": [
                "eticyclidine"
            ],
            "categories": [
                "dissociative",
                "tentative",
                "habit-forming"
            ],
            "dose": "Insufflated Light: 1-3mg Common: 3-7mg Strong: 7-15mg+",
            "duration": "2-5 hours.",
            "onset": "Insufflated 5-15 minutes.",
            "summary": "Eticyclidine (PCE) is a Dissociative anesthetic that has hallucinogenic effects. Slightly more potent than Phencyclidine."
        }
    },
    "pcp": {
        "aliases": [
            "angeldust",
            "phencyclidine",
            "angel",
            "dust",
            "angel_dust",
            "wet"
        ],
        "categories": [
            "dissociative",
            "habit-forming"
        ],
        "combos": {
            "2c-t-x": {
                "status": "Dangerous"
            },
            "2c-x": {
                "status": "Low Risk & Synergy"
            },
            "5-meo-xxt": {
                "status": "Dangerous"
            },
            "alcohol": {
                "note": "Details of this combination are not well understood but PCP generally interacts in an unpredictable manner.",
                "status": "Unsafe"
            },
            "amphetamines": {
                "note": "This combination can easily lead to hypermanic states",
                "status": "Unsafe"
            },
            "amt": {
                "status": "Dangerous"
            },
            "benzodiazepines": {
                "note": "Both substances potentiate the ataxia and sedation caused by the other and can lead to unexpected loss of consciousness at high doses. While unconscious, vomit aspiration is a risk if not placed in the recovery position. Memory blackouts are likely",
                "status": "Unsafe"
            },
            "benzos": {
                "note": "Both substances potentiate the ataxia and sedation caused by the other and can lead to unexpected loss of consciousness at high doses. While unconscious, vomit aspiration is a risk if not placed in the recovery position. Memory blackouts are likely",
                "status": "Unsafe"
            },
            "caffeine": {
                "note": "Details of this combination are not well understood but PCP generally interacts in an unpredictable manner.",
                "status": "Caution"
            },
            "cannabis": {
                "status": "Low Risk & Synergy"
            },
            "cocaine": {
                "note": "This combination can easily lead to hypermanic states",
                "status": "Unsafe"
            },
            "dmt": {
                "status": "Low Risk & Synergy"
            },
            "dox": {
                "note": "Details of this combination are not well understood but PCP generally interacts in an unpredictable manner.",
                "status": "Unsafe"
            },
            "dxm": {
                "status": "Dangerous"
            },
            "ghb/gbl": {
                "note": "Details of this combination are not well understood but PCP generally interacts in an unpredictable manner.",
                "status": "Dangerous"
            },
            "ketamine": {
                "status": "Low Risk & Synergy"
            },
            "lsd": {
                "status": "Low Risk & Synergy"
            },
            "maois": {
                "note": "This combination is very poorly explored",
                "status": "Dangerous"
            },
            "mdma": {
                "note": "This combination can easily lead to hypermanic states",
                "status": "Unsafe"
            },
            "mescaline": {
                "status": "Low Risk & Synergy"
            },
            "mushrooms": {
                "status": "Low Risk & Synergy"
            },
            "mxe": {
                "note": "There are no reports available about this combination",
                "status": "Caution"
            },
            "nbomes": {
                "status": "Low Risk & Synergy"
            },
            "nitrous": {
                "status": "Low Risk & Synergy"
            },
            "opioids": {
                "note": "PCP can reduce opioid tolerance, increasing the risk of overdose",
                "status": "Caution"
            },
            "ssris": {
                "note": "Details of this combination are not well understood but PCP generally interacts in an unpredictable manner.",
                "status": "Unsafe"
            },
            "tramadol": {
                "status": "Dangerous"
            }
        },
        "dose_note": " NOTE: Be cautious with dosing, this drug is known to cause mania.",
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "12-24"
        },
        "formatted_dose": {
            "Insufflated": {
                "Common": "4-8mg",
                "Light": "2-4mg",
                "Strong": "8-15mg+"
            },
            "Oral": {
                "Common": "5-10mg",
                "Light": "2-5mg",
                "Strong": "10-15mg+"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "4-6"
        },
        "formatted_onset": {
            "value": "2-20mins"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_PCP.shtml"
        },
        "name": "pcp",
        "pretty_name": "PCP",
        "properties": {
            "after-effects": "12-24 hours",
            "aliases": [
                "angeldust",
                "phencyclidine",
                "angel",
                "dust",
                "angel_dust",
                "wet"
            ],
            "categories": [
                "dissociative",
                "habit-forming"
            ],
            "dose": "Oral Light: 2-5mg Common: 5-10mg Strong: 10-15mg+ | Insufflated Light: 2-4mg Common: 4-8mg Strong: 8-15mg+ | NOTE: Be cautious with dosing, this drug is known to cause mania.",
            "duration": "4-6 hours",
            "onset": "2-20mins",
            "summary": "A strong dissociative drug.  PCP works primarily as an NMDA receptor antagonist. Also referred to as \"wet\" or \"angel dust\". Best known for stories of the strange and sometimes violent behaviour of those under its influence, though it is likely these are only in overdose cases."
        },
        "pweffects": {
            "Acuity suppression": "https://psychonautwiki.org/wiki/Acuity_suppression",
            "Amnesia": "https://psychonautwiki.org/wiki/Amnesia",
            "Analysis enhancement": "https://psychonautwiki.org/wiki/Analysis_enhancement",
            "Anxiety suppression": "https://psychonautwiki.org/wiki/Anxiety_suppression",
            "Auditory distortion": "https://psychonautwiki.org/wiki/Auditory_distortion",
            "Auditory hallucinations": "https://psychonautwiki.org/wiki/Auditory_hallucinations",
            "Auditory suppression": "https://psychonautwiki.org/wiki/Auditory_suppression",
            "Cognitive euphoria": "https://psychonautwiki.org/wiki/Cognitive_euphoria",
            "Compulsive redosing": "https://psychonautwiki.org/wiki/Compulsive_redosing",
            "Conceptual thinking": "https://psychonautwiki.org/wiki/Conceptual_thinking",
            "Consciousness disconnection": "https://psychonautwiki.org/wiki/Consciousness_disconnection",
            "Creativity enhancement": "https://psychonautwiki.org/wiki/Creativity_enhancement",
            "Delusions": "https://psychonautwiki.org/wiki/Delusions",
            "Depersonalization": "https://psychonautwiki.org/wiki/Depersonalization",
            "Derealization": "https://psychonautwiki.org/wiki/Derealization",
            "Disinhibition": "https://psychonautwiki.org/wiki/Disinhibition",
            "Dizziness": "https://psychonautwiki.org/wiki/Dizziness",
            "Double vision": "https://psychonautwiki.org/wiki/Double_vision",
            "D\u00e9j\u00e0 vu": "https://psychonautwiki.org/wiki/D%C3%A9j%C3%A0_vu",
            "Environmental cubism": "https://psychonautwiki.org/wiki/Environmental_cubism",
            "Environmental orbism": "https://psychonautwiki.org/wiki/Environmental_orbism",
            "External hallucinations": "https://psychonautwiki.org/wiki/External_hallucinations",
            "Frame rate suppression": "https://psychonautwiki.org/wiki/Frame_rate_suppression",
            "Geometry": "https://psychonautwiki.org/wiki/Geometry",
            "Immersion enhancement": "https://psychonautwiki.org/wiki/Immersion_enhancement",
            "Information processing suppression": "https://psychonautwiki.org/wiki/Information_processing_suppression",
            "Internal hallucinations": "https://psychonautwiki.org/wiki/Internal_hallucinations",
            "Memory suppression": "https://psychonautwiki.org/wiki/Memory_suppression",
            "Motor control loss": "https://psychonautwiki.org/wiki/Motor_control_loss",
            "Nausea": "https://psychonautwiki.org/wiki/Nausea",
            "Pattern recognition suppression": "https://psychonautwiki.org/wiki/Pattern_recognition_suppression",
            "Perception of decreased weight": "https://psychonautwiki.org/wiki/Perception_of_decreased_weight",
            "Perspective distortions": "https://psychonautwiki.org/wiki/Perspective_distortions",
            "Physical autonomy": "https://psychonautwiki.org/wiki/Physical_autonomy",
            "Physical euphoria": "https://psychonautwiki.org/wiki/Physical_euphoria",
            "Psychosis": "https://psychonautwiki.org/wiki/Psychosis",
            "Scenery slicing": "https://psychonautwiki.org/wiki/Scenery_slicing",
            "Spontaneous tactile sensations": "https://psychonautwiki.org/wiki/Spontaneous_tactile_sensations",
            "Tactile disconnection": "https://psychonautwiki.org/wiki/Tactile_disconnection",
            "Tactile suppression": "https://psychonautwiki.org/wiki/Tactile_suppression",
            "Thought acceleration": "https://psychonautwiki.org/wiki/Thought_acceleration",
            "Time distortion": "https://psychonautwiki.org/wiki/Time_distortion",
            "Visual disconnection": "https://psychonautwiki.org/wiki/Visual_disconnection",
            "Visual sliding": "https://psychonautwiki.org/wiki/Visual_sliding"
        }
    },
    "pemoline": {
        "categories": [
            "stimulant",
            "habit-forming"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-6"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "20-40mg",
                "Low": "10-20mg",
                "Strong": "40-80mg."
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "4-6"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "15-30"
        },
        "name": "pemoline",
        "pretty_name": "Pemoline",
        "properties": {
            "after-effects": "1-6 hours.",
            "categories": [
                "stimulant",
                "habit-forming"
            ],
            "dose": "Low: 10-20mg Common: 20-40mg Strong: 40-80mg.",
            "duration": "4-6 hours.",
            "onset": "15-30 minutes.",
            "summary": "A stimulant of the 4-oxazolidinone class. Was used as a medication for ADHD and Narcolepsy, yet was pulled from most markets due to liver failures among children."
        }
    },
    "pentazocine": {
        "aliases": [
            "talwin"
        ],
        "categories": [
            "habit-forming",
            "depressant",
            "opioid"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-12"
        },
        "formatted_dose": {
            "IM": {
                "Common": "20mg-30mg",
                "Light": "10-20mg",
                "Strong": "30-60mg"
            },
            "IV": {
                "Common": "10-20mg",
                "Light": "5-10mg",
                "Strong": "30mg"
            }
        },
        "formatted_duration": {
            "IM": "2-3",
            "IV": "2-3",
            "_unit": "hours"
        },
        "formatted_onset": {
            "IM": "15-20",
            "IV": "2-3",
            "_unit": "minutes"
        },
        "name": "pentazocine",
        "pretty_name": "Pentazocine",
        "properties": {
            "after-effects": "1-12 hours.",
            "aliases": [
                "talwin"
            ],
            "avoid": "All other CNS depressants",
            "bioavailability": "Oral 20%",
            "categories": [
                "habit-forming",
                "depressant",
                "opioid"
            ],
            "dose": "IM Light: 10-20mg Common: 20mg-30mg Strong: 30-60mg ( Do NOT Exceed 60mg) | IV Light: 5-10mg Common: 10-20mg Strong: 30mg (Do NOT Exceed 30mg)",
            "duration": "IM: 2-3 hours | IV: 2-3 hours",
            "onset": "IM 15-20 minutes | IV 2-3 minutes",
            "summary": "A synthetic opioid used as an analgesic. It is only used IM and IV in the medical field and has respiratory depressant effects. It is pregnancy category C and schedule IV in the US.",
            "warning": "When mixed with a barbituate in a syringe it will crystallize which can be fatal."
        },
        "sources": {
            "_general": [
                "information for dose duration onset warning and summary - Book - 2015 Jones and Bartlett Nurse's drug handbook fourteenth edition - page 929"
            ]
        }
    },
    "pentedrone": {
        "categories": [
            "stimulant",
            "research-chemical",
            "habit-forming"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-12"
        },
        "formatted_dose": {
            "Insufflated": {
                "Common": "5-10mg",
                "Light": "2-5mg",
                "Strong": "10-20mg"
            },
            "Oral": {
                "Common": "10-15mg",
                "Light": "5-10mg",
                "Strong": "15-25mg"
            },
            "Rectal": {
                "Common": "5-10mg",
                "Light": "2-5mg",
                "strong": "10-20mg."
            }
        },
        "formatted_duration": {
            "Insufflated": "1-4",
            "Oral": "2-6",
            "_unit": "hours"
        },
        "formatted_onset": {
            "Insufflated": "5-10",
            "Oral": "15-30",
            "_unit": "minutes"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_Pentedrone.shtml"
        },
        "name": "pentedrone",
        "pretty_name": "Pentedrone",
        "properties": {
            "after-effects": "1-12 hours.",
            "avoid": "All other stimulants.",
            "categories": [
                "stimulant",
                "research-chemical",
                "habit-forming"
            ],
            "dose": "Oral Light: 5-10mg Common: 10-15mg Strong: 15-25mg | Insufflated Light: 2-5mg Common: 5-10mg Strong: 10-20mg | Rectal Light: 2-5mg Common: 5-10mg strong: 10-20mg.",
            "duration": "Oral: 2-6 hours. | Insufflated: 1-4 hours.",
            "onset": "Oral: 15-30 minutes. | Insufflated: 5-10 minutes.",
            "summary": "A potent NDRI cathinone-type stimulant with more-ish effects but not thought to be especially enjoyable."
        }
    },
    "pentobarbital": {
        "aliases": [
            "nembutal",
            "novopentobarb"
        ],
        "categories": [
            "depressant",
            "habit-forming",
            "barbiturate"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-36"
        },
        "formatted_dose": {
            "IM": {
                "Common": "150-200mg",
                "Heavy": "200mg+",
                "Light": "100-150mg"
            },
            "IV": {
                "Common": "60-100mg",
                "Heavy": "100mg+",
                "Light": "50-60mg"
            },
            "Oral": {
                "Common": "100-200mg",
                "Heavy": "200-300mg",
                "Light": "50-100mg"
            }
        },
        "formatted_duration": {
            "IM": "3-4",
            "IV": "15-20",
            "Oral": "3-4",
            "_unit": "hours"
        },
        "formatted_onset": {
            "IM": "10-25",
            "IV": "1",
            "Oral": "15-60",
            "_unit": "minutes"
        },
        "name": "pentobarbital",
        "pretty_name": "Pentobarbital",
        "properties": {
            "after-effects": "1-36 hours.",
            "aliases": [
                "nembutal",
                "novopentobarb"
            ],
            "avoid": "All other CNS depressants, also avoid if you have respiratory issues or liver issues as barbiturates are harsh on the liver.",
            "categories": [
                "depressant",
                "habit-forming",
                "barbiturate"
            ],
            "dose": "Oral Light: 50-100mg Common: 100-200mg Heavy: 200-300mg | IM Light: 100-150mg Common: 150-200mg Heavy: 200mg+ | IV Light: 50-60mg Common: 60-100mg Heavy: 100mg+",
            "duration": "Oral 3-4 hours | IM 3-4 hours | IV 15-20 minutes",
            "onset": "Oral 15-60 minutes | IM 10-25 minutes | IV 1 minute",
            "summary": "A CNS depressant drug that is of the barbituate class. Typically not used often as it is easier to OD on than benzodiazepines, the new alternative to barbituates. Used often for insomnia, to cause sedation."
        },
        "sources": {
            "_general": [
                "Information on summary duration onset and dosage: Page 930 - Nurse's drug handbook 14th edition Jones and Bartlett 2015"
            ]
        }
    },
    "pentylone": {
        "aliases": [
            "4-meppp",
            "bk-mbdp",
            "bk-methyl-k"
        ],
        "categories": [
            "stimulant",
            "psychedelic",
            "research-chemical",
            "habit-forming"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-6"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "20-40mg",
                "Light": "10-20mg",
                "Strong": "40-80mg+"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "3-4"
        },
        "formatted_onset": {
            "Insufflated": "10",
            "Oral": "20-40",
            "_unit": "minutes"
        },
        "name": "pentylone",
        "pretty_name": "Pentylone",
        "properties": {
            "after-effects": "1-6 hours.",
            "aliases": [
                "4-meppp",
                "bk-mbdp",
                "bk-methyl-k"
            ],
            "categories": [
                "stimulant",
                "psychedelic",
                "research-chemical",
                "habit-forming"
            ],
            "dose": "Light: 10-20mg Common: 20-40mg Strong: 40-80mg+",
            "duration": "3-4 hours.",
            "onset": "Oral: 20-40 minutes | Insufflated: 10 minutes",
            "summary": "A stimulant, empathogen and substituted cathinone. It was first synthesised in the 1960s, and re-appeared on the research chemical scene in 2010. Still, very little is known about the pharmacology or effects of this compound."
        }
    },
    "peyote": {
        "categories": [
            "psychedelic",
            "common"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "6-8"
        },
        "formatted_dose": {
            "Dried": {
                "Common": "20-30g",
                "Heavy": "40g+",
                "Light": "10-20g",
                "Strong": "30-40g"
            },
            "Fresh": {
                "Common": "100-150g",
                "Heavy": "200g+",
                "Light": "50-100g"
            }
        },
        "formatted_duration": {
            "value": "4-8"
        },
        "formatted_effects": [
            "feelings of insight",
            "brightening of colors",
            "mood lift",
            "closed and open eye visuals",
            "giggling",
            "increase in energy happy feelings",
            "change in consciousness",
            "loss of appettite",
            "unusla thoughts and speech",
            "mild to extreme distractability",
            "changes in time and reality",
            "changes in self control",
            "ego softening",
            "pupil dialation",
            "body tremors",
            "nausea",
            "chest and neck pain",
            "shortness of"
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "60-120"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_Peyote.shtml"
        },
        "name": "peyote",
        "pretty_name": "Peyote",
        "properties": {
            "after-effects": "6-8 hours",
            "categories": [
                "psychedelic",
                "common"
            ],
            "dose": "Fresh Light: 50-100g  Common: 100-150g  Strong 150-200g  Heavy: 200g+ | Dried  Light: 10-20g  Common: 20-30g Strong: 30-40g  Heavy: 40g+",
            "duration": "4-8 hrs",
            "effects": "feelings of insight, brightening of colors, mood lift, closed and open eye visuals, giggling, increase in energy happy feelings, change in consciousness, loss of appettite, unusla thoughts and speech, mild to extreme distractability, changes in time and reality, changes in self control, ego softening, pupil dialation, body tremors, nausea, chest and neck pain, shortness of",
            "onset": "60-120 minutes",
            "summary": "Peyote is a small, spineless cactus that contains mescaline as its primary active chemical. It has a long history of use among the natives of northern Mexico and SW United States."
        }
    },
    "pfbt": {
        "aliases": [
            "4-fluorotropacocaine"
        ],
        "categories": [
            "stimulant",
            "habit-forming",
            "tentative",
            "research-chemical"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-24"
        },
        "formatted_dose": {
            "Insufflated": {
                "Common": "50-70mg",
                "Light": "20-50mg",
                "Strong": "70-110mg+",
                "Threshold": "10-20mg"
            }
        },
        "formatted_duration": {
            "Insufflated": "1-2",
            "_unit": "hours"
        },
        "formatted_onset": {
            "Insufflated": "1-10",
            "_unit": "minutes"
        },
        "name": "pfbt",
        "pretty_name": "PFBT",
        "properties": {
            "after-effects": "1-24 hours.",
            "aliases": [
                "4-fluorotropacocaine"
            ],
            "categories": [
                "stimulant",
                "habit-forming",
                "tentative",
                "research-chemical"
            ],
            "dose": "Insufflated Threshold: 10-20mg Light: 20-50mg Common: 50-70mg Strong: 70-110mg+",
            "duration": "Insufflated: 1-2 hours.",
            "onset": "Insufflated: 1-10 minutes.",
            "summary": "Tropane derivative substance that supposedly has around ~30% the potency of Cocaine as a stimulant. While also having properties of a local anasthetic."
        }
    },
    "phenazepam": {
        "categories": [
            "benzodiazepine",
            "research-chemical",
            "habit-forming",
            "depressant"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "36+"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "1-2mg",
                "Heavy": "2-4mg",
                "Light": "0.5-1mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "18+"
        },
        "formatted_effects": [
            "Anxiolytic",
            "Sedative",
            "Muscle Relaxant",
            "Amnesia",
            "Dystaxia",
            "Hypnotic",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "15-60"
        },
        "name": "phenazepam",
        "pretty_name": "Phenazepam",
        "properties": {
            "after-effects": "36+ hours",
            "avoid": "All other CNS depressants.",
            "categories": [
                "benzodiazepine",
                "research-chemical",
                "habit-forming",
                "depressant"
            ],
            "dose": "Light: 0.5-1mg Common: 1-2mg Heavy: 2-4mg WARNING Blacking out is very likely past 4mg's, don't tempt this one.",
            "dose_to_diazepam": "Phenazepam - ~1mg ~=10mg Diazepam.",
            "duration": "18+ hours",
            "effects": "Anxiolytic, Sedative, Muscle Relaxant, Amnesia, Dystaxia, Hypnotic.",
            "onset": "15-60 minutes",
            "summary": "A very long acting, potent and subtle benzodiazepine. Infamous for the calamitous experiences it tends to produce in people dosing unknown amounts. Prescribed in certain countries for epilepsy and alcohol withdrawal."
        }
    },
    "phenethylamine": {
        "aliases": [
            "pea"
        ],
        "categories": [
            "supplement",
            "nootropic"
        ],
        "formatted_aftereffects": {
            "_unit": "minutes",
            "value": "10-60"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "300-500mg."
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "1-4"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "15-30"
        },
        "name": "phenethylamine",
        "pretty_name": "Phenethylamine",
        "properties": {
            "after-effects": "10-60 minutes.",
            "aliases": [
                "pea"
            ],
            "categories": [
                "supplement",
                "nootropic"
            ],
            "dose": "Common: 300-500mg.",
            "duration": "1-4 hours.",
            "onset": "15-30 minutes.",
            "summary": "Organic compound, which is a name of a class of chemicals that are quite well known for psychoactive and/or stimulant effects. Normally not used as a supplement as it is rapidly broken down into inactive compounds. Is found in many foods."
        }
    },
    "phenetrazine": {
        "categories": [
            "stimulant",
            "habit-forming",
            "tentative"
        ],
        "formatted_dose": {
            "Insufflated": {
                "Common": "20-35mg",
                "Heavy": "50mg+",
                "Light": "10-20mg",
                "Strong": "35-50mg"
            },
            "Oral": {
                "Common": "25-50mg",
                "Heavy": "70mg+",
                "Light": "10-25mg",
                "Strong": "50-70mg.",
                "Threshold": "5-10mg"
            }
        },
        "name": "phenetrazine",
        "pretty_name": "Phenetrazine",
        "properties": {
            "categories": [
                "stimulant",
                "habit-forming",
                "tentative"
            ],
            "category": "tentative",
            "dose": "Oral Threshold: 5-10mg Light: 10-25mg Common: 25-50mg Strong: 50-70mg. Heavy: 70mg+ | Insufflated Light: 10-20mg Common: 20-35mg Strong: 35-50mg Heavy: 50mg+",
            "summary": "A rare phenethylamine stimulant related to 3-FPM. Virtually nothing is known about the pharmacology or effects of this compound but it is likely to have similar properties to other stimulants of its type. Not to be confused with phenmetrazine."
        }
    },
    "phenibut": {
        "categories": [
            "depressant",
            "research-chemical",
            "habit-forming",
            "nootropic"
        ],
        "dose_note": " NOTE: This substance has a very fast tolerance raise, and also seems to vary a lot person to person. Start low and work your way up. We would recommend starting with a low dose and working it up every 50-100mg's every two weeks.",
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-24"
        },
        "formatted_dose": {
            "Light:": {
                "Common": "600-1200mg",
                "Light": "300-600mg",
                "Strong": "1200-1800mg+"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "9-16"
        },
        "formatted_effects": [
            "Anxiolytic",
            "Sedative",
            "Muscle Relaxant",
            "Amnesia",
            "Dystaxia",
            "Hypnotic",
            ""
        ],
        "formatted_onset": {
            "value": "30-120"
        },
        "name": "phenibut",
        "pretty_name": "Phenibut",
        "properties": {
            "after-effects": "1-24 hours.",
            "avoid": "Other CNS depressants such as alcohol",
            "categories": [
                "depressant",
                "research-chemical",
                "habit-forming",
                "nootropic"
            ],
            "dose": "Light: 300-600mg's Common: 600-1200mg Strong: 1200-1800mg+ | NOTE: This substance has a very fast tolerance raise, and also seems to vary a lot person to person. Start low and work your way up. We would recommend starting with a low dose and working it up every 50-100mg's every two weeks.",
            "duration": "9-16 hours.",
            "effects": "Anxiolytic, Sedative, Muscle Relaxant, Amnesia, Dystaxia, Hypnotic.",
            "onset": "30-120 mins to feel it, peak around t+3-4h",
            "summary": "A derivative of GABA with the addition of a phenyl ring which allows it to cross the Blood Brain Barrier. Is mostly used as an anti-anxiety and anti-insomnia medication. Tolerance and physical dependency builds very quickly."
        },
        "pweffects": {
            "Amnesia": "https://psychonautwiki.org/wiki/Amnesia",
            "Anxiety suppression": "https://psychonautwiki.org/wiki/Anxiety_suppression",
            "Cognitive euphoria": "https://psychonautwiki.org/wiki/Cognitive_euphoria",
            "Dehydration": "https://psychonautwiki.org/wiki/Dehydration",
            "Depression": "https://psychonautwiki.org/wiki/Depression",
            "Difficulty urinating": "https://psychonautwiki.org/wiki/Difficulty_urinating",
            "Disinhibition": "https://psychonautwiki.org/wiki/Disinhibition",
            "Dizziness": "https://psychonautwiki.org/wiki/Dizziness",
            "Empathy, love, and sociability enhancement": "https://psychonautwiki.org/wiki/Empathy,_love,_and_sociability_enhancement",
            "Headaches": "https://psychonautwiki.org/wiki/Headaches",
            "Increased blood pressure": "https://psychonautwiki.org/wiki/Increased_blood_pressure",
            "Increased perspiration": "https://psychonautwiki.org/wiki/Increased_perspiration",
            "Information processing suppression": "https://psychonautwiki.org/wiki/Information_processing_suppression",
            "Motivation enhancement": "https://psychonautwiki.org/wiki/Motivation_enhancement",
            "Motor control loss": "https://psychonautwiki.org/wiki/Motor_control_loss",
            "Muscle cramps": "https://psychonautwiki.org/wiki/Muscle_cramps",
            "Nausea": "https://psychonautwiki.org/wiki/Nausea",
            "Physical euphoria": "https://psychonautwiki.org/wiki/Physical_euphoria",
            "Respiratory depression": "https://psychonautwiki.org/wiki/Respiratory_depression",
            "Sedation": "https://psychonautwiki.org/wiki/Sedation",
            "Stimulation": "https://psychonautwiki.org/wiki/Stimulation",
            "Stomach cramps": "https://psychonautwiki.org/wiki/Stomach_cramps",
            "Temperature regulation suppression": "https://psychonautwiki.org/wiki/Temperature_regulation_suppression",
            "Thought deceleration": "https://psychonautwiki.org/wiki/Thought_deceleration"
        }
    },
    "phenmetrazine": {
        "aliases": [
            "preludin"
        ],
        "categories": [
            "stimulant",
            "habit-forming"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-12"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "25-50mg",
                "Dangerous": "80mg+"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "4-8"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "15-30"
        },
        "name": "phenmetrazine",
        "pretty_name": "Phenmetrazine",
        "properties": {
            "after-effects": "1-12 hours.",
            "aliases": [
                "preludin"
            ],
            "categories": [
                "stimulant",
                "habit-forming"
            ],
            "dose": "Common: 25-50mg Dangerous: 80mg+",
            "duration": "4-8 hours. More or less dependent on stomach contents and metabolism.",
            "onset": "15-30 minutes.",
            "summary": "Stimulant drug that was previously used as an appetite suppresant, has been withdrawn from the market, due to concerns of abuse and addiction. Usually produces less nervousness, euphoria, and insomnia than drugs of the amphetamine family. Also as a study concluded, it is slightly more effective than dextroamphetamine as a weight loss agent."
        }
    },
    "phenobarbital": {
        "aliases": [
            "pheno",
            "phenobarbitone",
            "luminal"
        ],
        "categories": [
            "depressant",
            "habit-forming",
            "barbiturate"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-24"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "100-150mg",
                "Light": "50-100mg",
                "Strong": "150-300mg"
            }
        },
        "formatted_duration": {
            "Intravenous": "4-6",
            "Oral": "5-8",
            "_unit": "hours"
        },
        "formatted_onset": {
            "Intravenous": "1-5",
            "Oral": "15-45",
            "_unit": "minutes"
        },
        "name": "phenobarbital",
        "pretty_name": "Phenobarbital",
        "properties": {
            "after-effects": "1-24 hours.",
            "aliases": [
                "pheno",
                "phenobarbitone",
                "luminal"
            ],
            "avoid": "All other CNS depressants.",
            "categories": [
                "depressant",
                "habit-forming",
                "barbiturate"
            ],
            "dose": "Oral Light: 50-100mg's Common: 100-150mg's Strong: 150-300mg's+",
            "duration": "Oral: 5-8 hours. | Intravenous: 4-6 hours.",
            "onset": "Oral: 15-45 minutes. | Intravenous: 1-5 minutes.",
            "summary": "CNS depressant that is used mostly for insomnia (In older patients) and epliepsy (in younger patients) And it a very strong narcotic, that can be taken most ways. It's used less as \"safer\" alternatives have been made (Benzodiazepines)."
        }
    },
    "phentermine": {
        "categories": [
            "stimulant",
            "tentative"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-10"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "20-40mg",
                "Low": "15-20mg",
                "Strong": "40-70mg"
            }
        },
        "formatted_onset": {
            "_unit": "hours",
            "value": "4-6"
        },
        "name": "phentermine",
        "pretty_name": "Phentermine",
        "properties": {
            "after-effects": "1-10 hours.",
            "categories": [
                "stimulant",
                "tentative"
            ],
            "dose": "Low: 15-20mg Common: 20-40mg Strong: 40-70mg's.",
            "onset": "4-6 hours.",
            "summary": "Psychostimulant of the substituted amphetamine class. Used in medicine as an appetite suppressant."
        }
    },
    "picamilon": {
        "categories": [
            "nootropic",
            "depressant",
            "habit-forming"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-12"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "80-140mg",
                "Light": "40-80mg",
                "Strong": "140-250mg."
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "2-4"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "10-45"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_Picamilon.shtml"
        },
        "name": "picamilon",
        "pretty_name": "Picamilon",
        "properties": {
            "after-effects": "1-12 hours.",
            "categories": [
                "nootropic",
                "depressant",
                "habit-forming"
            ],
            "dose": "Oral Light: 40-80mg Common: 80-140mg Strong: 140-250mg.",
            "duration": "2-4 hours.",
            "onset": "10-45 minutes.",
            "summary": "An analogue of GABA that does pass the brain blood barrier, which is then hydrolyzed into GABA and Niacin. In which the GABA could produce an anxiolytic effect. The Niacin as a vasodilator. And is usually used as part of a nootropic stack."
        }
    },
    "pinazepam": {
        "aliases": [
            "domar"
        ],
        "categories": [
            "benzodiazepine",
            "depressant",
            "habit-forming"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "2-10"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "5-10mg",
                "Light": "2.5-5mg",
                "Strong": "10-20mg+"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "6-16"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "15-90"
        },
        "name": "pinazepam",
        "pretty_name": "Pinazepam",
        "properties": {
            "after-effects": "2-10 hours.",
            "aliases": [
                "domar"
            ],
            "avoid": "All CNS depressants.",
            "categories": [
                "benzodiazepine",
                "depressant",
                "habit-forming"
            ],
            "dose": "Light: 2.5-5mg Common: 5-10mg Strong: 10-20mg+",
            "duration": "6-16 hours.",
            "onset": "15-90 minutes.",
            "summary": "Benzodiazepine that is solely an anxiolytic drug that lacks the hypnotic and motor impairment that most benzodiazepines do. The main metabolite of this is Nordazepam and to a lesser effect Oxazepam, which is where it gets most of its effects"
        }
    },
    "pipt": {
        "categories": [
            "psychedelic",
            "research-chemical",
            "tentative"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-4"
        },
        "formatted_dose": {
            "Vapourized": {
                "Common": "15-20mg",
                "Heavy": "20mg+",
                "Light": "15mg",
                "Threshold": "10mg"
            }
        },
        "formatted_duration": {
            "Oral": "3-4",
            "Vaped": "2",
            "_unit": "hours"
        },
        "formatted_effects": [
            "Euphoria",
            "empathy",
            "insight",
            "brightened colour",
            "Closed/Open eye visuals",
            "enhanced tactile sensation",
            "mental/physical stimulation",
            "decreased appetite",
            "pupil dilation",
            "restlessness",
            "change in perception",
            "ego softening",
            "sweating/chills",
            "muscle tension",
            "confusion",
            "insomnia",
            ""
        ],
        "formatted_onset": {
            "Oral": "1",
            "Vaped": "5",
            "_unit": "minutes"
        },
        "name": "pipt",
        "pretty_name": "PiPT",
        "properties": {
            "after-effects": "1-4 hours.",
            "categories": [
                "psychedelic",
                "research-chemical",
                "tentative"
            ],
            "dose": "Vapourized Threshold: 10mg Light: 15mg Common: 15-20mg Heavy: 20mg+",
            "duration": "Oral: 3-4 hours | Vaped: 2 hours",
            "effects": "Euphoria, empathy, insight, brightened colour, Closed/Open eye visuals, enhanced tactile sensation, mental/physical stimulation, decreased appetite, pupil dilation, restlessness, change in perception, ego softening, sweating/chills, muscle tension, confusion, insomnia.",
            "onset": "Vaped: 5 minutes. | Oral: 1 hour.",
            "summary": "A rare psychedelic tryptamine related to DPT. Little is known about the effects or safety profile of this compound."
        }
    },
    "piracetam": {
        "aliases": [
            "nootropil",
            "lucetam",
            "noostan",
            "breinox",
            "oikamid",
            "geratam",
            "biotropil"
        ],
        "categories": [
            "nootropic"
        ],
        "dose_note": " Note: Doses are normally split up to be taken 3x a day.",
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-6"
        },
        "formatted_dose": {
            "Common:": {
                "Common": "1200-4800mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "3-6"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "15-35"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_Piracetam.shtml"
        },
        "name": "piracetam",
        "pretty_name": "Piracetam",
        "properties": {
            "after-effects": "1-6 hours.",
            "aliases": [
                "nootropil",
                "lucetam",
                "noostan",
                "breinox",
                "oikamid",
                "geratam",
                "biotropil"
            ],
            "categories": [
                "nootropic"
            ],
            "dose": "Common: 1200-4800mg | Note: Doses are normally split up to be taken 3x a day.",
            "duration": "3-6 hours.",
            "onset": "15-35 minutes.",
            "summary": "A racetam nootropic claimed by many to have cognitive benefits however this has never been strongly supported in healthy individuals. Prescribed in the UK as a treatment for myoclonus. Potentially an ampakine. One of the first popular 'nootropics.'"
        },
        "pweffects": {
            "Acuity enhancement": "https://psychonautwiki.org/wiki/Acuity_enhancement",
            "Anxiety": "https://psychonautwiki.org/wiki/Anxiety",
            "Anxiety suppression": "https://psychonautwiki.org/wiki/Anxiety_suppression",
            "Auditory enhancement": "https://psychonautwiki.org/wiki/Auditory_enhancement",
            "Colour enhancement": "https://psychonautwiki.org/wiki/Colour_enhancement",
            "Dream potentiation": "https://psychonautwiki.org/wiki/Dream_potentiation",
            "Focus enhancement": "https://psychonautwiki.org/wiki/Focus_enhancement",
            "Headaches": "https://psychonautwiki.org/wiki/Headaches",
            "Irritability": "https://psychonautwiki.org/wiki/Irritability",
            "Memory enhancement": "https://psychonautwiki.org/wiki/Memory_enhancement",
            "Mindfulness": "https://psychonautwiki.org/wiki/Mindfulness",
            "Motivation enhancement": "https://psychonautwiki.org/wiki/Motivation_enhancement",
            "Muscle spasms": "https://psychonautwiki.org/wiki/Muscle_spasms",
            "Stimulation": "https://psychonautwiki.org/wiki/Stimulation",
            "Tactile enhancement": "https://psychonautwiki.org/wiki/Tactile_enhancement",
            "Thought connectivity": "https://psychonautwiki.org/wiki/Thought_connectivity",
            "Wakefulness": "https://psychonautwiki.org/wiki/Wakefulness"
        }
    },
    "placdyl": {
        "aliases": [
            "placidyl",
            "ethchlorvnol"
        ],
        "categories": [
            "depressant",
            "habit-forming"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-6"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "200-500mg",
                "Light": "100-200mg",
                "Strong": "500-750mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "6-9"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "15-45"
        },
        "name": "placdyl",
        "pretty_name": "Ethchlorvynol",
        "properties": {
            "after-effects": "1-6 hours.",
            "aliases": [
                "placidyl",
                "ethchlorvnol"
            ],
            "avoid": "All other CNS depressants",
            "categories": [
                "depressant",
                "habit-forming"
            ],
            "dose": "Oral Light: 100-200mg Common: 200-500mg Strong: 500-750mg +",
            "duration": "6-9 hours",
            "onset": "15-45 minutes.",
            "summary": "Sedative Hypnotic medication made in the 50's. It was used for short term help for insomnia (No longer than two weeks)"
        }
    },
    "pma": {
        "categories": [
            "stimulant",
            "tentative"
        ],
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_PMA.shtml"
        },
        "name": "pma",
        "pretty_name": "PMA",
        "properties": {
            "categories": [
                "stimulant",
                "tentative"
            ],
            "summary": "An empathogen with a slow onset and very strong serotonin release. This, combined with its lack of dopamine release, often leads users to dose more for the pleasurable effects which never come, leading to hospitalisations and deaths. Sometimes mis-sold as MDMA.",
            "warning": "A deadly neurotoxin found in some MDMA presses."
        }
    },
    "pramiracetam": {
        "categories": [
            "nootropic"
        ],
        "dose_note": " Note: Usually taken two or three times a day. So 400mg taken three times a day. Or 600mg three times a day.",
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-2"
        },
        "formatted_dose": {
            "Common:": {
                "Common": "400-1200mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "4-6"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "15-30"
        },
        "name": "pramiracetam",
        "pretty_name": "Pramiracetam",
        "properties": {
            "after-effects": "1-2 hours.",
            "categories": [
                "nootropic"
            ],
            "dose": "Common: 400-1200mg | Note: Usually taken two or three times a day. So 400mg taken three times a day. Or 600mg three times a day.",
            "duration": "4-6 hours.",
            "onset": "15-30 minutes.",
            "summary": "A CNS stimulant that is a nootropic, that belongs to the racetam family of compounds. Much more potent than Piracetam while appearing to work on similar mechanisms."
        }
    },
    "prazepam": {
        "aliases": [
            "centrac",
            "centrax",
            "demetrin",
            "lysanxia",
            "pozapam",
            "prasepine",
            "prazene",
            "reapam",
            "trepidan"
        ],
        "categories": [
            "benzodiazepine",
            "depressant",
            "habit-forming"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "8-24"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "10-20mg",
                "Light": "5-10mg",
                "Strong": "20-40mg."
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "8-20"
        },
        "formatted_effects": [
            "Anxiolytic",
            "Anticonvulsant",
            "Sedative",
            "Skeletal Muscle Relaxant"
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "45-120"
        },
        "name": "prazepam",
        "pretty_name": "Prazepam",
        "properties": {
            "after-effects": "8-24 hours.",
            "aliases": [
                "centrac",
                "centrax",
                "demetrin",
                "lysanxia",
                "pozapam",
                "prasepine",
                "prazene",
                "reapam",
                "trepidan"
            ],
            "avoid": "All other CNS depressants, and Cimetidine",
            "categories": [
                "benzodiazepine",
                "depressant",
                "habit-forming"
            ],
            "dose": "Light: 5-10mg Common: 10-20mg Strong: 20-40mg.",
            "dose_to_diazepam": "Prazepam - 15mg ~=10mg Diazepam.",
            "duration": "8-20 hours.",
            "effects": "Anxiolytic, Anticonvulsant, Sedative, Skeletal Muscle Relaxant",
            "onset": "45-120 minutes.",
            "summary": "Benzodiazepine dervative. Has all the normal benzodiazepine-like quality (Anxiolytic/anticonvulsant/sedative/Skeletal muscle relaxant) It is also a prodrug for Desmethyldiazepam which is responsible for most if not all of the effects of Prazepam."
        }
    },
    "pre-084": {
        "categories": [
            "tentative"
        ],
        "formatted_duration": {
            "_unit": "hours",
            "value": "6-10"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "15-30"
        },
        "name": "pre-084",
        "pretty_name": "PRE-084",
        "properties": {
            "categories": [
                "tentative"
            ],
            "duration": "6-10 hours.",
            "note": "Not much is known about this drug, so be cautious.",
            "onset": "15-30 minutes.",
            "summary": "A sigma-1 receptor agonist derived structurally from PCP. It has cognitive enhancing effects as well as antidepressant effects, and shows promise in treating many nervous system diseases such as ALS and parkinsons."
        }
    },
    "pregabalin": {
        "aliases": [
            "lyrica",
            "pregablin"
        ],
        "categories": [
            "depressant",
            "habit-forming",
            "common"
        ],
        "dose_note": " Note \u0004e",
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-12"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "300-600mg",
                "Light": "150-300mg",
                "Strong": "600-900mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "6-14"
        },
        "formatted_effects": [
            "Anxiolytic",
            "Sedative",
            "Muscle Relaxant",
            "Amnesia",
            "Dystaxia",
            "Hypnotic",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "90-150"
        },
        "name": "pregabalin",
        "pretty_name": "Pregabalin",
        "properties": {
            "after-effects": "1-12 hours.",
            "aliases": [
                "lyrica",
                "pregablin"
            ],
            "categories": [
                "depressant",
                "habit-forming",
                "common"
            ],
            "dose": "Light: 150-300mg Common: 300-600mg Strong: 600-900mg",
            "duration": "6-14 hours (dependant on dose)",
            "effects": "Anxiolytic, Sedative, Muscle Relaxant, Amnesia, Dystaxia, Hypnotic.",
            "onset": "90-150 minutes.",
            "pregabalin": "(Lyrica) is a GABA derivative that is used to treat neuropathic pain and seizures, as well as anxiety. It is sometimes used recreationally, however an unusual tolerance profile renders it ineffective with regular use.",
            "summary": "Pregabalin (Lyrica) is a GABA derivative that is used to treat neuropathic pain and seizures, as well as anxiety."
        },
        "pweffects": {
            "Acuity enhancement": "https://psychonautwiki.org/wiki/Acuity_enhancement",
            "Amnesia": "https://psychonautwiki.org/wiki/Amnesia",
            "Anxiety suppression": "https://psychonautwiki.org/wiki/Anxiety_suppression",
            "Auditory enhancement": "https://psychonautwiki.org/wiki/Auditory_enhancement",
            "Cognitive euphoria": "https://psychonautwiki.org/wiki/Cognitive_euphoria",
            "Colour enhancement": "https://psychonautwiki.org/wiki/Colour_enhancement",
            "Disinhibition": "https://psychonautwiki.org/wiki/Disinhibition",
            "Dizziness": "https://psychonautwiki.org/wiki/Dizziness",
            "Empathy, love, and sociability enhancement": "https://psychonautwiki.org/wiki/Empathy,_love,_and_sociability_enhancement",
            "Information processing suppression": "https://psychonautwiki.org/wiki/Information_processing_suppression",
            "Internal hallucinations": "https://psychonautwiki.org/wiki/Internal_hallucinations",
            "Motivation enhancement": "https://psychonautwiki.org/wiki/Motivation_enhancement",
            "Motor control loss": "https://psychonautwiki.org/wiki/Motor_control_loss",
            "Muscle spasms": "https://psychonautwiki.org/wiki/Muscle_spasms",
            "Pain relief": "https://psychonautwiki.org/wiki/Pain_relief",
            "Respiratory depression": "https://psychonautwiki.org/wiki/Respiratory_depression",
            "Sedation": "https://psychonautwiki.org/wiki/Sedation",
            "Seizure suppression": "https://psychonautwiki.org/wiki/Seizure_suppression",
            "Thought deceleration": "https://psychonautwiki.org/wiki/Thought_deceleration"
        },
        "sources": {
            "_general": [
                "Pregabalin reduces cocaine self-administration and relapse to cocaine seeking in the rat - http://www.ncbi.nlm.nih.gov/pubmed/22734646"
            ]
        }
    },
    "prl-8-53": {
        "aliases": [
            "prl853"
        ],
        "categories": [
            "research-chemical",
            "nootropic",
            "tentative"
        ],
        "dose_note": " NOTE: start low and work your way up.",
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-12"
        },
        "formatted_dose": {
            "Threshold:": {
                "Common": "5-10mg",
                "Low": "3-5mg",
                "Strong": "10-20mg+",
                "Threshold": "2-3mg"
            }
        },
        "formatted_duration": {
            "Intranasally": "2-4",
            "Oral": "4-6",
            "Sublingual": "3-5",
            "_unit": "hours"
        },
        "formatted_onset": {
            "Intranasally": "Within",
            "Oral": "Within",
            "Sublingual": "Within",
            "_unit": "minutes"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_PRL853.shtml"
        },
        "name": "prl-8-53",
        "pretty_name": "PRL-8-53",
        "properties": {
            "after-effects": "1-12 hours.",
            "aliases": [
                "prl853"
            ],
            "categories": [
                "research-chemical",
                "nootropic",
                "tentative"
            ],
            "dose": "Threshold: 2-3mg Low: 3-5mg Common: 5-10mg Strong: 10-20mg+ | NOTE: start low and work your way up.",
            "duration": "Oral: 4-6 hours | Sublingual: 3-5 hours | Intranasally: 2-4 hours.",
            "onset": "Oral: Within 30 minutes. | Sublingual: Within 15 minutes. | Intranasally: Within 5 minutes.",
            "summary": "A nootropic research chemical first synthesized in the 70s. One study shows a drastic improvement in mid-term memory among users, but otherwise it is severely lacking in information surrounding it. It has no recreational potential."
        }
    },
    "pro-lad": {
        "categories": [
            "tentative",
            "psychedelic"
        ],
        "formatted_dose": {
            "Oral": {
                "Common": "100-150ug",
                "Light": "50-100ug",
                "Strong": "150-200ug."
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "6-10"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "30-45"
        },
        "name": "pro-lad",
        "pretty_name": "PRO-LAD",
        "properties": {
            "categories": [
                "tentative",
                "psychedelic"
            ],
            "dose": "Light: 50-100ug Common: 100-150ug Strong: 150-200ug.",
            "duration": "6-10 hours.",
            "onset": "30-45 minutes.",
            "summary": "A very rare lysergamide that is slightly less potent than LSD, yet with a shorter duration of action."
        }
    },
    "prolintane": {
        "aliases": [
            "catovit",
            "promotil",
            "villescon"
        ],
        "categories": [
            "stimulant",
            "research-chemical",
            "tentative",
            "habit-forming"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-4"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "15-30mg",
                "Light": "10-15",
                "Strong": "30-50mg+",
                "Threshold": "5-10mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "3-6"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "15-30"
        },
        "name": "prolintane",
        "pretty_name": "Prolintane",
        "properties": {
            "after-effects": "1-4 hours.",
            "aliases": [
                "catovit",
                "promotil",
                "villescon"
            ],
            "avoid": "Other stimulants.",
            "categories": [
                "stimulant",
                "research-chemical",
                "tentative",
                "habit-forming"
            ],
            "dose": "Threshold: 5-10mg Light: 10-15 Common: 15-30mg Strong: 30-50mg+",
            "duration": "3-6 hours (Highly dependant on dose)",
            "onset": "15-30 minutes.",
            "summary": "A stimulant drug which is a dopamine reuptake inhibitor, related to MDPV and Pyrovalerone. It was first developed in the 1950s, and has seen some light usage in rave culture, though it remains relatively uncommon. Believed to have a relatively forgiving safety profile."
        }
    },
    "promethazine": {
        "categories": [
            "common"
        ],
        "dose_note": " NOTE: This is what is normally used in medicinal settings, and is usually what is prescribed to you, since it has anticholinergic properties; IE; Delirant.",
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "0-3"
        },
        "formatted_dose": {
            "Common:": {
                "Common": "25-75mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "4-8"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "15-30"
        },
        "name": "promethazine",
        "pretty_name": "Promethazine",
        "properties": {
            "after-effects": "0-3 hours.",
            "categories": [
                "common"
            ],
            "dose": "Common: 25-75mg's. | NOTE: This is what is normally used in medicinal settings, and is usually what is prescribed to you, since it has anticholinergic properties; IE; Delirant.",
            "duration": "4-8 hours.",
            "onset": "15-30 minutes.",
            "summary": "A first generation antihistamine,  which also possesses anticholinergic, strong sedative and antipsychotic properties. Once commonly used as a treatment for psychosis, it is now more commonly seen as a component of codeine cough syrups as an anti-nausea agent."
        }
    },
    "propofol": {
        "aliases": [
            "milk-of-amnesia",
            "diprivan"
        ],
        "categories": [
            "depressant",
            "habit-forming"
        ],
        "dose_note": " Note: Do not take this as gospel. Please read ~experiences if you use this substance outside of a hospital setting.",
        "formatted_aftereffects": {
            "Intravenous": "1-3",
            "_unit": "hours"
        },
        "formatted_dose": {
            "Intravenously": {
                "Common": "30-60mg",
                "Light": "10-30mg",
                "Strong": "60-100mg"
            }
        },
        "formatted_duration": {
            "Intravenous": "10-20",
            "_unit": "minutes"
        },
        "formatted_onset": {
            "Intravenous": "0-2",
            "_unit": "minutes"
        },
        "name": "propofol",
        "pretty_name": "Propofol",
        "properties": {
            "after-effects": "Intravenous: 1-3 hours.",
            "aliases": [
                "milk-of-amnesia",
                "diprivan"
            ],
            "avoid": "If in a non-hospital setting, nearly all substances should be avoided. If you use this drug outside of a medical setting, have your partner or a friend monitor your pulse/breathing/etc. If your pulse drops below 50, or if you are taking less than 10 breaths per minute, call an ambulance. In some cases the user's body may be discoloured, in which case they are likely unconscious.",
            "categories": [
                "depressant",
                "habit-forming"
            ],
            "dose": "Intravenously Light: 10-30mg Common: 30-60mg Strong: 60-100mg | Note: Do not take this as gospel. Please read ~experiences if you use this substance outside of a hospital setting.",
            "duration": "Intravenous: 10-20 minutes.",
            "experiences": "https://www.reddit.com/r/Drugs/comments/56n5vq/michael_jackson_the_addict/d8l0qe7 (PM Sleep/Hypnos if you'd like more information)",
            "onset": "Intravenous: 0-2 minutes.",
            "summary": "A very short acting sedative that is usually given at the start of general anesthesia, and for maintenance of the prior. It should never be used outside of a medical setting. With that in mind, if you do plan to use this drug recreational, please have a very experienced friend with you that has the skills to insert a cannula, and monitor you very closely."
        }
    },
    "propoxyphene": {
        "categories": [
            "opioid",
            "depressant",
            "habit-forming"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "2-6"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "65-100",
                "Light": "30-65mg",
                "NOTE": "Just",
                "Strong": "100-200mg."
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "1-3"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "20-30"
        },
        "name": "propoxyphene",
        "pretty_name": "Propoxyphene",
        "properties": {
            "after-effects": "2-6 hours.",
            "categories": [
                "opioid",
                "depressant",
                "habit-forming"
            ],
            "dose": "Light: 30-65mg Common: 65-100 Strong: 100-200mg. NOTE: Just don't take this drug. <3",
            "duration": "1-3 hours.",
            "onset": "20-30 minutes.",
            "summary": "Is an analgesic in the opioid family. It is intended for mild pain and for its antitussive effects. Has been taken off the market in Europe and the US due to concerns of fatal overdoses and heart arrhythmias."
        }
    },
    "propranolol": {
        "aliases": [
            "inderal",
            "hemangeol",
            "innopran"
        ],
        "categories": [
            "depressant",
            "common"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-8"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "40-80mg",
                "Light": "10-30mg",
                "Strong": "80-140mg."
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "3-7"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "10-45"
        },
        "name": "propranolol",
        "pretty_name": "Propranolol",
        "properties": {
            "after-effects": "1-8 hours.",
            "aliases": [
                "inderal",
                "hemangeol",
                "innopran"
            ],
            "avoid": "All other CNS depressants.",
            "categories": [
                "depressant",
                "common"
            ],
            "dose": "Oral Light: 10-30mg Common: 40-80mg Strong: 80-140mg.",
            "duration": "3-7 hours.",
            "onset": "10-45 minutes.",
            "summary": "Is a nonselective beta blocker. It is used in medication for high blood pressure, anxiety, and tremors. Also fun fact, it was the first successful beta-blocker developed."
        }
    },
    "propylhexedrine": {
        "aliases": [
            "benzedrex",
            "propylhexadrine",
            "hexahdromethamphetamine"
        ],
        "categories": [
            "stimulant",
            "habit-forming",
            "common"
        ],
        "dose_note": " Note: Be aware of potency difference between pure HCl substance and cottons.",
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-16"
        },
        "formatted_dose": {
            "Insufflated": {
                "Common": "30-75mg",
                "Light": "10-30mg",
                "Strong": "75-100mg+"
            },
            "Insufflated(Pure)": {
                "Common": "15-30mg",
                "Light": "5-15mg",
                "Strong": "30-50mg+"
            },
            "Oral(Benzedrex)": {
                "Common": "60-125mg",
                "Heavy": "250mg+",
                "Light": "20-60mg",
                "Strong": "125-250mg"
            },
            "Oral(Pure)": {
                "Common": "20-50mg",
                "Light": "10-20mg",
                "Strong": "50mg+"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "4-8"
        },
        "formatted_onset": {
            "Insufflated": "5-10",
            "Oral": "5-15",
            "_unit": "minutes"
        },
        "name": "propylhexedrine",
        "pretty_name": "Propylhexedrine",
        "properties": {
            "after-effects": "1-16 hours.",
            "aliases": [
                "benzedrex",
                "propylhexadrine",
                "hexahdromethamphetamine"
            ],
            "avoid": "Other stimulants, it is known to raise heart rate much higher than what is safe.",
            "categories": [
                "stimulant",
                "habit-forming",
                "common"
            ],
            "dose": "Oral(Pure) Light: 10-20mg Common: 20-50mg Strong: 50mg+ | Insufflated(Pure) Light: 5-15mg Common: 15-30mg Strong: 30-50mg+ | Oral(Benzedrex) Light: 20-60mg Common: 60-125mg Strong: 125-250mg Heavy: 250mg+ | Insufflated (Benzedrex) Light: 10-30mg's Common: 30-75mg's Strong: 75-100mg+ | Note: Be aware of potency difference between pure HCl substance and cottons.",
            "duration": "4-8 hours",
            "onset": "Oral: 5-15 minutes | Insufflated: 5-10 minutes.",
            "summary": "A relatively common CNS stimulant sold over the counter in benzedrex inhalers."
        },
        "sources": {
            "_general": [
                "A drug toxicity death involving propylhexedrine and mitragynine. - https://www.ncbi.nlm.nih.gov/pubmed/21219704",
                "A drug toxicity death involving propylhexedrine and mitragynine - https://www.ncbi.nlm.nih.gov/pubmed/21219704"
            ]
        }
    },
    "propylphenidate": {
        "aliases": [
            "pph"
        ],
        "categories": [
            "stimulant",
            "research-chemical",
            "tentative",
            "habit-forming"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-8"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "25-60mg",
                "Heavy": "100mg+",
                "Light": "15-25mg",
                "Strong": "60-100mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "1.5-3"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "15-25"
        },
        "name": "propylphenidate",
        "pretty_name": "Propylphenidate",
        "properties": {
            "after-effects": "1-8 hours.",
            "aliases": [
                "pph"
            ],
            "categories": [
                "stimulant",
                "research-chemical",
                "tentative",
                "habit-forming"
            ],
            "dose": "Oral Light: 15-25mg Common: 25-60mg Strong: 60-100mg Heavy: 100mg+",
            "duration": "1.5-3 hours.",
            "onset": "15-25 minutes.",
            "summary": "Propylphenidate is a short acting stimulant."
        }
    },
    "proscaline": {
        "categories": [
            "psychedelic",
            "research-chemical"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "3-5"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "30-40mg",
                "Light": "15-30mg",
                "Strong": "40-60mg",
                "Threshold": "15mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "6-12"
        },
        "formatted_effects": [
            "Euphoria",
            "empathy",
            "insight",
            "brightened colour",
            "Closed/Open eye visuals",
            "enhanced tactile sensation",
            "mental/physical stimulation",
            "decreased appetite",
            "pupil dilation",
            "restlessness",
            "change in perception",
            "ego softening",
            "sweating/chills",
            "muscle tension",
            "confusion",
            "insomnia",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "30-60"
        },
        "name": "proscaline",
        "pretty_name": "Proscaline",
        "properties": {
            "after-effects": "3-5 hours.",
            "categories": [
                "psychedelic",
                "research-chemical"
            ],
            "dose": "Oral Threshold: 15mg's Light: 15-30mg's Common: 30-40mg's Strong: 40-60mg's",
            "duration": "6-12 hours.",
            "effects": "Euphoria, empathy, insight, brightened colour, Closed/Open eye visuals, enhanced tactile sensation, mental/physical stimulation, decreased appetite, pupil dilation, restlessness, change in perception, ego softening, sweating/chills, muscle tension, confusion, insomnia.",
            "onset": "30-60 minutes",
            "summary": "A very uncommon psychedelic stimulant and phenethylamine and analogue on mescaline with similar effects. Roughly 5-7 times more potent than mescaline by weight."
        }
    },
    "pseudoephedrine": {
        "categories": [
            "stimulant",
            "common"
        ],
        "formatted_dose": {
            "Oral": {
                "Common": "60-90mg.",
                "Light": "30-60mg.",
                "Strong": "90-120mg."
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "2-12"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "10-90"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_Pseudoephedrine.shtml"
        },
        "name": "pseudoephedrine",
        "pretty_name": "Pseudoephrine",
        "properties": {
            "avoid": "If you're prone to a pre-exisiting condition regarding your heart.",
            "categories": [
                "stimulant",
                "common"
            ],
            "dose": "Oral Light: 30-60mg. Common: 60-90mg. Strong: 90-120mg.",
            "duration": "2-12 hours.",
            "onset": "10-90 minutes.",
            "summary": "Widely sold as a decongestant, and one isomer of Ephedrine. It is not generally considered to have any recreational value. Is also used in the synthesis of Methcathinone and Methamphetamine."
        }
    },
    "psilocin": {
        "aliases": [
            "4-ho-dmt",
            "4-oh-dmt"
        ],
        "categories": [
            "psychedelic",
            "tentative",
            "empathogen",
            "research-chemical"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "3-12"
        },
        "formatted_dose": {
            "Insufflated": {
                "Common": "5-10mg",
                "Light": "2.5-5mg",
                "Strong": "10-15mg"
            },
            "Oral": {
                "Common": "10-15mg",
                "Light": "5-10mg",
                "Strong": "15-25mg"
            }
        },
        "formatted_duration": {
            "Insufflated": "2-4",
            "Oral": "3-6",
            "_unit": "hours"
        },
        "formatted_onset": {
            "Insufflated": "5-10",
            "Oral": "15-30",
            "_unit": "minutes"
        },
        "name": "psilocin",
        "pretty_name": "Psilocin",
        "properties": {
            "after-effects": "3-12 hours.",
            "aliases": [
                "4-ho-dmt",
                "4-oh-dmt"
            ],
            "categories": [
                "psychedelic",
                "tentative",
                "empathogen",
                "research-chemical"
            ],
            "dose": "Oral Light: 5-10mg Common: 10-15mg Strong: 15-25mg | Insufflated Light: 2.5-5mg Common: 5-10mg Strong: 10-15mg",
            "duration": "Oral: 3-6 hours | Insufflated: 2-4 hours.",
            "onset": "Oral: 15-30 minutes. | Insufflated: 5-10 minutes.",
            "summary": "Psilocin is a substutued tryptamine alkaloid, that is present in most psychedelic mushrooms. It is relatively unstable in solution due to the -OH group."
        }
    },
    "pst": {
        "aliases": [
            "poppy-seed-tea",
            "poppy-tea"
        ],
        "categories": [
            "opioid",
            "depressant",
            "habit-forming"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-30"
        },
        "formatted_duration": {
            "Oral": "8-24",
            "_unit": "hours"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "30-90"
        },
        "name": "pst",
        "pretty_name": "PST",
        "properties": {
            "after-effects": "1-30 hours.",
            "aliases": [
                "poppy-seed-tea",
                "poppy-tea"
            ],
            "avoid": "All other CNS depressants.",
            "categories": [
                "opioid",
                "depressant",
                "habit-forming"
            ],
            "duration": "Oral: 8-24 hours. | Note: Higher doses, usually will last around 18-24 hours. Yet, on the other side, lower doses last a fair bit shorter.",
            "note": "The doses of this are very inconsistent. Use with caution.",
            "onset": "30-90 minutes.",
            "summary": "Poppy Tea can be made from poppy pods, stalks and seeds, and contains various opium alkaloids including primarily Morphine, as well as Codeine and others. There is great variation in Poppy Tea potency and therefor doses are indicated for opioid naive users."
        }
    },
    "pv-10": {
        "categories": [
            "inactive"
        ],
        "name": "pv-10",
        "pretty_name": "PV-10",
        "properties": {
            "categories": [
                "inactive"
            ],
            "summary": "Inactive."
        }
    },
    "pv-8": {
        "aliases": [
            "a-phpp"
        ],
        "categories": [
            "stimulant",
            "research-chemical",
            "tentative",
            "habit-forming"
        ],
        "formatted_aftereffects": {
            "Insufflated": "4-8",
            "Oral": "6-12",
            "Vapourized": "2-5",
            "_unit": "hours"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "20-40mg",
                "Heavy": "60+mg.",
                "Light": "10-20mg",
                "Strong": "40-60mg"
            }
        },
        "formatted_duration": {
            "Insufflated": "2-5",
            "Oral": "3-6",
            "Vapourized": "0.5-1.5",
            "_unit": "hours"
        },
        "formatted_onset": {
            "Insufflated": "5-10",
            "Oral": "15-45",
            "Vapourized": "1-2",
            "_unit": "minutes"
        },
        "name": "pv-8",
        "pretty_name": "PV-8",
        "properties": {
            "after-effects": "Oral: 6-12 hours | Insufflated: 4-8 hours | Vapourized: 2-5 hours.",
            "aliases": [
                "a-phpp"
            ],
            "categories": [
                "stimulant",
                "research-chemical",
                "tentative",
                "habit-forming"
            ],
            "dose": "Light: 10-20mg Common: 20-40mg Strong: 40-60mg Heavy: 60+mg.",
            "duration": "Oral: 3-6 hours | Insufflated: 2-5 hours. | Vapourized: 0.5-1.5 hours.",
            "onset": "Oral: 15-45 minutes. | Insufflated: 5-10 minutes | Vapourized: 1-2 minutes.",
            "summary": "Stimulant of the pyrrolidinophenone class that is a higher homologue of \u03b1-PHP and generally less potent and less effective."
        }
    },
    "pv-9": {
        "categories": [
            "inactive"
        ],
        "name": "pv-9",
        "pretty_name": "PV-9",
        "properties": {
            "categories": [
                "inactive"
            ],
            "summary": "Inactive."
        }
    },
    "pyrazolam": {
        "categories": [
            "benzodiazepine",
            "research-chemical",
            "habit-forming",
            "depressant"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-12"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "2-3mg",
                "Light": "1-2mg",
                "Strong": "3-4mg"
            }
        },
        "formatted_duration": {
            "Insufflated": "3-5",
            "Oral": "5-8",
            "_unit": "hours"
        },
        "formatted_effects": [
            "Anxiolytic",
            "Sedative",
            "Muscle Relaxant",
            "Amnesia",
            "Dystaxia",
            ""
        ],
        "formatted_onset": {
            "Insufflated": "5",
            "Oral": "10-15",
            "_unit": "minutes"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_Pyrazolam.shtml"
        },
        "name": "pyrazolam",
        "pretty_name": "Pyrazolam",
        "properties": {
            "after-effects": "1-12 hours.",
            "categories": [
                "benzodiazepine",
                "research-chemical",
                "habit-forming",
                "depressant"
            ],
            "dose": "Oral Light: 1-2mg Common: 2-3mg Strong: 3-4mg's.",
            "dose_to_diazepam": "Pyrazolam - 1-2mg ~=10mg Diazepam.",
            "duration": "Oral: 5-8 hours. | Insufflated: 3-5 hours.",
            "effects": "Anxiolytic, Sedative, Muscle Relaxant, Amnesia, Dystaxia.",
            "onset": "Oral: 10-15 minutes. | Insufflated: 5 minutes.",
            "summary": "RC benzodiazepine discovered by Hoffman-LaRoche in the 1970s. Came to the RC market in the early 2010s. At lower doses it is mainly an anxiolytic compound, yet at higher doses can be quite sedating, hypnotic, amnesic, and can cause loss of inhibitions. Structurally similar to Alprazolam, Bromazepam, and Triazolam. Is 12x as potent as Diazepam."
        },
        "pweffects": {
            "Amnesia": "https://psychonautwiki.org/wiki/Amnesia",
            "Analysis suppression": "https://psychonautwiki.org/wiki/Analysis_suppression",
            "Anxiety suppression": "https://psychonautwiki.org/wiki/Anxiety_suppression",
            "Compulsive redosing": "https://psychonautwiki.org/wiki/Compulsive_redosing",
            "Disinhibition": "https://psychonautwiki.org/wiki/Disinhibition",
            "Dizziness": "https://psychonautwiki.org/wiki/Dizziness",
            "Information processing suppression": "https://psychonautwiki.org/wiki/Information_processing_suppression",
            "Motor control loss": "https://psychonautwiki.org/wiki/Motor_control_loss",
            "Muscle relaxation": "https://psychonautwiki.org/wiki/Muscle_relaxation",
            "Respiratory depression": "https://psychonautwiki.org/wiki/Respiratory_depression",
            "Sedation": "https://psychonautwiki.org/wiki/Sedation",
            "Thought deceleration": "https://psychonautwiki.org/wiki/Thought_deceleration"
        }
    },
    "pyrophenidone": {
        "categories": [
            "stimulant",
            "research-chemical",
            "habit-forming",
            "tentative"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-3"
        },
        "formatted_dose": {
            "Insufflated": {
                "Common": "40-60mg",
                "Heavy": "90mg+",
                "Light": "20-40mg",
                "Strong": "60-90mg"
            },
            "Vaporized": {
                "Common": "10-25mg",
                "Heavy": "50mg+.",
                "Light": "5-10mg",
                "Strong": "25-50mg"
            }
        },
        "formatted_duration": {
            "Insufflated": "1-3",
            "Vaporized": "1-1.5",
            "_unit": "hours"
        },
        "formatted_onset": {
            "Insufflated": "5-15",
            "Vaporized": "1-30",
            "_unit": "minutes"
        },
        "name": "pyrophenidone",
        "pretty_name": "Pyrophenidone",
        "properties": {
            "after-effects": "1-3 hours.",
            "categories": [
                "stimulant",
                "research-chemical",
                "habit-forming",
                "tentative"
            ],
            "dose": "Vaporized Light: 5-10mg Common: 10-25mg Strong: 25-50mg Heavy: 50mg+. | Insufflated Light: 20-40mg Common: 40-60mg Strong: 60-90mg Heavy: 90mg+",
            "duration": "Vaporized: 1-1.5 hours | Insufflated: 1-3 hours",
            "onset": "Vaporized 1-30 seconds. | Insufflated 5-15 minutes.",
            "summary": "An NDRI pyrovalerone derivative reported to have very similar subjective effects. Virtually no information exists about this drug's effects in humans."
        }
    },
    "quazepam": {
        "aliases": [
            "doral"
        ],
        "categories": [
            "benzodiazepine",
            "depressant",
            "habit-forming"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-24"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "10-15mg.",
                "Light": "7.5-10mg",
                "Strong": "15-30mg."
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "6-12"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "10-30"
        },
        "name": "quazepam",
        "pretty_name": "Quazepam",
        "properties": {
            "after-effects": "1-24 hours.",
            "aliases": [
                "doral"
            ],
            "bioavailability": "Oral 29-35%",
            "categories": [
                "benzodiazepine",
                "depressant",
                "habit-forming"
            ],
            "dose": "Light: 7.5-10mg Common: 10-15mg. Strong: 15-30mg.",
            "dose_to_diazepam": "Quazepam - 20mg ~=10mg Diazepam.",
            "duration": "6-12 hours.",
            "onset": "10-30 minutes.",
            "summary": "Benzodiazepine derivate drug, noral is prescribed for short term treatment of insomnia, and sleep maintenance. its MOA is very similar to Ambien and Sonata and substitutes for those in animal studies."
        }
    },
    "quetiapine": {
        "aliases": [
            "seroquel"
        ],
        "categories": [
            "depressant"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "Can"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "50mg-150mg",
                "Heavy": "300mg-800mg",
                "Light": "25mg-50mg",
                "Strong": "150mg-300mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "7-12"
        },
        "formatted_effects": [
            "sedation",
            "dizziness",
            "fatigue",
            "constipation",
            "dry mouth",
            "headache",
            "appetite change",
            "increased blood pressure"
        ],
        "formatted_onset": {
            "Oral": "IR",
            "_unit": "minutes"
        },
        "name": "quetiapine",
        "pretty_name": "Quetiapine",
        "properties": {
            "adverse-effects": "dizziness, fatigue, extrapyramidal symptoms, increased diastolic blood pressure, increased triglycerides, increased total cholesterol, increased appetite, constipation, dry mouth, headache, and somnolence",
            "after-effects": "Can last up to 24 hours after one use.",
            "aliases": [
                "seroquel"
            ],
            "categories": [
                "depressant"
            ],
            "chemistry": "IUPAC: 2-(2-(4-dibenzo[b,f][1,4]thiazepin-11-yl-1-piperazinyl)ethoxy)ethanol | Formula: C21H25N3O2S | Molecular Mass: 383.5099 g/mol | Solubility in Water: 3.29 mg/mL (20 \u00b0C)",
            "dose": "Oral Light: 25mg-50mg Common: 50mg-150mg Strong: 150mg-300mg Heavy: 300mg-800mg",
            "drug-contradictions": "apomorphine, bromocriptine, cabergoline, carbamazepine, cimetidine, clarithromycin, dabrafenib, dopamine, erythromycin, idelalisib, itraconazole, ivacaftor, ketoconazole, levodopa, lisuride, mefloquine, methyldopa, nefazodone, ondansetron, panobinostat, pramipexole, rifabutin, rifampin, ropinirole, sodium oxybate, st. john's wort, vilanterol, and vemurafenib",
            "duration": "7-12 hours.",
            "effects": "sedation, dizziness, fatigue, constipation, dry mouth, headache, appetite change, increased blood pressure",
            "legal": "Australia: Prescription Only (S4) | United Kingdom: POM | United States: ?-only",
            "onset": "Oral IR: 15-30 minutes. Oral XR: 30-60 minutes.",
            "overdose-symptoms": "sedation, hypotension, tachycardia, cardiac arrhythmia, coma, and death",
            "pharmacology": "D1, D2, D3, and D4 receptor antagonist; 5-HT1A receptor partial agonist; 5-HT2A, 5-HT2C, and 5-HT7 receptor antagonist; \u03b11-adrenergic and \u03b12-adrenergic receptor antagonist; H1 receptor antagonist; mACh receptor antagonist",
            "summary": "An atypical antipsychotic medication under the brand name Seroquel. Also used to treat insomnia and mood swings. This drug is very sedating and can stop/slow down psychedelic drug trips. Infrequently abused."
        },
        "pweffects": {
            "Amnesia": "https://psychonautwiki.org/wiki/Amnesia",
            "Analysis suppression": "https://psychonautwiki.org/wiki/Analysis_suppression",
            "Anxiety suppression": "https://psychonautwiki.org/wiki/Anxiety_suppression",
            "Creativity suppression": "https://psychonautwiki.org/wiki/Creativity_suppression",
            "Dehydration": "https://psychonautwiki.org/wiki/Dehydration",
            "Dizziness": "https://psychonautwiki.org/wiki/Dizziness",
            "Dream potentiation": "https://psychonautwiki.org/wiki/Dream_potentiation",
            "Emotion suppression": "https://psychonautwiki.org/wiki/Emotion_suppression",
            "Headaches": "https://psychonautwiki.org/wiki/Headaches",
            "Information processing suppression": "https://psychonautwiki.org/wiki/Information_processing_suppression",
            "Language suppression": "https://psychonautwiki.org/wiki/Language_suppression",
            "Motor control loss": "https://psychonautwiki.org/wiki/Motor_control_loss",
            "Sedation": "https://psychonautwiki.org/wiki/Sedation",
            "Thought deceleration": "https://psychonautwiki.org/wiki/Thought_deceleration"
        }
    },
    "rilmazafone": {
        "aliases": [
            "rhythmy"
        ],
        "categories": [
            "benzodiazepine",
            "habit-forming",
            "depressant"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "6-12"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "1-2mg",
                "Light": ".5-1mg",
                "Strong": "2-4mg+"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "6-8"
        },
        "formatted_effects": [
            "Anxiolytic",
            "Sedative",
            "Muscle Relaxant",
            "Amnesia",
            "Dystaxia",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "30-60"
        },
        "name": "rilmazafone",
        "pretty_name": "Rilmazafone",
        "properties": {
            "after-effects": "6-12 hours",
            "aliases": [
                "rhythmy"
            ],
            "categories": [
                "benzodiazepine",
                "habit-forming",
                "depressant"
            ],
            "dose": "Light: .5-1mg Common: 1-2mg Strong: 2-4mg+",
            "duration": "6-8 hours. ",
            "effects": "Anxiolytic, Sedative, Muscle Relaxant, Amnesia, Dystaxia.",
            "onset": "30-60 minutes",
            "summary": "Unique to Japan, this drug, also known as Rhythmy, is a benzodiazepine pro-drug which while inactive itself, is metabolised into the active compound in-vivo. Soluble in water."
        }
    },
    "rolicyclidine": {
        "aliases": [
            "pcpy"
        ],
        "categories": [
            "dissociative",
            "research-chemical",
            "habit-forming",
            "tentative"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-8"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "4-8mg",
                "Light": "2-4mg",
                "Strong": "8mg+"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "2-6"
        },
        "formatted_onset": {
            "Nasal": "30",
            "Oral": "30-60",
            "_unit": "minutes"
        },
        "name": "rolicyclidine",
        "pretty_name": "Rolicyclidine",
        "properties": {
            "after-effects": "1-8 hours.",
            "aliases": [
                "pcpy"
            ],
            "avoid": "All CNS depressants.",
            "categories": [
                "dissociative",
                "research-chemical",
                "habit-forming",
                "tentative"
            ],
            "dose": "Light: 2-4mg Common: 4-8mg Strong: 8mg+",
            "duration": "2-6 hours",
            "onset": "Oral: 30-60 minutes | Nasal 30 minutes.",
            "summary": "Rolicyclidine, also known as PCPy, is a dissociative with effects similar to PCP. While this dissociative anesthetic has hallucinogenic and sedative effects, it is said to be much less stimulating than PCP. In this sense it is more similar to opioids, or other central nervous system depressants."
        }
    },
    "ronlax": {
        "aliases": [
            "ethyl-loflazepate",
            "meilax",
            "victan"
        ],
        "categories": [
            "depressant",
            "habit-forming"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-24"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "1-2mg",
                "Light": "0.5-1mg",
                "Strong": "2-4mg."
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "8-16"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "45-90"
        },
        "name": "ronlax",
        "pretty_name": "Ronlax",
        "properties": {
            "after-effects": "1-24 hours.",
            "aliases": [
                "ethyl-loflazepate",
                "meilax",
                "victan"
            ],
            "avoid": "All CNS depressants. Also  if using the antidepressant Fluvoxamine may potentiate the adverse effects.",
            "categories": [
                "depressant",
                "habit-forming"
            ],
            "dose": "Oral Light: 0.5-1mg Common: 1-2mg Strong: 2-4mg.",
            "duration": "8-16 hours.",
            "onset": "45-90 minutes.",
            "summary": "A benzodiazepine derivative that posses the standard benzodiazepine effects. It has a very long half life (51-103 hours) it metabolizes into an active compound. (Descarboxyloflazepate) Is sold in Mexico."
        }
    },
    "rti-111": {
        "aliases": [
            "dichloropane"
        ],
        "categories": [
            "stimulant",
            "research-chemical",
            "tentative",
            "habit-forming"
        ],
        "dose_note": " Note, this is not nice on the nose, and the duration between Oral and Insufflated are roughly around the same length.",
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-6"
        },
        "formatted_dose": {
            "Insufflated": {
                "Common": "10-20mg",
                "Light": "5-10mg",
                "Strong": "20-40mg."
            },
            "Oral": {
                "Common": "15-30mg",
                "Light": "10-15mg",
                "Strong": "30-50mg"
            }
        },
        "formatted_duration": {
            "Insufflated": "2-4",
            "Oral": "2-4",
            "_unit": "hours"
        },
        "formatted_onset": {
            "Insufflated": "5-15",
            "Oral": "10-30",
            "_unit": "minutes"
        },
        "name": "rti-111",
        "pretty_name": "RTI-111",
        "properties": {
            "after-effects": "1-6 hours.",
            "aliases": [
                "dichloropane"
            ],
            "categories": [
                "stimulant",
                "research-chemical",
                "tentative",
                "habit-forming"
            ],
            "dose": "Oral Light: 10-15mg Common: 15-30mg Strong: 30-50mg | Insufflated Light: 5-10mg Common: 10-20mg Strong: 20-40mg. | Note, this is not nice on the nose, and the duration between Oral and Insufflated are roughly around the same length.",
            "duration": "Oral: 2-4 hours. | Insufflated: 2-4 hours.",
            "onset": "Oral: 10-30 minutes. | Insufflated 5-15 minutes.",
            "summary": "Stimulant of the Phenyltropane class that acts as a SNDRI. Presumably it will have a slightly slower onset and bit longer duration than its parent compound Cocaine. Yet being the Tropane analogue of 3,4-CTMP."
        }
    },
    "salvia": {
        "categories": [
            "dissociative",
            "deliriant",
            "depressant",
            "common"
        ],
        "formatted_aftereffects": {
            "_unit": "minutes",
            "value": "15-20"
        },
        "formatted_duration": {
            "Smoked": "5-30",
            "Sublingual": "30-60",
            "_unit": "minutes"
        },
        "formatted_effects": [
            "radical shift in perspective and perception",
            "creative dreamlike experience",
            "increase in sensual and aesthetic appreciation",
            "introspective insight",
            "powerful closed/open eye visuals",
            "general change in consciousness",
            "dissociation",
            "panic",
            "perspiration",
            "inability to control muscles"
        ],
        "formatted_onset": {
            "Smoked": "0-2",
            "Sublingual": "10-20",
            "_unit": "minutes"
        },
        "name": "salvia",
        "pretty_name": "Salvia",
        "properties": {
            "after-effects": "15-20 minutes",
            "categories": [
                "dissociative",
                "deliriant",
                "depressant",
                "common"
            ],
            "duration": "Sublingual: 30-60 minutes | Smoked: 5-30 minutes",
            "effects": "radical shift in perspective and perception, creative dreamlike experience, increase in sensual and aesthetic appreciation, introspective insight, powerful closed/open eye visuals, general change in consciousness, dissociation, panic, perspiration, inability to control muscles",
            "onset": "Sublingual: 10-20 minutes | Smoked: 0-2 minutes",
            "summary": "A plant which, when smoked, causes short but very intense psychedelic experiences. It is considered physically safe, though users of high dosages often experience bizarre other-worldly scenarios which may be confusing or terrifying."
        },
        "pweffects": {
            "Amnesia": "https://psychonautwiki.org/wiki/Amnesia",
            "Anxiety": "https://psychonautwiki.org/wiki/Anxiety",
            "Auditory distortion": "https://psychonautwiki.org/wiki/Auditory_distortion",
            "Auditory hallucinations": "https://psychonautwiki.org/wiki/Auditory_hallucinations",
            "Changes in felt bodily form": "https://psychonautwiki.org/wiki/Changes_in_felt_bodily_form",
            "Changes in gravity": "https://psychonautwiki.org/wiki/Changes_in_gravity",
            "Cognitive dysphoria": "https://psychonautwiki.org/wiki/Cognitive_dysphoria",
            "Depth perception distortions": "https://psychonautwiki.org/wiki/Depth_perception_distortions",
            "Drifting": "https://psychonautwiki.org/wiki/Drifting",
            "Environmental cubism": "https://psychonautwiki.org/wiki/Environmental_cubism",
            "Feelings of impending doom": "https://psychonautwiki.org/wiki/Feelings_of_impending_doom",
            "Information processing suppression": "https://psychonautwiki.org/wiki/Information_processing_suppression",
            "Internal hallucinations": "https://psychonautwiki.org/wiki/Internal_hallucinations",
            "Language suppression": "https://psychonautwiki.org/wiki/Language_suppression",
            "Laughter": "https://psychonautwiki.org/wiki/Laughter",
            "Machinescapes": "https://psychonautwiki.org/wiki/Machinescapes",
            "Memory suppression": "https://psychonautwiki.org/wiki/Memory_suppression",
            "Perspective distortions": "https://psychonautwiki.org/wiki/Perspective_distortions",
            "Scenery slicing": "https://psychonautwiki.org/wiki/Scenery_slicing",
            "Spontaneous tactile sensations": "https://psychonautwiki.org/wiki/Spontaneous_tactile_sensations",
            "Synaesthesia": "https://psychonautwiki.org/wiki/Synaesthesia",
            "Thought deceleration": "https://psychonautwiki.org/wiki/Thought_deceleration",
            "Transformations": "https://psychonautwiki.org/wiki/Transformations",
            "Unity and interconnectedness": "https://psychonautwiki.org/wiki/Unity_and_interconnectedness",
            "Visual disconnection#Structures": "https://psychonautwiki.org/wiki/Visual_disconnection#Structures"
        }
    },
    "scopolamine": {
        "categories": [
            "deliriant",
            "tentative"
        ],
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_Scopolamine.shtml"
        },
        "name": "scopolamine",
        "pretty_name": "Scopolamine",
        "properties": {
            "avoid": "Yes. Just avoid it. One of the active substances in Datura.",
            "categories": [
                "deliriant",
                "tentative"
            ],
            "summary": "The main active compound in datura, medium and high doses have serious side effects and cause extremely unpleasant deleriant hallucinations. Avoid it."
        },
        "pweffects": {
            "Abnormal heartbeat": "https://psychonautwiki.org/wiki/Abnormal_heartbeat",
            "Acuity suppression": "https://psychonautwiki.org/wiki/Acuity_suppression",
            "After images": "https://psychonautwiki.org/wiki/After_images",
            "Amnesia": "https://psychonautwiki.org/wiki/Amnesia",
            "Anxiety": "https://psychonautwiki.org/wiki/Anxiety",
            "Auditory enhancement": "https://psychonautwiki.org/wiki/Auditory_enhancement",
            "Auditory hallucinations": "https://psychonautwiki.org/wiki/Auditory_hallucinations",
            "Autonomous entities": "https://psychonautwiki.org/wiki/Autonomous_entities",
            "Cognitive dysphoria": "https://psychonautwiki.org/wiki/Cognitive_dysphoria",
            "Depression": "https://psychonautwiki.org/wiki/Depression",
            "Difficulty urinating": "https://psychonautwiki.org/wiki/Difficulty_urinating",
            "Dizziness": "https://psychonautwiki.org/wiki/Dizziness",
            "Dream potentiation": "https://psychonautwiki.org/wiki/Dream_potentiation",
            "Drifting": "https://psychonautwiki.org/wiki/Drifting",
            "Emotion suppression": "https://psychonautwiki.org/wiki/Emotion_suppression",
            "External hallucinations": "https://psychonautwiki.org/wiki/External_hallucinations",
            "Frequent urination": "https://psychonautwiki.org/wiki/Frequent_urination",
            "Increased heart rate": "https://psychonautwiki.org/wiki/Increased_heart_rate",
            "Information processing suppression": "https://psychonautwiki.org/wiki/Information_processing_suppression",
            "Internal hallucinations": "https://psychonautwiki.org/wiki/Internal_hallucinations",
            "Language suppression": "https://psychonautwiki.org/wiki/Language_suppression",
            "Muscle cramps": "https://psychonautwiki.org/wiki/Muscle_cramps",
            "Muscle spasms": "https://psychonautwiki.org/wiki/Muscle_spasms",
            "Nausea": "https://psychonautwiki.org/wiki/Nausea",
            "Paranoia": "https://psychonautwiki.org/wiki/Paranoia",
            "Pattern recognition suppression": "https://psychonautwiki.org/wiki/Pattern_recognition_suppression",
            "Perception of increased weight": "https://psychonautwiki.org/wiki/Perception_of_increased_weight",
            "Peripheral information misinterpretation": "https://psychonautwiki.org/wiki/Peripheral_information_misinterpretation",
            "Perspective alterations": "https://psychonautwiki.org/wiki/Perspective_alterations",
            "Photophobia": "https://psychonautwiki.org/wiki/Photophobia",
            "Psychosis": "https://psychonautwiki.org/wiki/Psychosis",
            "Pupil dilation": "https://psychonautwiki.org/wiki/Pupil_dilation",
            "Restless leg syndrome": "https://psychonautwiki.org/wiki/Restless_leg_syndrome",
            "Scenarios and plots": "https://psychonautwiki.org/wiki/Scenarios_and_plots",
            "Settings, sceneries, and landscapes": "https://psychonautwiki.org/wiki/Settings,_sceneries,_and_landscapes",
            "Shadow people": "https://psychonautwiki.org/wiki/Shadow_people",
            "Spontaneous tactile sensations": "https://psychonautwiki.org/wiki/Spontaneous_tactile_sensations",
            "Thought deceleration": "https://psychonautwiki.org/wiki/Thought_deceleration",
            "Thought disorganization": "https://psychonautwiki.org/wiki/Thought_disorganization",
            "Time distortion": "https://psychonautwiki.org/wiki/Time_distortion",
            "Unspeakable horrors": "https://psychonautwiki.org/wiki/Unspeakable_horrors",
            "Vibrating vision": "https://psychonautwiki.org/wiki/Vibrating_vision",
            "Visual haze": "https://psychonautwiki.org/wiki/Visual_haze"
        }
    },
    "secobarbital": {
        "aliases": [
            "seconal"
        ],
        "categories": [
            "depressant",
            "habit-forming",
            "barbiturate"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-24"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "50-150mg",
                "Light": "25-50mg",
                "Strong": "150-300mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "6-10"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "15-30"
        },
        "name": "secobarbital",
        "pretty_name": "Secobarbital",
        "properties": {
            "after-effects": "1-24 hours.",
            "aliases": [
                "seconal"
            ],
            "avoid": "All other CNS depressants.",
            "categories": [
                "depressant",
                "habit-forming",
                "barbiturate"
            ],
            "dose": "Oral Light: 25-50mg Common: 50-150mg Strong: 150-300mg",
            "duration": "6-10 hours.",
            "onset": "15-30 minutes.",
            "summary": "A Barbiturate derivative that possesses all the classic effects of todays Benzodiazepines, and the old Barbiturates. It's used in the treatment of Epilepsy, short term treatment for insomnia, and a preoperative medication for anaesthesia and anxiolysis for short surgical/diagnostic/therapeutic procedures."
        }
    },
    "sertraline": {
        "aliases": [
            "zoloft",
            "lustral"
        ],
        "categories": [
            "ssri"
        ],
        "name": "sertraline",
        "pretty_name": "Sertraline",
        "properties": {
            "aliases": [
                "zoloft",
                "lustral"
            ],
            "categories": [
                "ssri"
            ]
        }
    },
    "sinicuichi": {
        "aliases": [
            "sini",
            "shrubby-yellowcrest",
            "sun-opener",
            "heimia-salicifolia",
            "willow-leaf-heimia"
        ],
        "categories": [
            "psychedelic",
            "tentative"
        ],
        "formatted_duration": {
            "_unit": "minutes",
            "value": "15-45"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "1-5"
        },
        "name": "sinicuichi",
        "pretty_name": "Sinicuichi",
        "properties": {
            "aliases": [
                "sini",
                "shrubby-yellowcrest",
                "sun-opener",
                "heimia-salicifolia",
                "willow-leaf-heimia"
            ],
            "categories": [
                "psychedelic",
                "tentative"
            ],
            "duration": "15-45 minutes.",
            "onset": "1-5 minutes.",
            "summary": "A perennial shrub with small narrow leaves and yellow flowers growing up to ~1.5 meters. Known under many different names. Has been used for Shamanic purposes by natives in Central America and Mexico. Mostly auditory based.",
            "warning": "A fair amount of people after smoking this compound have reported to have fairly bad side-effects such as night fever, night sweats, and muscle pains."
        }
    },
    "sonata": {
        "aliases": [
            "zaleplon"
        ],
        "categories": [
            "depressant",
            "habit-forming",
            "common"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-12"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "5-10mg",
                "Light": "2.5-5mg",
                "Strong": "10-20mg."
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "3-6"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "10-30"
        },
        "name": "sonata",
        "pretty_name": "Sonata",
        "properties": {
            "after-effects": "1-12 hours.",
            "aliases": [
                "zaleplon"
            ],
            "avoid": "All other CNS depressants.",
            "categories": [
                "depressant",
                "habit-forming",
                "common"
            ],
            "dose": "Oral Light: 2.5-5mg Common: 5-10mg Strong: 10-20mg.",
            "duration": "3-6 hours.",
            "onset": "10-30 minutes.",
            "summary": "Sedative-Hypnotic of the nonbenzodiazepine from the Pyrazolopyramide class. It is used mostly for short term insomnia."
        }
    },
    "sufentanil": {
        "categories": [
            "opioid",
            "depressant",
            "habit-forming"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-12"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "5-10ug",
                "Light": "1-5ug",
                "Strong": "10-25ug."
            }
        },
        "formatted_duration": {
            "_unit": "minutes",
            "value": "5-10"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "1-2"
        },
        "name": "sufentanil",
        "pretty_name": "Sufentanil",
        "properties": {
            "after-effects": "1-12 hours.",
            "categories": [
                "opioid",
                "depressant",
                "habit-forming"
            ],
            "dose": "Light: 1-5ug Common: 5-10ug Strong: 10-25ug.",
            "duration": "5-10 minutes.",
            "onset": "1-2 minutes.",
            "summary": "An synthetic analgesic drug that is roughly between 5-10x the potency of it's parent drug, (Fentanyl); It's use is very contained to surgery and post-operative pain."
        }
    },
    "sulbutiamine": {
        "aliases": [
            "sulbut",
            "arcalion",
            "enerion",
            "bisibuthiamine",
            "youvitan"
        ],
        "categories": [
            "tentative",
            "stimulant",
            "habit-forming",
            "supplement"
        ],
        "formatted_dose": {
            "Oral": {
                "Common": "200-400mg."
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "6-10"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "20-40"
        },
        "name": "sulbutiamine",
        "pretty_name": "Sulbutiamine",
        "properties": {
            "aliases": [
                "sulbut",
                "arcalion",
                "enerion",
                "bisibuthiamine",
                "youvitan"
            ],
            "categories": [
                "tentative",
                "stimulant",
                "habit-forming",
                "supplement"
            ],
            "dose": "Common: 200-400mg.",
            "duration": "6-10 hours. Dose and tolerance dependent.",
            "experiences": "https://drugs-forum.com/forum/showthread.php?t=101258",
            "onset": "20-40 minutes",
            "summary": "A thiamine derivative nootropic and stimulant drug. Caution should be used as sulbutiamine reduces dopamine output over time with consistant usage."
        }
    },
    "tapentadol": {
        "categories": [
            "opioid",
            "habit-forming",
            "depressant"
        ],
        "dose_note": " NOTE: Doses are for no tolerance. Insufflated administration is ineffective.",
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-12"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "50-75mg",
                "Light": "25-50mg",
                "Strong": "75-150mg+"
            }
        },
        "formatted_duration": {
            "Oral_ER": "5-8",
            "Oral_IR": "3-5",
            "_unit": "hours"
        },
        "formatted_effects": [
            "Euphoria",
            "Dry Mouth",
            "Mood lift",
            "Itchiness",
            "Relaxant",
            "Constipation",
            "Pupil constriction",
            "Analgesia",
            ""
        ],
        "formatted_onset": {
            "Oral_ER": "60-120",
            "Oral_IR": "20-40",
            "_unit": "minutes"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_Tapentadol.shtml"
        },
        "name": "tapentadol",
        "pretty_name": "Tapentadol",
        "properties": {
            "after-effects": "1-12 hours.",
            "avoid": "All other CNS depressants",
            "categories": [
                "opioid",
                "habit-forming",
                "depressant"
            ],
            "dose": "Oral Light: 25-50mg Common: 50-75mg Strong: 75-150mg+ | NOTE: Doses are for no tolerance. Insufflated administration is ineffective.",
            "duration": "Oral_IR: 3-5 hours | Oral_ER: 5-8 hours.",
            "effects": "Euphoria, Dry Mouth, Mood lift, Itchiness, Relaxant, Constipation, Pupil constriction, Analgesia.",
            "onset": "Oral_IR: 20-40 minutes. | Oral_ER: 60-120 minutes.",
            "summary": "An opioid analgesic drug with potency somewhere between tramadol and morphine, and with a similar action to Tramadol. Also an adrenergic reuptake inhibitor. High addiction potential. Potential for respiratory depression in overdose. Should not be combined with depressants or stimulants."
        }
    },
    "temazepam": {
        "aliases": [
            "restoril"
        ],
        "categories": [
            "benzodiazepine",
            "habit-forming",
            "depressant"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "6-12"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "10-20mg",
                "Light": "5-10mg",
                "Strong": "20-40mg+"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "6-10"
        },
        "formatted_effects": [
            "Anxiolytic",
            "Sedative",
            "Muscle Relaxant",
            "Amnesia",
            "Dystaxia",
            "Hypnotic",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "20-90"
        },
        "name": "temazepam",
        "pretty_name": "Temazepam",
        "properties": {
            "after-effects": "6-12 hours",
            "aliases": [
                "restoril"
            ],
            "avoid": "All other CNS depressants.",
            "bioavailability": "Oral 96%",
            "categories": [
                "benzodiazepine",
                "habit-forming",
                "depressant"
            ],
            "dose": "Oral Light: 5-10mg's Common: 10-20mg Strong: 20-40mg+",
            "dose_to_diazepam": "Temazepam - 20mg ~=10mg Diazepam.",
            "duration": "6-10 hours",
            "effects": "Anxiolytic, Sedative, Muscle Relaxant, Amnesia, Dystaxia, Hypnotic.",
            "onset": "20-90 minutes",
            "summary": "Temazepam's brand name is Restoril. It is a hypnotic benzodiazepine with effects similar to clonazepam, frequently prescribed as a sleep aid. Some users report mild euphoria alongside the hypnotic effects."
        },
        "sources": {
            "_general": [
                "Alcohol and benzodiazepines in fatal poisonings. - https://www.ncbi.nlm.nih.gov/pubmed/12170103"
            ]
        }
    },
    "tetrahydrofuran-fentanyl": {
        "aliases": [
            "thf-f",
            "thff"
        ],
        "categories": [
            "opioid",
            "habit-forming",
            "depressant",
            "research-chemical"
        ],
        "name": "tetrahydrofuran-fentanyl",
        "pretty_name": "TETRAHYDROFURAN-FENTANYL",
        "properties": {
            "aliases": [
                "thf-f",
                "thff"
            ],
            "categories": [
                "opioid",
                "habit-forming",
                "depressant",
                "research-chemical"
            ],
            "summary": "An analogue of fentanyl that is unknown in literature. Is most likely less potent than most other analogues. Yet very few reports are around. Be careful."
        }
    },
    "tetrazepam": {
        "categories": [
            "benzodiazepine",
            "habit-forming",
            "depressant"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-12"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "50-100mg",
                "Light": "25-50mg",
                "Strong": "100-200mg+"
            }
        },
        "formatted_duration": {
            "Oral": "6-10",
            "_unit": "hours"
        },
        "formatted_onset": {
            "Oral": "15-35",
            "_unit": "minutes"
        },
        "name": "tetrazepam",
        "pretty_name": "Tetrazepam",
        "properties": {
            "after-effects": "1-12 hours.",
            "avoid": "All other CNS depressants.",
            "categories": [
                "benzodiazepine",
                "habit-forming",
                "depressant"
            ],
            "dose": "Light: 25-50mg Common: 50-100mg Strong: 100-200mg+",
            "duration": "Oral: 6-10 hours.",
            "onset": "Oral: 15-35 minutes.",
            "summary": "A benzodiazepine that has most of the properties of more common benzodiazepines. Yet was taken off the market in 2013. Has been noted to be more euphoric than most others."
        }
    },
    "th-pvp": {
        "categories": [
            "tentative",
            "research-chemical",
            "stimulant",
            "habit-forming"
        ],
        "formatted_dose": {
            "Insufflated": {
                "Common": "15-25mg",
                "Light": "10-15mg",
                "Strong": "25-35mg+"
            },
            "Oral": {
                "Common": "30-50mg",
                "Light": "20-30mg",
                "Strong": "50-70mg"
            },
            "Vapourized": {
                "Common": "15-25mg",
                "Light": "10-15mg",
                "Strong": "25-35mg"
            }
        },
        "formatted_duration": {
            "Insufflated": "2-3",
            "Oral": "3-5",
            "Vapourized": "1",
            "_unit": "hours"
        },
        "formatted_onset": {
            "Insufflated": "5-15",
            "Oral": "20-30",
            "Vapourized": "1-2",
            "_unit": "minutes"
        },
        "name": "th-pvp",
        "pretty_name": "TH-PVP",
        "properties": {
            "categories": [
                "tentative",
                "research-chemical",
                "stimulant",
                "habit-forming"
            ],
            "dose": "Oral Light: 20-30mg Common: 30-50mg Strong: 50-70mg | Insufflated Light: 10-15mg Common: 15-25mg Strong: 25-35mg+ | Vapourized Light: 10-15mg Common: 15-25mg Strong: 25-35mg",
            "duration": "Oral: 3-5 hours. | Insufflated: 2-3 hours. | Vapourized: 1 hour.",
            "onset": "Oral: 20-30 minutes. | Insufflated: 5-15 minutes. | Vapourized: 1-2 minutes.",
            "summary": "A pyrovalerone stimulant related to a-PVP and naphyrone. Very little information about effects or safety profile, virtually no evidence of human use."
        }
    },
    "theacrine": {
        "categories": [
            "stimulant",
            "nootropic"
        ],
        "formatted_dose": {
            "Oral": {
                "Common": "25-50mg",
                "Light": "10-25mg",
                "Strong": "50-100mg+"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "2-6"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "15-30"
        },
        "name": "theacrine",
        "pretty_name": "Theacrine",
        "properties": {
            "categories": [
                "stimulant",
                "nootropic"
            ],
            "dose": "Oral Light: 10-25mg Common: 25-50mg Strong: 50-100mg+",
            "duration": "2-6 hours.",
            "onset": "15-30 minutes.",
            "summary": "Small alkaloid which can be seen as a structurally modified version of caffeine, with similar stimulating effects. It also shares anti-inflammatory and analgesic effects with caffeine."
        }
    },
    "theobromine": {
        "formatted_dose": {
            "Oral": {
                "Common": "200-300mg",
                "Heavy": "600mg+",
                "Light": "100-200mg",
                "Strong": "300-600mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "onset": "30-40"
        },
        "formatted_effects": [
            "elevated heart rate",
            "vasodilation",
            "sweating",
            "trembling",
            "headaches"
        ],
        "formatted_onset": {
            "_unit": "hours",
            "value": "2-3"
        },
        "name": "theobromine",
        "pretty_name": "Theobromine",
        "properties": {
            "dose": "Light: 100-200mg Common: 200-300mg Strong: 300-600mg Heavy: 600mg+",
            "duration": "onset: 30-40 minutes duration: 7-12 hours after-effects: 5-12 hours",
            "duration:": "7-12 hours.",
            "effects": "elevated heart rate, vasodilation, sweating, trembling, headaches",
            "onset": "2-3 hours.",
            "summary": "Theobromine is the principal bitter alkaloid of the cacao bean. It has been used in various pharmaceutical products as vasodilator, diuretic and as heart stimulant. Theobromine is consumed in cocoa, chocolate and in various forms of chocolate-based foods. It is also present in small amounts in green coffee beans, tea, mate and the kola nut."
        }
    },
    "thiopental": {
        "categories": [
            "barbiturate",
            "habit-forming",
            "depressant"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-24"
        },
        "formatted_duration": {
            "Intravenous": "6-10",
            "_unit": "hours"
        },
        "formatted_onset": {
            "Intravenous": "0-2",
            "_unit": "minutes"
        },
        "name": "thiopental",
        "pretty_name": "Thiopental",
        "properties": {
            "after-effects": "1-24 hours.",
            "avoid": "All other CNS depressants.",
            "categories": [
                "barbiturate",
                "habit-forming",
                "depressant"
            ],
            "duration": "Intravenous: 6-10 hours.",
            "onset": "Intravenous: 0-2 minutes.",
            "summary": "Barbiturate that kicks in very quickly, that is used to Anesthesia, Medical induced comas among other things."
        }
    },
    "thiopropamine": {
        "aliases": [
            "tpa",
            "normethiopropamine",
            "a-methyl-2-thipheneethanamine"
        ],
        "categories": [
            "stimulant",
            "habit-forming",
            "research-chemical"
        ],
        "formatted_aftereffects": {
            "Insufflated": "1-2",
            "Oral": "1-3",
            "_unit": "hours"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "50-100mg",
                "Light": "20-50mg",
                "Strong": "100-125mg+"
            }
        },
        "formatted_duration": {
            "Insufflated": "1-2",
            "Oral": "1-4",
            "_unit": "hours"
        },
        "formatted_onset": {
            "Insufflated": "5-15mg.",
            "Oral": "15-45",
            "_unit": "minutes"
        },
        "name": "thiopropamine",
        "pretty_name": "Thiopropamine",
        "properties": {
            "after-effects": "Oral: 1-3 hours | Insufflated: 1-2 hours.",
            "aliases": [
                "tpa",
                "normethiopropamine",
                "a-methyl-2-thipheneethanamine"
            ],
            "categories": [
                "stimulant",
                "habit-forming",
                "research-chemical"
            ],
            "dose": "Oral Light: 20-50mg Common: 50-100mg Strong: 100-125mg+",
            "duration": "Oral: 1-4 hours. | Insufflated: 1-2 hours.",
            "onset": "Oral: 15-45 minutes. | Insufflated: 5-15mg.",
            "summary": "A substance that is closely related to Methiopopramine (MPA). Is roughly about 1/3rd the potency of amphetamine, differs from amphetmine from the phenyl ring is switched with a thiophene ring."
        }
    },
    "tianeptine": {
        "categories": [
            "habit-forming",
            "depressant",
            "opioid"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-8"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "12.5mg",
                "Light": "7.5mg",
                "Note": "Tianeptine",
                "Strong": "17mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "4-6"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "15-45"
        },
        "name": "tianeptine",
        "pretty_name": "Tianeptine",
        "properties": {
            "after-effects": "1-8 hours.",
            "categories": [
                "habit-forming",
                "depressant",
                "opioid"
            ],
            "dose": "Light: 7.5mg Common: 12.5mg Strong: 17mg Note: Tianeptine is reported to have opioid-like effects at high doses, but this is offset by an increased risk of liver damage",
            "duration": "4-6 hours.",
            "onset": "15-45 minutes.",
            "summary": "A Tricyclic antidepressant, that has quite unique pharmacological properties than others in its class. Such as the possible indirect action on NMDA/AMPA and a full agonist at the \u03bc-opioid receptor. While abuse of this substance is uncommon, it has been shown in a few countries."
        },
        "pweffects": {
            "Anxiety suppression": "https://psychonautwiki.org/wiki/Anxiety_suppression",
            "Bronchodilation": "https://psychonautwiki.org/wiki/Bronchodilation",
            "Cognitive euphoria": "https://psychonautwiki.org/wiki/Cognitive_euphoria",
            "Cognitive fatigue": "https://psychonautwiki.org/wiki/Cognitive_fatigue",
            "Constipation": "https://psychonautwiki.org/wiki/Constipation",
            "Dizziness": "https://psychonautwiki.org/wiki/Dizziness",
            "Focus enhancement": "https://psychonautwiki.org/wiki/Focus_enhancement",
            "Headaches": "https://psychonautwiki.org/wiki/Headaches",
            "Motivation enhancement": "https://psychonautwiki.org/wiki/Motivation_enhancement",
            "Muscle relaxation": "https://psychonautwiki.org/wiki/Muscle_relaxation",
            "Physical euphoria": "https://psychonautwiki.org/wiki/Physical_euphoria",
            "Physical fatigue": "https://psychonautwiki.org/wiki/Physical_fatigue",
            "Rejuvenation": "https://psychonautwiki.org/wiki/Rejuvenation",
            "Stimulation": "https://psychonautwiki.org/wiki/Stimulation",
            "Thought acceleration": "https://psychonautwiki.org/wiki/Thought_acceleration",
            "Thought deceleration": "https://psychonautwiki.org/wiki/Thought_deceleration"
        }
    },
    "tiletamine": {
        "aliases": [
            "telazol"
        ],
        "categories": [
            "dissociative",
            "research-chemical",
            "tentative",
            "habit-forming"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-72"
        },
        "formatted_dose": {
            "Intramuscular": {
                "Common": "5-10mg",
                "Light": "2.5-5mg",
                "Strong": "10-20mg+"
            },
            "Oral": {
                "Common": "25-50mg",
                "Light": "10-25mg",
                "Strong": "50-100mg+"
            }
        },
        "formatted_duration": {
            "Insufflated": "2-5",
            "Intramuscular": "1-4",
            "Oral": "6-12",
            "_unit": "hours"
        },
        "formatted_onset": {
            "Insufflated": "2-10",
            "Intramuscular": "1-5",
            "Oral": "15-45",
            "_unit": "minutes"
        },
        "name": "tiletamine",
        "pretty_name": "Tiletamine",
        "properties": {
            "after-effects": "1-72 hours.",
            "aliases": [
                "telazol"
            ],
            "categories": [
                "dissociative",
                "research-chemical",
                "tentative",
                "habit-forming"
            ],
            "dose": "Oral Light: 10-25mg Common: 25-50mg Strong: 50-100mg+ | Intramuscular Light: 2.5-5mg Common: 5-10mg Strong: 10-20mg+",
            "duration": "Oral: 6-12 hours. | Insufflated: 2-5 hours. | Intramuscular: 1-4 hours.",
            "onset": "Oral: 15-45 minutes. | Insufflated: 2-10 minutes. | Intramuscular: 1-5 minutes.",
            "summary": "A relatively rare dissociative anesthetic, pharmacologically classified as an NMDA receptor antagonist. It is related to other anesthetics in this family such as Ketamine and phencyclidine. Has been used to cut Ketamine, in which case it may cause additional nausea. In Veterinary practice it is mixed with Zolazolam, a potent anaesthetic at a 1:1 ratio."
        }
    },
    "tilidine": {
        "aliases": [
            "tilidate",
            "tilidin",
            "valoron",
            "valtran"
        ],
        "categories": [
            "opioid",
            "habit-forming",
            "depressant"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-12"
        },
        "formatted_dose": {
            "Tilidine": {
                "Common": "50-100mg",
                "Light": "25-50mg",
                "Strong": "100-200mg."
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "3-6"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "10-20"
        },
        "name": "tilidine",
        "pretty_name": "Tilidine",
        "properties": {
            "after-effects": "1-12 hours.",
            "aliases": [
                "tilidate",
                "tilidin",
                "valoron",
                "valtran"
            ],
            "avoid": "All other CNS depressants.",
            "categories": [
                "opioid",
                "habit-forming",
                "depressant"
            ],
            "dose": "Tilidine dose Oral Light: 25-50mg Common: 50-100mg Strong: 100-200mg.",
            "duration": "3-6 hours.",
            "onset": "10-20 minutes.",
            "summary": "Synthetic opioid, used mainly for treatment of moderate to severe pain. In some countries it's mixed with Naloxone to lower the abuse liability. Though in some only Tilidine. Roughly 0.2 - 1 on the potency scale to Morphine. (So 20mg's of Morphine to 100mg's Tilidine)"
        }
    },
    "tma-2": {
        "categories": [
            "psychedelic",
            "research-chemical",
            "tentative"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "Possibility"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "20-40mg",
                "Light": "10-20mg",
                "Strong": "40-60mg+",
                "Threshold": "5-10mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "6-12"
        },
        "formatted_effects": [
            "Euphoria",
            "empathy",
            "insight",
            "brightened colour",
            "Closed/Open eye visuals",
            "enhanced tactile sensation",
            "mental/physical stimulation",
            "decreased appetite",
            "pupil dilation",
            "restlessness",
            "change in perception",
            "ego softening",
            "sweating/chills",
            "muscle tension",
            "confusion",
            "insomnia",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "20-120"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_TMA2.shtml",
            "pihkal": "https://www.erowid.org/library/books_online/pihkal/pihkal158.shtml"
        },
        "name": "tma-2",
        "pretty_name": "TMA-2",
        "properties": {
            "categories": [
                "psychedelic",
                "research-chemical",
                "tentative"
            ],
            "dose": "Threshold: 5-10mg Light: 10-20mg Common: 20-40mg Strong: 40-60mg+",
            "duration": "6-12 hours.",
            "effects": "Euphoria, empathy, insight, brightened colour, Closed/Open eye visuals, enhanced tactile sensation, mental/physical stimulation, decreased appetite, pupil dilation, restlessness, change in perception, ego softening, sweating/chills, muscle tension, confusion, insomnia.",
            "onset": "20-120 minutes.",
            "summary": "Trimethoxyamphetamine-2, a psychedelic amphetamine and stimulant first synthesised by Alexander Shulgin. An uncommon compound of similar activity to other psychedelic amphetamines. Short history of human use."
        }
    },
    "tma-6": {
        "categories": [
            "psychedelic",
            "research-chemical",
            "tentative"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "Possibility"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "30-40mg",
                "Heavy": "40-50mg+",
                "Light": "20-30mg",
                "Threshold": "15-20mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "10-18"
        },
        "formatted_effects": [
            "Euphoria",
            "empathy",
            "insight",
            "brightened colour",
            "Closed/Open eye visuals",
            "enhanced tactile sensation",
            "mental/physical stimulation",
            "decreased appetite",
            "pupil dilation",
            "restlessness",
            "change in perception",
            "ego softening",
            "sweating/chills",
            "muscle tension",
            "confusion",
            "insomnia",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "60"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_TMA6.shtml",
            "pihkal": "https://www.erowid.org/library/books_online/pihkal/pihkal162.shtml"
        },
        "name": "tma-6",
        "pretty_name": "TMA-6",
        "properties": {
            "categories": [
                "psychedelic",
                "research-chemical",
                "tentative"
            ],
            "dose": "Threshold: 15-20mg Light: 20-30mg Common: 30-40mg Heavy: 40-50mg+",
            "duration": "10-18 hours",
            "effects": "Euphoria, empathy, insight, brightened colour, Closed/Open eye visuals, enhanced tactile sensation, mental/physical stimulation, decreased appetite, pupil dilation, restlessness, change in perception, ego softening, sweating/chills, muscle tension, confusion, insomnia.",
            "onset": ">60 minutes.",
            "summary": "A rarely seen Psychedelic Amphetamine and Mescaline analogue. First synthesised by Alexander Shulgin, who descrived it as  \"one of the most rewarding and pleasurable of the methoxylated amphetamines.\""
        }
    },
    "tolibut": {
        "categories": [
            "depressant",
            "habit-forming",
            "research-chemical",
            "tentative"
        ],
        "name": "tolibut",
        "pretty_name": "Tolibut",
        "properties": {
            "categories": [
                "depressant",
                "habit-forming",
                "research-chemical",
                "tentative"
            ],
            "summary": "Analogue of GABA, and the 4-methyl analogue of Phenibut. Has similar effects, acts on GABA(B)."
        }
    },
    "tramadol": {
        "aliases": [
            "tram"
        ],
        "categories": [
            "opioid",
            "habit-forming",
            "depressant",
            "common"
        ],
        "combos": {
            "2c-t-x": {
                "status": "Unsafe"
            },
            "2c-x": {
                "note": "Tramadol is well known to lower seizure threshold and psychedelics raise the risk of seizures.",
                "status": "Unsafe"
            },
            "5-meo-xxt": {
                "status": "Unsafe"
            },
            "alcohol": {
                "note": "Heavy CNS depressants, risk of seizures. Both substances potentiate the ataxia and sedation caused by the other and can lead to unexpected loss of consciousness at high doses. Place affected patients in the recovery position to prevent vomit aspiration from excess. Memory blackouts are likely.",
                "status": "Dangerous"
            },
            "amphetamines": {
                "note": "Tramadol and stimulants both increase the risk of seizures.",
                "status": "Dangerous"
            },
            "amt": {
                "status": "Dangerous"
            },
            "benzodiazepines": {
                "note": "Central nervous system- and/or respiratory-depressant effects may be additively or synergistically present. Vomit aspiration a risk when passed out, lay down in recovery position if ingested.",
                "status": "Dangerous"
            },
            "benzos": {
                "note": "Central nervous system- and/or respiratory-depressant effects may be additively or synergistically present. Vomit aspiration a risk when passed out, lay down in recovery position if ingested.",
                "status": "Dangerous"
            },
            "caffeine": {
                "status": "Low Risk & No Synergy"
            },
            "cannabis": {
                "status": "Low Risk & Synergy"
            },
            "cocaine": {
                "note": "Tramadol and stimulants both increase the risk of seizures.",
                "status": "Dangerous"
            },
            "dmt": {
                "note": "Tramadol is well known to lower seizure threshold and psychedelics also cause occasional seizures.",
                "status": "Unsafe"
            },
            "dox": {
                "note": "Tramadol is well known to lower seizure threshold and psychedelics also cause occasional seizures.",
                "status": "Unsafe"
            },
            "dxm": {
                "status": "Dangerous"
            },
            "ghb/gbl": {
                "note": "The sedative effects of this combination can lead to dangerous respiratory depression.",
                "status": "Dangerous"
            },
            "ketamine": {
                "status": "Dangerous"
            },
            "lsd": {
                "note": "Tramadol is well known to lower seizure threshold and psychedelics also cause occasional seizures.",
                "status": "Unsafe"
            },
            "maois": {
                "status": "Dangerous"
            },
            "mdma": {
                "note": "Tramadol and stimulants both increase the risk of seizures.",
                "status": "Dangerous"
            },
            "mescaline": {
                "note": "This combination can cause seizures due to the lowering of the threshold by tramadol and the potential of mescaline to cause seziures.",
                "status": "Unsafe"
            },
            "mushrooms": {
                "note": "Tramadol is well known to lower seizure threshold and psychedelics also cause occasional seizures.",
                "status": "Unsafe"
            },
            "mxe": {
                "status": "Dangerous"
            },
            "nbomes": {
                "note": "Tramadol is well known to lower seizure threshold and NBOMes have also shown a tendency to cause severe seizures",
                "status": "Unsafe"
            },
            "nitrous": {
                "note": "Both substances potentiate the ataxia and sedation caused by the other and can lead to unexpected loss of consciousness at high doses. While unconscious, vomit aspiration is a risk if not placed in the recovery position. Memory blackouts are likely.",
                "status": "Caution"
            },
            "opioids": {
                "note": "Concomitant use of tramadol increases the seizure risk in patients taking other opioids. These agents are often individually epileptogenic and may have additive effects on seizure threshold during coadministration. Central nervous system- and/or respiratory-depressant effects may be additively or synergistically present",
                "status": "Dangerous"
            },
            "pcp": {
                "status": "Dangerous"
            },
            "ssris": {
                "status": "Dangerous"
            }
        },
        "dose_note": " NOTE: Tramadol has a ceiling dose, where recreational effects are not increased. Risk of seizure at doses over 300mg. Tramadol decreases the seizure threshold, use extreme caution. Dosing insufflated is ineffective.",
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-12"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "100-250mg",
                "Heavy": "250-400mg",
                "Light": "50-100mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "5-7"
        },
        "formatted_effects": [
            "euphoria",
            "elevated mood",
            "overall feeling of contentedness",
            "itching",
            "drowsiness",
            "vomiting",
            "urinary retention",
            "nausea",
            "constipation",
            "risk of seizure above 300mg"
        ],
        "formatted_onset": {
            "_unit": "hours",
            "value": "1"
        },
        "name": "tramadol",
        "pretty_name": "Tramadol",
        "properties": {
            "after-effects": "1-12 hours.",
            "aliases": [
                "tram"
            ],
            "avoid": "benzos, alcohol, and other opiates",
            "bioavailability": "Oral 68-72% | Rectal 77%",
            "categories": [
                "opioid",
                "habit-forming",
                "depressant",
                "common"
            ],
            "dose": "Oral Light: 50-100mg  Common:  100-250mg  Heavy: 250-400mg | NOTE: Tramadol has a ceiling dose, where recreational effects are not increased. Risk of seizure at doses over 300mg. Tramadol decreases the seizure threshold, use extreme caution. Dosing insufflated is ineffective.",
            "duration": "5-7 hours",
            "effects": "euphoria, elevated mood, overall feeling of contentedness, itching, drowsiness, vomiting, urinary retention, nausea, constipation, risk of seizure above 300mg",
            "onset": "1 hour first effects, reaching peak blood concentration at 4 hours.",
            "summary": "A synthetic opioid analgesic, tramadol is used to treat moderate pain and can be considered a medium-strength opioid. Tramadol also has the unusual effect of being a serotonin releasing agent and a serotonin reuptake inhibitor, and as a consequence should not be taken in excess due to the risk of serotonin syndrome. Risk of seizures above 300mg doses."
        },
        "pweffects": {
            "Anxiety suppression": "https://psychonautwiki.org/wiki/Anxiety_suppression",
            "Cognitive euphoria": "https://psychonautwiki.org/wiki/Cognitive_euphoria",
            "Compulsive redosing": "https://psychonautwiki.org/wiki/Compulsive_redosing",
            "Constipation": "https://psychonautwiki.org/wiki/Constipation",
            "Cough suppression": "https://psychonautwiki.org/wiki/Cough_suppression",
            "Difficulty urinating": "https://psychonautwiki.org/wiki/Difficulty_urinating",
            "Itchiness": "https://psychonautwiki.org/wiki/Itchiness",
            "Nausea": "https://psychonautwiki.org/wiki/Nausea",
            "Pain relief": "https://psychonautwiki.org/wiki/Pain_relief",
            "Physical euphoria": "https://psychonautwiki.org/wiki/Physical_euphoria",
            "Pupil constriction": "https://psychonautwiki.org/wiki/Pupil_constriction",
            "Sedation": "https://psychonautwiki.org/wiki/Sedation",
            "Stimulation": "https://psychonautwiki.org/wiki/Stimulation",
            "Thought acceleration": "https://psychonautwiki.org/wiki/Thought_acceleration"
        },
        "sources": {
            "_general": [
                "High-concentration tramadol-induced vasodilation in rabbit aorta is mediated by both endothelium-dependent and -independent mechanisms - http://www.ncbi.nlm.nih.gov/pubmed/12740170",
                "Supra-additive effects of tramadol and acetaminophen in a human pain model - http://www.ncbi.nlm.nih.gov/pubmed/17709207",
                "Opioid and nonopioid components independently contribute to the mechanism of action of tramadol making it 'atypical' - http://jpet.aspetjournals.org/content/260/1/275.short"
            ]
        }
    },
    "trazodone": {
        "aliases": [],
        "categories": [
            "depressant"
        ],
        "dose_note": " Note: Please do not take this drug unless prescribed.",
        "formatted_dose": {
            "Light:": {
                "Common": "50-100mg",
                "Light": "25-50mg",
                "Strong": "100-150"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "6-10"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "20-40"
        },
        "name": "trazodone",
        "pretty_name": "Trazodone",
        "properties": {
            "aliases": [],
            "categories": [
                "depressant"
            ],
            "dose": "Light: 25-50mg Common: 50-100mg Strong: 100-150 | Note: Please do not take this drug unless prescribed.",
            "duration": "6-10 hours.",
            "onset": "20-40 minutes.",
            "summary": "A novel antidepressant of the SARI class, a serotonin antagonist and reuptake inhibitor. Often used to treat depression and anxiety. It has anxiolytic and hypnotic effects."
        }
    },
    "triazolam": {
        "aliases": [
            "halcion"
        ],
        "categories": [
            "benzodiazepine",
            "habit-forming",
            "depressant"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-6"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "0.25-0.5mg",
                "Light": "0.125-0.25mg",
                "Strong": "0.5-1.5mg+"
            }
        },
        "formatted_duration": {
            "Insufflated": "3-5",
            "Oral": "4-7",
            "_unit": "hours"
        },
        "formatted_effects": [
            "Anxiolytic",
            "but primarily sedative or hypnotic",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "10-20"
        },
        "name": "triazolam",
        "pretty_name": "Triazolam",
        "properties": {
            "after-effects": "1-6 hours.",
            "alias": "Halcion",
            "aliases": [
                "halcion"
            ],
            "avoid": "All other CNS depressants.",
            "categories": [
                "benzodiazepine",
                "habit-forming",
                "depressant"
            ],
            "dose": "Light: 0.125-0.25mg Common: 0.25-0.5mg Strong: 0.5-1.5mg+",
            "dose_to_diazepam": "Triazolam - 0.5mg ~=10mg Diazepam.",
            "duration": "Oral: 4-7 hours. | Insufflated: 3-5 hours.",
            "effects": "Anxiolytic, but primarily sedative or hypnotic.",
            "onset": "10-20 minutes.",
            "summary": "An uncommon and very short acting benzodiazepine. Sedating and hypnotic, and may induce amnesia and lowered inhibitions at high doses."
        }
    },
    "troparil": {
        "categories": [
            "stimulant",
            "research-chemical",
            "tentative",
            "habit-forming"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-2"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "20-30mg",
                "Low": "15-20mg",
                "Strong": "30-60mg+"
            }
        },
        "formatted_duration": {
            "_unit": "minutes",
            "value": "45-70"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "10"
        },
        "name": "troparil",
        "pretty_name": "Troparil",
        "properties": {
            "after-effects": "1-2 hours.",
            "categories": [
                "stimulant",
                "research-chemical",
                "tentative",
                "habit-forming"
            ],
            "dose": "Low: 15-20mg Common: 20-30mg Strong: 30-60mg+",
            "duration": "45-70 minutes.",
            "onset": "<10 minutes.",
            "summary": "A stimulant and dopamine reuptake inhibitor developed in the 1970s, it is frequently used in scientific research but has seen little usage outside of the lab. Similar effects to cocaine, though much longer and without any local anaesthetic action. Probably hard on the nose."
        }
    },
    "truffles": {
        "categories": [
            "psychedelic"
        ],
        "dose_note": " NOTE: Dry truffles will be several times more potent",
        "formatted_dose": {
            "Dry": {
                "Common": "1.5-4g",
                "Heavy": "4g+",
                "Light": "0.5-1.5g"
            },
            "Wet": {
                "Common": "10g",
                "Heavy": "15g+",
                "Light": "5g"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "3-6"
        },
        "formatted_effects": [
            "visual distortion",
            "color enhancement",
            "sense of conection with nature",
            "sense of well being",
            "sense of wonder",
            "closed eye visuals",
            "tactile enhancement"
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "30-60"
        },
        "name": "truffles",
        "pretty_name": "Truffles",
        "properties": {
            "after-effect": "1-12 hours.",
            "categories": [
                "psychedelic"
            ],
            "dose": "Wet Light: 5g, Common: 10g, Heavy: 15g+ | Dry Light: 0.5-1.5g Common: 1.5-4g Heavy: 4g+",
            "duration": "3-6 hours",
            "effects": "visual distortion, color enhancement, sense of conection with nature, sense of well being, sense of wonder, closed eye visuals, tactile enhancement",
            "onset": "30-60 minutes",
            "summary": "Truffles (magic truffles, sclerotium) are the thickened root sections of magic mushrooms. Like magic mushrooms, Truffles contain the psycho-active chemicals psilocybin and psilocin. See mushrooms for more information."
        }
    },
    "tuinal": {
        "aliases": [
            "tuinol",
            "chirstmas-trees",
            "rainbows",
            "beans",
            "nawls",
            "jeebs"
        ],
        "categories": [
            "barbiturate",
            "depressant",
            "habit-forming"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-8"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "75-150mg.",
                "Light": "25-75mg",
                "Strong": "150-300mg."
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "5-12"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "10-45"
        },
        "name": "tuinal",
        "pretty_name": "Tuinal",
        "properties": {
            "after-effects": "1-8 hours.",
            "aliases": [
                "tuinol",
                "chirstmas-trees",
                "rainbows",
                "beans",
                "nawls",
                "jeebs"
            ],
            "avoid": "All other CNS depressants.",
            "categories": [
                "barbiturate",
                "depressant",
                "habit-forming"
            ],
            "dose": "Oral Light: 25-75mg Common: 75-150mg. Strong: 150-300mg.",
            "duration": "5-12 hours.",
            "onset": "10-45 minutes.",
            "summary": "Brand name of a combination drug of two barbiturate salts (Secobarbital/Amobarbital) in equal amounts. It was introduced in the late 1940's."
        }
    },
    "u-47700": {
        "aliases": [
            "u47700"
        ],
        "categories": [
            "opioid",
            "research-chemical",
            "habit-forming",
            "depressant"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-4"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "7.5-15mg",
                "Heavy": "25+mg.",
                "Light": "5-7.5mg",
                "Strong": "15-25mg"
            }
        },
        "formatted_duration": {
            "Insufflated/Plugged": "3-4",
            "Intravenous": "1-2",
            "Oral": "5-7",
            "_unit": "hours"
        },
        "formatted_effects": [
            "Euphoria",
            "Dry Mouth",
            "Mood lift",
            "Itchiness",
            "Relaxant",
            "Constipation",
            "Pupil constriction",
            "Analgesia",
            ""
        ],
        "formatted_onset": {
            "Insufflated/Plugged": "15",
            "Intravenous": "0-1",
            "Oral": "15",
            "_unit": "minutes"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_U47700.shtml"
        },
        "name": "u-47700",
        "pretty_name": "U-47700",
        "properties": {
            "after-effects": "1-4 hours.",
            "aliases": [
                "u47700"
            ],
            "avoid": "All other CNS depressants",
            "categories": [
                "opioid",
                "research-chemical",
                "habit-forming",
                "depressant"
            ],
            "dose": "Oral Light: 5-7.5mg Common: 7.5-15mg Strong: 15-25mg Heavy: 25+mg.",
            "duration": "Oral: 5-7 hours. | Insufflated/Plugged: 3-4 hours. | Intravenous: 1-2 hours.",
            "effects": "Euphoria, Dry Mouth, Mood lift, Itchiness, Relaxant, Constipation, Pupil constriction, Analgesia.",
            "onset": "Oral: 15 minutes. | Insufflated/Plugged: 15 minutes | Intravenous: 0-1 minutes.",
            "summary": "A \u00b5-opioid receptor agonist that is related to AH-7921. Having a very short duration."
        },
        "pweffects": {
            "Anxiety": "https://psychonautwiki.org/wiki/Anxiety",
            "Anxiety suppression": "https://psychonautwiki.org/wiki/Anxiety_suppression",
            "Cognitive euphoria": "https://psychonautwiki.org/wiki/Cognitive_euphoria",
            "Cognitive fatigue": "https://psychonautwiki.org/wiki/Cognitive_fatigue",
            "Compulsive redosing": "https://psychonautwiki.org/wiki/Compulsive_redosing",
            "Constipation": "https://psychonautwiki.org/wiki/Constipation",
            "Cough suppression": "https://psychonautwiki.org/wiki/Cough_suppression",
            "Depression": "https://psychonautwiki.org/wiki/Depression",
            "Difficulty urinating": "https://psychonautwiki.org/wiki/Difficulty_urinating",
            "Irritability": "https://psychonautwiki.org/wiki/Irritability",
            "Itchiness": "https://psychonautwiki.org/wiki/Itchiness",
            "Pain relief": "https://psychonautwiki.org/wiki/Pain_relief",
            "Physical euphoria": "https://psychonautwiki.org/wiki/Physical_euphoria",
            "Pupil constriction": "https://psychonautwiki.org/wiki/Pupil_constriction",
            "Respiratory depression": "https://psychonautwiki.org/wiki/Respiratory_depression",
            "Sedation": "https://psychonautwiki.org/wiki/Sedation",
            "Thought deceleration": "https://psychonautwiki.org/wiki/Thought_deceleration"
        }
    },
    "u-49900": {
        "categories": [
            "opioid",
            "dissociative",
            "research-chemical",
            "tentative"
        ],
        "name": "u-49900",
        "pretty_name": "U-49900",
        "properties": {
            "categories": [
                "opioid",
                "dissociative",
                "research-chemical",
                "tentative"
            ],
            "summary": "A substance that is an analogue of U-47700, yet doesn't share much with it. If you are interested in trying it, I recommend reading this. https://www.reddit.com/r/researchchemicals/comments/5gbo3e/u49900_experiment_and_warning/"
        }
    },
    "u-51754": {
        "aliases": [
            "methene-u47700",
            "methene-u-47700"
        ],
        "categories": [
            "tentative",
            "opioid",
            "dissociative",
            "depressant",
            "research-chemical"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "3-6"
        },
        "formatted_dose": {
            "Rectal": {
                "Common": "3-5mg",
                "Light": "1-3mg",
                "Strong": "5-10mg"
            }
        },
        "formatted_duration": {
            "Insufflated": "1-2",
            "Oral": "2-4",
            "Plugged": "1-2",
            "_unit": "hours"
        },
        "formatted_onset": {
            "Insufflated": "5-10",
            "Oral": "15-30",
            "Plugged": "5-10",
            "_unit": "minutes"
        },
        "name": "u-51754",
        "pretty_name": "U-51754",
        "properties": {
            "after-effects": "3-6 hours.",
            "aliases": [
                "methene-u47700",
                "methene-u-47700"
            ],
            "categories": [
                "tentative",
                "opioid",
                "dissociative",
                "depressant",
                "research-chemical"
            ],
            "dose": "Rectal Light: 1-3mg Common: 3-5mg Strong: 5-10mg",
            "duration": "Oral: 2-4 hours. | Insufflated: 1-2 hours. | Plugged: 1-2 hours.",
            "onset": "Oral: 15-30 minutes. | Insufflated: 5-10 minutes. | Plugged: 5-10 minutes.",
            "summary": "A very potent opioid, that seems to have a fair bit of \u03ba-opioid action. So Dyshopria, Auditory hallucinations can be an effect. Is an analogue of U-47700."
        }
    },
    "valerylfentanyl": {
        "aliases": [
            "vf"
        ],
        "categories": [
            "opioid",
            "depressant",
            "research-chemical",
            "tentative",
            "habit-forming"
        ],
        "formatted_dose": {
            "Oral": {
                "Light": "50+mg"
            }
        },
        "name": "valerylfentanyl",
        "pretty_name": "Valerylfentanyl",
        "properties": {
            "aliases": [
                "vf"
            ],
            "categories": [
                "opioid",
                "depressant",
                "research-chemical",
                "tentative",
                "habit-forming"
            ],
            "dose": "Light: 50+mg",
            "summary": "Opioid that is a higher homologue of Butyrfentanyl with greatly reduced potency."
        }
    },
    "viagra": {
        "formatted_dose": {
            "Oral": {
                "Common": "30-50mg",
                "Light": "25-30mg",
                "Strong": "50-100mg."
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "3-6"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "10-60"
        },
        "name": "viagra",
        "pretty_name": "Sildenafil",
        "properties": {
            "dose": "Light: 25-30mg Common: 30-50mg Strong: 50-100mg.",
            "duration": "3-6 hours.",
            "onset": "10-60 minutes.",
            "summary": "A medication originally developed to lower blood pressure, and now widely used to treat erectile dysfunction in men. Do not mix with anything that lowers blood pressure. Contact EMS if erection lasts longer than 4 hours."
        }
    },
    "viloxazine": {
        "categories": [
            "stimulant",
            "tentative"
        ],
        "formatted_dose": {
            "Oral": {
                "Common": "75-150mg",
                "Light": "50-75mg",
                "Strong": "150mg+"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "3-6"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "15-30"
        },
        "name": "viloxazine",
        "pretty_name": "Viloxazine",
        "properties": {
            "categories": [
                "stimulant",
                "tentative"
            ],
            "dose": "Light: 50-75mg Common: 75-150mg Strong: 150mg+",
            "duration": "3-6 hours.",
            "onset": "15-30 minutes.",
            "summary": "NRI that was used as an antidepressant in some European countries, and had a pronouced stimulant effect similar to amphetamines without any signs of dependence. Withdrawn in the early 2000s."
        }
    },
    "vyvanse": {
        "aliases": [
            "lisdextroamfetamine",
            "lisdextroamphetamine",
            "lisdexamphetamine",
            "lisdexamfetamine"
        ],
        "categories": [
            "stimulant",
            "habit-forming",
            "common"
        ],
        "dose_note": " Note: Vyvanse is the same orally and insufflated - it is pointless to insufflate.",
        "formatted_aftereffects": {
            "Oral": "1-16",
            "_unit": "hours"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "30-50mg",
                "Light": "20-30mg",
                "Strong": "50-100mg+"
            }
        },
        "formatted_duration": {
            "Oral": "6-14",
            "_unit": "hours"
        },
        "formatted_effects": [
            "Increased alertness",
            "Euphoria",
            "Increased motivation",
            "Reduced appetite",
            "Flushing of the face",
            "Increased body temperature",
            "Tachycardia (Increased heart rate)",
            "Paranoia",
            "Insomnia",
            ""
        ],
        "formatted_onset": {
            "Oral": "60-90",
            "_unit": "minutes"
        },
        "links": {
            "experiences": "https://www.erowid.org/experiences/subs/exp_Lisdexamfetamine.shtml"
        },
        "name": "vyvanse",
        "pretty_name": "Vyvanse",
        "properties": {
            "after-effects": "Oral: 1-16 hours. | Note: Highly dependant on dose.",
            "aliases": [
                "lisdextroamfetamine",
                "lisdextroamphetamine",
                "lisdexamphetamine",
                "lisdexamfetamine"
            ],
            "categories": [
                "stimulant",
                "habit-forming",
                "common"
            ],
            "dose": "Oral Light: 20-30mg Common: 30-50mg Strong: 50-100mg+ | Note: Vyvanse is the same orally and insufflated - it is pointless to insufflate.",
            "duration": "Oral: 6-14 hours. | NOTE: Dependant on dose and tolerance.",
            "effects": "Increased alertness, Euphoria, Increased motivation, Reduced appetite, Flushing of the face, Increased body temperature, Tachycardia (Increased heart rate), Paranoia, Insomnia.",
            "onset": "Oral: 60-90 minutes | NOTE: Onset is delayed by 1 additional hour when taken with a meal high in fat.",
            "summary": "Also known as lisdexamphetamine, this drug is a CNS stimulant often prescribed for ADHD, narcolepsy and obesity. It is also a pro-drug for dextroamphetamine, and functions as a method for providing extended-release stimulation. It is sometimes prescribed alongside an SSRI for depression."
        },
        "sources": {
            "_general": [
                "Use of naltrexone has been found to successfully aid in recovery from amphetamine addiction - http://ajp.psychiatryonline.org/doi/abs/10.1176/appi.ajp.2008.08020304",
                "Vyvanse is approved for and proven to be affective for the treatment of binge-eating disorder in adults - http://onlinelibrary.wiley.com/doi/10.1111/ijcp.12639/full",
                "Vyvanse has been proven to be effectivein treating attention deficits in patients with traumatic brain injuries - http://www.tandfonline.com/doi/abs/10.3109/02699052.2014.930179",
                "For serotonin syndrome secondary to vyvanse overdose, dexmedetomidine may be used for treatment when standard treatment protocols do not work - http://aop.sagepub.com/content/48/12/1651.abstract",
                "Vyvanse when used intravenously was proven to not have increased abuse liability, which implies that it does not have increased euphoria - http://jop.sagepub.com/content/early/2008/07/17/0269881108093841.short"
            ],
            "onset": [
                "is delayed by 1 additional hour when taken with a high fat meal - http://www.ncbi.nlm.nih.gov/pmc/articles/PMC2873712/"
            ]
        }
    },
    "w-15": {
        "categories": [
            "opioid",
            "research-chemical",
            "habit-forming",
            "tentative",
            "depressant"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "2-4"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "5-10mg",
                "Light": "2-5mg",
                "Strong": "10-15mg+"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "4-6"
        },
        "formatted_effects": [
            "Euphoria",
            "Dry Mouth",
            "Mood lift",
            "Itchiness",
            "Relaxant",
            "Constipation",
            "Pupil constriction",
            "Analgesia",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "15-40"
        },
        "name": "w-15",
        "pretty_name": "W-15",
        "properties": {
            "after-effects": "2-4 hours.",
            "avoid": "All other CNS depressants.",
            "categories": [
                "opioid",
                "research-chemical",
                "habit-forming",
                "tentative",
                "depressant"
            ],
            "dose": "Light: 2-5mg Common: 5-10mg Strong: 10-15mg+",
            "duration": "4-6 hours.",
            "effects": "Euphoria, Dry Mouth, Mood lift, Itchiness, Relaxant, Constipation, Pupil constriction, Analgesia.",
            "onset": "15-40 minutes.",
            "summary": "A potent opioid that is 5.4x more potent than Morphine. Has a distinct structure unrelated to nearly all other opioid compounds."
        }
    },
    "yerba-mate": {
        "categories": [
            "common",
            "stimulant",
            "habit-forming",
            "nootropic"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-4"
        },
        "formatted_dose": {
            "Common:": {
                "Common": "1000-1500mg"
            },
            "This": {}
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "4-6"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "10-30"
        },
        "name": "yerba-mate",
        "pretty_name": "YERBA-MATE",
        "properties": {
            "after-effects": "1-4 hours.",
            "categories": [
                "common",
                "stimulant",
                "habit-forming",
                "nootropic"
            ],
            "dose": "Common: 1000-1500mg | This is spread out over a day.",
            "duration": "4-6 hours.",
            "onset": "10-30 minutes.",
            "summary": "Is marketed for its ability to suppress appetite and burn fat. Yet only with high doses. It has a quite high ratio of caffeine. It has anti-inflammatory properties."
        }
    },
    "yopo": {
        "aliases": [
            "anadenanthera",
            "\"anadenanthera"
        ],
        "categories": [
            "empathogen",
            "psychedelic"
        ],
        "name": "yopo",
        "pretty_name": "YOPO",
        "properties": {
            "aliases": [
                "anadenanthera",
                "\"anadenanthera"
            ],
            "categories": [
                "empathogen",
                "psychedelic"
            ],
            "summary": "Anadenanthera peregrina, also known as yopo, is a perennial tree native to the Caribbean and South America. It is an entheogen containing 5-MeO-DMT and DMT, and is used in healing ceremonies and rituals. It is also a source of dietary calcium."
        }
    },
    "zolazepam": {
        "categories": [
            "benzodiazepine",
            "depressant",
            "habit-forming"
        ],
        "formatted_aftereffects": {
            "Insufflated": "1-4",
            "Intramuscular": "1-3",
            "Oral": "1-6",
            "_unit": "hours"
        },
        "formatted_dose": {
            "Insufflated": {
                "Common": "3-6mg",
                "Light": "1-3mg",
                "Strong": "6-12mg+"
            },
            "Intramuscular": {
                "Common": "3-5mg",
                "Light": "1-3mg",
                "Strong": "5-10mg+"
            },
            "Oral": {
                "Common": "5-10mg",
                "Light": "2.5-5mg",
                "Strong": "10-20mg+"
            }
        },
        "formatted_duration": {
            "Insufflated": "2-3",
            "Intramuscular": "2-4",
            "Oral": "4-6",
            "_unit": "hours"
        },
        "formatted_onset": {
            "Insufflated": "5-10",
            "Intramuscular": "1-5",
            "Oral": "10-30",
            "_unit": "minutes"
        },
        "name": "zolazepam",
        "pretty_name": "Zolazepam",
        "properties": {
            "after-effects": "Oral: 1-6 hours. | Insufflated: 1-4 hours. | Intramuscular: 1-3 hours.",
            "avoid": "All other CNS depressants.",
            "categories": [
                "benzodiazepine",
                "depressant",
                "habit-forming"
            ],
            "dose": "Oral Light: 2.5-5mg Common: 5-10mg Strong: 10-20mg+ | Insufflated Light: 1-3mg Common: 3-6mg Strong: 6-12mg+ | Intramuscular Light: 1-3mg Common: 3-5mg Strong: 5-10mg+",
            "duration": "Oral: 4-6 hours. | Insufflated: 2-3 hours. | Intramuscular: 2-4 hours.",
            "onset": "Oral: 10-30 minutes. | Insufflated: 5-10 minutes. | Intramuscular: 1-5 minutes.",
            "summary": "A substance that is structurally related to benzodiazepines. Is only used in Veterinary medicine. It is usually used in tandem with either the potent NMDA antagonist Tiletamine (at a 1:1 ratio) or with the \u03b12 adrenergic receptor agonist Xylazine. Is roughly around four times the potency of Diazepam. Yet is water soluable."
        }
    },
    "zolpidem": {
        "aliases": [
            "ambien",
            "stilnox"
        ],
        "categories": [
            "depressant",
            "habit-forming",
            "common"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-24"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "5-10mg",
                "Heavy": "20-30mg+",
                "Light": "2.5-5mg",
                "Strong": "10-20mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "5-10"
        },
        "formatted_effects": [
            "Helps with insomnia/sleep",
            "hallucinations through all physical senses",
            "increased or decreased libido",
            "delusions"
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "15-45"
        },
        "name": "zolpidem",
        "pretty_name": "Zolpidem",
        "properties": {
            "after-effects": "1-24 hours.",
            "aliases": [
                "ambien",
                "stilnox"
            ],
            "avoid": "All other CNS depressants",
            "bioavailability": "Oral: 70%",
            "categories": [
                "depressant",
                "habit-forming",
                "common"
            ],
            "dose": "Light: 2.5-5mg Common: 5-10mg Strong: 10-20mg Heavy: 20-30mg+",
            "duration": "5-10 hours.",
            "effects": "Helps with insomnia/sleep, hallucinations through all physical senses, increased or decreased libido, delusions",
            "onset": "15-45 minutes.",
            "summary": "Commonly prescribed for insomnia, Ambien (zolpidem) can cause realistic hallucinations similar to those of deliriants, and is very likely to cause amnesia at higher doses. Take care when using this drug, as it tends to lower inhibitions to a level which causes the user to do things they might not normally do when sober."
        },
        "pweffects": {
            "Acuity suppression": "https://psychonautwiki.org/wiki/Acuity_suppression",
            "Amnesia": "https://psychonautwiki.org/wiki/Amnesia",
            "Anxiety suppression": "https://psychonautwiki.org/wiki/Anxiety_suppression",
            "Appetite enhancement": "https://psychonautwiki.org/wiki/Appetite_enhancement",
            "Auditory hallucinations": "https://psychonautwiki.org/wiki/Auditory_hallucinations",
            "Compulsive redosing": "https://psychonautwiki.org/wiki/Compulsive_redosing",
            "Delusions": "https://psychonautwiki.org/wiki/Delusions",
            "Disinhibition": "https://psychonautwiki.org/wiki/Disinhibition",
            "Dizziness": "https://psychonautwiki.org/wiki/Dizziness",
            "Double vision": "https://psychonautwiki.org/wiki/Double_vision",
            "Information processing suppression": "https://psychonautwiki.org/wiki/Information_processing_suppression",
            "Language suppression": "https://psychonautwiki.org/wiki/Language_suppression",
            "Motor control loss": "https://psychonautwiki.org/wiki/Motor_control_loss",
            "Muscle relaxation": "https://psychonautwiki.org/wiki/Muscle_relaxation",
            "Nausea": "https://psychonautwiki.org/wiki/Nausea",
            "Respiratory depression": "https://psychonautwiki.org/wiki/Respiratory_depression",
            "Sedation": "https://psychonautwiki.org/wiki/Sedation",
            "Tactile suppression": "https://psychonautwiki.org/wiki/Tactile_suppression",
            "Thought deceleration": "https://psychonautwiki.org/wiki/Thought_deceleration",
            "Visual disconnection": "https://psychonautwiki.org/wiki/Visual_disconnection"
        },
        "sources": {
            "_general": [
                "Irreversible ischemic hand following intraarterial injection of zolpidem powder - http://www.ncbi.nlm.nih.gov/pubmed/14705853",
                "Clinical pharmacokinetics and pharmacodynamics of zolpidem. Therapeutic implications - http://www.ncbi.nlm.nih.gov/pubmed/8521677"
            ]
        }
    },
    "zopiclone": {
        "aliases": [
            "imovane",
            "zimovane"
        ],
        "categories": [
            "depressant",
            "habit-forming",
            "common"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-12"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "5-7.5mg",
                "Heavy": "15-22.5mg",
                "Light": "3.5-5mg",
                "Strong": "7.5-15mg",
                "Threshold": "3.5mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "3.5-9"
        },
        "formatted_effects": [
            "Lethargy",
            "tiredness",
            "a dreamlike state while awake",
            "can induce heavy sleep",
            ""
        ],
        "formatted_onset": {
            "_unit": "minutes",
            "value": "15"
        },
        "name": "zopiclone",
        "pretty_name": "Zopiclone",
        "properties": {
            "after-effects": "1-12 hours.",
            "aliases": [
                "imovane",
                "zimovane"
            ],
            "categories": [
                "depressant",
                "habit-forming",
                "common"
            ],
            "chemistry": "IUPAC: (RS)-6-(5-chloropyridin-2-yl)-7-oxo-6,7-dihydro-5H-pyrrolo[3,4-b]pyrazin-5-yl 4-methylpiperazine-1-carboxylate | Formula: C17H17ClN6O3 | Molecular Mass: 388.808 g/mol",
            "contraindictions": "Liver disease, myasthenia gravis, severe chronic bronchitis, emphysema, sleep apnea, thyroid gland abnormalities, trimipramine, caffeine, alcohol, erythromycin, itraconazole, rifampicin, phenytoin, carbamazepine, ketoconazole, sulfaphenazole, and nefazodone",
            "dose": "Oral Threshold: 3.5mg Light: 3.5-5mg Common: 5-7.5mg Strong: 7.5-15mg Heavy: 15-22.5mg",
            "duration": "3.5-9 hours",
            "effects": "Lethargy, tiredness, a dreamlike state while awake, can induce heavy sleep.",
            "legal": "Australia: Prescription Only (S4) | United Kingdom: Controlled Drug (POM) | United States: Schedule IV",
            "onset": "15 - 30 minutes (on empty stomach)",
            "pharmacokinetics": "Protein Binding: 45 - 80% | Metabolism: various cytochrome P450 liver enzymes | Excretion: respiration (~50%) and urine (7 - 10 %)",
            "pharmacology": "GABA-A receptor positive allosteric modulator; Benzodiazepine receptor agonist",
            "summary": "A nonbenzodiazepine sedative sleep aid (Z-drug), which can have hallucinogenic effects if taken while awake. Often causes users to have a metallic taste in the mouth for ~12h. Has been reported in some cases to cause certain users to black out, redose excessively and undertake dangerous activities such as driving."
        },
        "pweffects": {
            "Amnesia": "https://psychonautwiki.org/wiki/Amnesia",
            "Anxiety suppression": "https://psychonautwiki.org/wiki/Anxiety_suppression",
            "Disinhibition": "https://psychonautwiki.org/wiki/Disinhibition",
            "Dizziness": "https://psychonautwiki.org/wiki/Dizziness",
            "Information processing suppression": "https://psychonautwiki.org/wiki/Information_processing_suppression",
            "Motor control loss": "https://psychonautwiki.org/wiki/Motor_control_loss",
            "Muscle relaxation": "https://psychonautwiki.org/wiki/Muscle_relaxation",
            "Respiratory depression": "https://psychonautwiki.org/wiki/Respiratory_depression",
            "Sedation": "https://psychonautwiki.org/wiki/Sedation",
            "Thought deceleration": "https://psychonautwiki.org/wiki/Thought_deceleration"
        },
        "sources": {
            "_general": [
                "Dependence potential of zopiclone studied in monkeys - http://www.ncbi.nlm.nih.gov/pubmed/6892368"
            ]
        }
    },
    "\u03b1-pbp": {
        "aliases": [
            "a-pbp",
            "alpha-pbp"
        ],
        "categories": [
            "stimulant",
            "research-chemical",
            "habit-forming",
            "tentative"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-24"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "25-50mg",
                "Light": "10-25mg",
                "Strong": "50mg+"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "3-4"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "20-35"
        },
        "name": "\u03b1-pbp",
        "pretty_name": "\u03b1-PBP",
        "properties": {
            "after-effects": "1-24 hours.",
            "aliases": [
                "a-pbp",
                "alpha-pbp"
            ],
            "categories": [
                "stimulant",
                "research-chemical",
                "habit-forming",
                "tentative"
            ],
            "dose": "Oral Light: 10-25mg Common: 25-50mg Strong: 50mg+",
            "duration": "3-4 hours",
            "onset": "20-35 minutes",
            "summary": "Stimulant that is the homologue between \u03b1-PPP and \u03b1-PVP."
        }
    },
    "\u03b2h-2c-b": {
        "aliases": [
            "beta-hydroxy-2c-b",
            "bh-2c-b",
            "bh-2cb",
            "bohb",
            "boh-2c-b",
            "boh-2cb"
        ],
        "categories": [
            "psychedelic",
            "research-chemical",
            "tentative"
        ],
        "formatted_aftereffects": {
            "_unit": "hours",
            "value": "1-12"
        },
        "formatted_dose": {
            "Oral": {
                "Common": "40-60mg",
                "Heavy": "75mg+",
                "Light": "25-40mg",
                "Strong": "60-75mg"
            }
        },
        "formatted_duration": {
            "_unit": "hours",
            "value": "7-10"
        },
        "formatted_onset": {
            "_unit": "minutes",
            "value": "30-50"
        },
        "name": "\u03b2h-2c-b",
        "pretty_name": "\u03b2H-2C-B",
        "properties": {
            "after-effects": "1-12 hours.",
            "aliases": [
                "beta-hydroxy-2c-b",
                "bh-2c-b",
                "bh-2cb",
                "bohb",
                "boh-2c-b",
                "boh-2cb"
            ],
            "categories": [
                "psychedelic",
                "research-chemical",
                "tentative"
            ],
            "dose": "Light: 25-40mg Common: 40-60mg Strong: 60-75mg Heavy: 75mg+",
            "duration": "7-10 hours",
            "onset": "30-50 minutes",
            "summary": "\u03b2-Hydroxy-2C-B is a novel analogue of 2C-B that is a bit less potent and has a longer duration. It's thought to be the active metabolite of \u03b2k-2C-B."
        }
    }
}
","status":200,"url":"https://raw.githubusercontent.com/TripSit/drugs/main/drugs.json"},"revalidate":31536000,"tags":[]}